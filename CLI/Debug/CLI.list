
CLI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d08  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08003eb8  08003eb8  00004eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004020  08004020  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004020  08004020  00005020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004028  08004028  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004028  08004028  00005028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800402c  0800402c  0000502c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004030  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          00000690  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006ec  200006ec  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020406  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d30  00000000  00000000  00026492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000f6a6  00000000  00000000  0002a1c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001720  00000000  00000000  00039868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000011ce  00000000  00000000  0003af88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a4f7  00000000  00000000  0003c156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000284a2  00000000  00000000  0006664d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00100606  00000000  00000000  0008eaef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0018f0f5  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000045f8  00000000  00000000  0018f138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000058  00000000  00000000  00193730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003ea0 	.word	0x08003ea0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	08003ea0 	.word	0x08003ea0

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <apInit>:
uint16_t cli_argc = 0;
char *cli_argv[8]; // cli 인수 포인터 배열


void apInit(void)
{
 80005a0:	b508      	push	{r3, lr}
	adcInit();
 80005a2:	f000 f881 	bl	80006a8 <adcInit>
	uartInit();
 80005a6:	f000 f88b 	bl	80006c0 <uartInit>
}
 80005aa:	bd08      	pop	{r3, pc}

080005ac <apMain>:

void apMain(void)
{
 80005ac:	b570      	push	{r4, r5, r6, lr}
 80005ae:	b082      	sub	sp, #8
	uint32_t pre_time ;
	pre_time = millis();
 80005b0:	f000 f8fa 	bl	80007a8 <millis>
 80005b4:	4604      	mov	r4, r0
 80005b6:	e02e      	b.n	8000616 <apMain+0x6a>

	while(1)
	{
		if (millis() - pre_time >= 500)
		{
			pre_time = millis();
 80005b8:	f000 f8f6 	bl	80007a8 <millis>
 80005bc:	4604      	mov	r4, r0
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80005be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005c2:	482f      	ldr	r0, [pc, #188]	@ (8000680 <apMain+0xd4>)
 80005c4:	f001 fd70 	bl	80020a8 <HAL_GPIO_TogglePin>
 80005c8:	e02b      	b.n	8000622 <apMain+0x76>
			rx_data = uartRead(_DEF_CH1) ;
			//uartPrintf(_DEF_CH1, "rx_data : %c \n ",rx_data ); // 프롬프트라고 알리는 출력


			if (rx_data == '\r') {
				cli_buf[cli_buf_index] = 0; // CLI 라인마지막 'r'다음 null값을 주기
 80005ca:	4b2e      	ldr	r3, [pc, #184]	@ (8000684 <apMain+0xd8>)
 80005cc:	881a      	ldrh	r2, [r3, #0]
 80005ce:	4e2e      	ldr	r6, [pc, #184]	@ (8000688 <apMain+0xdc>)
 80005d0:	2500      	movs	r5, #0
 80005d2:	54b5      	strb	r5, [r6, r2]
				cli_buf_index = 0;
 80005d4:	801d      	strh	r5, [r3, #0]
				uartPrintf(_DEF_CH1, "\r\n"); // 터미널쪽에 줄바꿈
 80005d6:	492d      	ldr	r1, [pc, #180]	@ (800068c <apMain+0xe0>)
 80005d8:	4628      	mov	r0, r5
 80005da:	f000 f8cb 	bl	8000774 <uartPrintf>
				//RUN CMD

				char *tok;
				char *str_ptr = cli_buf;
 80005de:	9601      	str	r6, [sp, #4]
				cli_argc = 0;
 80005e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000690 <apMain+0xe4>)
 80005e2:	801d      	strh	r5, [r3, #0]

				while ((tok = strtok_r(str_ptr, " ", &str_ptr)) != NULL) {
 80005e4:	e006      	b.n	80005f4 <apMain+0x48>
					cli_argv[cli_argc] = tok;
 80005e6:	4a2a      	ldr	r2, [pc, #168]	@ (8000690 <apMain+0xe4>)
 80005e8:	8813      	ldrh	r3, [r2, #0]
 80005ea:	482a      	ldr	r0, [pc, #168]	@ (8000694 <apMain+0xe8>)
 80005ec:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
					cli_argc++;
 80005f0:	3301      	adds	r3, #1
 80005f2:	8013      	strh	r3, [r2, #0]
				while ((tok = strtok_r(str_ptr, " ", &str_ptr)) != NULL) {
 80005f4:	aa01      	add	r2, sp, #4
 80005f6:	4928      	ldr	r1, [pc, #160]	@ (8000698 <apMain+0xec>)
 80005f8:	9801      	ldr	r0, [sp, #4]
 80005fa:	f002 ffd5 	bl	80035a8 <strtok_r>
 80005fe:	4601      	mov	r1, r0
 8000600:	2800      	cmp	r0, #0
 8000602:	d1f0      	bne.n	80005e6 <apMain+0x3a>
				}
*/

				// 명령어의 정수 파라메터 사용 시

				if(cli_argc > 0)
 8000604:	4b22      	ldr	r3, [pc, #136]	@ (8000690 <apMain+0xe4>)
 8000606:	881b      	ldrh	r3, [r3, #0]
 8000608:	b10b      	cbz	r3, 800060e <apMain+0x62>
				{
					if ( cli_argc == 2 && strcmp(cli_argv[0], "test") ==0 )
 800060a:	2b02      	cmp	r3, #2
 800060c:	d025      	beq.n	800065a <apMain+0xae>





				uartPrintf(_DEF_CH1, "cli# "); // 프롬프트라고 알리는 출력
 800060e:	4923      	ldr	r1, [pc, #140]	@ (800069c <apMain+0xf0>)
 8000610:	2000      	movs	r0, #0
 8000612:	f000 f8af 	bl	8000774 <uartPrintf>
		if (millis() - pre_time >= 500)
 8000616:	f000 f8c7 	bl	80007a8 <millis>
 800061a:	1b03      	subs	r3, r0, r4
 800061c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000620:	d2ca      	bcs.n	80005b8 <apMain+0xc>
		if(uartAvailable(_DEF_CH1) > 0)
 8000622:	2000      	movs	r0, #0
 8000624:	f000 f86c 	bl	8000700 <uartAvailable>
 8000628:	2800      	cmp	r0, #0
 800062a:	d0f4      	beq.n	8000616 <apMain+0x6a>
			rx_data = uartRead(_DEF_CH1) ;
 800062c:	2000      	movs	r0, #0
 800062e:	f000 f885 	bl	800073c <uartRead>
 8000632:	f88d 0003 	strb.w	r0, [sp, #3]
			if (rx_data == '\r') {
 8000636:	280d      	cmp	r0, #13
 8000638:	d0c7      	beq.n	80005ca <apMain+0x1e>
			}
			else if(cli_buf_index < (128 - 1))	// 버퍼 경계처리 128은 버퍼크기 , -1은 null값 고려
 800063a:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <apMain+0xd8>)
 800063c:	881b      	ldrh	r3, [r3, #0]
 800063e:	2b7e      	cmp	r3, #126	@ 0x7e
 8000640:	d8e9      	bhi.n	8000616 <apMain+0x6a>
			{
				cli_buf[cli_buf_index] = rx_data ;
 8000642:	4a11      	ldr	r2, [pc, #68]	@ (8000688 <apMain+0xdc>)
 8000644:	54d0      	strb	r0, [r2, r3]
				cli_buf_index ++ ;
 8000646:	3301      	adds	r3, #1
 8000648:	4a0e      	ldr	r2, [pc, #56]	@ (8000684 <apMain+0xd8>)
 800064a:	8013      	strh	r3, [r2, #0]
				uartWrite(_DEF_CH1, &rx_data, 1) ; // 에코
 800064c:	2201      	movs	r2, #1
 800064e:	f10d 0103 	add.w	r1, sp, #3
 8000652:	2000      	movs	r0, #0
 8000654:	f000 f842 	bl	80006dc <uartWrite>
 8000658:	e7dd      	b.n	8000616 <apMain+0x6a>
					if ( cli_argc == 2 && strcmp(cli_argv[0], "test") ==0 )
 800065a:	4911      	ldr	r1, [pc, #68]	@ (80006a0 <apMain+0xf4>)
 800065c:	4b0d      	ldr	r3, [pc, #52]	@ (8000694 <apMain+0xe8>)
 800065e:	6818      	ldr	r0, [r3, #0]
 8000660:	f7ff fdc6 	bl	80001f0 <strcmp>
 8000664:	2800      	cmp	r0, #0
 8000666:	d1d2      	bne.n	800060e <apMain+0x62>
						test_data = (int32_t) strtoul ( cli_argv[1],(char **)NULL,0);
 8000668:	2200      	movs	r2, #0
 800066a:	4611      	mov	r1, r2
 800066c:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <apMain+0xe8>)
 800066e:	6858      	ldr	r0, [r3, #4]
 8000670:	f002 ff26 	bl	80034c0 <strtoul>
 8000674:	4602      	mov	r2, r0
						uartPrintf(_DEF_CH1, "test_data : %d\n", test_data);
 8000676:	490b      	ldr	r1, [pc, #44]	@ (80006a4 <apMain+0xf8>)
 8000678:	2000      	movs	r0, #0
 800067a:	f000 f87b 	bl	8000774 <uartPrintf>
 800067e:	e7c6      	b.n	800060e <apMain+0x62>
 8000680:	40021800 	.word	0x40021800
 8000684:	2000009a 	.word	0x2000009a
 8000688:	2000009c 	.word	0x2000009c
 800068c:	08003eb8 	.word	0x08003eb8
 8000690:	20000098 	.word	0x20000098
 8000694:	20000078 	.word	0x20000078
 8000698:	08003ed8 	.word	0x08003ed8
 800069c:	08003ed4 	.word	0x08003ed4
 80006a0:	08003ebc 	.word	0x08003ebc
 80006a4:	08003ec4 	.word	0x08003ec4

080006a8 <adcInit>:
uint16_t adc_data[3];



bool adcInit(void)
{
 80006a8:	b508      	push	{r3, lr}
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_data, 3);		//핸들러, 배열, 채널 수
 80006aa:	2203      	movs	r2, #3
 80006ac:	4902      	ldr	r1, [pc, #8]	@ (80006b8 <adcInit+0x10>)
 80006ae:	4803      	ldr	r0, [pc, #12]	@ (80006bc <adcInit+0x14>)
 80006b0:	f001 f86c 	bl	800178c <HAL_ADC_Start_DMA>
	return true;
}
 80006b4:	2001      	movs	r0, #1
 80006b6:	bd08      	pop	{r3, pc}
 80006b8:	2000011c 	.word	0x2000011c
 80006bc:	20000508 	.word	0x20000508

080006c0 <uartInit>:
static uint16_t q_out = 0;
static uint8_t q_buf[UART_Q_BUF_MAX];


bool uartInit(void) //코어에서 실제로 초기화를 함.
{
 80006c0:	b508      	push	{r3, lr}
	HAL_UART_Receive_DMA(&huart1, &q_buf[0], UART_Q_BUF_MAX);
 80006c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006c6:	4903      	ldr	r1, [pc, #12]	@ (80006d4 <uartInit+0x14>)
 80006c8:	4803      	ldr	r0, [pc, #12]	@ (80006d8 <uartInit+0x18>)
 80006ca:	f002 fde1 	bl	8003290 <HAL_UART_Receive_DMA>
	return true;
}
 80006ce:	2001      	movs	r0, #1
 80006d0:	bd08      	pop	{r3, pc}
 80006d2:	bf00      	nop
 80006d4:	20000124 	.word	0x20000124
 80006d8:	200002bc 	.word	0x200002bc

080006dc <uartWrite>:
uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
	uint32_t ret = 0;
	HAL_StatusTypeDef hal_ret;

	switch(ch)
 80006dc:	b108      	cbz	r0, 80006e2 <uartWrite+0x6>
	uint32_t ret = 0;
 80006de:	2000      	movs	r0, #0
				ret = length ;	// HAL_OK일 경우가 아니면 ret은 0으로 초기화된그대로,.
			}
			break;
	}
	return ret ;
}
 80006e0:	4770      	bx	lr
{
 80006e2:	b510      	push	{r4, lr}
 80006e4:	4614      	mov	r4, r2
			hal_ret = HAL_UART_Transmit(&huart1, p_data, length, 100); //timeout으로 100ms 주기
 80006e6:	2364      	movs	r3, #100	@ 0x64
 80006e8:	b292      	uxth	r2, r2
 80006ea:	4804      	ldr	r0, [pc, #16]	@ (80006fc <uartWrite+0x20>)
 80006ec:	f002 fc8b 	bl	8003006 <HAL_UART_Transmit>
			if(hal_ret == HAL_OK)
 80006f0:	b108      	cbz	r0, 80006f6 <uartWrite+0x1a>
	uint32_t ret = 0;
 80006f2:	2000      	movs	r0, #0
}
 80006f4:	bd10      	pop	{r4, pc}
				ret = length ;	// HAL_OK일 경우가 아니면 ret은 0으로 초기화된그대로,.
 80006f6:	4620      	mov	r0, r4
	return ret ;
 80006f8:	e7fc      	b.n	80006f4 <uartWrite+0x18>
 80006fa:	bf00      	nop
 80006fc:	200002bc 	.word	0x200002bc

08000700 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
	uint32_t ret = 0 ;

	switch(ch)
 8000700:	b998      	cbnz	r0, 800072a <uartAvailable+0x2a>
	{
	case _DEF_CH1:
		q_in = (UART_Q_BUF_MAX - huart1.hdmarx->Instance->NDTR) % UART_Q_BUF_MAX ;
 8000702:	4b0b      	ldr	r3, [pc, #44]	@ (8000730 <uartAvailable+0x30>)
 8000704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	6858      	ldr	r0, [r3, #4]
 800070a:	b280      	uxth	r0, r0
 800070c:	4240      	negs	r0, r0
 800070e:	b2c0      	uxtb	r0, r0
 8000710:	4b08      	ldr	r3, [pc, #32]	@ (8000734 <uartAvailable+0x34>)
 8000712:	8018      	strh	r0, [r3, #0]
		ret = (UART_Q_BUF_MAX + q_in - q_out ) % UART_Q_BUF_MAX ;  // 큐에 남아있는 버퍼 갯수를 리턴
 8000714:	f500 7080 	add.w	r0, r0, #256	@ 0x100
 8000718:	4b07      	ldr	r3, [pc, #28]	@ (8000738 <uartAvailable+0x38>)
 800071a:	881b      	ldrh	r3, [r3, #0]
 800071c:	1ac0      	subs	r0, r0, r3
 800071e:	4243      	negs	r3, r0
 8000720:	b2c0      	uxtb	r0, r0
 8000722:	b2db      	uxtb	r3, r3
 8000724:	bf58      	it	pl
 8000726:	4258      	negpl	r0, r3
		break;
 8000728:	4770      	bx	lr
	uint32_t ret = 0 ;
 800072a:	2000      	movs	r0, #0
	}
	return ret ;
}
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	200002bc 	.word	0x200002bc
 8000734:	20000226 	.word	0x20000226
 8000738:	20000224 	.word	0x20000224

0800073c <uartRead>:

uint8_t uartRead(uint8_t ch)	//버퍼를 출력하기
{
	uint8_t ret = 0 ;

	switch(ch)
 800073c:	b980      	cbnz	r0, 8000760 <uartRead+0x24>
	{
	case _DEF_CH1:
		if(q_out != q_in)
 800073e:	4b0a      	ldr	r3, [pc, #40]	@ (8000768 <uartRead+0x2c>)
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	490a      	ldr	r1, [pc, #40]	@ (800076c <uartRead+0x30>)
 8000744:	8809      	ldrh	r1, [r1, #0]
 8000746:	428b      	cmp	r3, r1
 8000748:	d00c      	beq.n	8000764 <uartRead+0x28>
		{
			ret = q_buf[q_out];
 800074a:	4a09      	ldr	r2, [pc, #36]	@ (8000770 <uartRead+0x34>)
 800074c:	5cd0      	ldrb	r0, [r2, r3]
			q_out = (q_out + 1) % UART_Q_BUF_MAX ;
 800074e:	3301      	adds	r3, #1
 8000750:	425a      	negs	r2, r3
 8000752:	b2db      	uxtb	r3, r3
 8000754:	b2d2      	uxtb	r2, r2
 8000756:	bf58      	it	pl
 8000758:	4253      	negpl	r3, r2
 800075a:	4a03      	ldr	r2, [pc, #12]	@ (8000768 <uartRead+0x2c>)
 800075c:	8013      	strh	r3, [r2, #0]
 800075e:	4770      	bx	lr
	uint8_t ret = 0 ;
 8000760:	2000      	movs	r0, #0
 8000762:	4770      	bx	lr
		}
		break;
	}

	return ret ;
}
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	20000224 	.word	0x20000224
 800076c:	20000226 	.word	0x20000226
 8000770:	20000124 	.word	0x20000124

08000774 <uartPrintf>:


uint32_t uartPrintf(uint8_t ch ,const char *fmt, ... ) //가변인자를 사용한 형식화 출력함수, 프로그램만들때 매우 용이
{
 8000774:	b40e      	push	{r1, r2, r3}
 8000776:	b510      	push	{r4, lr}
 8000778:	b0c3      	sub	sp, #268	@ 0x10c
 800077a:	4604      	mov	r4, r0
 800077c:	ab45      	add	r3, sp, #276	@ 0x114
 800077e:	f853 2b04 	ldr.w	r2, [r3], #4
	uint32_t ret = 0;

	va_list arg ;
	char print_buf[256];

	va_start(arg,fmt);
 8000782:	9341      	str	r3, [sp, #260]	@ 0x104
	int len;
	len = vsnprintf(print_buf , 256, fmt, arg);
 8000784:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000788:	a801      	add	r0, sp, #4
 800078a:	f002 fecf 	bl	800352c <vsniprintf>
	va_end(arg);

	if (len > 0)
 800078e:	1e02      	subs	r2, r0, #0
 8000790:	dc05      	bgt.n	800079e <uartPrintf+0x2a>
	uint32_t ret = 0;
 8000792:	2000      	movs	r0, #0
	{
		ret = uartWrite(ch,(uint8_t *)print_buf,len);
	}

	return ret;
}
 8000794:	b043      	add	sp, #268	@ 0x10c
 8000796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800079a:	b003      	add	sp, #12
 800079c:	4770      	bx	lr
		ret = uartWrite(ch,(uint8_t *)print_buf,len);
 800079e:	a901      	add	r1, sp, #4
 80007a0:	4620      	mov	r0, r4
 80007a2:	f7ff ff9b 	bl	80006dc <uartWrite>
 80007a6:	e7f5      	b.n	8000794 <uartPrintf+0x20>

080007a8 <millis>:
}



uint32_t millis(void)
{
 80007a8:	b508      	push	{r3, lr}
	return HAL_GetTick();
 80007aa:	f000 ff23 	bl	80015f4 <HAL_GetTick>
}
 80007ae:	bd08      	pop	{r3, pc}

080007b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007b0:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	9301      	str	r3, [sp, #4]
 80007b6:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <MX_DMA_Init+0x20>)
 80007b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007ba:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80007be:	631a      	str	r2, [r3, #48]	@ 0x30
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80007c6:	9301      	str	r3, [sp, #4]
 80007c8:	9b01      	ldr	r3, [sp, #4]

}
 80007ca:	b002      	add	sp, #8
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007d8:	b08e      	sub	sp, #56	@ 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	2400      	movs	r4, #0
 80007dc:	9409      	str	r4, [sp, #36]	@ 0x24
 80007de:	940a      	str	r4, [sp, #40]	@ 0x28
 80007e0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80007e2:	940c      	str	r4, [sp, #48]	@ 0x30
 80007e4:	940d      	str	r4, [sp, #52]	@ 0x34
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	9401      	str	r4, [sp, #4]
 80007e8:	4b69      	ldr	r3, [pc, #420]	@ (8000990 <MX_GPIO_Init+0x1bc>)
 80007ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007ec:	f042 0204 	orr.w	r2, r2, #4
 80007f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80007f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007f4:	f002 0204 	and.w	r2, r2, #4
 80007f8:	9201      	str	r2, [sp, #4]
 80007fa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007fc:	9402      	str	r4, [sp, #8]
 80007fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000800:	f042 0220 	orr.w	r2, r2, #32
 8000804:	631a      	str	r2, [r3, #48]	@ 0x30
 8000806:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000808:	f002 0220 	and.w	r2, r2, #32
 800080c:	9202      	str	r2, [sp, #8]
 800080e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000810:	9403      	str	r4, [sp, #12]
 8000812:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000814:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000818:	631a      	str	r2, [r3, #48]	@ 0x30
 800081a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800081c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000820:	9203      	str	r2, [sp, #12]
 8000822:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000824:	9404      	str	r4, [sp, #16]
 8000826:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000828:	f042 0201 	orr.w	r2, r2, #1
 800082c:	631a      	str	r2, [r3, #48]	@ 0x30
 800082e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000830:	f002 0201 	and.w	r2, r2, #1
 8000834:	9204      	str	r2, [sp, #16]
 8000836:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000838:	9405      	str	r4, [sp, #20]
 800083a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800083c:	f042 0202 	orr.w	r2, r2, #2
 8000840:	631a      	str	r2, [r3, #48]	@ 0x30
 8000842:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000844:	f002 0202 	and.w	r2, r2, #2
 8000848:	9205      	str	r2, [sp, #20]
 800084a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800084c:	9406      	str	r4, [sp, #24]
 800084e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000850:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000854:	631a      	str	r2, [r3, #48]	@ 0x30
 8000856:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000858:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800085c:	9206      	str	r2, [sp, #24]
 800085e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000860:	9407      	str	r4, [sp, #28]
 8000862:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000864:	f042 0210 	orr.w	r2, r2, #16
 8000868:	631a      	str	r2, [r3, #48]	@ 0x30
 800086a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800086c:	f002 0210 	and.w	r2, r2, #16
 8000870:	9207      	str	r2, [sp, #28]
 8000872:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000874:	9408      	str	r4, [sp, #32]
 8000876:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000878:	f042 0208 	orr.w	r2, r2, #8
 800087c:	631a      	str	r2, [r3, #48]	@ 0x30
 800087e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000880:	f003 0308 	and.w	r3, r3, #8
 8000884:	9308      	str	r3, [sp, #32]
 8000886:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000888:	4f42      	ldr	r7, [pc, #264]	@ (8000994 <MX_GPIO_Init+0x1c0>)
 800088a:	4622      	mov	r2, r4
 800088c:	2116      	movs	r1, #22
 800088e:	4638      	mov	r0, r7
 8000890:	f001 fc04 	bl	800209c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000894:	f8df 8104 	ldr.w	r8, [pc, #260]	@ 800099c <MX_GPIO_Init+0x1c8>
 8000898:	4622      	mov	r2, r4
 800089a:	2180      	movs	r1, #128	@ 0x80
 800089c:	4640      	mov	r0, r8
 800089e:	f001 fbfd 	bl	800209c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80008a2:	4e3d      	ldr	r6, [pc, #244]	@ (8000998 <MX_GPIO_Init+0x1c4>)
 80008a4:	4622      	mov	r2, r4
 80008a6:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80008aa:	4630      	mov	r0, r6
 80008ac:	f001 fbf6 	bl	800209c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80008b0:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 80009a0 <MX_GPIO_Init+0x1cc>
 80008b4:	4622      	mov	r2, r4
 80008b6:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80008ba:	4648      	mov	r0, r9
 80008bc:	f001 fbee 	bl	800209c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80008c0:	2316      	movs	r3, #22
 80008c2:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	2501      	movs	r5, #1
 80008c6:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008cc:	a909      	add	r1, sp, #36	@ 0x24
 80008ce:	4638      	mov	r0, r7
 80008d0:	f001 fae0 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80008d4:	f248 0307 	movw	r3, #32775	@ 0x8007
 80008d8:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008da:	f44f 1a90 	mov.w	sl, #1179648	@ 0x120000
 80008de:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e4:	a909      	add	r1, sp, #36	@ 0x24
 80008e6:	4640      	mov	r0, r8
 80008e8:	f001 fad4 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80008ec:	2380      	movs	r3, #128	@ 0x80
 80008ee:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80008f6:	a909      	add	r1, sp, #36	@ 0x24
 80008f8:	4640      	mov	r0, r8
 80008fa:	f001 facb 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80008fe:	2320      	movs	r3, #32
 8000900:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000902:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000908:	a909      	add	r1, sp, #36	@ 0x24
 800090a:	4638      	mov	r0, r7
 800090c:	f001 fac2 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000910:	2304      	movs	r3, #4
 8000912:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000914:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000918:	f5a7 6780 	sub.w	r7, r7, #1024	@ 0x400
 800091c:	a909      	add	r1, sp, #36	@ 0x24
 800091e:	4638      	mov	r0, r7
 8000920:	f001 fab8 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000924:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8000928:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	930a      	str	r3, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	940c      	str	r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000932:	230c      	movs	r3, #12
 8000934:	930d      	str	r3, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000936:	a909      	add	r1, sp, #36	@ 0x24
 8000938:	4638      	mov	r0, r7
 800093a:	f001 faab 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800093e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000942:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000944:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000948:	a909      	add	r1, sp, #36	@ 0x24
 800094a:	4638      	mov	r0, r7
 800094c:	f001 faa2 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000950:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000954:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000956:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800095a:	a909      	add	r1, sp, #36	@ 0x24
 800095c:	4630      	mov	r0, r6
 800095e:	f001 fa99 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000962:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000966:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800096e:	a909      	add	r1, sp, #36	@ 0x24
 8000970:	4630      	mov	r0, r6
 8000972:	f001 fa8f 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000976:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800097a:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097c:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000982:	a909      	add	r1, sp, #36	@ 0x24
 8000984:	4648      	mov	r0, r9
 8000986:	f001 fa85 	bl	8001e94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800098a:	b00e      	add	sp, #56	@ 0x38
 800098c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000990:	40023800 	.word	0x40023800
 8000994:	40020800 	.word	0x40020800
 8000998:	40020c00 	.word	0x40020c00
 800099c:	40020000 	.word	0x40020000
 80009a0:	40021800 	.word	0x40021800

080009a4 <PeriphCommonClock_Config>:
  *         @arg @ref LL_RCC_PLLSAIDIVR_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI_ConfigDomain_LTDC(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR, uint32_t PLLDIVR)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, Source | PLLM);
 80009a4:	4a12      	ldr	r2, [pc, #72]	@ (80009f0 <PeriphCommonClock_Config+0x4c>)
 80009a6:	6853      	ldr	r3, [r2, #4]
 80009a8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80009ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80009b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009b4:	f043 0304 	orr.w	r3, r3, #4
 80009b8:	6053      	str	r3, [r2, #4]
  MODIFY_REG(RCC->PLLSAICFGR, RCC_PLLSAICFGR_PLLSAIN | RCC_PLLSAICFGR_PLLSAIR, PLLN << RCC_PLLSAICFGR_PLLSAIN_Pos | PLLR);
 80009ba:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
 80009be:	4b0d      	ldr	r3, [pc, #52]	@ (80009f4 <PeriphCommonClock_Config+0x50>)
 80009c0:	400b      	ands	r3, r1
 80009c2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80009c6:	f443 6348 	orr.w	r3, r3, #3200	@ 0xc80
 80009ca:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_PLLSAIDIVR, PLLDIVR);
 80009ce:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 80009d2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80009d6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  SET_BIT(RCC->CR, RCC_CR_PLLSAION);
 80009da:	6813      	ldr	r3, [r2, #0]
 80009dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009e0:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) == (RCC_CR_PLLSAIRDY));
 80009e2:	4b03      	ldr	r3, [pc, #12]	@ (80009f0 <PeriphCommonClock_Config+0x4c>)
 80009e4:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_PLLSAI_IsReady() != 1)
 80009e6:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 80009ea:	d0fa      	beq.n	80009e2 <PeriphCommonClock_Config+0x3e>
}
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800
 80009f4:	8fff803f 	.word	0x8fff803f

080009f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009fa:	6802      	ldr	r2, [r0, #0]
 80009fc:	4b03      	ldr	r3, [pc, #12]	@ (8000a0c <HAL_TIM_PeriodElapsedCallback+0x14>)
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d000      	beq.n	8000a04 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a02:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8000a04:	f000 fdea 	bl	80015dc <HAL_IncTick>
}
 8000a08:	e7fb      	b.n	8000a02 <HAL_TIM_PeriodElapsedCallback+0xa>
 8000a0a:	bf00      	nop
 8000a0c:	40001000 	.word	0x40001000

08000a10 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <Error_Handler+0x2>

08000a14 <MX_CRC_Init>:
{
 8000a14:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 8000a16:	4804      	ldr	r0, [pc, #16]	@ (8000a28 <MX_CRC_Init+0x14>)
 8000a18:	4b04      	ldr	r3, [pc, #16]	@ (8000a2c <MX_CRC_Init+0x18>)
 8000a1a:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a1c:	f001 f90e 	bl	8001c3c <HAL_CRC_Init>
 8000a20:	b900      	cbnz	r0, 8000a24 <MX_CRC_Init+0x10>
}
 8000a22:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000a24:	f7ff fff4 	bl	8000a10 <Error_Handler>
 8000a28:	200004a0 	.word	0x200004a0
 8000a2c:	40023000 	.word	0x40023000

08000a30 <MX_FMC_Init>:
{
 8000a30:	b500      	push	{lr}
 8000a32:	b089      	sub	sp, #36	@ 0x24
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000a34:	2300      	movs	r3, #0
 8000a36:	9301      	str	r3, [sp, #4]
 8000a38:	9302      	str	r3, [sp, #8]
 8000a3a:	9303      	str	r3, [sp, #12]
 8000a3c:	9304      	str	r3, [sp, #16]
 8000a3e:	9305      	str	r3, [sp, #20]
 8000a40:	9306      	str	r3, [sp, #24]
 8000a42:	9307      	str	r3, [sp, #28]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a44:	4814      	ldr	r0, [pc, #80]	@ (8000a98 <MX_FMC_Init+0x68>)
 8000a46:	4a15      	ldr	r2, [pc, #84]	@ (8000a9c <MX_FMC_Init+0x6c>)
 8000a48:	6002      	str	r2, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	6042      	str	r2, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a4e:	6083      	str	r3, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a50:	2104      	movs	r1, #4
 8000a52:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a54:	2210      	movs	r2, #16
 8000a56:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a58:	2240      	movs	r2, #64	@ 0x40
 8000a5a:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a5c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000a60:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a62:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a64:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a68:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000a6a:	6243      	str	r3, [r0, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000a6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a70:	6283      	str	r3, [r0, #40]	@ 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8000a72:	2302      	movs	r3, #2
 8000a74:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000a76:	2207      	movs	r2, #7
 8000a78:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000a7a:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 7;
 8000a7c:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000a7e:	2203      	movs	r2, #3
 8000a80:	9205      	str	r2, [sp, #20]
  SdramTiming.RPDelay = 2;
 8000a82:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 8000a84:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a86:	4469      	add	r1, sp
 8000a88:	f001 fe72 	bl	8002770 <HAL_SDRAM_Init>
 8000a8c:	b910      	cbnz	r0, 8000a94 <MX_FMC_Init+0x64>
}
 8000a8e:	b009      	add	sp, #36	@ 0x24
 8000a90:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 8000a94:	f7ff ffbc 	bl	8000a10 <Error_Handler>
 8000a98:	20000228 	.word	0x20000228
 8000a9c:	a0000140 	.word	0xa0000140

08000aa0 <MX_I2C3_Init>:
{
 8000aa0:	b508      	push	{r3, lr}
  hi2c3.Instance = I2C3;
 8000aa2:	4811      	ldr	r0, [pc, #68]	@ (8000ae8 <MX_I2C3_Init+0x48>)
 8000aa4:	4b11      	ldr	r3, [pc, #68]	@ (8000aec <MX_I2C3_Init+0x4c>)
 8000aa6:	6003      	str	r3, [r0, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <MX_I2C3_Init+0x50>)
 8000aaa:	6043      	str	r3, [r0, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aac:	2300      	movs	r3, #0
 8000aae:	6083      	str	r3, [r0, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000ab0:	60c3      	str	r3, [r0, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ab6:	6102      	str	r2, [r0, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab8:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000aba:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000abc:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000abe:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ac0:	f001 fafc 	bl	80020bc <HAL_I2C_Init>
 8000ac4:	b950      	cbnz	r0, 8000adc <MX_I2C3_Init+0x3c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4807      	ldr	r0, [pc, #28]	@ (8000ae8 <MX_I2C3_Init+0x48>)
 8000aca:	f001 fbd5 	bl	8002278 <HAL_I2CEx_ConfigAnalogFilter>
 8000ace:	b938      	cbnz	r0, 8000ae0 <MX_I2C3_Init+0x40>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4805      	ldr	r0, [pc, #20]	@ (8000ae8 <MX_I2C3_Init+0x48>)
 8000ad4:	f001 fbf2 	bl	80022bc <HAL_I2CEx_ConfigDigitalFilter>
 8000ad8:	b920      	cbnz	r0, 8000ae4 <MX_I2C3_Init+0x44>
}
 8000ada:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000adc:	f7ff ff98 	bl	8000a10 <Error_Handler>
    Error_Handler();
 8000ae0:	f7ff ff96 	bl	8000a10 <Error_Handler>
    Error_Handler();
 8000ae4:	f7ff ff94 	bl	8000a10 <Error_Handler>
 8000ae8:	2000044c 	.word	0x2000044c
 8000aec:	40005c00 	.word	0x40005c00
 8000af0:	000186a0 	.word	0x000186a0

08000af4 <MX_SPI5_Init>:
{
 8000af4:	b508      	push	{r3, lr}
  hspi5.Instance = SPI5;
 8000af6:	480d      	ldr	r0, [pc, #52]	@ (8000b2c <MX_SPI5_Init+0x38>)
 8000af8:	4b0d      	ldr	r3, [pc, #52]	@ (8000b30 <MX_SPI5_Init+0x3c>)
 8000afa:	6003      	str	r3, [r0, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000afc:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000b00:	6043      	str	r3, [r0, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000b02:	2300      	movs	r3, #0
 8000b04:	6083      	str	r3, [r0, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b06:	60c3      	str	r3, [r0, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b08:	6103      	str	r3, [r0, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b0a:	6143      	str	r3, [r0, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000b0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b10:	6182      	str	r2, [r0, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b12:	2218      	movs	r2, #24
 8000b14:	61c2      	str	r2, [r0, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b16:	6203      	str	r3, [r0, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b18:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b1a:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000b1c:	230a      	movs	r3, #10
 8000b1e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000b20:	f001 fe46 	bl	80027b0 <HAL_SPI_Init>
 8000b24:	b900      	cbnz	r0, 8000b28 <MX_SPI5_Init+0x34>
}
 8000b26:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000b28:	f7ff ff72 	bl	8000a10 <Error_Handler>
 8000b2c:	2000034c 	.word	0x2000034c
 8000b30:	40015000 	.word	0x40015000

08000b34 <MX_TIM1_Init>:
{
 8000b34:	b500      	push	{lr}
 8000b36:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b38:	2300      	movs	r3, #0
 8000b3a:	9302      	str	r3, [sp, #8]
 8000b3c:	9303      	str	r3, [sp, #12]
 8000b3e:	9304      	str	r3, [sp, #16]
 8000b40:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b42:	9300      	str	r3, [sp, #0]
 8000b44:	9301      	str	r3, [sp, #4]
  htim1.Instance = TIM1;
 8000b46:	4813      	ldr	r0, [pc, #76]	@ (8000b94 <MX_TIM1_Init+0x60>)
 8000b48:	4a13      	ldr	r2, [pc, #76]	@ (8000b98 <MX_TIM1_Init+0x64>)
 8000b4a:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 0;
 8000b4c:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4e:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 8000b50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b54:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b56:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b58:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b5a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b5c:	f002 f81a 	bl	8002b94 <HAL_TIM_Base_Init>
 8000b60:	b990      	cbnz	r0, 8000b88 <MX_TIM1_Init+0x54>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b66:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b68:	a902      	add	r1, sp, #8
 8000b6a:	480a      	ldr	r0, [pc, #40]	@ (8000b94 <MX_TIM1_Init+0x60>)
 8000b6c:	f002 f84b 	bl	8002c06 <HAL_TIM_ConfigClockSource>
 8000b70:	b960      	cbnz	r0, 8000b8c <MX_TIM1_Init+0x58>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b72:	2300      	movs	r3, #0
 8000b74:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b76:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b78:	4669      	mov	r1, sp
 8000b7a:	4806      	ldr	r0, [pc, #24]	@ (8000b94 <MX_TIM1_Init+0x60>)
 8000b7c:	f002 f8c2 	bl	8002d04 <HAL_TIMEx_MasterConfigSynchronization>
 8000b80:	b930      	cbnz	r0, 8000b90 <MX_TIM1_Init+0x5c>
}
 8000b82:	b007      	add	sp, #28
 8000b84:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000b88:	f7ff ff42 	bl	8000a10 <Error_Handler>
    Error_Handler();
 8000b8c:	f7ff ff40 	bl	8000a10 <Error_Handler>
    Error_Handler();
 8000b90:	f7ff ff3e 	bl	8000a10 <Error_Handler>
 8000b94:	20000304 	.word	0x20000304
 8000b98:	40010000 	.word	0x40010000

08000b9c <MX_USART1_UART_Init>:
{
 8000b9c:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8000b9e:	480a      	ldr	r0, [pc, #40]	@ (8000bc8 <MX_USART1_UART_Init+0x2c>)
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bcc <MX_USART1_UART_Init+0x30>)
 8000ba2:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000ba4:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000ba8:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000baa:	2300      	movs	r3, #0
 8000bac:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bae:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bb0:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bba:	f002 f9f4 	bl	8002fa6 <HAL_UART_Init>
 8000bbe:	b900      	cbnz	r0, 8000bc2 <MX_USART1_UART_Init+0x26>
}
 8000bc0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000bc2:	f7ff ff25 	bl	8000a10 <Error_Handler>
 8000bc6:	bf00      	nop
 8000bc8:	200002bc 	.word	0x200002bc
 8000bcc:	40011000 	.word	0x40011000

08000bd0 <MX_ADC1_Init>:
{
 8000bd0:	b500      	push	{lr}
 8000bd2:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	9300      	str	r3, [sp, #0]
 8000bd8:	9301      	str	r3, [sp, #4]
 8000bda:	9302      	str	r3, [sp, #8]
 8000bdc:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 8000bde:	481e      	ldr	r0, [pc, #120]	@ (8000c58 <MX_ADC1_Init+0x88>)
 8000be0:	4a1e      	ldr	r2, [pc, #120]	@ (8000c5c <MX_ADC1_Init+0x8c>)
 8000be2:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000be4:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000be6:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000be8:	2201      	movs	r2, #1
 8000bea:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000bec:	7602      	strb	r2, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bee:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bf2:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bf4:	491a      	ldr	r1, [pc, #104]	@ (8000c60 <MX_ADC1_Init+0x90>)
 8000bf6:	6281      	str	r1, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bf8:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000bfe:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c02:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c04:	f000 fd96 	bl	8001734 <HAL_ADC_Init>
 8000c08:	b9f0      	cbnz	r0, 8000c48 <MX_ADC1_Init+0x78>
  sConfig.Channel = ADC_CHANNEL_5;
 8000c0a:	2305      	movs	r3, #5
 8000c0c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000c12:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c14:	4669      	mov	r1, sp
 8000c16:	4810      	ldr	r0, [pc, #64]	@ (8000c58 <MX_ADC1_Init+0x88>)
 8000c18:	f000 fed2 	bl	80019c0 <HAL_ADC_ConfigChannel>
 8000c1c:	b9b0      	cbnz	r0, 8000c4c <MX_ADC1_Init+0x7c>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000c1e:	4b11      	ldr	r3, [pc, #68]	@ (8000c64 <MX_ADC1_Init+0x94>)
 8000c20:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 8000c22:	2302      	movs	r3, #2
 8000c24:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c26:	4669      	mov	r1, sp
 8000c28:	480b      	ldr	r0, [pc, #44]	@ (8000c58 <MX_ADC1_Init+0x88>)
 8000c2a:	f000 fec9 	bl	80019c0 <HAL_ADC_ConfigChannel>
 8000c2e:	b978      	cbnz	r0, 8000c50 <MX_ADC1_Init+0x80>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000c30:	2311      	movs	r3, #17
 8000c32:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 8000c34:	2303      	movs	r3, #3
 8000c36:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c38:	4669      	mov	r1, sp
 8000c3a:	4807      	ldr	r0, [pc, #28]	@ (8000c58 <MX_ADC1_Init+0x88>)
 8000c3c:	f000 fec0 	bl	80019c0 <HAL_ADC_ConfigChannel>
 8000c40:	b940      	cbnz	r0, 8000c54 <MX_ADC1_Init+0x84>
}
 8000c42:	b005      	add	sp, #20
 8000c44:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000c48:	f7ff fee2 	bl	8000a10 <Error_Handler>
    Error_Handler();
 8000c4c:	f7ff fee0 	bl	8000a10 <Error_Handler>
    Error_Handler();
 8000c50:	f7ff fede 	bl	8000a10 <Error_Handler>
    Error_Handler();
 8000c54:	f7ff fedc 	bl	8000a10 <Error_Handler>
 8000c58:	20000508 	.word	0x20000508
 8000c5c:	40012000 	.word	0x40012000
 8000c60:	0f000001 	.word	0x0f000001
 8000c64:	10000012 	.word	0x10000012

08000c68 <MX_LTDC_Init>:
{
 8000c68:	b500      	push	{lr}
 8000c6a:	b08f      	sub	sp, #60	@ 0x3c
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000c6c:	2234      	movs	r2, #52	@ 0x34
 8000c6e:	2100      	movs	r1, #0
 8000c70:	a801      	add	r0, sp, #4
 8000c72:	f002 fc69 	bl	8003548 <memset>
  hltdc.Instance = LTDC;
 8000c76:	4825      	ldr	r0, [pc, #148]	@ (8000d0c <MX_LTDC_Init+0xa4>)
 8000c78:	4b25      	ldr	r3, [pc, #148]	@ (8000d10 <MX_LTDC_Init+0xa8>)
 8000c7a:	6003      	str	r3, [r0, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	6043      	str	r3, [r0, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000c80:	6083      	str	r3, [r0, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c82:	60c3      	str	r3, [r0, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c84:	6103      	str	r3, [r0, #16]
  hltdc.Init.HorizontalSync = 7;
 8000c86:	2207      	movs	r2, #7
 8000c88:	6142      	str	r2, [r0, #20]
  hltdc.Init.VerticalSync = 3;
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	6182      	str	r2, [r0, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000c8e:	220e      	movs	r2, #14
 8000c90:	61c2      	str	r2, [r0, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000c92:	2205      	movs	r2, #5
 8000c94:	6202      	str	r2, [r0, #32]
  hltdc.Init.AccumulatedActiveW = 334;
 8000c96:	f44f 72a7 	mov.w	r2, #334	@ 0x14e
 8000c9a:	6242      	str	r2, [r0, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 245;
 8000c9c:	22f5      	movs	r2, #245	@ 0xf5
 8000c9e:	6282      	str	r2, [r0, #40]	@ 0x28
  hltdc.Init.TotalWidth = 340;
 8000ca0:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 8000ca4:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 247;
 8000ca6:	22f7      	movs	r2, #247	@ 0xf7
 8000ca8:	6302      	str	r2, [r0, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000caa:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000cae:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000cb2:	f880 3036 	strb.w	r3, [r0, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000cb6:	f001 fbf9 	bl	80024ac <HAL_LTDC_Init>
 8000cba:	bb10      	cbnz	r0, 8000d02 <MX_LTDC_Init+0x9a>
  pLayerCfg.WindowX0 = 0;
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	9201      	str	r2, [sp, #4]
  pLayerCfg.WindowX1 = 320;
 8000cc0:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8000cc4:	9102      	str	r1, [sp, #8]
  pLayerCfg.WindowY0 = 0;
 8000cc6:	9203      	str	r2, [sp, #12]
  pLayerCfg.WindowY1 = 240;
 8000cc8:	23f0      	movs	r3, #240	@ 0xf0
 8000cca:	9304      	str	r3, [sp, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000ccc:	2002      	movs	r0, #2
 8000cce:	9005      	str	r0, [sp, #20]
  pLayerCfg.Alpha = 255;
 8000cd0:	20ff      	movs	r0, #255	@ 0xff
 8000cd2:	9006      	str	r0, [sp, #24]
  pLayerCfg.Alpha0 = 0;
 8000cd4:	9207      	str	r2, [sp, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000cd6:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8000cda:	9008      	str	r0, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000cdc:	2007      	movs	r0, #7
 8000cde:	9009      	str	r0, [sp, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 8000ce0:	920a      	str	r2, [sp, #40]	@ 0x28
  pLayerCfg.ImageWidth = 320;
 8000ce2:	910b      	str	r1, [sp, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 240;
 8000ce4:	930c      	str	r3, [sp, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000ce6:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000cea:	f88d 2035 	strb.w	r2, [sp, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000cee:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000cf2:	a901      	add	r1, sp, #4
 8000cf4:	4805      	ldr	r0, [pc, #20]	@ (8000d0c <MX_LTDC_Init+0xa4>)
 8000cf6:	f001 fcc3 	bl	8002680 <HAL_LTDC_ConfigLayer>
 8000cfa:	b920      	cbnz	r0, 8000d06 <MX_LTDC_Init+0x9e>
}
 8000cfc:	b00f      	add	sp, #60	@ 0x3c
 8000cfe:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000d02:	f7ff fe85 	bl	8000a10 <Error_Handler>
    Error_Handler();
 8000d06:	f7ff fe83 	bl	8000a10 <Error_Handler>
 8000d0a:	bf00      	nop
 8000d0c:	200003a4 	.word	0x200003a4
 8000d10:	40016800 	.word	0x40016800

08000d14 <SystemClock_Config>:
{
 8000d14:	b508      	push	{r3, lr}
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000d16:	4a35      	ldr	r2, [pc, #212]	@ (8000dec <SystemClock_Config+0xd8>)
 8000d18:	6813      	ldr	r3, [r2, #0]
 8000d1a:	f023 030f 	bic.w	r3, r3, #15
 8000d1e:	f043 0303 	orr.w	r3, r3, #3
 8000d22:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000d24:	4b31      	ldr	r3, [pc, #196]	@ (8000dec <SystemClock_Config+0xd8>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f003 030f 	and.w	r3, r3, #15
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 8000d2c:	2b03      	cmp	r3, #3
 8000d2e:	d1f9      	bne.n	8000d24 <SystemClock_Config+0x10>
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000d30:	4a2f      	ldr	r2, [pc, #188]	@ (8000df0 <SystemClock_Config+0xdc>)
 8000d32:	6813      	ldr	r3, [r2, #0]
 8000d34:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d3c:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(PWR->CR, PWR_CR_ODEN);
 8000d3e:	6813      	ldr	r3, [r2, #0]
 8000d40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d44:	6013      	str	r3, [r2, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000d46:	f502 32e4 	add.w	r2, r2, #116736	@ 0x1c800
 8000d4a:	6813      	ldr	r3, [r2, #0]
 8000d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d50:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000d52:	4b28      	ldr	r3, [pc, #160]	@ (8000df4 <SystemClock_Config+0xe0>)
 8000d54:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_HSE_IsReady() != 1)
 8000d56:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000d5a:	d0fa      	beq.n	8000d52 <SystemClock_Config+0x3e>
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000d5c:	4b25      	ldr	r3, [pc, #148]	@ (8000df4 <SystemClock_Config+0xe0>)
 8000d5e:	685a      	ldr	r2, [r3, #4]
 8000d60:	4925      	ldr	r1, [pc, #148]	@ (8000df8 <SystemClock_Config+0xe4>)
 8000d62:	4011      	ands	r1, r2
 8000d64:	4a25      	ldr	r2, [pc, #148]	@ (8000dfc <SystemClock_Config+0xe8>)
 8000d66:	430a      	orrs	r2, r1
 8000d68:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000d6a:	685a      	ldr	r2, [r3, #4]
 8000d6c:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8000d70:	605a      	str	r2, [r3, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8000d78:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000d7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000df4 <SystemClock_Config+0xe0>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_PLL_IsReady() != 1)
 8000d7e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000d82:	d0fa      	beq.n	8000d7a <SystemClock_Config+0x66>
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8000d84:	4b1a      	ldr	r3, [pc, #104]	@ (8000df0 <SystemClock_Config+0xdc>)
 8000d86:	685b      	ldr	r3, [r3, #4]
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8000d88:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8000d8c:	d0fa      	beq.n	8000d84 <SystemClock_Config+0x70>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000d8e:	4b19      	ldr	r3, [pc, #100]	@ (8000df4 <SystemClock_Config+0xe0>)
 8000d90:	689a      	ldr	r2, [r3, #8]
 8000d92:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8000d96:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000d98:	689a      	ldr	r2, [r3, #8]
 8000d9a:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8000d9e:	f442 52a0 	orr.w	r2, r2, #5120	@ 0x1400
 8000da2:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000da4:	689a      	ldr	r2, [r3, #8]
 8000da6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8000daa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000dae:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000db0:	689a      	ldr	r2, [r3, #8]
 8000db2:	f022 0203 	bic.w	r2, r2, #3
 8000db6:	f042 0202 	orr.w	r2, r2, #2
 8000dba:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000df4 <SystemClock_Config+0xe0>)
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	f003 030c 	and.w	r3, r3, #12
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000dc4:	2b08      	cmp	r3, #8
 8000dc6:	d1f9      	bne.n	8000dbc <SystemClock_Config+0xa8>
  LL_SetSystemCoreClock(96000000);
 8000dc8:	480d      	ldr	r0, [pc, #52]	@ (8000e00 <SystemClock_Config+0xec>)
 8000dca:	f002 fb05 	bl	80033d8 <LL_SetSystemCoreClock>
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000dce:	200f      	movs	r0, #15
 8000dd0:	f000 fb1e 	bl	8001410 <HAL_InitTick>
 8000dd4:	b938      	cbnz	r0, 8000de6 <SystemClock_Config+0xd2>
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8000dd6:	4a07      	ldr	r2, [pc, #28]	@ (8000df4 <SystemClock_Config+0xe0>)
 8000dd8:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8000ddc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000de0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
}
 8000de4:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000de6:	f7ff fe13 	bl	8000a10 <Error_Handler>
 8000dea:	bf00      	nop
 8000dec:	40023c00 	.word	0x40023c00
 8000df0:	40007000 	.word	0x40007000
 8000df4:	40023800 	.word	0x40023800
 8000df8:	ffbf8000 	.word	0xffbf8000
 8000dfc:	00401804 	.word	0x00401804
 8000e00:	05b8d800 	.word	0x05b8d800

08000e04 <main>:
{
 8000e04:	b508      	push	{r3, lr}
  HAL_Init();
 8000e06:	f000 fbcf 	bl	80015a8 <HAL_Init>
  SystemClock_Config();
 8000e0a:	f7ff ff83 	bl	8000d14 <SystemClock_Config>
  PeriphCommonClock_Config();
 8000e0e:	f7ff fdc9 	bl	80009a4 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 8000e12:	f7ff fcdf 	bl	80007d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e16:	f7ff fccb 	bl	80007b0 <MX_DMA_Init>
  MX_CRC_Init();
 8000e1a:	f7ff fdfb 	bl	8000a14 <MX_CRC_Init>
  MX_FMC_Init();
 8000e1e:	f7ff fe07 	bl	8000a30 <MX_FMC_Init>
  MX_I2C3_Init();
 8000e22:	f7ff fe3d 	bl	8000aa0 <MX_I2C3_Init>
  MX_SPI5_Init();
 8000e26:	f7ff fe65 	bl	8000af4 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000e2a:	f7ff fe83 	bl	8000b34 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000e2e:	f7ff feb5 	bl	8000b9c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000e32:	f7ff fecd 	bl	8000bd0 <MX_ADC1_Init>
  MX_LTDC_Init();
 8000e36:	f7ff ff17 	bl	8000c68 <MX_LTDC_Init>
  apInit();
 8000e3a:	f7ff fbb1 	bl	80005a0 <apInit>
  apMain(); // 안에 while문이 있음.
 8000e3e:	f7ff fbb5 	bl	80005ac <apMain>
  while (1)
 8000e42:	e7fe      	b.n	8000e42 <main+0x3e>

08000e44 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e48:	b086      	sub	sp, #24
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	9301      	str	r3, [sp, #4]
 8000e4e:	9302      	str	r3, [sp, #8]
 8000e50:	9303      	str	r3, [sp, #12]
 8000e52:	9304      	str	r3, [sp, #16]
 8000e54:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 8000e56:	4b2d      	ldr	r3, [pc, #180]	@ (8000f0c <HAL_FMC_MspInit+0xc8>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	b113      	cbz	r3, 8000e62 <HAL_FMC_MspInit+0x1e>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000e5c:	b006      	add	sp, #24
 8000e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  FMC_Initialized = 1;
 8000e62:	f04f 0801 	mov.w	r8, #1
 8000e66:	4b29      	ldr	r3, [pc, #164]	@ (8000f0c <HAL_FMC_MspInit+0xc8>)
 8000e68:	f8c3 8000 	str.w	r8, [r3]
  __HAL_RCC_FMC_CLK_ENABLE();
 8000e6c:	2600      	movs	r6, #0
 8000e6e:	9600      	str	r6, [sp, #0]
 8000e70:	4b27      	ldr	r3, [pc, #156]	@ (8000f10 <HAL_FMC_MspInit+0xcc>)
 8000e72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e74:	ea42 0208 	orr.w	r2, r2, r8
 8000e78:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e7c:	ea03 0308 	and.w	r3, r3, r8
 8000e80:	9300      	str	r3, [sp, #0]
 8000e82:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000e84:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000e88:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2702      	movs	r7, #2
 8000e8c:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8e:	2503      	movs	r5, #3
 8000e90:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e92:	240c      	movs	r4, #12
 8000e94:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e96:	a901      	add	r1, sp, #4
 8000e98:	481e      	ldr	r0, [pc, #120]	@ (8000f14 <HAL_FMC_MspInit+0xd0>)
 8000e9a:	f000 fffb 	bl	8001e94 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000e9e:	f8cd 8004 	str.w	r8, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ea8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000eaa:	a901      	add	r1, sp, #4
 8000eac:	481a      	ldr	r0, [pc, #104]	@ (8000f18 <HAL_FMC_MspInit+0xd4>)
 8000eae:	f000 fff1 	bl	8001e94 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000eb2:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000eb6:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebc:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ebe:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ec0:	a901      	add	r1, sp, #4
 8000ec2:	4816      	ldr	r0, [pc, #88]	@ (8000f1c <HAL_FMC_MspInit+0xd8>)
 8000ec4:	f000 ffe6 	bl	8001e94 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000ec8:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000ecc:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed2:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ed4:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ed6:	a901      	add	r1, sp, #4
 8000ed8:	4811      	ldr	r0, [pc, #68]	@ (8000f20 <HAL_FMC_MspInit+0xdc>)
 8000eda:	f000 ffdb 	bl	8001e94 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000ede:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000ee2:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee8:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000eea:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eec:	a901      	add	r1, sp, #4
 8000eee:	480d      	ldr	r0, [pc, #52]	@ (8000f24 <HAL_FMC_MspInit+0xe0>)
 8000ef0:	f000 ffd0 	bl	8001e94 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000ef4:	2360      	movs	r3, #96	@ 0x60
 8000ef6:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef8:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efc:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000efe:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f00:	a901      	add	r1, sp, #4
 8000f02:	4809      	ldr	r0, [pc, #36]	@ (8000f28 <HAL_FMC_MspInit+0xe4>)
 8000f04:	f000 ffc6 	bl	8001e94 <HAL_GPIO_Init>
 8000f08:	e7a8      	b.n	8000e5c <HAL_FMC_MspInit+0x18>
 8000f0a:	bf00      	nop
 8000f0c:	20000550 	.word	0x20000550
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40021400 	.word	0x40021400
 8000f18:	40020800 	.word	0x40020800
 8000f1c:	40021800 	.word	0x40021800
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40020c00 	.word	0x40020c00
 8000f28:	40020400 	.word	0x40020400

08000f2c <HAL_MspInit>:
{
 8000f2c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2e:	2100      	movs	r1, #0
 8000f30:	9100      	str	r1, [sp, #0]
 8000f32:	4b0b      	ldr	r3, [pc, #44]	@ (8000f60 <HAL_MspInit+0x34>)
 8000f34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000f36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000f3a:	645a      	str	r2, [r3, #68]	@ 0x44
 8000f3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000f3e:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000f42:	9200      	str	r2, [sp, #0]
 8000f44:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f46:	9101      	str	r1, [sp, #4]
 8000f48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f4a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000f4e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f56:	9301      	str	r3, [sp, #4]
 8000f58:	9b01      	ldr	r3, [sp, #4]
}
 8000f5a:	b002      	add	sp, #8
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	40023800 	.word	0x40023800

08000f64 <HAL_ADC_MspInit>:
{
 8000f64:	b530      	push	{r4, r5, lr}
 8000f66:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	2300      	movs	r3, #0
 8000f6a:	9303      	str	r3, [sp, #12]
 8000f6c:	9304      	str	r3, [sp, #16]
 8000f6e:	9305      	str	r3, [sp, #20]
 8000f70:	9306      	str	r3, [sp, #24]
 8000f72:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 8000f74:	6802      	ldr	r2, [r0, #0]
 8000f76:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000f7a:	f503 3390 	add.w	r3, r3, #73728	@ 0x12000
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d001      	beq.n	8000f86 <HAL_ADC_MspInit+0x22>
}
 8000f82:	b009      	add	sp, #36	@ 0x24
 8000f84:	bd30      	pop	{r4, r5, pc}
 8000f86:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f88:	2500      	movs	r5, #0
 8000f8a:	9501      	str	r5, [sp, #4]
 8000f8c:	f503 338c 	add.w	r3, r3, #71680	@ 0x11800
 8000f90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000f92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000f96:	645a      	str	r2, [r3, #68]	@ 0x44
 8000f98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000f9a:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8000f9e:	9201      	str	r2, [sp, #4]
 8000fa0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	9502      	str	r5, [sp, #8]
 8000fa4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000fa6:	f042 0201 	orr.w	r2, r2, #1
 8000faa:	631a      	str	r2, [r3, #48]	@ 0x30
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	9302      	str	r3, [sp, #8]
 8000fb4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fb6:	2320      	movs	r3, #32
 8000fb8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	a903      	add	r1, sp, #12
 8000fc0:	4810      	ldr	r0, [pc, #64]	@ (8001004 <HAL_ADC_MspInit+0xa0>)
 8000fc2:	f000 ff67 	bl	8001e94 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8000fc6:	4810      	ldr	r0, [pc, #64]	@ (8001008 <HAL_ADC_MspInit+0xa4>)
 8000fc8:	4b10      	ldr	r3, [pc, #64]	@ (800100c <HAL_ADC_MspInit+0xa8>)
 8000fca:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000fcc:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fce:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fd0:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fd6:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fd8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000fdc:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fde:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fe2:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fe4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fe8:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fea:	6205      	str	r5, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fec:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fee:	f000 feb5 	bl	8001d5c <HAL_DMA_Init>
 8000ff2:	b918      	cbnz	r0, 8000ffc <HAL_ADC_MspInit+0x98>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ff4:	4b04      	ldr	r3, [pc, #16]	@ (8001008 <HAL_ADC_MspInit+0xa4>)
 8000ff6:	63a3      	str	r3, [r4, #56]	@ 0x38
 8000ff8:	639c      	str	r4, [r3, #56]	@ 0x38
}
 8000ffa:	e7c2      	b.n	8000f82 <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 8000ffc:	f7ff fd08 	bl	8000a10 <Error_Handler>
 8001000:	e7f8      	b.n	8000ff4 <HAL_ADC_MspInit+0x90>
 8001002:	bf00      	nop
 8001004:	40020000 	.word	0x40020000
 8001008:	200004a8 	.word	0x200004a8
 800100c:	40026410 	.word	0x40026410

08001010 <HAL_CRC_MspInit>:
  if(hcrc->Instance==CRC)
 8001010:	6802      	ldr	r2, [r0, #0]
 8001012:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <HAL_CRC_MspInit+0x28>)
 8001014:	429a      	cmp	r2, r3
 8001016:	d000      	beq.n	800101a <HAL_CRC_MspInit+0xa>
 8001018:	4770      	bx	lr
{
 800101a:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 800101c:	2300      	movs	r3, #0
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	4b06      	ldr	r3, [pc, #24]	@ (800103c <HAL_CRC_MspInit+0x2c>)
 8001022:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001024:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001028:	631a      	str	r2, [r3, #48]	@ 0x30
 800102a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001030:	9301      	str	r3, [sp, #4]
 8001032:	9b01      	ldr	r3, [sp, #4]
}
 8001034:	b002      	add	sp, #8
 8001036:	4770      	bx	lr
 8001038:	40023000 	.word	0x40023000
 800103c:	40023800 	.word	0x40023800

08001040 <HAL_I2C_MspInit>:
{
 8001040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001044:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001046:	2300      	movs	r3, #0
 8001048:	9303      	str	r3, [sp, #12]
 800104a:	9304      	str	r3, [sp, #16]
 800104c:	9305      	str	r3, [sp, #20]
 800104e:	9306      	str	r3, [sp, #24]
 8001050:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C3)
 8001052:	6802      	ldr	r2, [r0, #0]
 8001054:	4b20      	ldr	r3, [pc, #128]	@ (80010d8 <HAL_I2C_MspInit+0x98>)
 8001056:	429a      	cmp	r2, r3
 8001058:	d002      	beq.n	8001060 <HAL_I2C_MspInit+0x20>
}
 800105a:	b008      	add	sp, #32
 800105c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001060:	2500      	movs	r5, #0
 8001062:	9500      	str	r5, [sp, #0]
 8001064:	4c1d      	ldr	r4, [pc, #116]	@ (80010dc <HAL_I2C_MspInit+0x9c>)
 8001066:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	6323      	str	r3, [r4, #48]	@ 0x30
 800106e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001070:	f003 0304 	and.w	r3, r3, #4
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001078:	9501      	str	r5, [sp, #4]
 800107a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6323      	str	r3, [r4, #48]	@ 0x30
 8001082:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	9301      	str	r3, [sp, #4]
 800108a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800108c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001090:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001092:	f04f 0812 	mov.w	r8, #18
 8001096:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800109a:	2701      	movs	r7, #1
 800109c:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800109e:	2604      	movs	r6, #4
 80010a0:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80010a2:	a903      	add	r1, sp, #12
 80010a4:	480e      	ldr	r0, [pc, #56]	@ (80010e0 <HAL_I2C_MspInit+0xa0>)
 80010a6:	f000 fef5 	bl	8001e94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80010aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010ae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010b0:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b4:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80010b8:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80010ba:	a903      	add	r1, sp, #12
 80010bc:	4809      	ldr	r0, [pc, #36]	@ (80010e4 <HAL_I2C_MspInit+0xa4>)
 80010be:	f000 fee9 	bl	8001e94 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80010c2:	9502      	str	r5, [sp, #8]
 80010c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80010c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80010ca:	6423      	str	r3, [r4, #64]	@ 0x40
 80010cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80010ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80010d2:	9302      	str	r3, [sp, #8]
 80010d4:	9b02      	ldr	r3, [sp, #8]
}
 80010d6:	e7c0      	b.n	800105a <HAL_I2C_MspInit+0x1a>
 80010d8:	40005c00 	.word	0x40005c00
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40020800 	.word	0x40020800
 80010e4:	40020000 	.word	0x40020000

080010e8 <HAL_LTDC_MspInit>:
{
 80010e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010ec:	b08c      	sub	sp, #48	@ 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ee:	2300      	movs	r3, #0
 80010f0:	9307      	str	r3, [sp, #28]
 80010f2:	9308      	str	r3, [sp, #32]
 80010f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80010f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80010f8:	930b      	str	r3, [sp, #44]	@ 0x2c
  if(hltdc->Instance==LTDC)
 80010fa:	6802      	ldr	r2, [r0, #0]
 80010fc:	4b6a      	ldr	r3, [pc, #424]	@ (80012a8 <HAL_LTDC_MspInit+0x1c0>)
 80010fe:	429a      	cmp	r2, r3
 8001100:	d002      	beq.n	8001108 <HAL_LTDC_MspInit+0x20>
}
 8001102:	b00c      	add	sp, #48	@ 0x30
 8001104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001108:	2400      	movs	r4, #0
 800110a:	9400      	str	r4, [sp, #0]
 800110c:	f503 4350 	add.w	r3, r3, #53248	@ 0xd000
 8001110:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001112:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001116:	645a      	str	r2, [r3, #68]	@ 0x44
 8001118:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800111a:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 800111e:	9200      	str	r2, [sp, #0]
 8001120:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001122:	9401      	str	r4, [sp, #4]
 8001124:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001126:	f042 0220 	orr.w	r2, r2, #32
 800112a:	631a      	str	r2, [r3, #48]	@ 0x30
 800112c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800112e:	f002 0220 	and.w	r2, r2, #32
 8001132:	9201      	str	r2, [sp, #4]
 8001134:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	9402      	str	r4, [sp, #8]
 8001138:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800113a:	f042 0201 	orr.w	r2, r2, #1
 800113e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001140:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001142:	f002 0201 	and.w	r2, r2, #1
 8001146:	9202      	str	r2, [sp, #8]
 8001148:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114a:	9403      	str	r4, [sp, #12]
 800114c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800114e:	f042 0202 	orr.w	r2, r2, #2
 8001152:	631a      	str	r2, [r3, #48]	@ 0x30
 8001154:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001156:	f002 0202 	and.w	r2, r2, #2
 800115a:	9203      	str	r2, [sp, #12]
 800115c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800115e:	9404      	str	r4, [sp, #16]
 8001160:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001162:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001166:	631a      	str	r2, [r3, #48]	@ 0x30
 8001168:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800116a:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800116e:	9204      	str	r2, [sp, #16]
 8001170:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001172:	9405      	str	r4, [sp, #20]
 8001174:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001176:	f042 0204 	orr.w	r2, r2, #4
 800117a:	631a      	str	r2, [r3, #48]	@ 0x30
 800117c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800117e:	f002 0204 	and.w	r2, r2, #4
 8001182:	9205      	str	r2, [sp, #20]
 8001184:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001186:	9406      	str	r4, [sp, #24]
 8001188:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800118a:	f042 0208 	orr.w	r2, r2, #8
 800118e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	f003 0308 	and.w	r3, r3, #8
 8001196:	9306      	str	r3, [sp, #24]
 8001198:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800119a:	f44f 6a80 	mov.w	sl, #1024	@ 0x400
 800119e:	f8cd a01c 	str.w	sl, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2502      	movs	r5, #2
 80011a4:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a6:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011a8:	260e      	movs	r6, #14
 80011aa:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80011ac:	a907      	add	r1, sp, #28
 80011ae:	483f      	ldr	r0, [pc, #252]	@ (80012ac <HAL_LTDC_MspInit+0x1c4>)
 80011b0:	f000 fe70 	bl	8001e94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80011b4:	f641 0358 	movw	r3, #6232	@ 0x1858
 80011b8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011be:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011c0:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c2:	a907      	add	r1, sp, #28
 80011c4:	483a      	ldr	r0, [pc, #232]	@ (80012b0 <HAL_LTDC_MspInit+0x1c8>)
 80011c6:	f000 fe65 	bl	8001e94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80011ca:	2303      	movs	r3, #3
 80011cc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d2:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80011d4:	f04f 0809 	mov.w	r8, #9
 80011d8:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011dc:	4f35      	ldr	r7, [pc, #212]	@ (80012b4 <HAL_LTDC_MspInit+0x1cc>)
 80011de:	a907      	add	r1, sp, #28
 80011e0:	4638      	mov	r0, r7
 80011e2:	f000 fe57 	bl	8001e94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80011e6:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80011ea:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011f0:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011f2:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f4:	a907      	add	r1, sp, #28
 80011f6:	4638      	mov	r0, r7
 80011f8:	f000 fe4c 	bl	8001e94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80011fc:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001200:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001206:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001208:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800120a:	f507 57a0 	add.w	r7, r7, #5120	@ 0x1400
 800120e:	a907      	add	r1, sp, #28
 8001210:	4638      	mov	r0, r7
 8001212:	f000 fe3f 	bl	8001e94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin;
 8001216:	23c0      	movs	r3, #192	@ 0xc0
 8001218:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800121e:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001220:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001222:	f8df 9094 	ldr.w	r9, [pc, #148]	@ 80012b8 <HAL_LTDC_MspInit+0x1d0>
 8001226:	a907      	add	r1, sp, #28
 8001228:	4648      	mov	r0, r9
 800122a:	f000 fe33 	bl	8001e94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = R2_Pin;
 800122e:	f8cd a01c 	str.w	sl, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	940a      	str	r4, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001238:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(R2_GPIO_Port, &GPIO_InitStruct);
 800123a:	a907      	add	r1, sp, #28
 800123c:	4648      	mov	r0, r9
 800123e:	f000 fe29 	bl	8001e94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = G7_Pin;
 8001242:	2308      	movs	r3, #8
 8001244:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001246:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800124a:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800124c:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(G7_GPIO_Port, &GPIO_InitStruct);
 800124e:	f509 6980 	add.w	r9, r9, #1024	@ 0x400
 8001252:	a907      	add	r1, sp, #28
 8001254:	4648      	mov	r0, r9
 8001256:	f000 fe1d 	bl	8001e94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = B2_Pin;
 800125a:	2340      	movs	r3, #64	@ 0x40
 800125c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	940a      	str	r4, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001264:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8001266:	a907      	add	r1, sp, #28
 8001268:	4648      	mov	r0, r9
 800126a:	f000 fe13 	bl	8001e94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800126e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001272:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001278:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800127a:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800127e:	a907      	add	r1, sp, #28
 8001280:	4638      	mov	r0, r7
 8001282:	f000 fe07 	bl	8001e94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001286:	4622      	mov	r2, r4
 8001288:	4621      	mov	r1, r4
 800128a:	2058      	movs	r0, #88	@ 0x58
 800128c:	f000 fcc2 	bl	8001c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001290:	2058      	movs	r0, #88	@ 0x58
 8001292:	f000 fccf 	bl	8001c34 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 8001296:	4622      	mov	r2, r4
 8001298:	4621      	mov	r1, r4
 800129a:	2059      	movs	r0, #89	@ 0x59
 800129c:	f000 fcba 	bl	8001c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 80012a0:	2059      	movs	r0, #89	@ 0x59
 80012a2:	f000 fcc7 	bl	8001c34 <HAL_NVIC_EnableIRQ>
}
 80012a6:	e72c      	b.n	8001102 <HAL_LTDC_MspInit+0x1a>
 80012a8:	40016800 	.word	0x40016800
 80012ac:	40021400 	.word	0x40021400
 80012b0:	40020000 	.word	0x40020000
 80012b4:	40020400 	.word	0x40020400
 80012b8:	40020800 	.word	0x40020800

080012bc <HAL_SPI_MspInit>:
{
 80012bc:	b500      	push	{lr}
 80012be:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	2300      	movs	r3, #0
 80012c2:	9303      	str	r3, [sp, #12]
 80012c4:	9304      	str	r3, [sp, #16]
 80012c6:	9305      	str	r3, [sp, #20]
 80012c8:	9306      	str	r3, [sp, #24]
 80012ca:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI5)
 80012cc:	6802      	ldr	r2, [r0, #0]
 80012ce:	4b14      	ldr	r3, [pc, #80]	@ (8001320 <HAL_SPI_MspInit+0x64>)
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d002      	beq.n	80012da <HAL_SPI_MspInit+0x1e>
}
 80012d4:	b009      	add	sp, #36	@ 0x24
 80012d6:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI5_CLK_ENABLE();
 80012da:	2100      	movs	r1, #0
 80012dc:	9101      	str	r1, [sp, #4]
 80012de:	f503 4368 	add.w	r3, r3, #59392	@ 0xe800
 80012e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80012e4:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80012e8:	645a      	str	r2, [r3, #68]	@ 0x44
 80012ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80012ec:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80012f0:	9201      	str	r2, [sp, #4]
 80012f2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012f4:	9102      	str	r1, [sp, #8]
 80012f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012f8:	f042 0220 	orr.w	r2, r2, #32
 80012fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80012fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001300:	f003 0320 	and.w	r3, r3, #32
 8001304:	9302      	str	r3, [sp, #8]
 8001306:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001308:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800130c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001312:	2305      	movs	r3, #5
 8001314:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001316:	a903      	add	r1, sp, #12
 8001318:	4802      	ldr	r0, [pc, #8]	@ (8001324 <HAL_SPI_MspInit+0x68>)
 800131a:	f000 fdbb 	bl	8001e94 <HAL_GPIO_Init>
}
 800131e:	e7d9      	b.n	80012d4 <HAL_SPI_MspInit+0x18>
 8001320:	40015000 	.word	0x40015000
 8001324:	40021400 	.word	0x40021400

08001328 <HAL_TIM_Base_MspInit>:
  if(htim_base->Instance==TIM1)
 8001328:	6802      	ldr	r2, [r0, #0]
 800132a:	4b09      	ldr	r3, [pc, #36]	@ (8001350 <HAL_TIM_Base_MspInit+0x28>)
 800132c:	429a      	cmp	r2, r3
 800132e:	d000      	beq.n	8001332 <HAL_TIM_Base_MspInit+0xa>
 8001330:	4770      	bx	lr
{
 8001332:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001334:	2300      	movs	r3, #0
 8001336:	9301      	str	r3, [sp, #4]
 8001338:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <HAL_TIM_Base_MspInit+0x2c>)
 800133a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800133c:	f042 0201 	orr.w	r2, r2, #1
 8001340:	645a      	str	r2, [r3, #68]	@ 0x44
 8001342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	9301      	str	r3, [sp, #4]
 800134a:	9b01      	ldr	r3, [sp, #4]
}
 800134c:	b002      	add	sp, #8
 800134e:	4770      	bx	lr
 8001350:	40010000 	.word	0x40010000
 8001354:	40023800 	.word	0x40023800

08001358 <HAL_UART_MspInit>:
{
 8001358:	b530      	push	{r4, r5, lr}
 800135a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	2300      	movs	r3, #0
 800135e:	9303      	str	r3, [sp, #12]
 8001360:	9304      	str	r3, [sp, #16]
 8001362:	9305      	str	r3, [sp, #20]
 8001364:	9306      	str	r3, [sp, #24]
 8001366:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8001368:	6802      	ldr	r2, [r0, #0]
 800136a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800136e:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8001372:	429a      	cmp	r2, r3
 8001374:	d001      	beq.n	800137a <HAL_UART_MspInit+0x22>
}
 8001376:	b009      	add	sp, #36	@ 0x24
 8001378:	bd30      	pop	{r4, r5, pc}
 800137a:	4604      	mov	r4, r0
    __HAL_RCC_USART1_CLK_ENABLE();
 800137c:	2500      	movs	r5, #0
 800137e:	9501      	str	r5, [sp, #4]
 8001380:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8001384:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001386:	f042 0210 	orr.w	r2, r2, #16
 800138a:	645a      	str	r2, [r3, #68]	@ 0x44
 800138c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800138e:	f002 0210 	and.w	r2, r2, #16
 8001392:	9201      	str	r2, [sp, #4]
 8001394:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001396:	9502      	str	r5, [sp, #8]
 8001398:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800139a:	f042 0201 	orr.w	r2, r2, #1
 800139e:	631a      	str	r2, [r3, #48]	@ 0x30
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	9302      	str	r3, [sp, #8]
 80013a8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80013aa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80013ae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b0:	2302      	movs	r3, #2
 80013b2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013b8:	2307      	movs	r3, #7
 80013ba:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013bc:	a903      	add	r1, sp, #12
 80013be:	480f      	ldr	r0, [pc, #60]	@ (80013fc <HAL_UART_MspInit+0xa4>)
 80013c0:	f000 fd68 	bl	8001e94 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80013c4:	480e      	ldr	r0, [pc, #56]	@ (8001400 <HAL_UART_MspInit+0xa8>)
 80013c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001404 <HAL_UART_MspInit+0xac>)
 80013c8:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80013ca:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80013ce:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013d0:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013d2:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013d8:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013da:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013dc:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80013de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013e2:	61c3      	str	r3, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013e4:	6205      	str	r5, [r0, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013e6:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80013e8:	f000 fcb8 	bl	8001d5c <HAL_DMA_Init>
 80013ec:	b918      	cbnz	r0, 80013f6 <HAL_UART_MspInit+0x9e>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80013ee:	4b04      	ldr	r3, [pc, #16]	@ (8001400 <HAL_UART_MspInit+0xa8>)
 80013f0:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80013f2:	639c      	str	r4, [r3, #56]	@ 0x38
}
 80013f4:	e7bf      	b.n	8001376 <HAL_UART_MspInit+0x1e>
      Error_Handler();
 80013f6:	f7ff fb0b 	bl	8000a10 <Error_Handler>
 80013fa:	e7f8      	b.n	80013ee <HAL_UART_MspInit+0x96>
 80013fc:	40020000 	.word	0x40020000
 8001400:	2000025c 	.word	0x2000025c
 8001404:	40026440 	.word	0x40026440

08001408 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001408:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800140a:	f7ff fd1b 	bl	8000e44 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800140e:	bd08      	pop	{r3, pc}

08001410 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001410:	b530      	push	{r4, r5, lr}
 8001412:	b089      	sub	sp, #36	@ 0x24
 8001414:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	4b21      	ldr	r3, [pc, #132]	@ (80014a0 <HAL_InitTick+0x90>)
 800141c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800141e:	f042 0210 	orr.w	r2, r2, #16
 8001422:	641a      	str	r2, [r3, #64]	@ 0x40
 8001424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001426:	f003 0310 	and.w	r3, r3, #16
 800142a:	9301      	str	r3, [sp, #4]
 800142c:	9b01      	ldr	r3, [sp, #4]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800142e:	a902      	add	r1, sp, #8
 8001430:	a803      	add	r0, sp, #12
 8001432:	f001 f97f 	bl	8002734 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001436:	9b06      	ldr	r3, [sp, #24]
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001438:	b9cb      	cbnz	r3, 800146e <HAL_InitTick+0x5e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800143a:	f001 f95b 	bl	80026f4 <HAL_RCC_GetPCLK1Freq>
 800143e:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001440:	4a18      	ldr	r2, [pc, #96]	@ (80014a4 <HAL_InitTick+0x94>)
 8001442:	fba2 2303 	umull	r2, r3, r2, r3
 8001446:	0c9b      	lsrs	r3, r3, #18
 8001448:	3b01      	subs	r3, #1

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800144a:	4817      	ldr	r0, [pc, #92]	@ (80014a8 <HAL_InitTick+0x98>)
 800144c:	4a17      	ldr	r2, [pc, #92]	@ (80014ac <HAL_InitTick+0x9c>)
 800144e:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001450:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001454:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001456:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145c:	6083      	str	r3, [r0, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145e:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001460:	f001 fb98 	bl	8002b94 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8001464:	4605      	mov	r5, r0
 8001466:	b130      	cbz	r0, 8001476 <HAL_InitTick+0x66>
    }
  }

 /* Return function status */
  return status;
}
 8001468:	4628      	mov	r0, r5
 800146a:	b009      	add	sp, #36	@ 0x24
 800146c:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800146e:	f001 f941 	bl	80026f4 <HAL_RCC_GetPCLK1Freq>
 8001472:	0043      	lsls	r3, r0, #1
 8001474:	e7e4      	b.n	8001440 <HAL_InitTick+0x30>
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001476:	480c      	ldr	r0, [pc, #48]	@ (80014a8 <HAL_InitTick+0x98>)
 8001478:	f001 fa28 	bl	80028cc <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800147c:	4605      	mov	r5, r0
 800147e:	2800      	cmp	r0, #0
 8001480:	d1f2      	bne.n	8001468 <HAL_InitTick+0x58>
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001482:	2036      	movs	r0, #54	@ 0x36
 8001484:	f000 fbd6 	bl	8001c34 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001488:	2c0f      	cmp	r4, #15
 800148a:	d901      	bls.n	8001490 <HAL_InitTick+0x80>
        status = HAL_ERROR;
 800148c:	2501      	movs	r5, #1
 800148e:	e7eb      	b.n	8001468 <HAL_InitTick+0x58>
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001490:	2200      	movs	r2, #0
 8001492:	4621      	mov	r1, r4
 8001494:	2036      	movs	r0, #54	@ 0x36
 8001496:	f000 fbbd 	bl	8001c14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800149a:	4b05      	ldr	r3, [pc, #20]	@ (80014b0 <HAL_InitTick+0xa0>)
 800149c:	601c      	str	r4, [r3, #0]
 800149e:	e7e3      	b.n	8001468 <HAL_InitTick+0x58>
 80014a0:	40023800 	.word	0x40023800
 80014a4:	431bde83 	.word	0x431bde83
 80014a8:	20000554 	.word	0x20000554
 80014ac:	40001000 	.word	0x40001000
 80014b0:	20000008 	.word	0x20000008

080014b4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014b4:	e7fe      	b.n	80014b4 <NMI_Handler>

080014b6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b6:	e7fe      	b.n	80014b6 <HardFault_Handler>

080014b8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <MemManage_Handler>

080014ba <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <BusFault_Handler>

080014bc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014bc:	e7fe      	b.n	80014bc <UsageFault_Handler>

080014be <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014be:	4770      	bx	lr

080014c0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c0:	4770      	bx	lr

080014c2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c2:	4770      	bx	lr

080014c4 <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c4:	4770      	bx	lr
	...

080014c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014ca:	4802      	ldr	r0, [pc, #8]	@ (80014d4 <TIM6_DAC_IRQHandler+0xc>)
 80014cc:	f001 fa46 	bl	800295c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014d0:	bd08      	pop	{r3, pc}
 80014d2:	bf00      	nop
 80014d4:	20000554 	.word	0x20000554

080014d8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80014d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80014da:	4802      	ldr	r0, [pc, #8]	@ (80014e4 <LTDC_IRQHandler+0xc>)
 80014dc:	f001 f863 	bl	80025a6 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80014e0:	bd08      	pop	{r3, pc}
 80014e2:	bf00      	nop
 80014e4:	200003a4 	.word	0x200003a4

080014e8 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC global error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 80014e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80014ea:	4802      	ldr	r0, [pc, #8]	@ (80014f4 <LTDC_ER_IRQHandler+0xc>)
 80014ec:	f001 f85b 	bl	80025a6 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 80014f0:	bd08      	pop	{r3, pc}
 80014f2:	bf00      	nop
 80014f4:	200003a4 	.word	0x200003a4

080014f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f8:	b510      	push	{r4, lr}
 80014fa:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001530 <_sbrk+0x38>)
 80014fe:	490d      	ldr	r1, [pc, #52]	@ (8001534 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001500:	480d      	ldr	r0, [pc, #52]	@ (8001538 <_sbrk+0x40>)
 8001502:	6800      	ldr	r0, [r0, #0]
 8001504:	b140      	cbz	r0, 8001518 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001506:	480c      	ldr	r0, [pc, #48]	@ (8001538 <_sbrk+0x40>)
 8001508:	6800      	ldr	r0, [r0, #0]
 800150a:	4403      	add	r3, r0
 800150c:	1a52      	subs	r2, r2, r1
 800150e:	4293      	cmp	r3, r2
 8001510:	d806      	bhi.n	8001520 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001512:	4a09      	ldr	r2, [pc, #36]	@ (8001538 <_sbrk+0x40>)
 8001514:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001516:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001518:	4807      	ldr	r0, [pc, #28]	@ (8001538 <_sbrk+0x40>)
 800151a:	4c08      	ldr	r4, [pc, #32]	@ (800153c <_sbrk+0x44>)
 800151c:	6004      	str	r4, [r0, #0]
 800151e:	e7f2      	b.n	8001506 <_sbrk+0xe>
    errno = ENOMEM;
 8001520:	f002 f846 	bl	80035b0 <__errno>
 8001524:	230c      	movs	r3, #12
 8001526:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001528:	f04f 30ff 	mov.w	r0, #4294967295
 800152c:	e7f3      	b.n	8001516 <_sbrk+0x1e>
 800152e:	bf00      	nop
 8001530:	20030000 	.word	0x20030000
 8001534:	00000400 	.word	0x00000400
 8001538:	2000059c 	.word	0x2000059c
 800153c:	200006f0 	.word	0x200006f0

08001540 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001540:	4a03      	ldr	r2, [pc, #12]	@ (8001550 <SystemInit+0x10>)
 8001542:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001546:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800154a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800154e:	4770      	bx	lr
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001554:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800158c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001558:	f7ff fff2 	bl	8001540 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800155c:	480c      	ldr	r0, [pc, #48]	@ (8001590 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800155e:	490d      	ldr	r1, [pc, #52]	@ (8001594 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001560:	4a0d      	ldr	r2, [pc, #52]	@ (8001598 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001564:	e002      	b.n	800156c <LoopCopyDataInit>

08001566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800156a:	3304      	adds	r3, #4

0800156c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800156c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800156e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001570:	d3f9      	bcc.n	8001566 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001572:	4a0a      	ldr	r2, [pc, #40]	@ (800159c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001574:	4c0a      	ldr	r4, [pc, #40]	@ (80015a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001578:	e001      	b.n	800157e <LoopFillZerobss>

0800157a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800157a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800157c:	3204      	adds	r2, #4

0800157e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800157e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001580:	d3fb      	bcc.n	800157a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001582:	f002 f81b 	bl	80035bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001586:	f7ff fc3d 	bl	8000e04 <main>
  bx  lr    
 800158a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800158c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001594:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001598:	08004030 	.word	0x08004030
  ldr r2, =_sbss
 800159c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80015a0:	200006ec 	.word	0x200006ec

080015a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015a4:	e7fe      	b.n	80015a4 <ADC_IRQHandler>
	...

080015a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a8:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015aa:	4b0b      	ldr	r3, [pc, #44]	@ (80015d8 <HAL_Init+0x30>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015b2:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80015ba:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80015c2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c4:	2003      	movs	r0, #3
 80015c6:	f000 fb13 	bl	8001bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ca:	200f      	movs	r0, #15
 80015cc:	f7ff ff20 	bl	8001410 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d0:	f7ff fcac 	bl	8000f2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80015d4:	2000      	movs	r0, #0
 80015d6:	bd08      	pop	{r3, pc}
 80015d8:	40023c00 	.word	0x40023c00

080015dc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80015dc:	4a03      	ldr	r2, [pc, #12]	@ (80015ec <HAL_IncTick+0x10>)
 80015de:	6811      	ldr	r1, [r2, #0]
 80015e0:	4b03      	ldr	r3, [pc, #12]	@ (80015f0 <HAL_IncTick+0x14>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	440b      	add	r3, r1
 80015e6:	6013      	str	r3, [r2, #0]
}
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	200005a0 	.word	0x200005a0
 80015f0:	20000004 	.word	0x20000004

080015f4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80015f4:	4b01      	ldr	r3, [pc, #4]	@ (80015fc <HAL_GetTick+0x8>)
 80015f6:	6818      	ldr	r0, [r3, #0]
}
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	200005a0 	.word	0x200005a0

08001600 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001600:	4b4a      	ldr	r3, [pc, #296]	@ (800172c <ADC_Init+0x12c>)
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8001608:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800160a:	685a      	ldr	r2, [r3, #4]
 800160c:	6841      	ldr	r1, [r0, #4]
 800160e:	430a      	orrs	r2, r1
 8001610:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001612:	6802      	ldr	r2, [r0, #0]
 8001614:	6853      	ldr	r3, [r2, #4]
 8001616:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800161a:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800161c:	6802      	ldr	r2, [r0, #0]
 800161e:	6853      	ldr	r3, [r2, #4]
 8001620:	6901      	ldr	r1, [r0, #16]
 8001622:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001626:	6053      	str	r3, [r2, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001628:	6802      	ldr	r2, [r0, #0]
 800162a:	6853      	ldr	r3, [r2, #4]
 800162c:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8001630:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001632:	6802      	ldr	r2, [r0, #0]
 8001634:	6853      	ldr	r3, [r2, #4]
 8001636:	6881      	ldr	r1, [r0, #8]
 8001638:	430b      	orrs	r3, r1
 800163a:	6053      	str	r3, [r2, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800163c:	6802      	ldr	r2, [r0, #0]
 800163e:	6893      	ldr	r3, [r2, #8]
 8001640:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001644:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001646:	6802      	ldr	r2, [r0, #0]
 8001648:	6893      	ldr	r3, [r2, #8]
 800164a:	68c1      	ldr	r1, [r0, #12]
 800164c:	430b      	orrs	r3, r1
 800164e:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001650:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8001652:	4b37      	ldr	r3, [pc, #220]	@ (8001730 <ADC_Init+0x130>)
 8001654:	429a      	cmp	r2, r3
 8001656:	d057      	beq.n	8001708 <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001658:	6802      	ldr	r2, [r0, #0]
 800165a:	6893      	ldr	r3, [r2, #8]
 800165c:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001660:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001662:	6802      	ldr	r2, [r0, #0]
 8001664:	6893      	ldr	r3, [r2, #8]
 8001666:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8001668:	430b      	orrs	r3, r1
 800166a:	6093      	str	r3, [r2, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800166c:	6802      	ldr	r2, [r0, #0]
 800166e:	6893      	ldr	r3, [r2, #8]
 8001670:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8001674:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001676:	6802      	ldr	r2, [r0, #0]
 8001678:	6893      	ldr	r3, [r2, #8]
 800167a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800167c:	430b      	orrs	r3, r1
 800167e:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001680:	6802      	ldr	r2, [r0, #0]
 8001682:	6893      	ldr	r3, [r2, #8]
 8001684:	f023 0302 	bic.w	r3, r3, #2
 8001688:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800168a:	6802      	ldr	r2, [r0, #0]
 800168c:	6893      	ldr	r3, [r2, #8]
 800168e:	7e01      	ldrb	r1, [r0, #24]
 8001690:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8001694:	6093      	str	r3, [r2, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001696:	f890 3020 	ldrb.w	r3, [r0, #32]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d03f      	beq.n	800171e <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800169e:	6802      	ldr	r2, [r0, #0]
 80016a0:	6853      	ldr	r3, [r2, #4]
 80016a2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016a6:	6053      	str	r3, [r2, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016a8:	6802      	ldr	r2, [r0, #0]
 80016aa:	6853      	ldr	r3, [r2, #4]
 80016ac:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80016b0:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016b2:	6801      	ldr	r1, [r0, #0]
 80016b4:	684b      	ldr	r3, [r1, #4]
 80016b6:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 80016b8:	3a01      	subs	r2, #1
 80016ba:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80016be:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016c0:	6802      	ldr	r2, [r0, #0]
 80016c2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80016c4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80016c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016ca:	6801      	ldr	r1, [r0, #0]
 80016cc:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 80016ce:	69c2      	ldr	r2, [r0, #28]
 80016d0:	3a01      	subs	r2, #1
 80016d2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80016d6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016d8:	6802      	ldr	r2, [r0, #0]
 80016da:	6893      	ldr	r3, [r2, #8]
 80016dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80016e0:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016e2:	6802      	ldr	r2, [r0, #0]
 80016e4:	6893      	ldr	r3, [r2, #8]
 80016e6:	f890 1030 	ldrb.w	r1, [r0, #48]	@ 0x30
 80016ea:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 80016ee:	6093      	str	r3, [r2, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016f0:	6802      	ldr	r2, [r0, #0]
 80016f2:	6893      	ldr	r3, [r2, #8]
 80016f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80016f8:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016fa:	6802      	ldr	r2, [r0, #0]
 80016fc:	6893      	ldr	r3, [r2, #8]
 80016fe:	6941      	ldr	r1, [r0, #20]
 8001700:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001704:	6093      	str	r3, [r2, #8]
}
 8001706:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001708:	6802      	ldr	r2, [r0, #0]
 800170a:	6893      	ldr	r3, [r2, #8]
 800170c:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001710:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001712:	6802      	ldr	r2, [r0, #0]
 8001714:	6893      	ldr	r3, [r2, #8]
 8001716:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800171a:	6093      	str	r3, [r2, #8]
 800171c:	e7b0      	b.n	8001680 <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800171e:	6802      	ldr	r2, [r0, #0]
 8001720:	6853      	ldr	r3, [r2, #4]
 8001722:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001726:	6053      	str	r3, [r2, #4]
 8001728:	e7ca      	b.n	80016c0 <ADC_Init+0xc0>
 800172a:	bf00      	nop
 800172c:	40012300 	.word	0x40012300
 8001730:	0f000001 	.word	0x0f000001

08001734 <HAL_ADC_Init>:
  if (hadc == NULL)
 8001734:	b338      	cbz	r0, 8001786 <HAL_ADC_Init+0x52>
{
 8001736:	b510      	push	{r4, lr}
 8001738:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 800173a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800173c:	b143      	cbz	r3, 8001750 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800173e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001740:	f013 0f10 	tst.w	r3, #16
 8001744:	d00b      	beq.n	800175e <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 8001746:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001748:	2300      	movs	r3, #0
 800174a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800174e:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8001750:	f7ff fc08 	bl	8000f64 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001754:	2300      	movs	r3, #0
 8001756:	6463      	str	r3, [r4, #68]	@ 0x44
    hadc->Lock = HAL_UNLOCKED;
 8001758:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 800175c:	e7ef      	b.n	800173e <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 800175e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001760:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001764:	f023 0302 	bic.w	r3, r3, #2
 8001768:	f043 0302 	orr.w	r3, r3, #2
 800176c:	6423      	str	r3, [r4, #64]	@ 0x40
    ADC_Init(hadc);
 800176e:	4620      	mov	r0, r4
 8001770:	f7ff ff46 	bl	8001600 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8001774:	2000      	movs	r0, #0
 8001776:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001778:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800177a:	f023 0303 	bic.w	r3, r3, #3
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	6423      	str	r3, [r4, #64]	@ 0x40
 8001784:	e7e0      	b.n	8001748 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8001786:	2001      	movs	r0, #1
}
 8001788:	4770      	bx	lr
	...

0800178c <HAL_ADC_Start_DMA>:
{
 800178c:	b510      	push	{r4, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 8001792:	2200      	movs	r2, #0
 8001794:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001796:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800179a:	2a01      	cmp	r2, #1
 800179c:	f000 80ae 	beq.w	80018fc <HAL_ADC_Start_DMA+0x170>
 80017a0:	4604      	mov	r4, r0
 80017a2:	2201      	movs	r2, #1
 80017a4:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017a8:	6802      	ldr	r2, [r0, #0]
 80017aa:	6890      	ldr	r0, [r2, #8]
 80017ac:	f010 0f01 	tst.w	r0, #1
 80017b0:	d113      	bne.n	80017da <HAL_ADC_Start_DMA+0x4e>
    __HAL_ADC_ENABLE(hadc);
 80017b2:	6890      	ldr	r0, [r2, #8]
 80017b4:	f040 0001 	orr.w	r0, r0, #1
 80017b8:	6090      	str	r0, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017ba:	4a53      	ldr	r2, [pc, #332]	@ (8001908 <HAL_ADC_Start_DMA+0x17c>)
 80017bc:	6810      	ldr	r0, [r2, #0]
 80017be:	4a53      	ldr	r2, [pc, #332]	@ (800190c <HAL_ADC_Start_DMA+0x180>)
 80017c0:	fba2 2000 	umull	r2, r0, r2, r0
 80017c4:	0c80      	lsrs	r0, r0, #18
 80017c6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80017ca:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 80017cc:	e002      	b.n	80017d4 <HAL_ADC_Start_DMA+0x48>
      counter--;
 80017ce:	9801      	ldr	r0, [sp, #4]
 80017d0:	3801      	subs	r0, #1
 80017d2:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 80017d4:	9801      	ldr	r0, [sp, #4]
 80017d6:	2800      	cmp	r0, #0
 80017d8:	d1f9      	bne.n	80017ce <HAL_ADC_Start_DMA+0x42>
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80017da:	6822      	ldr	r2, [r4, #0]
 80017dc:	6890      	ldr	r0, [r2, #8]
 80017de:	f410 7f80 	tst.w	r0, #256	@ 0x100
 80017e2:	d003      	beq.n	80017ec <HAL_ADC_Start_DMA+0x60>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80017e4:	6890      	ldr	r0, [r2, #8]
 80017e6:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 80017ea:	6090      	str	r0, [r2, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80017ec:	6822      	ldr	r2, [r4, #0]
 80017ee:	6890      	ldr	r0, [r2, #8]
 80017f0:	f010 0f01 	tst.w	r0, #1
 80017f4:	d077      	beq.n	80018e6 <HAL_ADC_Start_DMA+0x15a>
    ADC_STATE_CLR_SET(hadc->State,
 80017f6:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80017f8:	f420 60e0 	bic.w	r0, r0, #1792	@ 0x700
 80017fc:	f020 0001 	bic.w	r0, r0, #1
 8001800:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 8001804:	6420      	str	r0, [r4, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001806:	6852      	ldr	r2, [r2, #4]
 8001808:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800180c:	d005      	beq.n	800181a <HAL_ADC_Start_DMA+0x8e>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800180e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001810:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8001814:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001818:	6422      	str	r2, [r4, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800181a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800181c:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 8001820:	d036      	beq.n	8001890 <HAL_ADC_Start_DMA+0x104>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001822:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8001824:	f022 0206 	bic.w	r2, r2, #6
 8001828:	6462      	str	r2, [r4, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 800182a:	2200      	movs	r2, #0
 800182c:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001830:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001832:	4837      	ldr	r0, [pc, #220]	@ (8001910 <HAL_ADC_Start_DMA+0x184>)
 8001834:	63d0      	str	r0, [r2, #60]	@ 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001836:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001838:	4836      	ldr	r0, [pc, #216]	@ (8001914 <HAL_ADC_Start_DMA+0x188>)
 800183a:	6410      	str	r0, [r2, #64]	@ 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800183c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800183e:	4836      	ldr	r0, [pc, #216]	@ (8001918 <HAL_ADC_Start_DMA+0x18c>)
 8001840:	64d0      	str	r0, [r2, #76]	@ 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001842:	6822      	ldr	r2, [r4, #0]
 8001844:	f06f 0022 	mvn.w	r0, #34	@ 0x22
 8001848:	6010      	str	r0, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800184a:	6820      	ldr	r0, [r4, #0]
 800184c:	6842      	ldr	r2, [r0, #4]
 800184e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001852:	6042      	str	r2, [r0, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001854:	6820      	ldr	r0, [r4, #0]
 8001856:	6882      	ldr	r2, [r0, #8]
 8001858:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800185c:	6082      	str	r2, [r0, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800185e:	6820      	ldr	r0, [r4, #0]
 8001860:	460a      	mov	r2, r1
 8001862:	f100 014c 	add.w	r1, r0, #76	@ 0x4c
 8001866:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001868:	f000 fade 	bl	8001e28 <HAL_DMA_Start_IT>
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800186c:	4b2b      	ldr	r3, [pc, #172]	@ (800191c <HAL_ADC_Start_DMA+0x190>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f013 0f1f 	tst.w	r3, #31
 8001874:	d127      	bne.n	80018c6 <HAL_ADC_Start_DMA+0x13a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001876:	6823      	ldr	r3, [r4, #0]
 8001878:	4a29      	ldr	r2, [pc, #164]	@ (8001920 <HAL_ADC_Start_DMA+0x194>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d011      	beq.n	80018a2 <HAL_ADC_Start_DMA+0x116>
 800187e:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8001882:	4293      	cmp	r3, r2
 8001884:	d007      	beq.n	8001896 <HAL_ADC_Start_DMA+0x10a>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001886:	4a27      	ldr	r2, [pc, #156]	@ (8001924 <HAL_ADC_Start_DMA+0x198>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d014      	beq.n	80018b6 <HAL_ADC_Start_DMA+0x12a>
  return HAL_OK;
 800188c:	2000      	movs	r0, #0
 800188e:	e033      	b.n	80018f8 <HAL_ADC_Start_DMA+0x16c>
      ADC_CLEAR_ERRORCODE(hadc);
 8001890:	2200      	movs	r2, #0
 8001892:	6462      	str	r2, [r4, #68]	@ 0x44
 8001894:	e7c9      	b.n	800182a <HAL_ADC_Start_DMA+0x9e>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001896:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800189a:	6852      	ldr	r2, [r2, #4]
 800189c:	f012 0f1f 	tst.w	r2, #31
 80018a0:	d1f1      	bne.n	8001886 <HAL_ADC_Start_DMA+0xfa>
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80018a2:	689a      	ldr	r2, [r3, #8]
 80018a4:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 80018a8:	d12a      	bne.n	8001900 <HAL_ADC_Start_DMA+0x174>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80018b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80018b2:	2000      	movs	r0, #0
 80018b4:	e020      	b.n	80018f8 <HAL_ADC_Start_DMA+0x16c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80018b6:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 80018ba:	6852      	ldr	r2, [r2, #4]
 80018bc:	f012 0f10 	tst.w	r2, #16
 80018c0:	d0ef      	beq.n	80018a2 <HAL_ADC_Start_DMA+0x116>
  return HAL_OK;
 80018c2:	2000      	movs	r0, #0
 80018c4:	e018      	b.n	80018f8 <HAL_ADC_Start_DMA+0x16c>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018c6:	6823      	ldr	r3, [r4, #0]
 80018c8:	4a15      	ldr	r2, [pc, #84]	@ (8001920 <HAL_ADC_Start_DMA+0x194>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d001      	beq.n	80018d2 <HAL_ADC_Start_DMA+0x146>
  return HAL_OK;
 80018ce:	2000      	movs	r0, #0
 80018d0:	e012      	b.n	80018f8 <HAL_ADC_Start_DMA+0x16c>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 80018d8:	d114      	bne.n	8001904 <HAL_ADC_Start_DMA+0x178>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80018e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80018e2:	2000      	movs	r0, #0
 80018e4:	e008      	b.n	80018f8 <HAL_ADC_Start_DMA+0x16c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80018e8:	f043 0310 	orr.w	r3, r3, #16
 80018ec:	6423      	str	r3, [r4, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ee:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6463      	str	r3, [r4, #68]	@ 0x44
  return HAL_OK;
 80018f6:	2000      	movs	r0, #0
}
 80018f8:	b002      	add	sp, #8
 80018fa:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80018fc:	2002      	movs	r0, #2
 80018fe:	e7fb      	b.n	80018f8 <HAL_ADC_Start_DMA+0x16c>
  return HAL_OK;
 8001900:	2000      	movs	r0, #0
 8001902:	e7f9      	b.n	80018f8 <HAL_ADC_Start_DMA+0x16c>
 8001904:	2000      	movs	r0, #0
 8001906:	e7f7      	b.n	80018f8 <HAL_ADC_Start_DMA+0x16c>
 8001908:	20000000 	.word	0x20000000
 800190c:	431bde83 	.word	0x431bde83
 8001910:	0800194f 	.word	0x0800194f
 8001914:	0800192d 	.word	0x0800192d
 8001918:	08001939 	.word	0x08001939
 800191c:	40012300 	.word	0x40012300
 8001920:	40012000 	.word	0x40012000
 8001924:	40012200 	.word	0x40012200

08001928 <HAL_ADC_ConvCpltCallback>:
}
 8001928:	4770      	bx	lr

0800192a <HAL_ADC_ConvHalfCpltCallback>:
}
 800192a:	4770      	bx	lr

0800192c <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800192c:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800192e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8001930:	f7ff fffb 	bl	800192a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001934:	bd08      	pop	{r3, pc}

08001936 <HAL_ADC_ErrorCallback>:
}
 8001936:	4770      	bx	lr

08001938 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001938:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800193a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800193c:	2340      	movs	r3, #64	@ 0x40
 800193e:	6403      	str	r3, [r0, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001940:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001942:	f043 0304 	orr.w	r3, r3, #4
 8001946:	6443      	str	r3, [r0, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001948:	f7ff fff5 	bl	8001936 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800194c:	bd08      	pop	{r3, pc}

0800194e <ADC_DMAConvCplt>:
{
 800194e:	b508      	push	{r3, lr}
 8001950:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001952:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001954:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001956:	f012 0f50 	tst.w	r2, #80	@ 0x50
 800195a:	d125      	bne.n	80019a8 <ADC_DMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800195c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800195e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001962:	6403      	str	r3, [r0, #64]	@ 0x40
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001964:	6803      	ldr	r3, [r0, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 800196c:	d119      	bne.n	80019a2 <ADC_DMAConvCplt+0x54>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800196e:	7e02      	ldrb	r2, [r0, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001970:	b9ba      	cbnz	r2, 80019a2 <ADC_DMAConvCplt+0x54>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001974:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 8001978:	d003      	beq.n	8001982 <ADC_DMAConvCplt+0x34>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800197a:	689a      	ldr	r2, [r3, #8]
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800197c:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001980:	d10f      	bne.n	80019a2 <ADC_DMAConvCplt+0x54>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	f022 0220 	bic.w	r2, r2, #32
 8001988:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800198a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800198c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001990:	6403      	str	r3, [r0, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001992:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001994:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8001998:	d103      	bne.n	80019a2 <ADC_DMAConvCplt+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800199a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6403      	str	r3, [r0, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80019a2:	f7ff ffc1 	bl	8001928 <HAL_ADC_ConvCpltCallback>
}
 80019a6:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80019a8:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80019aa:	f012 0f10 	tst.w	r2, #16
 80019ae:	d104      	bne.n	80019ba <ADC_DMAConvCplt+0x6c>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80019b0:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 80019b2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80019b4:	4618      	mov	r0, r3
 80019b6:	4790      	blx	r2
}
 80019b8:	e7f5      	b.n	80019a6 <ADC_DMAConvCplt+0x58>
      HAL_ADC_ErrorCallback(hadc);
 80019ba:	f7ff ffbc 	bl	8001936 <HAL_ADC_ErrorCallback>
 80019be:	e7f2      	b.n	80019a6 <ADC_DMAConvCplt+0x58>

080019c0 <HAL_ADC_ConfigChannel>:
{
 80019c0:	b430      	push	{r4, r5}
 80019c2:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80019c4:	2200      	movs	r2, #0
 80019c6:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80019c8:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80019cc:	2a01      	cmp	r2, #1
 80019ce:	f000 80c0 	beq.w	8001b52 <HAL_ADC_ConfigChannel+0x192>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2201      	movs	r2, #1
 80019d6:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80019da:	680a      	ldr	r2, [r1, #0]
 80019dc:	2a09      	cmp	r2, #9
 80019de:	d940      	bls.n	8001a62 <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019e0:	6804      	ldr	r4, [r0, #0]
 80019e2:	68e0      	ldr	r0, [r4, #12]
 80019e4:	b292      	uxth	r2, r2
 80019e6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80019ea:	3a1e      	subs	r2, #30
 80019ec:	f04f 0c07 	mov.w	ip, #7
 80019f0:	fa0c f202 	lsl.w	r2, ip, r2
 80019f4:	ea20 0202 	bic.w	r2, r0, r2
 80019f8:	60e2      	str	r2, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019fa:	681c      	ldr	r4, [r3, #0]
 80019fc:	68e0      	ldr	r0, [r4, #12]
 80019fe:	880a      	ldrh	r2, [r1, #0]
 8001a00:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001a04:	3a1e      	subs	r2, #30
 8001a06:	688d      	ldr	r5, [r1, #8]
 8001a08:	fa05 f202 	lsl.w	r2, r5, r2
 8001a0c:	4302      	orrs	r2, r0
 8001a0e:	60e2      	str	r2, [r4, #12]
  if (sConfig->Rank < 7U)
 8001a10:	684a      	ldr	r2, [r1, #4]
 8001a12:	2a06      	cmp	r2, #6
 8001a14:	d83c      	bhi.n	8001a90 <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a16:	681c      	ldr	r4, [r3, #0]
 8001a18:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8001a1a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001a1e:	3a05      	subs	r2, #5
 8001a20:	f04f 0c1f 	mov.w	ip, #31
 8001a24:	fa0c f202 	lsl.w	r2, ip, r2
 8001a28:	ea20 0202 	bic.w	r2, r0, r2
 8001a2c:	6362      	str	r2, [r4, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a2e:	681c      	ldr	r4, [r3, #0]
 8001a30:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8001a32:	684a      	ldr	r2, [r1, #4]
 8001a34:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001a38:	3a05      	subs	r2, #5
 8001a3a:	f8b1 c000 	ldrh.w	ip, [r1]
 8001a3e:	fa0c f202 	lsl.w	r2, ip, r2
 8001a42:	4302      	orrs	r2, r0
 8001a44:	6362      	str	r2, [r4, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a46:	6818      	ldr	r0, [r3, #0]
 8001a48:	4a43      	ldr	r2, [pc, #268]	@ (8001b58 <HAL_ADC_ConfigChannel+0x198>)
 8001a4a:	4290      	cmp	r0, r2
 8001a4c:	d050      	beq.n	8001af0 <HAL_ADC_ConfigChannel+0x130>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a4e:	6818      	ldr	r0, [r3, #0]
 8001a50:	4a41      	ldr	r2, [pc, #260]	@ (8001b58 <HAL_ADC_ConfigChannel+0x198>)
 8001a52:	4290      	cmp	r0, r2
 8001a54:	d059      	beq.n	8001b0a <HAL_ADC_ConfigChannel+0x14a>
  __HAL_UNLOCK(hadc);
 8001a56:	2000      	movs	r0, #0
 8001a58:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 8001a5c:	b002      	add	sp, #8
 8001a5e:	bc30      	pop	{r4, r5}
 8001a60:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a62:	6804      	ldr	r4, [r0, #0]
 8001a64:	6920      	ldr	r0, [r4, #16]
 8001a66:	b292      	uxth	r2, r2
 8001a68:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001a6c:	f04f 0c07 	mov.w	ip, #7
 8001a70:	fa0c f202 	lsl.w	r2, ip, r2
 8001a74:	ea20 0202 	bic.w	r2, r0, r2
 8001a78:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a7a:	681c      	ldr	r4, [r3, #0]
 8001a7c:	6920      	ldr	r0, [r4, #16]
 8001a7e:	880a      	ldrh	r2, [r1, #0]
 8001a80:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001a84:	688d      	ldr	r5, [r1, #8]
 8001a86:	fa05 f202 	lsl.w	r2, r5, r2
 8001a8a:	4302      	orrs	r2, r0
 8001a8c:	6122      	str	r2, [r4, #16]
 8001a8e:	e7bf      	b.n	8001a10 <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 8001a90:	2a0c      	cmp	r2, #12
 8001a92:	d816      	bhi.n	8001ac2 <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a94:	681d      	ldr	r5, [r3, #0]
 8001a96:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8001a98:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001a9c:	3a23      	subs	r2, #35	@ 0x23
 8001a9e:	241f      	movs	r4, #31
 8001aa0:	fa04 f202 	lsl.w	r2, r4, r2
 8001aa4:	ea20 0202 	bic.w	r2, r0, r2
 8001aa8:	632a      	str	r2, [r5, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001aaa:	681d      	ldr	r5, [r3, #0]
 8001aac:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8001aae:	684a      	ldr	r2, [r1, #4]
 8001ab0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001ab4:	3a23      	subs	r2, #35	@ 0x23
 8001ab6:	880c      	ldrh	r4, [r1, #0]
 8001ab8:	fa04 f202 	lsl.w	r2, r4, r2
 8001abc:	4302      	orrs	r2, r0
 8001abe:	632a      	str	r2, [r5, #48]	@ 0x30
 8001ac0:	e7c1      	b.n	8001a46 <HAL_ADC_ConfigChannel+0x86>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ac2:	681d      	ldr	r5, [r3, #0]
 8001ac4:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001ac6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001aca:	3a41      	subs	r2, #65	@ 0x41
 8001acc:	241f      	movs	r4, #31
 8001ace:	fa04 f202 	lsl.w	r2, r4, r2
 8001ad2:	ea20 0202 	bic.w	r2, r0, r2
 8001ad6:	62ea      	str	r2, [r5, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ad8:	681d      	ldr	r5, [r3, #0]
 8001ada:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001adc:	684a      	ldr	r2, [r1, #4]
 8001ade:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001ae2:	3a41      	subs	r2, #65	@ 0x41
 8001ae4:	880c      	ldrh	r4, [r1, #0]
 8001ae6:	fa04 f202 	lsl.w	r2, r4, r2
 8001aea:	4302      	orrs	r2, r0
 8001aec:	62ea      	str	r2, [r5, #44]	@ 0x2c
 8001aee:	e7aa      	b.n	8001a46 <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001af0:	680a      	ldr	r2, [r1, #0]
 8001af2:	2a12      	cmp	r2, #18
 8001af4:	d1ab      	bne.n	8001a4e <HAL_ADC_ConfigChannel+0x8e>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001af6:	4a19      	ldr	r2, [pc, #100]	@ (8001b5c <HAL_ADC_ConfigChannel+0x19c>)
 8001af8:	6850      	ldr	r0, [r2, #4]
 8001afa:	f420 0000 	bic.w	r0, r0, #8388608	@ 0x800000
 8001afe:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b00:	6850      	ldr	r0, [r2, #4]
 8001b02:	f440 0080 	orr.w	r0, r0, #4194304	@ 0x400000
 8001b06:	6050      	str	r0, [r2, #4]
 8001b08:	e7a1      	b.n	8001a4e <HAL_ADC_ConfigChannel+0x8e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b0a:	680a      	ldr	r2, [r1, #0]
 8001b0c:	4814      	ldr	r0, [pc, #80]	@ (8001b60 <HAL_ADC_ConfigChannel+0x1a0>)
 8001b0e:	4282      	cmp	r2, r0
 8001b10:	d001      	beq.n	8001b16 <HAL_ADC_ConfigChannel+0x156>
 8001b12:	2a11      	cmp	r2, #17
 8001b14:	d19f      	bne.n	8001a56 <HAL_ADC_ConfigChannel+0x96>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001b16:	4a11      	ldr	r2, [pc, #68]	@ (8001b5c <HAL_ADC_ConfigChannel+0x19c>)
 8001b18:	6850      	ldr	r0, [r2, #4]
 8001b1a:	f420 0080 	bic.w	r0, r0, #4194304	@ 0x400000
 8001b1e:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b20:	6850      	ldr	r0, [r2, #4]
 8001b22:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001b26:	6050      	str	r0, [r2, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b28:	6809      	ldr	r1, [r1, #0]
 8001b2a:	4a0d      	ldr	r2, [pc, #52]	@ (8001b60 <HAL_ADC_ConfigChannel+0x1a0>)
 8001b2c:	4291      	cmp	r1, r2
 8001b2e:	d192      	bne.n	8001a56 <HAL_ADC_ConfigChannel+0x96>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b30:	4a0c      	ldr	r2, [pc, #48]	@ (8001b64 <HAL_ADC_ConfigChannel+0x1a4>)
 8001b32:	6812      	ldr	r2, [r2, #0]
 8001b34:	490c      	ldr	r1, [pc, #48]	@ (8001b68 <HAL_ADC_ConfigChannel+0x1a8>)
 8001b36:	fba1 1202 	umull	r1, r2, r1, r2
 8001b3a:	0c92      	lsrs	r2, r2, #18
 8001b3c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001b40:	0052      	lsls	r2, r2, #1
 8001b42:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 8001b44:	9a01      	ldr	r2, [sp, #4]
 8001b46:	2a00      	cmp	r2, #0
 8001b48:	d085      	beq.n	8001a56 <HAL_ADC_ConfigChannel+0x96>
        counter--;
 8001b4a:	9a01      	ldr	r2, [sp, #4]
 8001b4c:	3a01      	subs	r2, #1
 8001b4e:	9201      	str	r2, [sp, #4]
 8001b50:	e7f8      	b.n	8001b44 <HAL_ADC_ConfigChannel+0x184>
  __HAL_LOCK(hadc);
 8001b52:	2002      	movs	r0, #2
 8001b54:	e782      	b.n	8001a5c <HAL_ADC_ConfigChannel+0x9c>
 8001b56:	bf00      	nop
 8001b58:	40012000 	.word	0x40012000
 8001b5c:	40012300 	.word	0x40012300
 8001b60:	10000012 	.word	0x10000012
 8001b64:	20000000 	.word	0x20000000
 8001b68:	431bde83 	.word	0x431bde83

08001b6c <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8001b6c:	2800      	cmp	r0, #0
 8001b6e:	db07      	blt.n	8001b80 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b70:	f000 021f 	and.w	r2, r0, #31
 8001b74:	0940      	lsrs	r0, r0, #5
 8001b76:	2301      	movs	r3, #1
 8001b78:	4093      	lsls	r3, r2
 8001b7a:	4a02      	ldr	r2, [pc, #8]	@ (8001b84 <__NVIC_EnableIRQ+0x18>)
 8001b7c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	e000e100 	.word	0xe000e100

08001b88 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001b88:	2800      	cmp	r0, #0
 8001b8a:	db08      	blt.n	8001b9e <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8c:	0109      	lsls	r1, r1, #4
 8001b8e:	b2c9      	uxtb	r1, r1
 8001b90:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001b94:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001b98:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001b9c:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9e:	f000 000f 	and.w	r0, r0, #15
 8001ba2:	0109      	lsls	r1, r1, #4
 8001ba4:	b2c9      	uxtb	r1, r1
 8001ba6:	4b01      	ldr	r3, [pc, #4]	@ (8001bac <__NVIC_SetPriority+0x24>)
 8001ba8:	5419      	strb	r1, [r3, r0]
  }
}
 8001baa:	4770      	bx	lr
 8001bac:	e000ed14 	.word	0xe000ed14

08001bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb0:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bb2:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb6:	f1c0 0c07 	rsb	ip, r0, #7
 8001bba:	f1bc 0f04 	cmp.w	ip, #4
 8001bbe:	bf28      	it	cs
 8001bc0:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bc4:	1d03      	adds	r3, r0, #4
 8001bc6:	2b06      	cmp	r3, #6
 8001bc8:	d90f      	bls.n	8001bea <NVIC_EncodePriority+0x3a>
 8001bca:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bcc:	f04f 3eff 	mov.w	lr, #4294967295
 8001bd0:	fa0e f00c 	lsl.w	r0, lr, ip
 8001bd4:	ea21 0100 	bic.w	r1, r1, r0
 8001bd8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bda:	fa0e fe03 	lsl.w	lr, lr, r3
 8001bde:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8001be2:	ea41 0002 	orr.w	r0, r1, r2
 8001be6:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bea:	2300      	movs	r3, #0
 8001bec:	e7ee      	b.n	8001bcc <NVIC_EncodePriority+0x1c>
	...

08001bf0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf0:	4a07      	ldr	r2, [pc, #28]	@ (8001c10 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001bf2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bf4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001bf8:	041b      	lsls	r3, r3, #16
 8001bfa:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bfc:	0200      	lsls	r0, r0, #8
 8001bfe:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c02:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001c04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001c0c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001c0e:	4770      	bx	lr
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c14:	b510      	push	{r4, lr}
 8001c16:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c18:	4b05      	ldr	r3, [pc, #20]	@ (8001c30 <HAL_NVIC_SetPriority+0x1c>)
 8001c1a:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c1c:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001c20:	f7ff ffc6 	bl	8001bb0 <NVIC_EncodePriority>
 8001c24:	4601      	mov	r1, r0
 8001c26:	4620      	mov	r0, r4
 8001c28:	f7ff ffae 	bl	8001b88 <__NVIC_SetPriority>
}
 8001c2c:	bd10      	pop	{r4, pc}
 8001c2e:	bf00      	nop
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c34:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c36:	f7ff ff99 	bl	8001b6c <__NVIC_EnableIRQ>
}
 8001c3a:	bd08      	pop	{r3, pc}

08001c3c <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001c3c:	b158      	cbz	r0, 8001c56 <HAL_CRC_Init+0x1a>
{
 8001c3e:	b510      	push	{r4, lr}
 8001c40:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001c42:	7943      	ldrb	r3, [r0, #5]
 8001c44:	b11b      	cbz	r3, 8001c4e <HAL_CRC_Init+0x12>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001c46:	2301      	movs	r3, #1
 8001c48:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8001c4a:	2000      	movs	r0, #0
}
 8001c4c:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8001c4e:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8001c50:	f7ff f9de 	bl	8001010 <HAL_CRC_MspInit>
 8001c54:	e7f7      	b.n	8001c46 <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 8001c56:	2001      	movs	r0, #1
}
 8001c58:	4770      	bx	lr

08001c5a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c5a:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c5c:	6805      	ldr	r5, [r0, #0]
 8001c5e:	682c      	ldr	r4, [r5, #0]
 8001c60:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 8001c64:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c66:	6804      	ldr	r4, [r0, #0]
 8001c68:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c6a:	6883      	ldr	r3, [r0, #8]
 8001c6c:	2b40      	cmp	r3, #64	@ 0x40
 8001c6e:	d005      	beq.n	8001c7c <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8001c70:	6803      	ldr	r3, [r0, #0]
 8001c72:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8001c74:	6803      	ldr	r3, [r0, #0]
 8001c76:	60da      	str	r2, [r3, #12]
  }
}
 8001c78:	bc30      	pop	{r4, r5}
 8001c7a:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8001c7c:	6803      	ldr	r3, [r0, #0]
 8001c7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8001c80:	6803      	ldr	r3, [r0, #0]
 8001c82:	60d9      	str	r1, [r3, #12]
 8001c84:	e7f8      	b.n	8001c78 <DMA_SetConfig+0x1e>
	...

08001c88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c88:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c8a:	6803      	ldr	r3, [r0, #0]
 8001c8c:	b2d9      	uxtb	r1, r3
 8001c8e:	3910      	subs	r1, #16
 8001c90:	4a0c      	ldr	r2, [pc, #48]	@ (8001cc4 <DMA_CalcBaseAndBitshift+0x3c>)
 8001c92:	fba2 4201 	umull	r4, r2, r2, r1
 8001c96:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c98:	4c0b      	ldr	r4, [pc, #44]	@ (8001cc8 <DMA_CalcBaseAndBitshift+0x40>)
 8001c9a:	5ca2      	ldrb	r2, [r4, r2]
 8001c9c:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001c9e:	295f      	cmp	r1, #95	@ 0x5f
 8001ca0:	d909      	bls.n	8001cb6 <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ca2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001ca6:	f023 0303 	bic.w	r3, r3, #3
 8001caa:	3304      	adds	r3, #4
 8001cac:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001cae:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8001cb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001cb4:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001cb6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001cba:	f023 0303 	bic.w	r3, r3, #3
 8001cbe:	6583      	str	r3, [r0, #88]	@ 0x58
 8001cc0:	e7f5      	b.n	8001cae <DMA_CalcBaseAndBitshift+0x26>
 8001cc2:	bf00      	nop
 8001cc4:	aaaaaaab 	.word	0xaaaaaaab
 8001cc8:	08003ee4 	.word	0x08003ee4

08001ccc <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ccc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001cce:	6982      	ldr	r2, [r0, #24]
 8001cd0:	b992      	cbnz	r2, 8001cf8 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d00a      	beq.n	8001cec <DMA_CheckFifoParam+0x20>
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d002      	beq.n	8001ce0 <DMA_CheckFifoParam+0x14>
 8001cda:	b10b      	cbz	r3, 8001ce0 <DMA_CheckFifoParam+0x14>
 8001cdc:	2000      	movs	r0, #0
 8001cde:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ce0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001ce2:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001ce6:	d128      	bne.n	8001d3a <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8001ce8:	2000      	movs	r0, #0
 8001cea:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cec:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001cee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001cf2:	d024      	beq.n	8001d3e <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001cf8:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8001cfc:	d009      	beq.n	8001d12 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d925      	bls.n	8001d4e <DMA_CheckFifoParam+0x82>
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	d125      	bne.n	8001d52 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d06:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001d08:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001d0c:	d123      	bne.n	8001d56 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8001d0e:	2000      	movs	r0, #0
 8001d10:	4770      	bx	lr
    switch (tmp)
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d803      	bhi.n	8001d1e <DMA_CheckFifoParam+0x52>
 8001d16:	e8df f003 	tbb	[pc, r3]
 8001d1a:	0414      	.short	0x0414
 8001d1c:	0a14      	.short	0x0a14
 8001d1e:	2000      	movs	r0, #0
 8001d20:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d22:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001d24:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001d28:	d10d      	bne.n	8001d46 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d2e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001d30:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001d34:	d009      	beq.n	8001d4a <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8001d36:	2000      	movs	r0, #0
 8001d38:	4770      	bx	lr
        status = HAL_ERROR;
 8001d3a:	2001      	movs	r0, #1
 8001d3c:	4770      	bx	lr
        status = HAL_ERROR;
 8001d3e:	2001      	movs	r0, #1
 8001d40:	4770      	bx	lr
      status = HAL_ERROR;
 8001d42:	2001      	movs	r0, #1
 8001d44:	4770      	bx	lr
        status = HAL_ERROR;
 8001d46:	2001      	movs	r0, #1
 8001d48:	4770      	bx	lr
        status = HAL_ERROR;
 8001d4a:	2001      	movs	r0, #1
 8001d4c:	4770      	bx	lr
      status = HAL_ERROR;
 8001d4e:	2001      	movs	r0, #1
 8001d50:	4770      	bx	lr
    switch (tmp)
 8001d52:	2000      	movs	r0, #0
 8001d54:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8001d56:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001d58:	4770      	bx	lr
	...

08001d5c <HAL_DMA_Init>:
{
 8001d5c:	b570      	push	{r4, r5, r6, lr}
 8001d5e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001d60:	f7ff fc48 	bl	80015f4 <HAL_GetTick>
  if(hdma == NULL)
 8001d64:	2c00      	cmp	r4, #0
 8001d66:	d05b      	beq.n	8001e20 <HAL_DMA_Init+0xc4>
 8001d68:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8001d70:	2300      	movs	r3, #0
 8001d72:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8001d76:	6822      	ldr	r2, [r4, #0]
 8001d78:	6813      	ldr	r3, [r2, #0]
 8001d7a:	f023 0301 	bic.w	r3, r3, #1
 8001d7e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d80:	6823      	ldr	r3, [r4, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	f012 0f01 	tst.w	r2, #1
 8001d88:	d00a      	beq.n	8001da0 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d8a:	f7ff fc33 	bl	80015f4 <HAL_GetTick>
 8001d8e:	1b43      	subs	r3, r0, r5
 8001d90:	2b05      	cmp	r3, #5
 8001d92:	d9f5      	bls.n	8001d80 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d94:	2320      	movs	r3, #32
 8001d96:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d98:	2003      	movs	r0, #3
 8001d9a:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8001d9e:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8001da0:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001da2:	4920      	ldr	r1, [pc, #128]	@ (8001e24 <HAL_DMA_Init+0xc8>)
 8001da4:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001da6:	6862      	ldr	r2, [r4, #4]
 8001da8:	68a0      	ldr	r0, [r4, #8]
 8001daa:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dac:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dae:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db0:	6920      	ldr	r0, [r4, #16]
 8001db2:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001db4:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db6:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001db8:	69a0      	ldr	r0, [r4, #24]
 8001dba:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dbc:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dbe:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dc0:	6a20      	ldr	r0, [r4, #32]
 8001dc2:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dc4:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dc6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001dc8:	2904      	cmp	r1, #4
 8001dca:	d01e      	beq.n	8001e0a <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8001dcc:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001dce:	6826      	ldr	r6, [r4, #0]
 8001dd0:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001dd2:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8001dd6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001dd8:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d107      	bne.n	8001dee <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8001dde:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001de0:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001de2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001de4:	b11b      	cbz	r3, 8001dee <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001de6:	4620      	mov	r0, r4
 8001de8:	f7ff ff70 	bl	8001ccc <DMA_CheckFifoParam>
 8001dec:	b990      	cbnz	r0, 8001e14 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8001dee:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001df0:	4620      	mov	r0, r4
 8001df2:	f7ff ff49 	bl	8001c88 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001df6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001df8:	233f      	movs	r3, #63	@ 0x3f
 8001dfa:	4093      	lsls	r3, r2
 8001dfc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dfe:	2000      	movs	r0, #0
 8001e00:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001e02:	2301      	movs	r3, #1
 8001e04:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8001e08:	e7c9      	b.n	8001d9e <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e0a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001e0c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8001e0e:	4301      	orrs	r1, r0
 8001e10:	430a      	orrs	r2, r1
 8001e12:	e7db      	b.n	8001dcc <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e14:	2340      	movs	r3, #64	@ 0x40
 8001e16:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001e18:	2001      	movs	r0, #1
 8001e1a:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 8001e1e:	e7be      	b.n	8001d9e <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001e20:	2001      	movs	r0, #1
 8001e22:	e7bc      	b.n	8001d9e <HAL_DMA_Init+0x42>
 8001e24:	f010803f 	.word	0xf010803f

08001e28 <HAL_DMA_Start_IT>:
{
 8001e28:	b538      	push	{r3, r4, r5, lr}
 8001e2a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e2c:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8001e2e:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8001e32:	2801      	cmp	r0, #1
 8001e34:	d02b      	beq.n	8001e8e <HAL_DMA_Start_IT+0x66>
 8001e36:	2001      	movs	r0, #1
 8001e38:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e3c:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8001e40:	b2c0      	uxtb	r0, r0
 8001e42:	2801      	cmp	r0, #1
 8001e44:	d004      	beq.n	8001e50 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8001e46:	2300      	movs	r3, #0
 8001e48:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 8001e4c:	2002      	movs	r0, #2
}
 8001e4e:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e50:	2002      	movs	r0, #2
 8001e52:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e56:	2000      	movs	r0, #0
 8001e58:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	f7ff fefd 	bl	8001c5a <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e60:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001e62:	233f      	movs	r3, #63	@ 0x3f
 8001e64:	4093      	lsls	r3, r2
 8001e66:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e68:	6822      	ldr	r2, [r4, #0]
 8001e6a:	6813      	ldr	r3, [r2, #0]
 8001e6c:	f043 0316 	orr.w	r3, r3, #22
 8001e70:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001e72:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001e74:	b123      	cbz	r3, 8001e80 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e76:	6822      	ldr	r2, [r4, #0]
 8001e78:	6813      	ldr	r3, [r2, #0]
 8001e7a:	f043 0308 	orr.w	r3, r3, #8
 8001e7e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001e80:	6822      	ldr	r2, [r4, #0]
 8001e82:	6813      	ldr	r3, [r2, #0]
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	e7df      	b.n	8001e4e <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8001e8e:	2002      	movs	r0, #2
 8001e90:	e7dd      	b.n	8001e4e <HAL_DMA_Start_IT+0x26>
	...

08001e94 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e94:	2300      	movs	r3, #0
 8001e96:	2b0f      	cmp	r3, #15
 8001e98:	f200 80f6 	bhi.w	8002088 <HAL_GPIO_Init+0x1f4>
{
 8001e9c:	b570      	push	{r4, r5, r6, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	e066      	b.n	8001f70 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ea2:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ea4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001ea8:	2403      	movs	r4, #3
 8001eaa:	fa04 f40e 	lsl.w	r4, r4, lr
 8001eae:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eb2:	68cc      	ldr	r4, [r1, #12]
 8001eb4:	fa04 f40e 	lsl.w	r4, r4, lr
 8001eb8:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001eba:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ebc:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ebe:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ec2:	684a      	ldr	r2, [r1, #4]
 8001ec4:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001ec8:	409a      	lsls	r2, r3
 8001eca:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001ecc:	6042      	str	r2, [r0, #4]
 8001ece:	e05d      	b.n	8001f8c <HAL_GPIO_Init+0xf8>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ed0:	08dc      	lsrs	r4, r3, #3
 8001ed2:	3408      	adds	r4, #8
 8001ed4:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ed8:	f003 0507 	and.w	r5, r3, #7
 8001edc:	00ad      	lsls	r5, r5, #2
 8001ede:	f04f 0e0f 	mov.w	lr, #15
 8001ee2:	fa0e fe05 	lsl.w	lr, lr, r5
 8001ee6:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001eea:	690a      	ldr	r2, [r1, #16]
 8001eec:	40aa      	lsls	r2, r5
 8001eee:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001ef2:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001ef6:	e05d      	b.n	8001fb4 <HAL_GPIO_Init+0x120>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ef8:	2209      	movs	r2, #9
 8001efa:	e000      	b.n	8001efe <HAL_GPIO_Init+0x6a>
 8001efc:	2200      	movs	r2, #0
 8001efe:	fa02 f20e 	lsl.w	r2, r2, lr
 8001f02:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f04:	3402      	adds	r4, #2
 8001f06:	4d61      	ldr	r5, [pc, #388]	@ (800208c <HAL_GPIO_Init+0x1f8>)
 8001f08:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f0c:	4a60      	ldr	r2, [pc, #384]	@ (8002090 <HAL_GPIO_Init+0x1fc>)
 8001f0e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001f10:	ea6f 020c 	mvn.w	r2, ip
 8001f14:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f18:	684e      	ldr	r6, [r1, #4]
 8001f1a:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8001f1e:	d001      	beq.n	8001f24 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8001f20:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001f24:	4c5a      	ldr	r4, [pc, #360]	@ (8002090 <HAL_GPIO_Init+0x1fc>)
 8001f26:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001f28:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001f2a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f2e:	684e      	ldr	r6, [r1, #4]
 8001f30:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8001f34:	d001      	beq.n	8001f3a <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8001f36:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001f3a:	4c55      	ldr	r4, [pc, #340]	@ (8002090 <HAL_GPIO_Init+0x1fc>)
 8001f3c:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8001f3e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001f40:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f44:	684e      	ldr	r6, [r1, #4]
 8001f46:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8001f4a:	d001      	beq.n	8001f50 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001f4c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001f50:	4c4f      	ldr	r4, [pc, #316]	@ (8002090 <HAL_GPIO_Init+0x1fc>)
 8001f52:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f54:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001f56:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f58:	684d      	ldr	r5, [r1, #4]
 8001f5a:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8001f5e:	d001      	beq.n	8001f64 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8001f60:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001f64:	4c4a      	ldr	r4, [pc, #296]	@ (8002090 <HAL_GPIO_Init+0x1fc>)
 8001f66:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f68:	3301      	adds	r3, #1
 8001f6a:	2b0f      	cmp	r3, #15
 8001f6c:	f200 808a 	bhi.w	8002084 <HAL_GPIO_Init+0x1f0>
    ioposition = 0x01U << position;
 8001f70:	2201      	movs	r2, #1
 8001f72:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f74:	680c      	ldr	r4, [r1, #0]
 8001f76:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001f7a:	ea32 0404 	bics.w	r4, r2, r4
 8001f7e:	d1f3      	bne.n	8001f68 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f80:	684c      	ldr	r4, [r1, #4]
 8001f82:	f004 0403 	and.w	r4, r4, #3
 8001f86:	3c01      	subs	r4, #1
 8001f88:	2c01      	cmp	r4, #1
 8001f8a:	d98a      	bls.n	8001ea2 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f8c:	684a      	ldr	r2, [r1, #4]
 8001f8e:	f002 0203 	and.w	r2, r2, #3
 8001f92:	2a03      	cmp	r2, #3
 8001f94:	d009      	beq.n	8001faa <HAL_GPIO_Init+0x116>
        temp = GPIOx->PUPDR;
 8001f96:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f98:	005d      	lsls	r5, r3, #1
 8001f9a:	2203      	movs	r2, #3
 8001f9c:	40aa      	lsls	r2, r5
 8001f9e:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fa2:	688a      	ldr	r2, [r1, #8]
 8001fa4:	40aa      	lsls	r2, r5
 8001fa6:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001fa8:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001faa:	684a      	ldr	r2, [r1, #4]
 8001fac:	f002 0203 	and.w	r2, r2, #3
 8001fb0:	2a02      	cmp	r2, #2
 8001fb2:	d08d      	beq.n	8001ed0 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8001fb4:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fb6:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001fba:	2203      	movs	r2, #3
 8001fbc:	fa02 f20e 	lsl.w	r2, r2, lr
 8001fc0:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fc4:	684a      	ldr	r2, [r1, #4]
 8001fc6:	f002 0203 	and.w	r2, r2, #3
 8001fca:	fa02 f20e 	lsl.w	r2, r2, lr
 8001fce:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001fd0:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fd2:	684a      	ldr	r2, [r1, #4]
 8001fd4:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8001fd8:	d0c6      	beq.n	8001f68 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fda:	2200      	movs	r2, #0
 8001fdc:	9201      	str	r2, [sp, #4]
 8001fde:	4a2d      	ldr	r2, [pc, #180]	@ (8002094 <HAL_GPIO_Init+0x200>)
 8001fe0:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8001fe2:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001fe6:	6454      	str	r4, [r2, #68]	@ 0x44
 8001fe8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001fea:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001fee:	9201      	str	r2, [sp, #4]
 8001ff0:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001ff2:	089c      	lsrs	r4, r3, #2
 8001ff4:	1ca5      	adds	r5, r4, #2
 8001ff6:	4a25      	ldr	r2, [pc, #148]	@ (800208c <HAL_GPIO_Init+0x1f8>)
 8001ff8:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ffc:	f003 0e03 	and.w	lr, r3, #3
 8002000:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002004:	220f      	movs	r2, #15
 8002006:	fa02 f20e 	lsl.w	r2, r2, lr
 800200a:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800200e:	4a22      	ldr	r2, [pc, #136]	@ (8002098 <HAL_GPIO_Init+0x204>)
 8002010:	4290      	cmp	r0, r2
 8002012:	f43f af73 	beq.w	8001efc <HAL_GPIO_Init+0x68>
 8002016:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800201a:	4290      	cmp	r0, r2
 800201c:	d022      	beq.n	8002064 <HAL_GPIO_Init+0x1d0>
 800201e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002022:	4290      	cmp	r0, r2
 8002024:	d020      	beq.n	8002068 <HAL_GPIO_Init+0x1d4>
 8002026:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800202a:	4290      	cmp	r0, r2
 800202c:	d01e      	beq.n	800206c <HAL_GPIO_Init+0x1d8>
 800202e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002032:	4290      	cmp	r0, r2
 8002034:	d01c      	beq.n	8002070 <HAL_GPIO_Init+0x1dc>
 8002036:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800203a:	4290      	cmp	r0, r2
 800203c:	d01a      	beq.n	8002074 <HAL_GPIO_Init+0x1e0>
 800203e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002042:	4290      	cmp	r0, r2
 8002044:	d018      	beq.n	8002078 <HAL_GPIO_Init+0x1e4>
 8002046:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800204a:	4290      	cmp	r0, r2
 800204c:	d016      	beq.n	800207c <HAL_GPIO_Init+0x1e8>
 800204e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002052:	4290      	cmp	r0, r2
 8002054:	d014      	beq.n	8002080 <HAL_GPIO_Init+0x1ec>
 8002056:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800205a:	4290      	cmp	r0, r2
 800205c:	f43f af4c 	beq.w	8001ef8 <HAL_GPIO_Init+0x64>
 8002060:	220a      	movs	r2, #10
 8002062:	e74c      	b.n	8001efe <HAL_GPIO_Init+0x6a>
 8002064:	2201      	movs	r2, #1
 8002066:	e74a      	b.n	8001efe <HAL_GPIO_Init+0x6a>
 8002068:	2202      	movs	r2, #2
 800206a:	e748      	b.n	8001efe <HAL_GPIO_Init+0x6a>
 800206c:	2203      	movs	r2, #3
 800206e:	e746      	b.n	8001efe <HAL_GPIO_Init+0x6a>
 8002070:	2204      	movs	r2, #4
 8002072:	e744      	b.n	8001efe <HAL_GPIO_Init+0x6a>
 8002074:	2205      	movs	r2, #5
 8002076:	e742      	b.n	8001efe <HAL_GPIO_Init+0x6a>
 8002078:	2206      	movs	r2, #6
 800207a:	e740      	b.n	8001efe <HAL_GPIO_Init+0x6a>
 800207c:	2207      	movs	r2, #7
 800207e:	e73e      	b.n	8001efe <HAL_GPIO_Init+0x6a>
 8002080:	2208      	movs	r2, #8
 8002082:	e73c      	b.n	8001efe <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8002084:	b002      	add	sp, #8
 8002086:	bd70      	pop	{r4, r5, r6, pc}
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	40013800 	.word	0x40013800
 8002090:	40013c00 	.word	0x40013c00
 8002094:	40023800 	.word	0x40023800
 8002098:	40020000 	.word	0x40020000

0800209c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800209c:	b10a      	cbz	r2, 80020a2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800209e:	6181      	str	r1, [r0, #24]
 80020a0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020a2:	0409      	lsls	r1, r1, #16
 80020a4:	6181      	str	r1, [r0, #24]
  }
}
 80020a6:	4770      	bx	lr

080020a8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020a8:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020aa:	ea01 0203 	and.w	r2, r1, r3
 80020ae:	ea21 0103 	bic.w	r1, r1, r3
 80020b2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80020b6:	6181      	str	r1, [r0, #24]
}
 80020b8:	4770      	bx	lr
	...

080020bc <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020bc:	2800      	cmp	r0, #0
 80020be:	f000 80cc 	beq.w	800225a <HAL_I2C_Init+0x19e>
{
 80020c2:	b570      	push	{r4, r5, r6, lr}
 80020c4:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020c6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d077      	beq.n	80021be <HAL_I2C_Init+0x102>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020ce:	2324      	movs	r3, #36	@ 0x24
 80020d0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020d4:	6822      	ldr	r2, [r4, #0]
 80020d6:	6813      	ldr	r3, [r2, #0]
 80020d8:	f023 0301 	bic.w	r3, r3, #1
 80020dc:	6013      	str	r3, [r2, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020de:	6822      	ldr	r2, [r4, #0]
 80020e0:	6813      	ldr	r3, [r2, #0]
 80020e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020e6:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020e8:	6822      	ldr	r2, [r4, #0]
 80020ea:	6813      	ldr	r3, [r2, #0]
 80020ec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80020f0:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020f2:	f000 faff 	bl	80026f4 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020f6:	6862      	ldr	r2, [r4, #4]
 80020f8:	4b5a      	ldr	r3, [pc, #360]	@ (8002264 <HAL_I2C_Init+0x1a8>)
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d864      	bhi.n	80021c8 <HAL_I2C_Init+0x10c>
 80020fe:	4b5a      	ldr	r3, [pc, #360]	@ (8002268 <HAL_I2C_Init+0x1ac>)
 8002100:	4298      	cmp	r0, r3
 8002102:	bf8c      	ite	hi
 8002104:	2300      	movhi	r3, #0
 8002106:	2301      	movls	r3, #1
 8002108:	2b00      	cmp	r3, #0
 800210a:	f040 80a8 	bne.w	800225e <HAL_I2C_Init+0x1a2>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800210e:	4957      	ldr	r1, [pc, #348]	@ (800226c <HAL_I2C_Init+0x1b0>)
 8002110:	fba1 3100 	umull	r3, r1, r1, r0
 8002114:	0c8b      	lsrs	r3, r1, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002116:	6825      	ldr	r5, [r4, #0]
 8002118:	686a      	ldr	r2, [r5, #4]
 800211a:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800211e:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8002122:	606a      	str	r2, [r5, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002124:	6821      	ldr	r1, [r4, #0]
 8002126:	6a0a      	ldr	r2, [r1, #32]
 8002128:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800212c:	6866      	ldr	r6, [r4, #4]
 800212e:	4d4d      	ldr	r5, [pc, #308]	@ (8002264 <HAL_I2C_Init+0x1a8>)
 8002130:	42ae      	cmp	r6, r5
 8002132:	d84f      	bhi.n	80021d4 <HAL_I2C_Init+0x118>
 8002134:	3301      	adds	r3, #1
 8002136:	4313      	orrs	r3, r2
 8002138:	620b      	str	r3, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800213a:	6821      	ldr	r1, [r4, #0]
 800213c:	69ca      	ldr	r2, [r1, #28]
 800213e:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 8002142:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002146:	6865      	ldr	r5, [r4, #4]
 8002148:	4b46      	ldr	r3, [pc, #280]	@ (8002264 <HAL_I2C_Init+0x1a8>)
 800214a:	429d      	cmp	r5, r3
 800214c:	d84c      	bhi.n	80021e8 <HAL_I2C_Init+0x12c>
 800214e:	1e43      	subs	r3, r0, #1
 8002150:	006d      	lsls	r5, r5, #1
 8002152:	fbb3 f3f5 	udiv	r3, r3, r5
 8002156:	3301      	adds	r3, #1
 8002158:	f640 70fc 	movw	r0, #4092	@ 0xffc
 800215c:	4203      	tst	r3, r0
 800215e:	d078      	beq.n	8002252 <HAL_I2C_Init+0x196>
 8002160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002164:	431a      	orrs	r2, r3
 8002166:	61ca      	str	r2, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002168:	6821      	ldr	r1, [r4, #0]
 800216a:	680b      	ldr	r3, [r1, #0]
 800216c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002170:	69e2      	ldr	r2, [r4, #28]
 8002172:	6a20      	ldr	r0, [r4, #32]
 8002174:	4302      	orrs	r2, r0
 8002176:	4313      	orrs	r3, r2
 8002178:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800217a:	6821      	ldr	r1, [r4, #0]
 800217c:	688b      	ldr	r3, [r1, #8]
 800217e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002182:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002186:	6922      	ldr	r2, [r4, #16]
 8002188:	68e0      	ldr	r0, [r4, #12]
 800218a:	4302      	orrs	r2, r0
 800218c:	4313      	orrs	r3, r2
 800218e:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002190:	6821      	ldr	r1, [r4, #0]
 8002192:	68cb      	ldr	r3, [r1, #12]
 8002194:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002198:	6962      	ldr	r2, [r4, #20]
 800219a:	69a0      	ldr	r0, [r4, #24]
 800219c:	4302      	orrs	r2, r0
 800219e:	4313      	orrs	r3, r2
 80021a0:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021a2:	6822      	ldr	r2, [r4, #0]
 80021a4:	6813      	ldr	r3, [r2, #0]
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021ac:	2000      	movs	r0, #0
 80021ae:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021b0:	2320      	movs	r3, #32
 80021b2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021b6:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b8:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e

  return HAL_OK;
}
 80021bc:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80021be:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 80021c2:	f7fe ff3d 	bl	8001040 <HAL_I2C_MspInit>
 80021c6:	e782      	b.n	80020ce <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021c8:	4b29      	ldr	r3, [pc, #164]	@ (8002270 <HAL_I2C_Init+0x1b4>)
 80021ca:	4298      	cmp	r0, r3
 80021cc:	bf8c      	ite	hi
 80021ce:	2300      	movhi	r3, #0
 80021d0:	2301      	movls	r3, #1
 80021d2:	e799      	b.n	8002108 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021d4:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 80021d8:	fb05 f303 	mul.w	r3, r5, r3
 80021dc:	4d25      	ldr	r5, [pc, #148]	@ (8002274 <HAL_I2C_Init+0x1b8>)
 80021de:	fba5 5303 	umull	r5, r3, r5, r3
 80021e2:	099b      	lsrs	r3, r3, #6
 80021e4:	3301      	adds	r3, #1
 80021e6:	e7a6      	b.n	8002136 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021e8:	68a6      	ldr	r6, [r4, #8]
 80021ea:	b9be      	cbnz	r6, 800221c <HAL_I2C_Init+0x160>
 80021ec:	1e43      	subs	r3, r0, #1
 80021ee:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80021f2:	fbb3 f3fc 	udiv	r3, r3, ip
 80021f6:	3301      	adds	r3, #1
 80021f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021fc:	fab3 f383 	clz	r3, r3
 8002200:	095b      	lsrs	r3, r3, #5
 8002202:	bb43      	cbnz	r3, 8002256 <HAL_I2C_Init+0x19a>
 8002204:	b9c6      	cbnz	r6, 8002238 <HAL_I2C_Init+0x17c>
 8002206:	1e43      	subs	r3, r0, #1
 8002208:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800220c:	fbb3 f3f5 	udiv	r3, r3, r5
 8002210:	3301      	adds	r3, #1
 8002212:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002216:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800221a:	e7a3      	b.n	8002164 <HAL_I2C_Init+0xa8>
 800221c:	1e43      	subs	r3, r0, #1
 800221e:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8002222:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8002226:	fbb3 f3fc 	udiv	r3, r3, ip
 800222a:	3301      	adds	r3, #1
 800222c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002230:	fab3 f383 	clz	r3, r3
 8002234:	095b      	lsrs	r3, r3, #5
 8002236:	e7e4      	b.n	8002202 <HAL_I2C_Init+0x146>
 8002238:	1e43      	subs	r3, r0, #1
 800223a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800223e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002242:	fbb3 f3f5 	udiv	r3, r3, r5
 8002246:	3301      	adds	r3, #1
 8002248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800224c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002250:	e788      	b.n	8002164 <HAL_I2C_Init+0xa8>
 8002252:	2304      	movs	r3, #4
 8002254:	e786      	b.n	8002164 <HAL_I2C_Init+0xa8>
 8002256:	2301      	movs	r3, #1
 8002258:	e784      	b.n	8002164 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 800225a:	2001      	movs	r0, #1
}
 800225c:	4770      	bx	lr
    return HAL_ERROR;
 800225e:	2001      	movs	r0, #1
 8002260:	e7ac      	b.n	80021bc <HAL_I2C_Init+0x100>
 8002262:	bf00      	nop
 8002264:	000186a0 	.word	0x000186a0
 8002268:	001e847f 	.word	0x001e847f
 800226c:	431bde83 	.word	0x431bde83
 8002270:	003d08ff 	.word	0x003d08ff
 8002274:	10624dd3 	.word	0x10624dd3

08002278 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002278:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b20      	cmp	r3, #32
 8002280:	d001      	beq.n	8002286 <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002282:	2002      	movs	r0, #2
  }
}
 8002284:	4770      	bx	lr
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002286:	2324      	movs	r3, #36	@ 0x24
 8002288:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    __HAL_I2C_DISABLE(hi2c);
 800228c:	6802      	ldr	r2, [r0, #0]
 800228e:	6813      	ldr	r3, [r2, #0]
 8002290:	f023 0301 	bic.w	r3, r3, #1
 8002294:	6013      	str	r3, [r2, #0]
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002296:	6802      	ldr	r2, [r0, #0]
 8002298:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 800229a:	f023 0310 	bic.w	r3, r3, #16
 800229e:	6253      	str	r3, [r2, #36]	@ 0x24
    hi2c->Instance->FLTR |= AnalogFilter;
 80022a0:	6802      	ldr	r2, [r0, #0]
 80022a2:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 80022a4:	430b      	orrs	r3, r1
 80022a6:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_I2C_ENABLE(hi2c);
 80022a8:	6802      	ldr	r2, [r0, #0]
 80022aa:	6813      	ldr	r3, [r2, #0]
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80022b2:	2320      	movs	r3, #32
 80022b4:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    return HAL_OK;
 80022b8:	2000      	movs	r0, #0
 80022ba:	4770      	bx	lr

080022bc <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022bc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b20      	cmp	r3, #32
 80022c4:	d001      	beq.n	80022ca <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80022c6:	2002      	movs	r0, #2
  }
}
 80022c8:	4770      	bx	lr
    hi2c->State = HAL_I2C_STATE_BUSY;
 80022ca:	2324      	movs	r3, #36	@ 0x24
 80022cc:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    __HAL_I2C_DISABLE(hi2c);
 80022d0:	6802      	ldr	r2, [r0, #0]
 80022d2:	6813      	ldr	r3, [r2, #0]
 80022d4:	f023 0301 	bic.w	r3, r3, #1
 80022d8:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->FLTR;
 80022da:	6802      	ldr	r2, [r0, #0]
 80022dc:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 80022de:	b29b      	uxth	r3, r3
    tmpreg &= ~(I2C_FLTR_DNF);
 80022e0:	f023 030f 	bic.w	r3, r3, #15
    tmpreg |= DigitalFilter;
 80022e4:	4319      	orrs	r1, r3
 80022e6:	b289      	uxth	r1, r1
    hi2c->Instance->FLTR = tmpreg;
 80022e8:	6251      	str	r1, [r2, #36]	@ 0x24
    __HAL_I2C_ENABLE(hi2c);
 80022ea:	6802      	ldr	r2, [r0, #0]
 80022ec:	6813      	ldr	r3, [r2, #0]
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80022f4:	2320      	movs	r3, #32
 80022f6:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    return HAL_OK;
 80022fa:	2000      	movs	r0, #0
 80022fc:	4770      	bx	lr

080022fe <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80022fe:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002300:	684d      	ldr	r5, [r1, #4]
 8002302:	6803      	ldr	r3, [r0, #0]
 8002304:	68dc      	ldr	r4, [r3, #12]
 8002306:	f3c4 440b 	ubfx	r4, r4, #16, #12
 800230a:	4425      	add	r5, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800230c:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
 8002310:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8002314:	f8d3 4088 	ldr.w	r4, [r3, #136]	@ 0x88
 8002318:	f404 4470 	and.w	r4, r4, #61440	@ 0xf000
 800231c:	f8c3 4088 	str.w	r4, [r3, #136]	@ 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002320:	680b      	ldr	r3, [r1, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002322:	6804      	ldr	r4, [r0, #0]
 8002324:	68e6      	ldr	r6, [r4, #12]
 8002326:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800232a:	4433      	add	r3, r6
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800232c:	3301      	adds	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800232e:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002332:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002336:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800233a:	68cd      	ldr	r5, [r1, #12]
 800233c:	6803      	ldr	r3, [r0, #0]
 800233e:	68dc      	ldr	r4, [r3, #12]
 8002340:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8002344:	4425      	add	r5, r4
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002346:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800234a:	f8d3 408c 	ldr.w	r4, [r3, #140]	@ 0x8c
 800234e:	f404 4470 	and.w	r4, r4, #61440	@ 0xf000
 8002352:	f8c3 408c 	str.w	r4, [r3, #140]	@ 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002356:	688b      	ldr	r3, [r1, #8]
 8002358:	6804      	ldr	r4, [r0, #0]
 800235a:	68e6      	ldr	r6, [r4, #12]
 800235c:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8002360:	4433      	add	r3, r6
 8002362:	3301      	adds	r3, #1
 8002364:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8002368:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800236c:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002370:	6803      	ldr	r3, [r0, #0]
 8002372:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8002376:	f8d3 4094 	ldr.w	r4, [r3, #148]	@ 0x94
 800237a:	f024 0407 	bic.w	r4, r4, #7
 800237e:	f8c3 4094 	str.w	r4, [r3, #148]	@ 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002382:	6803      	ldr	r3, [r0, #0]
 8002384:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8002388:	690c      	ldr	r4, [r1, #16]
 800238a:	f8c3 4094 	str.w	r4, [r3, #148]	@ 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800238e:	f891 e031 	ldrb.w	lr, [r1, #49]	@ 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002392:	f891 5032 	ldrb.w	r5, [r1, #50]	@ 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002396:	698e      	ldr	r6, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002398:	6803      	ldr	r3, [r0, #0]
 800239a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800239e:	f8d3 409c 	ldr.w	r4, [r3, #156]	@ 0x9c
 80023a2:	2400      	movs	r4, #0
 80023a4:	f8c3 409c 	str.w	r4, [r3, #156]	@ 0x9c
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80023a8:	f891 3030 	ldrb.w	r3, [r1, #48]	@ 0x30
 80023ac:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 80023b0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80023b4:	6805      	ldr	r5, [r0, #0]
 80023b6:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 80023ba:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 80023be:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80023c2:	6803      	ldr	r3, [r0, #0]
 80023c4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80023c8:	f8d3 5098 	ldr.w	r5, [r3, #152]	@ 0x98
 80023cc:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 80023d0:	f8c3 5098 	str.w	r5, [r3, #152]	@ 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80023d4:	6803      	ldr	r3, [r0, #0]
 80023d6:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80023da:	694d      	ldr	r5, [r1, #20]
 80023dc:	f8c3 5098 	str.w	r5, [r3, #152]	@ 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80023e0:	6803      	ldr	r3, [r0, #0]
 80023e2:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80023e6:	f8d3 50a0 	ldr.w	r5, [r3, #160]	@ 0xa0
 80023ea:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 80023ee:	f025 0507 	bic.w	r5, r5, #7
 80023f2:	f8c3 50a0 	str.w	r5, [r3, #160]	@ 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80023f6:	6a0d      	ldr	r5, [r1, #32]
 80023f8:	6803      	ldr	r3, [r0, #0]
 80023fa:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80023fe:	69ce      	ldr	r6, [r1, #28]
 8002400:	4335      	orrs	r5, r6
 8002402:	f8c3 50a0 	str.w	r5, [r3, #160]	@ 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002406:	6803      	ldr	r3, [r0, #0]
 8002408:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800240c:	f8d3 50ac 	ldr.w	r5, [r3, #172]	@ 0xac
 8002410:	f8c3 40ac 	str.w	r4, [r3, #172]	@ 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002414:	6803      	ldr	r3, [r0, #0]
 8002416:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800241a:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 800241c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002420:	690a      	ldr	r2, [r1, #16]
 8002422:	b182      	cbz	r2, 8002446 <LTDC_SetConfig+0x148>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002424:	1e53      	subs	r3, r2, #1
 8002426:	2b06      	cmp	r3, #6
 8002428:	d805      	bhi.n	8002436 <LTDC_SetConfig+0x138>
 800242a:	e8df f003 	tbb	[pc, r3]
 800242e:	0d3c      	.short	0x0d3c
 8002430:	04040608 	.word	0x04040608
 8002434:	0a          	.byte	0x0a
 8002435:	00          	.byte	0x00
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002436:	2201      	movs	r2, #1
 8002438:	e006      	b.n	8002448 <LTDC_SetConfig+0x14a>
 800243a:	2202      	movs	r2, #2
 800243c:	e004      	b.n	8002448 <LTDC_SetConfig+0x14a>
 800243e:	2202      	movs	r2, #2
 8002440:	e002      	b.n	8002448 <LTDC_SetConfig+0x14a>
 8002442:	2202      	movs	r2, #2
 8002444:	e000      	b.n	8002448 <LTDC_SetConfig+0x14a>
    tmp = 4U;
 8002446:	2204      	movs	r2, #4
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002448:	6803      	ldr	r3, [r0, #0]
 800244a:	4463      	add	r3, ip
 800244c:	f8d3 40b0 	ldr.w	r4, [r3, #176]	@ 0xb0
 8002450:	f004 24e0 	and.w	r4, r4, #3758153728	@ 0xe000e000
 8002454:	f8c3 40b0 	str.w	r4, [r3, #176]	@ 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002458:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800245a:	fb02 f403 	mul.w	r4, r2, r3
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800245e:	684b      	ldr	r3, [r1, #4]
 8002460:	680d      	ldr	r5, [r1, #0]
 8002462:	1b5b      	subs	r3, r3, r5
 8002464:	fb02 f303 	mul.w	r3, r2, r3
 8002468:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800246a:	6802      	ldr	r2, [r0, #0]
 800246c:	4462      	add	r2, ip
 800246e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8002472:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002476:	6803      	ldr	r3, [r0, #0]
 8002478:	4463      	add	r3, ip
 800247a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800247e:	f422 62ff 	bic.w	r2, r2, #2040	@ 0x7f8
 8002482:	f022 0207 	bic.w	r2, r2, #7
 8002486:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800248a:	6803      	ldr	r3, [r0, #0]
 800248c:	4463      	add	r3, ip
 800248e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8002490:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002494:	6803      	ldr	r3, [r0, #0]
 8002496:	4463      	add	r3, ip
 8002498:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800249c:	f042 0201 	orr.w	r2, r2, #1
 80024a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 80024a4:	bd70      	pop	{r4, r5, r6, pc}
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80024a6:	2203      	movs	r2, #3
 80024a8:	e7ce      	b.n	8002448 <LTDC_SetConfig+0x14a>
	...

080024ac <HAL_LTDC_Init>:
  if (hltdc == NULL)
 80024ac:	2800      	cmp	r0, #0
 80024ae:	d072      	beq.n	8002596 <HAL_LTDC_Init+0xea>
{
 80024b0:	b538      	push	{r3, r4, r5, lr}
 80024b2:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80024b4:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d067      	beq.n	800258c <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80024bc:	2302      	movs	r3, #2
 80024be:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80024c2:	6822      	ldr	r2, [r4, #0]
 80024c4:	6993      	ldr	r3, [r2, #24]
 80024c6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80024ca:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80024cc:	6821      	ldr	r1, [r4, #0]
 80024ce:	698a      	ldr	r2, [r1, #24]
 80024d0:	6863      	ldr	r3, [r4, #4]
 80024d2:	68a0      	ldr	r0, [r4, #8]
 80024d4:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80024d6:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80024d8:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80024da:	6920      	ldr	r0, [r4, #16]
 80024dc:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80024de:	4313      	orrs	r3, r2
 80024e0:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80024e2:	6821      	ldr	r1, [r4, #0]
 80024e4:	688a      	ldr	r2, [r1, #8]
 80024e6:	4b2d      	ldr	r3, [pc, #180]	@ (800259c <HAL_LTDC_Init+0xf0>)
 80024e8:	401a      	ands	r2, r3
 80024ea:	608a      	str	r2, [r1, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80024ec:	6820      	ldr	r0, [r4, #0]
 80024ee:	6882      	ldr	r2, [r0, #8]
 80024f0:	69a1      	ldr	r1, [r4, #24]
 80024f2:	6965      	ldr	r5, [r4, #20]
 80024f4:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80024f8:	430a      	orrs	r2, r1
 80024fa:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80024fc:	6821      	ldr	r1, [r4, #0]
 80024fe:	68ca      	ldr	r2, [r1, #12]
 8002500:	401a      	ands	r2, r3
 8002502:	60ca      	str	r2, [r1, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002504:	6820      	ldr	r0, [r4, #0]
 8002506:	68c2      	ldr	r2, [r0, #12]
 8002508:	6a21      	ldr	r1, [r4, #32]
 800250a:	69e5      	ldr	r5, [r4, #28]
 800250c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8002510:	430a      	orrs	r2, r1
 8002512:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002514:	6821      	ldr	r1, [r4, #0]
 8002516:	690a      	ldr	r2, [r1, #16]
 8002518:	401a      	ands	r2, r3
 800251a:	610a      	str	r2, [r1, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800251c:	6820      	ldr	r0, [r4, #0]
 800251e:	6902      	ldr	r2, [r0, #16]
 8002520:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002522:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8002524:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8002528:	430a      	orrs	r2, r1
 800252a:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800252c:	6821      	ldr	r1, [r4, #0]
 800252e:	694a      	ldr	r2, [r1, #20]
 8002530:	4013      	ands	r3, r2
 8002532:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002534:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002536:	6821      	ldr	r1, [r4, #0]
 8002538:	694b      	ldr	r3, [r1, #20]
 800253a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800253c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002540:	4313      	orrs	r3, r2
 8002542:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002544:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002548:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 800254c:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800254e:	6821      	ldr	r1, [r4, #0]
 8002550:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8002552:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8002556:	62ca      	str	r2, [r1, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002558:	6821      	ldr	r1, [r4, #0]
 800255a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800255c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002560:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 8002564:	4303      	orrs	r3, r0
 8002566:	4313      	orrs	r3, r2
 8002568:	62cb      	str	r3, [r1, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800256a:	6822      	ldr	r2, [r4, #0]
 800256c:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800256e:	f043 0306 	orr.w	r3, r3, #6
 8002572:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8002574:	6822      	ldr	r2, [r4, #0]
 8002576:	6993      	ldr	r3, [r2, #24]
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800257e:	2000      	movs	r0, #0
 8002580:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8002584:	2301      	movs	r3, #1
 8002586:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 800258a:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 800258c:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 8002590:	f7fe fdaa 	bl	80010e8 <HAL_LTDC_MspInit>
 8002594:	e792      	b.n	80024bc <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 8002596:	2001      	movs	r0, #1
}
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	f000f800 	.word	0xf000f800

080025a0 <HAL_LTDC_ErrorCallback>:
}
 80025a0:	4770      	bx	lr

080025a2 <HAL_LTDC_LineEventCallback>:
}
 80025a2:	4770      	bx	lr

080025a4 <HAL_LTDC_ReloadEventCallback>:
}
 80025a4:	4770      	bx	lr

080025a6 <HAL_LTDC_IRQHandler>:
{
 80025a6:	b570      	push	{r4, r5, r6, lr}
 80025a8:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80025aa:	6803      	ldr	r3, [r0, #0]
 80025ac:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80025ae:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80025b0:	f015 0f04 	tst.w	r5, #4
 80025b4:	d002      	beq.n	80025bc <HAL_LTDC_IRQHandler+0x16>
 80025b6:	f016 0f04 	tst.w	r6, #4
 80025ba:	d112      	bne.n	80025e2 <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80025bc:	f015 0f02 	tst.w	r5, #2
 80025c0:	d002      	beq.n	80025c8 <HAL_LTDC_IRQHandler+0x22>
 80025c2:	f016 0f02 	tst.w	r6, #2
 80025c6:	d121      	bne.n	800260c <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80025c8:	f015 0f01 	tst.w	r5, #1
 80025cc:	d002      	beq.n	80025d4 <HAL_LTDC_IRQHandler+0x2e>
 80025ce:	f016 0f01 	tst.w	r6, #1
 80025d2:	d132      	bne.n	800263a <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80025d4:	f015 0f08 	tst.w	r5, #8
 80025d8:	d002      	beq.n	80025e0 <HAL_LTDC_IRQHandler+0x3a>
 80025da:	f016 0f08 	tst.w	r6, #8
 80025de:	d13d      	bne.n	800265c <HAL_LTDC_IRQHandler+0xb6>
}
 80025e0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80025e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025e4:	f022 0204 	bic.w	r2, r2, #4
 80025e8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80025ea:	6803      	ldr	r3, [r0, #0]
 80025ec:	2204      	movs	r2, #4
 80025ee:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80025f0:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80025fc:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8002600:	2300      	movs	r3, #0
 8002602:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8002606:	f7ff ffcb 	bl	80025a0 <HAL_LTDC_ErrorCallback>
 800260a:	e7d7      	b.n	80025bc <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800260c:	6822      	ldr	r2, [r4, #0]
 800260e:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8002610:	f023 0302 	bic.w	r3, r3, #2
 8002614:	6353      	str	r3, [r2, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8002616:	6823      	ldr	r3, [r4, #0]
 8002618:	2202      	movs	r2, #2
 800261a:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800261c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8002620:	4313      	orrs	r3, r2
 8002622:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002626:	2304      	movs	r3, #4
 8002628:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800262c:	2300      	movs	r3, #0
 800262e:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8002632:	4620      	mov	r0, r4
 8002634:	f7ff ffb4 	bl	80025a0 <HAL_LTDC_ErrorCallback>
 8002638:	e7c6      	b.n	80025c8 <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800263a:	6822      	ldr	r2, [r4, #0]
 800263c:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800263e:	f023 0301 	bic.w	r3, r3, #1
 8002642:	6353      	str	r3, [r2, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8002644:	6822      	ldr	r2, [r4, #0]
 8002646:	2301      	movs	r3, #1
 8002648:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800264a:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800264e:	2300      	movs	r3, #0
 8002650:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8002654:	4620      	mov	r0, r4
 8002656:	f7ff ffa4 	bl	80025a2 <HAL_LTDC_LineEventCallback>
 800265a:	e7bb      	b.n	80025d4 <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800265c:	6822      	ldr	r2, [r4, #0]
 800265e:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8002660:	f023 0308 	bic.w	r3, r3, #8
 8002664:	6353      	str	r3, [r2, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8002666:	6823      	ldr	r3, [r4, #0]
 8002668:	2208      	movs	r2, #8
 800266a:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800266c:	2301      	movs	r3, #1
 800266e:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8002672:	2300      	movs	r3, #0
 8002674:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8002678:	4620      	mov	r0, r4
 800267a:	f7ff ff93 	bl	80025a4 <HAL_LTDC_ReloadEventCallback>
}
 800267e:	e7af      	b.n	80025e0 <HAL_LTDC_IRQHandler+0x3a>

08002680 <HAL_LTDC_ConfigLayer>:
{
 8002680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8002682:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 8002686:	2b01      	cmp	r3, #1
 8002688:	d02c      	beq.n	80026e4 <HAL_LTDC_ConfigLayer+0x64>
 800268a:	4604      	mov	r4, r0
 800268c:	460d      	mov	r5, r1
 800268e:	4616      	mov	r6, r2
 8002690:	2701      	movs	r7, #1
 8002692:	f880 70a0 	strb.w	r7, [r0, #160]	@ 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002696:	2302      	movs	r3, #2
 8002698:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800269c:	f04f 0c34 	mov.w	ip, #52	@ 0x34
 80026a0:	fb0c 0c02 	mla	ip, ip, r2, r0
 80026a4:	f10c 0c38 	add.w	ip, ip, #56	@ 0x38
 80026a8:	468e      	mov	lr, r1
 80026aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80026ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80026b2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80026b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80026ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80026be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80026c2:	f8de 3000 	ldr.w	r3, [lr]
 80026c6:	f8cc 3000 	str.w	r3, [ip]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80026ca:	4632      	mov	r2, r6
 80026cc:	4629      	mov	r1, r5
 80026ce:	4620      	mov	r0, r4
 80026d0:	f7ff fe15 	bl	80022fe <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80026d4:	6823      	ldr	r3, [r4, #0]
 80026d6:	625f      	str	r7, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80026d8:	f884 70a1 	strb.w	r7, [r4, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 80026dc:	2000      	movs	r0, #0
 80026de:	f884 00a0 	strb.w	r0, [r4, #160]	@ 0xa0
}
 80026e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 80026e4:	2002      	movs	r0, #2
 80026e6:	e7fc      	b.n	80026e2 <HAL_LTDC_ConfigLayer+0x62>

080026e8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80026e8:	4b01      	ldr	r3, [pc, #4]	@ (80026f0 <HAL_RCC_GetHCLKFreq+0x8>)
 80026ea:	6818      	ldr	r0, [r3, #0]
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	20000000 	.word	0x20000000

080026f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026f4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026f6:	f7ff fff7 	bl	80026e8 <HAL_RCC_GetHCLKFreq>
 80026fa:	4b04      	ldr	r3, [pc, #16]	@ (800270c <HAL_RCC_GetPCLK1Freq+0x18>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002702:	4a03      	ldr	r2, [pc, #12]	@ (8002710 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002704:	5cd3      	ldrb	r3, [r2, r3]
}
 8002706:	40d8      	lsrs	r0, r3
 8002708:	bd08      	pop	{r3, pc}
 800270a:	bf00      	nop
 800270c:	40023800 	.word	0x40023800
 8002710:	08003edc 	.word	0x08003edc

08002714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002714:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002716:	f7ff ffe7 	bl	80026e8 <HAL_RCC_GetHCLKFreq>
 800271a:	4b04      	ldr	r3, [pc, #16]	@ (800272c <HAL_RCC_GetPCLK2Freq+0x18>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002722:	4a03      	ldr	r2, [pc, #12]	@ (8002730 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002724:	5cd3      	ldrb	r3, [r2, r3]
}
 8002726:	40d8      	lsrs	r0, r3
 8002728:	bd08      	pop	{r3, pc}
 800272a:	bf00      	nop
 800272c:	40023800 	.word	0x40023800
 8002730:	08003edc 	.word	0x08003edc

08002734 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002734:	230f      	movs	r3, #15
 8002736:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002738:	4b0b      	ldr	r3, [pc, #44]	@ (8002768 <HAL_RCC_GetClockConfig+0x34>)
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	f002 0203 	and.w	r2, r2, #3
 8002740:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8002748:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8002750:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	08db      	lsrs	r3, r3, #3
 8002756:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800275a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800275c:	4b03      	ldr	r3, [pc, #12]	@ (800276c <HAL_RCC_GetClockConfig+0x38>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 030f 	and.w	r3, r3, #15
 8002764:	600b      	str	r3, [r1, #0]
}
 8002766:	4770      	bx	lr
 8002768:	40023800 	.word	0x40023800
 800276c:	40023c00 	.word	0x40023c00

08002770 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8002770:	b1e0      	cbz	r0, 80027ac <HAL_SDRAM_Init+0x3c>
{
 8002772:	b538      	push	{r3, r4, r5, lr}
 8002774:	460d      	mov	r5, r1
 8002776:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8002778:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800277c:	b18b      	cbz	r3, 80027a2 <HAL_SDRAM_Init+0x32>
    HAL_SDRAM_MspInit(hsdram);
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800277e:	2302      	movs	r3, #2
 8002780:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8002784:	4621      	mov	r1, r4
 8002786:	f851 0b04 	ldr.w	r0, [r1], #4
 800278a:	f000 fd94 	bl	80032b6 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800278e:	6862      	ldr	r2, [r4, #4]
 8002790:	4629      	mov	r1, r5
 8002792:	6820      	ldr	r0, [r4, #0]
 8002794:	f000 fdcb 	bl	800332e <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002798:	2301      	movs	r3, #1
 800279a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  return HAL_OK;
 800279e:	2000      	movs	r0, #0
}
 80027a0:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 80027a2:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    HAL_SDRAM_MspInit(hsdram);
 80027a6:	f7fe fe2f 	bl	8001408 <HAL_SDRAM_MspInit>
 80027aa:	e7e8      	b.n	800277e <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 80027ac:	2001      	movs	r0, #1
}
 80027ae:	4770      	bx	lr

080027b0 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027b0:	2800      	cmp	r0, #0
 80027b2:	d05a      	beq.n	800286a <HAL_SPI_Init+0xba>
{
 80027b4:	b510      	push	{r4, lr}
 80027b6:	4604      	mov	r4, r0
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027b8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80027ba:	b933      	cbnz	r3, 80027ca <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027bc:	6843      	ldr	r3, [r0, #4]
 80027be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027c2:	d005      	beq.n	80027d0 <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027c4:	2300      	movs	r3, #0
 80027c6:	61c3      	str	r3, [r0, #28]
 80027c8:	e002      	b.n	80027d0 <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027ca:	2300      	movs	r3, #0
 80027cc:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027ce:	6143      	str	r3, [r0, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027d0:	2300      	movs	r3, #0
 80027d2:	62a3      	str	r3, [r4, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027d4:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d040      	beq.n	800285e <HAL_SPI_Init+0xae>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027dc:	2302      	movs	r3, #2
 80027de:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027e2:	6822      	ldr	r2, [r4, #0]
 80027e4:	6813      	ldr	r3, [r2, #0]
 80027e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027ea:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027ec:	6863      	ldr	r3, [r4, #4]
 80027ee:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80027f2:	68a2      	ldr	r2, [r4, #8]
 80027f4:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 80027f8:	4313      	orrs	r3, r2
 80027fa:	68e2      	ldr	r2, [r4, #12]
 80027fc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002800:	4313      	orrs	r3, r2
 8002802:	6922      	ldr	r2, [r4, #16]
 8002804:	f002 0202 	and.w	r2, r2, #2
 8002808:	4313      	orrs	r3, r2
 800280a:	6962      	ldr	r2, [r4, #20]
 800280c:	f002 0201 	and.w	r2, r2, #1
 8002810:	4313      	orrs	r3, r2
 8002812:	69a2      	ldr	r2, [r4, #24]
 8002814:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8002818:	4313      	orrs	r3, r2
 800281a:	69e2      	ldr	r2, [r4, #28]
 800281c:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8002820:	4313      	orrs	r3, r2
 8002822:	6a22      	ldr	r2, [r4, #32]
 8002824:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8002828:	4313      	orrs	r3, r2
 800282a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800282c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002830:	6821      	ldr	r1, [r4, #0]
 8002832:	4313      	orrs	r3, r2
 8002834:	600b      	str	r3, [r1, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002836:	8b63      	ldrh	r3, [r4, #26]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800283e:	f002 0210 	and.w	r2, r2, #16
 8002842:	6821      	ldr	r1, [r4, #0]
 8002844:	4313      	orrs	r3, r2
 8002846:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002848:	6822      	ldr	r2, [r4, #0]
 800284a:	69d3      	ldr	r3, [r2, #28]
 800284c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002850:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002852:	2000      	movs	r0, #0
 8002854:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002856:	2301      	movs	r3, #1
 8002858:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51

  return HAL_OK;
}
 800285c:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800285e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8002862:	4620      	mov	r0, r4
 8002864:	f7fe fd2a 	bl	80012bc <HAL_SPI_MspInit>
 8002868:	e7b8      	b.n	80027dc <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 800286a:	2001      	movs	r0, #1
}
 800286c:	4770      	bx	lr

0800286e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800286e:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002870:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002872:	6a04      	ldr	r4, [r0, #32]
 8002874:	f024 0401 	bic.w	r4, r4, #1
 8002878:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800287a:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800287c:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002880:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002884:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8002888:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800288a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800288c:	6203      	str	r3, [r0, #32]
}
 800288e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002892:	4770      	bx	lr

08002894 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002894:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002896:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002898:	6a04      	ldr	r4, [r0, #32]
 800289a:	f024 0410 	bic.w	r4, r4, #16
 800289e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028a0:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028a2:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028a6:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80028ae:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028b2:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80028b4:	6203      	str	r3, [r0, #32]
}
 80028b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028bc:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028c2:	430b      	orrs	r3, r1
 80028c4:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028c8:	6083      	str	r3, [r0, #8]
}
 80028ca:	4770      	bx	lr

080028cc <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80028cc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d137      	bne.n	8002946 <HAL_TIM_Base_Start_IT+0x7a>
  htim->State = HAL_TIM_STATE_BUSY;
 80028d6:	2302      	movs	r3, #2
 80028d8:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028dc:	6802      	ldr	r2, [r0, #0]
 80028de:	68d3      	ldr	r3, [r2, #12]
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028e6:	6803      	ldr	r3, [r0, #0]
 80028e8:	4a19      	ldr	r2, [pc, #100]	@ (8002950 <HAL_TIM_Base_Start_IT+0x84>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d020      	beq.n	8002930 <HAL_TIM_Base_Start_IT+0x64>
 80028ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028f2:	d01d      	beq.n	8002930 <HAL_TIM_Base_Start_IT+0x64>
 80028f4:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d019      	beq.n	8002930 <HAL_TIM_Base_Start_IT+0x64>
 80028fc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002900:	4293      	cmp	r3, r2
 8002902:	d015      	beq.n	8002930 <HAL_TIM_Base_Start_IT+0x64>
 8002904:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002908:	4293      	cmp	r3, r2
 800290a:	d011      	beq.n	8002930 <HAL_TIM_Base_Start_IT+0x64>
 800290c:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002910:	4293      	cmp	r3, r2
 8002912:	d00d      	beq.n	8002930 <HAL_TIM_Base_Start_IT+0x64>
 8002914:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8002918:	4293      	cmp	r3, r2
 800291a:	d009      	beq.n	8002930 <HAL_TIM_Base_Start_IT+0x64>
 800291c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002920:	4293      	cmp	r3, r2
 8002922:	d005      	beq.n	8002930 <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	f042 0201 	orr.w	r2, r2, #1
 800292a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800292c:	2000      	movs	r0, #0
 800292e:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002936:	2a06      	cmp	r2, #6
 8002938:	d007      	beq.n	800294a <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	f042 0201 	orr.w	r2, r2, #1
 8002940:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002942:	2000      	movs	r0, #0
 8002944:	4770      	bx	lr
    return HAL_ERROR;
 8002946:	2001      	movs	r0, #1
 8002948:	4770      	bx	lr
  return HAL_OK;
 800294a:	2000      	movs	r0, #0
}
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40010000 	.word	0x40010000

08002954 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8002954:	4770      	bx	lr

08002956 <HAL_TIM_IC_CaptureCallback>:
}
 8002956:	4770      	bx	lr

08002958 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8002958:	4770      	bx	lr

0800295a <HAL_TIM_TriggerCallback>:
}
 800295a:	4770      	bx	lr

0800295c <HAL_TIM_IRQHandler>:
{
 800295c:	b570      	push	{r4, r5, r6, lr}
 800295e:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8002960:	6803      	ldr	r3, [r0, #0]
 8002962:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002964:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002966:	f015 0f02 	tst.w	r5, #2
 800296a:	d010      	beq.n	800298e <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800296c:	f016 0f02 	tst.w	r6, #2
 8002970:	d00d      	beq.n	800298e <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002972:	f06f 0202 	mvn.w	r2, #2
 8002976:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002978:	2301      	movs	r3, #1
 800297a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800297c:	6803      	ldr	r3, [r0, #0]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	f013 0f03 	tst.w	r3, #3
 8002984:	d05e      	beq.n	8002a44 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8002986:	f7ff ffe6 	bl	8002956 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800298a:	2300      	movs	r3, #0
 800298c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800298e:	f015 0f04 	tst.w	r5, #4
 8002992:	d012      	beq.n	80029ba <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002994:	f016 0f04 	tst.w	r6, #4
 8002998:	d00f      	beq.n	80029ba <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800299a:	6823      	ldr	r3, [r4, #0]
 800299c:	f06f 0204 	mvn.w	r2, #4
 80029a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029a2:	2302      	movs	r3, #2
 80029a4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029a6:	6823      	ldr	r3, [r4, #0]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80029ae:	d04f      	beq.n	8002a50 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 80029b0:	4620      	mov	r0, r4
 80029b2:	f7ff ffd0 	bl	8002956 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029b6:	2300      	movs	r3, #0
 80029b8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80029ba:	f015 0f08 	tst.w	r5, #8
 80029be:	d012      	beq.n	80029e6 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80029c0:	f016 0f08 	tst.w	r6, #8
 80029c4:	d00f      	beq.n	80029e6 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80029c6:	6823      	ldr	r3, [r4, #0]
 80029c8:	f06f 0208 	mvn.w	r2, #8
 80029cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029ce:	2304      	movs	r3, #4
 80029d0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029d2:	6823      	ldr	r3, [r4, #0]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	f013 0f03 	tst.w	r3, #3
 80029da:	d040      	beq.n	8002a5e <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 80029dc:	4620      	mov	r0, r4
 80029de:	f7ff ffba 	bl	8002956 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029e2:	2300      	movs	r3, #0
 80029e4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029e6:	f015 0f10 	tst.w	r5, #16
 80029ea:	d012      	beq.n	8002a12 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80029ec:	f016 0f10 	tst.w	r6, #16
 80029f0:	d00f      	beq.n	8002a12 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80029f2:	6823      	ldr	r3, [r4, #0]
 80029f4:	f06f 0210 	mvn.w	r2, #16
 80029f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029fa:	2308      	movs	r3, #8
 80029fc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029fe:	6823      	ldr	r3, [r4, #0]
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8002a06:	d031      	beq.n	8002a6c <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8002a08:	4620      	mov	r0, r4
 8002a0a:	f7ff ffa4 	bl	8002956 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a12:	f015 0f01 	tst.w	r5, #1
 8002a16:	d002      	beq.n	8002a1e <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a18:	f016 0f01 	tst.w	r6, #1
 8002a1c:	d12d      	bne.n	8002a7a <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a1e:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8002a22:	d002      	beq.n	8002a2a <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a24:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8002a28:	d12f      	bne.n	8002a8a <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a2a:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8002a2e:	d002      	beq.n	8002a36 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a30:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8002a34:	d131      	bne.n	8002a9a <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a36:	f015 0f20 	tst.w	r5, #32
 8002a3a:	d002      	beq.n	8002a42 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a3c:	f016 0f20 	tst.w	r6, #32
 8002a40:	d133      	bne.n	8002aaa <HAL_TIM_IRQHandler+0x14e>
}
 8002a42:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a44:	f7ff ff86 	bl	8002954 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a48:	4620      	mov	r0, r4
 8002a4a:	f7ff ff85 	bl	8002958 <HAL_TIM_PWM_PulseFinishedCallback>
 8002a4e:	e79c      	b.n	800298a <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a50:	4620      	mov	r0, r4
 8002a52:	f7ff ff7f 	bl	8002954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a56:	4620      	mov	r0, r4
 8002a58:	f7ff ff7e 	bl	8002958 <HAL_TIM_PWM_PulseFinishedCallback>
 8002a5c:	e7ab      	b.n	80029b6 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5e:	4620      	mov	r0, r4
 8002a60:	f7ff ff78 	bl	8002954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a64:	4620      	mov	r0, r4
 8002a66:	f7ff ff77 	bl	8002958 <HAL_TIM_PWM_PulseFinishedCallback>
 8002a6a:	e7ba      	b.n	80029e2 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a6c:	4620      	mov	r0, r4
 8002a6e:	f7ff ff71 	bl	8002954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a72:	4620      	mov	r0, r4
 8002a74:	f7ff ff70 	bl	8002958 <HAL_TIM_PWM_PulseFinishedCallback>
 8002a78:	e7c9      	b.n	8002a0e <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a7a:	6823      	ldr	r3, [r4, #0]
 8002a7c:	f06f 0201 	mvn.w	r2, #1
 8002a80:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a82:	4620      	mov	r0, r4
 8002a84:	f7fd ffb8 	bl	80009f8 <HAL_TIM_PeriodElapsedCallback>
 8002a88:	e7c9      	b.n	8002a1e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a8a:	6823      	ldr	r3, [r4, #0]
 8002a8c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002a90:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002a92:	4620      	mov	r0, r4
 8002a94:	f000 f97d 	bl	8002d92 <HAL_TIMEx_BreakCallback>
 8002a98:	e7c7      	b.n	8002a2a <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a9a:	6823      	ldr	r3, [r4, #0]
 8002a9c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002aa0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002aa2:	4620      	mov	r0, r4
 8002aa4:	f7ff ff59 	bl	800295a <HAL_TIM_TriggerCallback>
 8002aa8:	e7c5      	b.n	8002a36 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002aaa:	6823      	ldr	r3, [r4, #0]
 8002aac:	f06f 0220 	mvn.w	r2, #32
 8002ab0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	f000 f96c 	bl	8002d90 <HAL_TIMEx_CommutCallback>
}
 8002ab8:	e7c3      	b.n	8002a42 <HAL_TIM_IRQHandler+0xe6>
	...

08002abc <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002abc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002abe:	4a34      	ldr	r2, [pc, #208]	@ (8002b90 <TIM_Base_SetConfig+0xd4>)
 8002ac0:	4290      	cmp	r0, r2
 8002ac2:	d012      	beq.n	8002aea <TIM_Base_SetConfig+0x2e>
 8002ac4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002ac8:	d00f      	beq.n	8002aea <TIM_Base_SetConfig+0x2e>
 8002aca:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002ace:	4290      	cmp	r0, r2
 8002ad0:	d00b      	beq.n	8002aea <TIM_Base_SetConfig+0x2e>
 8002ad2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002ad6:	4290      	cmp	r0, r2
 8002ad8:	d007      	beq.n	8002aea <TIM_Base_SetConfig+0x2e>
 8002ada:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002ade:	4290      	cmp	r0, r2
 8002ae0:	d003      	beq.n	8002aea <TIM_Base_SetConfig+0x2e>
 8002ae2:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002ae6:	4290      	cmp	r0, r2
 8002ae8:	d103      	bne.n	8002af2 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002aea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002aee:	684a      	ldr	r2, [r1, #4]
 8002af0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002af2:	4a27      	ldr	r2, [pc, #156]	@ (8002b90 <TIM_Base_SetConfig+0xd4>)
 8002af4:	4290      	cmp	r0, r2
 8002af6:	d02a      	beq.n	8002b4e <TIM_Base_SetConfig+0x92>
 8002af8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002afc:	d027      	beq.n	8002b4e <TIM_Base_SetConfig+0x92>
 8002afe:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002b02:	4290      	cmp	r0, r2
 8002b04:	d023      	beq.n	8002b4e <TIM_Base_SetConfig+0x92>
 8002b06:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002b0a:	4290      	cmp	r0, r2
 8002b0c:	d01f      	beq.n	8002b4e <TIM_Base_SetConfig+0x92>
 8002b0e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002b12:	4290      	cmp	r0, r2
 8002b14:	d01b      	beq.n	8002b4e <TIM_Base_SetConfig+0x92>
 8002b16:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002b1a:	4290      	cmp	r0, r2
 8002b1c:	d017      	beq.n	8002b4e <TIM_Base_SetConfig+0x92>
 8002b1e:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8002b22:	4290      	cmp	r0, r2
 8002b24:	d013      	beq.n	8002b4e <TIM_Base_SetConfig+0x92>
 8002b26:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002b2a:	4290      	cmp	r0, r2
 8002b2c:	d00f      	beq.n	8002b4e <TIM_Base_SetConfig+0x92>
 8002b2e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002b32:	4290      	cmp	r0, r2
 8002b34:	d00b      	beq.n	8002b4e <TIM_Base_SetConfig+0x92>
 8002b36:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8002b3a:	4290      	cmp	r0, r2
 8002b3c:	d007      	beq.n	8002b4e <TIM_Base_SetConfig+0x92>
 8002b3e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002b42:	4290      	cmp	r0, r2
 8002b44:	d003      	beq.n	8002b4e <TIM_Base_SetConfig+0x92>
 8002b46:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002b4a:	4290      	cmp	r0, r2
 8002b4c:	d103      	bne.n	8002b56 <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b52:	68ca      	ldr	r2, [r1, #12]
 8002b54:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b5a:	694a      	ldr	r2, [r1, #20]
 8002b5c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002b5e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b60:	688b      	ldr	r3, [r1, #8]
 8002b62:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002b64:	680b      	ldr	r3, [r1, #0]
 8002b66:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b68:	4b09      	ldr	r3, [pc, #36]	@ (8002b90 <TIM_Base_SetConfig+0xd4>)
 8002b6a:	4298      	cmp	r0, r3
 8002b6c:	d003      	beq.n	8002b76 <TIM_Base_SetConfig+0xba>
 8002b6e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002b72:	4298      	cmp	r0, r3
 8002b74:	d101      	bne.n	8002b7a <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 8002b76:	690b      	ldr	r3, [r1, #16]
 8002b78:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b7e:	6903      	ldr	r3, [r0, #16]
 8002b80:	f013 0f01 	tst.w	r3, #1
 8002b84:	d003      	beq.n	8002b8e <TIM_Base_SetConfig+0xd2>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b86:	6903      	ldr	r3, [r0, #16]
 8002b88:	f023 0301 	bic.w	r3, r3, #1
 8002b8c:	6103      	str	r3, [r0, #16]
}
 8002b8e:	4770      	bx	lr
 8002b90:	40010000 	.word	0x40010000

08002b94 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002b94:	b340      	cbz	r0, 8002be8 <HAL_TIM_Base_Init+0x54>
{
 8002b96:	b510      	push	{r4, lr}
 8002b98:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002b9a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002b9e:	b1f3      	cbz	r3, 8002bde <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ba6:	4621      	mov	r1, r4
 8002ba8:	f851 0b04 	ldr.w	r0, [r1], #4
 8002bac:	f7ff ff86 	bl	8002abc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002bba:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002bbe:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002bc2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002bca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002bce:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002bd2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002bd6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8002bda:	2000      	movs	r0, #0
}
 8002bdc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002bde:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002be2:	f7fe fba1 	bl	8001328 <HAL_TIM_Base_MspInit>
 8002be6:	e7db      	b.n	8002ba0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002be8:	2001      	movs	r0, #1
}
 8002bea:	4770      	bx	lr

08002bec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bec:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bee:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bf0:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bf4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bfe:	6082      	str	r2, [r0, #8]
}
 8002c00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002c06:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d078      	beq.n	8002d00 <HAL_TIM_ConfigClockSource+0xfa>
{
 8002c0e:	b510      	push	{r4, lr}
 8002c10:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002c12:	2301      	movs	r3, #1
 8002c14:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002c1e:	6802      	ldr	r2, [r0, #0]
 8002c20:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c26:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002c2a:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002c2c:	680b      	ldr	r3, [r1, #0]
 8002c2e:	2b60      	cmp	r3, #96	@ 0x60
 8002c30:	d04c      	beq.n	8002ccc <HAL_TIM_ConfigClockSource+0xc6>
 8002c32:	d829      	bhi.n	8002c88 <HAL_TIM_ConfigClockSource+0x82>
 8002c34:	2b40      	cmp	r3, #64	@ 0x40
 8002c36:	d054      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0xdc>
 8002c38:	d90c      	bls.n	8002c54 <HAL_TIM_ConfigClockSource+0x4e>
 8002c3a:	2b50      	cmp	r3, #80	@ 0x50
 8002c3c:	d122      	bne.n	8002c84 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c3e:	68ca      	ldr	r2, [r1, #12]
 8002c40:	6849      	ldr	r1, [r1, #4]
 8002c42:	6800      	ldr	r0, [r0, #0]
 8002c44:	f7ff fe13 	bl	800286e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c48:	2150      	movs	r1, #80	@ 0x50
 8002c4a:	6820      	ldr	r0, [r4, #0]
 8002c4c:	f7ff fe36 	bl	80028bc <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002c50:	2000      	movs	r0, #0
      break;
 8002c52:	e005      	b.n	8002c60 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002c54:	2b20      	cmp	r3, #32
 8002c56:	d00d      	beq.n	8002c74 <HAL_TIM_ConfigClockSource+0x6e>
 8002c58:	d909      	bls.n	8002c6e <HAL_TIM_ConfigClockSource+0x68>
 8002c5a:	2b30      	cmp	r3, #48	@ 0x30
 8002c5c:	d00a      	beq.n	8002c74 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 8002c5e:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8002c60:	2301      	movs	r3, #1
 8002c62:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8002c66:	2300      	movs	r3, #0
 8002c68:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002c6c:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8002c6e:	b10b      	cbz	r3, 8002c74 <HAL_TIM_ConfigClockSource+0x6e>
 8002c70:	2b10      	cmp	r3, #16
 8002c72:	d105      	bne.n	8002c80 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c74:	4619      	mov	r1, r3
 8002c76:	6820      	ldr	r0, [r4, #0]
 8002c78:	f7ff fe20 	bl	80028bc <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002c7c:	2000      	movs	r0, #0
      break;
 8002c7e:	e7ef      	b.n	8002c60 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8002c80:	2001      	movs	r0, #1
 8002c82:	e7ed      	b.n	8002c60 <HAL_TIM_ConfigClockSource+0x5a>
 8002c84:	2001      	movs	r0, #1
 8002c86:	e7eb      	b.n	8002c60 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002c88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c8c:	d034      	beq.n	8002cf8 <HAL_TIM_ConfigClockSource+0xf2>
 8002c8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c92:	d10c      	bne.n	8002cae <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8002c94:	68cb      	ldr	r3, [r1, #12]
 8002c96:	684a      	ldr	r2, [r1, #4]
 8002c98:	6889      	ldr	r1, [r1, #8]
 8002c9a:	6800      	ldr	r0, [r0, #0]
 8002c9c:	f7ff ffa6 	bl	8002bec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ca0:	6822      	ldr	r2, [r4, #0]
 8002ca2:	6893      	ldr	r3, [r2, #8]
 8002ca4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ca8:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002caa:	2000      	movs	r0, #0
      break;
 8002cac:	e7d8      	b.n	8002c60 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002cae:	2b70      	cmp	r3, #112	@ 0x70
 8002cb0:	d124      	bne.n	8002cfc <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8002cb2:	68cb      	ldr	r3, [r1, #12]
 8002cb4:	684a      	ldr	r2, [r1, #4]
 8002cb6:	6889      	ldr	r1, [r1, #8]
 8002cb8:	6800      	ldr	r0, [r0, #0]
 8002cba:	f7ff ff97 	bl	8002bec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002cbe:	6822      	ldr	r2, [r4, #0]
 8002cc0:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cc2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002cc6:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc8:	2000      	movs	r0, #0
      break;
 8002cca:	e7c9      	b.n	8002c60 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ccc:	68ca      	ldr	r2, [r1, #12]
 8002cce:	6849      	ldr	r1, [r1, #4]
 8002cd0:	6800      	ldr	r0, [r0, #0]
 8002cd2:	f7ff fddf 	bl	8002894 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cd6:	2160      	movs	r1, #96	@ 0x60
 8002cd8:	6820      	ldr	r0, [r4, #0]
 8002cda:	f7ff fdef 	bl	80028bc <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002cde:	2000      	movs	r0, #0
      break;
 8002ce0:	e7be      	b.n	8002c60 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ce2:	68ca      	ldr	r2, [r1, #12]
 8002ce4:	6849      	ldr	r1, [r1, #4]
 8002ce6:	6800      	ldr	r0, [r0, #0]
 8002ce8:	f7ff fdc1 	bl	800286e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cec:	2140      	movs	r1, #64	@ 0x40
 8002cee:	6820      	ldr	r0, [r4, #0]
 8002cf0:	f7ff fde4 	bl	80028bc <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002cf4:	2000      	movs	r0, #0
      break;
 8002cf6:	e7b3      	b.n	8002c60 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	e7b1      	b.n	8002c60 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	e7af      	b.n	8002c60 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8002d00:	2002      	movs	r0, #2
}
 8002d02:	4770      	bx	lr

08002d04 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d04:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8002d08:	2a01      	cmp	r2, #1
 8002d0a:	d03d      	beq.n	8002d88 <HAL_TIMEx_MasterConfigSynchronization+0x84>
{
 8002d0c:	b410      	push	{r4}
 8002d0e:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8002d10:	2201      	movs	r2, #1
 8002d12:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d16:	2202      	movs	r2, #2
 8002d18:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d1c:	6802      	ldr	r2, [r0, #0]
 8002d1e:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d20:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d22:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d26:	6808      	ldr	r0, [r1, #0]
 8002d28:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d2c:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	4816      	ldr	r0, [pc, #88]	@ (8002d8c <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8002d32:	4282      	cmp	r2, r0
 8002d34:	d01a      	beq.n	8002d6c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002d36:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002d3a:	d017      	beq.n	8002d6c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002d3c:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8002d40:	4282      	cmp	r2, r0
 8002d42:	d013      	beq.n	8002d6c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002d44:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8002d48:	4282      	cmp	r2, r0
 8002d4a:	d00f      	beq.n	8002d6c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002d4c:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8002d50:	4282      	cmp	r2, r0
 8002d52:	d00b      	beq.n	8002d6c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002d54:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 8002d58:	4282      	cmp	r2, r0
 8002d5a:	d007      	beq.n	8002d6c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002d5c:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 8002d60:	4282      	cmp	r2, r0
 8002d62:	d003      	beq.n	8002d6c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002d64:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8002d68:	4282      	cmp	r2, r0
 8002d6a:	d104      	bne.n	8002d76 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d6c:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d70:	6849      	ldr	r1, [r1, #4]
 8002d72:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d74:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8002d82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d86:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002d88:	2002      	movs	r0, #2
}
 8002d8a:	4770      	bx	lr
 8002d8c:	40010000 	.word	0x40010000

08002d90 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d90:	4770      	bx	lr

08002d92 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d92:	4770      	bx	lr

08002d94 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002d94:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d96:	f102 030c 	add.w	r3, r2, #12
 8002d9a:	e853 3f00 	ldrex	r3, [r3]
 8002d9e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da2:	320c      	adds	r2, #12
 8002da4:	e842 3100 	strex	r1, r3, [r2]
 8002da8:	2900      	cmp	r1, #0
 8002daa:	d1f3      	bne.n	8002d94 <UART_EndTxTransfer>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002dac:	2320      	movs	r3, #32
 8002dae:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
}
 8002db2:	4770      	bx	lr

08002db4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002db4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db6:	f102 030c 	add.w	r3, r2, #12
 8002dba:	e853 3f00 	ldrex	r3, [r3]
 8002dbe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc2:	320c      	adds	r2, #12
 8002dc4:	e842 3100 	strex	r1, r3, [r2]
 8002dc8:	2900      	cmp	r1, #0
 8002dca:	d1f3      	bne.n	8002db4 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dcc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dce:	f102 0314 	add.w	r3, r2, #20
 8002dd2:	e853 3f00 	ldrex	r3, [r3]
 8002dd6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dda:	3214      	adds	r2, #20
 8002ddc:	e842 3100 	strex	r1, r3, [r2]
 8002de0:	2900      	cmp	r1, #0
 8002de2:	d1f3      	bne.n	8002dcc <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002de4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d005      	beq.n	8002df6 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002dea:	2320      	movs	r3, #32
 8002dec:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002df0:	2300      	movs	r3, #0
 8002df2:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8002df4:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002df6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df8:	f102 030c 	add.w	r3, r2, #12
 8002dfc:	e853 3f00 	ldrex	r3, [r3]
 8002e00:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e04:	320c      	adds	r2, #12
 8002e06:	e842 3100 	strex	r1, r3, [r2]
 8002e0a:	2900      	cmp	r1, #0
 8002e0c:	d1f3      	bne.n	8002df6 <UART_EndRxTransfer+0x42>
 8002e0e:	e7ec      	b.n	8002dea <UART_EndRxTransfer+0x36>

08002e10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e10:	b510      	push	{r4, lr}
 8002e12:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e14:	6802      	ldr	r2, [r0, #0]
 8002e16:	6913      	ldr	r3, [r2, #16]
 8002e18:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002e1c:	68c1      	ldr	r1, [r0, #12]
 8002e1e:	430b      	orrs	r3, r1
 8002e20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e22:	6883      	ldr	r3, [r0, #8]
 8002e24:	6902      	ldr	r2, [r0, #16]
 8002e26:	431a      	orrs	r2, r3
 8002e28:	6943      	ldr	r3, [r0, #20]
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	69c3      	ldr	r3, [r0, #28]
 8002e2e:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002e30:	6801      	ldr	r1, [r0, #0]
 8002e32:	68cb      	ldr	r3, [r1, #12]
 8002e34:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002e38:	f023 030c 	bic.w	r3, r3, #12
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e40:	6802      	ldr	r2, [r0, #0]
 8002e42:	6953      	ldr	r3, [r2, #20]
 8002e44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e48:	6981      	ldr	r1, [r0, #24]
 8002e4a:	430b      	orrs	r3, r1
 8002e4c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e4e:	6803      	ldr	r3, [r0, #0]
 8002e50:	4a31      	ldr	r2, [pc, #196]	@ (8002f18 <UART_SetConfig+0x108>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d006      	beq.n	8002e64 <UART_SetConfig+0x54>
 8002e56:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d002      	beq.n	8002e64 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e5e:	f7ff fc49 	bl	80026f4 <HAL_RCC_GetPCLK1Freq>
 8002e62:	e001      	b.n	8002e68 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e64:	f7ff fc56 	bl	8002714 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e68:	69e3      	ldr	r3, [r4, #28]
 8002e6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e6e:	d029      	beq.n	8002ec4 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e70:	2100      	movs	r1, #0
 8002e72:	1803      	adds	r3, r0, r0
 8002e74:	4149      	adcs	r1, r1
 8002e76:	181b      	adds	r3, r3, r0
 8002e78:	f141 0100 	adc.w	r1, r1, #0
 8002e7c:	00c9      	lsls	r1, r1, #3
 8002e7e:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	1818      	adds	r0, r3, r0
 8002e86:	6863      	ldr	r3, [r4, #4]
 8002e88:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002e8c:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8002e90:	f141 0100 	adc.w	r1, r1, #0
 8002e94:	f7fd fa0c 	bl	80002b0 <__aeabi_uldivmod>
 8002e98:	4a20      	ldr	r2, [pc, #128]	@ (8002f1c <UART_SetConfig+0x10c>)
 8002e9a:	fba2 3100 	umull	r3, r1, r2, r0
 8002e9e:	0949      	lsrs	r1, r1, #5
 8002ea0:	2364      	movs	r3, #100	@ 0x64
 8002ea2:	fb03 0311 	mls	r3, r3, r1, r0
 8002ea6:	011b      	lsls	r3, r3, #4
 8002ea8:	3332      	adds	r3, #50	@ 0x32
 8002eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002eae:	095b      	lsrs	r3, r3, #5
 8002eb0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002eb4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002eb8:	f003 030f 	and.w	r3, r3, #15
 8002ebc:	6821      	ldr	r1, [r4, #0]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	608b      	str	r3, [r1, #8]
  }
}
 8002ec2:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	1802      	adds	r2, r0, r0
 8002ec8:	eb43 0103 	adc.w	r1, r3, r3
 8002ecc:	1812      	adds	r2, r2, r0
 8002ece:	f141 0100 	adc.w	r1, r1, #0
 8002ed2:	00c9      	lsls	r1, r1, #3
 8002ed4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ed8:	00d2      	lsls	r2, r2, #3
 8002eda:	1810      	adds	r0, r2, r0
 8002edc:	f141 0100 	adc.w	r1, r1, #0
 8002ee0:	6862      	ldr	r2, [r4, #4]
 8002ee2:	1892      	adds	r2, r2, r2
 8002ee4:	415b      	adcs	r3, r3
 8002ee6:	f7fd f9e3 	bl	80002b0 <__aeabi_uldivmod>
 8002eea:	4a0c      	ldr	r2, [pc, #48]	@ (8002f1c <UART_SetConfig+0x10c>)
 8002eec:	fba2 3100 	umull	r3, r1, r2, r0
 8002ef0:	0949      	lsrs	r1, r1, #5
 8002ef2:	2364      	movs	r3, #100	@ 0x64
 8002ef4:	fb03 0311 	mls	r3, r3, r1, r0
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	3332      	adds	r3, #50	@ 0x32
 8002efc:	fba2 2303 	umull	r2, r3, r2, r3
 8002f00:	095b      	lsrs	r3, r3, #5
 8002f02:	005a      	lsls	r2, r3, #1
 8002f04:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8002f08:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	6821      	ldr	r1, [r4, #0]
 8002f12:	4413      	add	r3, r2
 8002f14:	608b      	str	r3, [r1, #8]
 8002f16:	e7d4      	b.n	8002ec2 <UART_SetConfig+0xb2>
 8002f18:	40011000 	.word	0x40011000
 8002f1c:	51eb851f 	.word	0x51eb851f

08002f20 <UART_WaitOnFlagUntilTimeout>:
{
 8002f20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f24:	b083      	sub	sp, #12
 8002f26:	4605      	mov	r5, r0
 8002f28:	460e      	mov	r6, r1
 8002f2a:	4617      	mov	r7, r2
 8002f2c:	4699      	mov	r9, r3
 8002f2e:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f32:	682b      	ldr	r3, [r5, #0]
 8002f34:	681c      	ldr	r4, [r3, #0]
 8002f36:	ea36 0404 	bics.w	r4, r6, r4
 8002f3a:	bf0c      	ite	eq
 8002f3c:	2401      	moveq	r4, #1
 8002f3e:	2400      	movne	r4, #0
 8002f40:	42bc      	cmp	r4, r7
 8002f42:	d128      	bne.n	8002f96 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8002f44:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002f48:	d0f3      	beq.n	8002f32 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f4a:	f7fe fb53 	bl	80015f4 <HAL_GetTick>
 8002f4e:	eba0 0009 	sub.w	r0, r0, r9
 8002f52:	4540      	cmp	r0, r8
 8002f54:	d823      	bhi.n	8002f9e <UART_WaitOnFlagUntilTimeout+0x7e>
 8002f56:	f1b8 0f00 	cmp.w	r8, #0
 8002f5a:	d022      	beq.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f5c:	682b      	ldr	r3, [r5, #0]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	f012 0f04 	tst.w	r2, #4
 8002f64:	d0e5      	beq.n	8002f32 <UART_WaitOnFlagUntilTimeout+0x12>
 8002f66:	2e80      	cmp	r6, #128	@ 0x80
 8002f68:	d0e3      	beq.n	8002f32 <UART_WaitOnFlagUntilTimeout+0x12>
 8002f6a:	2e40      	cmp	r6, #64	@ 0x40
 8002f6c:	d0e1      	beq.n	8002f32 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	f012 0f08 	tst.w	r2, #8
 8002f74:	d0dd      	beq.n	8002f32 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002f76:	2400      	movs	r4, #0
 8002f78:	9401      	str	r4, [sp, #4]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	9201      	str	r2, [sp, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	9301      	str	r3, [sp, #4]
 8002f82:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8002f84:	4628      	mov	r0, r5
 8002f86:	f7ff ff15 	bl	8002db4 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f8a:	2308      	movs	r3, #8
 8002f8c:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8002f8e:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8002f92:	2001      	movs	r0, #1
 8002f94:	e000      	b.n	8002f98 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8002f96:	2000      	movs	r0, #0
}
 8002f98:	b003      	add	sp, #12
 8002f9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8002f9e:	2003      	movs	r0, #3
 8002fa0:	e7fa      	b.n	8002f98 <UART_WaitOnFlagUntilTimeout+0x78>
 8002fa2:	2003      	movs	r0, #3
 8002fa4:	e7f8      	b.n	8002f98 <UART_WaitOnFlagUntilTimeout+0x78>

08002fa6 <HAL_UART_Init>:
  if (huart == NULL)
 8002fa6:	b360      	cbz	r0, 8003002 <HAL_UART_Init+0x5c>
{
 8002fa8:	b510      	push	{r4, lr}
 8002faa:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002fac:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002fb0:	b313      	cbz	r3, 8002ff8 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8002fb2:	2324      	movs	r3, #36	@ 0x24
 8002fb4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8002fb8:	6822      	ldr	r2, [r4, #0]
 8002fba:	68d3      	ldr	r3, [r2, #12]
 8002fbc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002fc0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	f7ff ff24 	bl	8002e10 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fc8:	6822      	ldr	r2, [r4, #0]
 8002fca:	6913      	ldr	r3, [r2, #16]
 8002fcc:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8002fd0:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fd2:	6822      	ldr	r2, [r4, #0]
 8002fd4:	6953      	ldr	r3, [r2, #20]
 8002fd6:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8002fda:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002fdc:	6822      	ldr	r2, [r4, #0]
 8002fde:	68d3      	ldr	r3, [r2, #12]
 8002fe0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002fe4:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fea:	2320      	movs	r3, #32
 8002fec:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ff0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ff4:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8002ff6:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002ff8:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8002ffc:	f7fe f9ac 	bl	8001358 <HAL_UART_MspInit>
 8003000:	e7d7      	b.n	8002fb2 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8003002:	2001      	movs	r0, #1
}
 8003004:	4770      	bx	lr

08003006 <HAL_UART_Transmit>:
{
 8003006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800300e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b20      	cmp	r3, #32
 8003016:	d156      	bne.n	80030c6 <HAL_UART_Transmit+0xc0>
 8003018:	4604      	mov	r4, r0
 800301a:	460d      	mov	r5, r1
 800301c:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800301e:	2900      	cmp	r1, #0
 8003020:	d055      	beq.n	80030ce <HAL_UART_Transmit+0xc8>
 8003022:	b90a      	cbnz	r2, 8003028 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8003024:	2001      	movs	r0, #1
 8003026:	e04f      	b.n	80030c8 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003028:	2300      	movs	r3, #0
 800302a:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800302c:	2321      	movs	r3, #33	@ 0x21
 800302e:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8003032:	f7fe fadf 	bl	80015f4 <HAL_GetTick>
 8003036:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8003038:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 800303c:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003040:	68a3      	ldr	r3, [r4, #8]
 8003042:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003046:	d002      	beq.n	800304e <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8003048:	f04f 0800 	mov.w	r8, #0
 800304c:	e014      	b.n	8003078 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800304e:	6923      	ldr	r3, [r4, #16]
 8003050:	b32b      	cbz	r3, 800309e <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 8003052:	f04f 0800 	mov.w	r8, #0
 8003056:	e00f      	b.n	8003078 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8003058:	2320      	movs	r3, #32
 800305a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 800305e:	2003      	movs	r0, #3
 8003060:	e032      	b.n	80030c8 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003062:	f838 3b02 	ldrh.w	r3, [r8], #2
 8003066:	6822      	ldr	r2, [r4, #0]
 8003068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800306c:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 800306e:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8003070:	b292      	uxth	r2, r2
 8003072:	3a01      	subs	r2, #1
 8003074:	b292      	uxth	r2, r2
 8003076:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003078:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 800307a:	b29b      	uxth	r3, r3
 800307c:	b193      	cbz	r3, 80030a4 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800307e:	9600      	str	r6, [sp, #0]
 8003080:	463b      	mov	r3, r7
 8003082:	2200      	movs	r2, #0
 8003084:	2180      	movs	r1, #128	@ 0x80
 8003086:	4620      	mov	r0, r4
 8003088:	f7ff ff4a 	bl	8002f20 <UART_WaitOnFlagUntilTimeout>
 800308c:	2800      	cmp	r0, #0
 800308e:	d1e3      	bne.n	8003058 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8003090:	2d00      	cmp	r5, #0
 8003092:	d0e6      	beq.n	8003062 <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003094:	f815 2b01 	ldrb.w	r2, [r5], #1
 8003098:	6823      	ldr	r3, [r4, #0]
 800309a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800309c:	e7e7      	b.n	800306e <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 800309e:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80030a0:	2500      	movs	r5, #0
 80030a2:	e7e9      	b.n	8003078 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030a4:	9600      	str	r6, [sp, #0]
 80030a6:	463b      	mov	r3, r7
 80030a8:	2200      	movs	r2, #0
 80030aa:	2140      	movs	r1, #64	@ 0x40
 80030ac:	4620      	mov	r0, r4
 80030ae:	f7ff ff37 	bl	8002f20 <UART_WaitOnFlagUntilTimeout>
 80030b2:	b918      	cbnz	r0, 80030bc <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 80030b4:	2320      	movs	r3, #32
 80030b6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 80030ba:	e005      	b.n	80030c8 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 80030bc:	2320      	movs	r3, #32
 80030be:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 80030c2:	2003      	movs	r0, #3
 80030c4:	e000      	b.n	80030c8 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 80030c6:	2002      	movs	r0, #2
}
 80030c8:	b002      	add	sp, #8
 80030ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80030ce:	2001      	movs	r0, #1
 80030d0:	e7fa      	b.n	80030c8 <HAL_UART_Transmit+0xc2>

080030d2 <HAL_UART_RxCpltCallback>:
}
 80030d2:	4770      	bx	lr

080030d4 <HAL_UART_RxHalfCpltCallback>:
}
 80030d4:	4770      	bx	lr

080030d6 <HAL_UART_ErrorCallback>:
}
 80030d6:	4770      	bx	lr

080030d8 <UART_DMAError>:
{
 80030d8:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030da:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80030dc:	6823      	ldr	r3, [r4, #0]
 80030de:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80030e0:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b21      	cmp	r3, #33	@ 0x21
 80030e8:	d010      	beq.n	800310c <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030ea:	6823      	ldr	r3, [r4, #0]
 80030ec:	695a      	ldr	r2, [r3, #20]
 80030ee:	f002 0240 	and.w	r2, r2, #64	@ 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80030f2:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b22      	cmp	r3, #34	@ 0x22
 80030fa:	d011      	beq.n	8003120 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80030fc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80030fe:	f043 0310 	orr.w	r3, r3, #16
 8003102:	6463      	str	r3, [r4, #68]	@ 0x44
  HAL_UART_ErrorCallback(huart);
 8003104:	4620      	mov	r0, r4
 8003106:	f7ff ffe6 	bl	80030d6 <HAL_UART_ErrorCallback>
}
 800310a:	bd10      	pop	{r4, pc}
 800310c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003110:	2a00      	cmp	r2, #0
 8003112:	d0ea      	beq.n	80030ea <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 8003114:	2300      	movs	r3, #0
 8003116:	84e3      	strh	r3, [r4, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003118:	4620      	mov	r0, r4
 800311a:	f7ff fe3b 	bl	8002d94 <UART_EndTxTransfer>
 800311e:	e7e4      	b.n	80030ea <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003120:	2a00      	cmp	r2, #0
 8003122:	d0eb      	beq.n	80030fc <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 8003124:	2300      	movs	r3, #0
 8003126:	85e3      	strh	r3, [r4, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003128:	4620      	mov	r0, r4
 800312a:	f7ff fe43 	bl	8002db4 <UART_EndRxTransfer>
 800312e:	e7e5      	b.n	80030fc <UART_DMAError+0x24>

08003130 <HAL_UARTEx_RxEventCallback>:
}
 8003130:	4770      	bx	lr

08003132 <UART_DMARxHalfCplt>:
{
 8003132:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003134:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003136:	2301      	movs	r3, #1
 8003138:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800313a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800313c:	2b01      	cmp	r3, #1
 800313e:	d002      	beq.n	8003146 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 8003140:	f7ff ffc8 	bl	80030d4 <HAL_UART_RxHalfCpltCallback>
}
 8003144:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003146:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8003148:	0849      	lsrs	r1, r1, #1
 800314a:	f7ff fff1 	bl	8003130 <HAL_UARTEx_RxEventCallback>
 800314e:	e7f9      	b.n	8003144 <UART_DMARxHalfCplt+0x12>

08003150 <UART_DMAReceiveCplt>:
{
 8003150:	b508      	push	{r3, lr}
 8003152:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003154:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800315e:	d12b      	bne.n	80031b8 <UART_DMAReceiveCplt+0x68>
    huart->RxXferCount = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003164:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003166:	f102 030c 	add.w	r3, r2, #12
 800316a:	e853 3f00 	ldrex	r3, [r3]
 800316e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003172:	320c      	adds	r2, #12
 8003174:	e842 3100 	strex	r1, r3, [r2]
 8003178:	2900      	cmp	r1, #0
 800317a:	d1f3      	bne.n	8003164 <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800317c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317e:	f102 0314 	add.w	r3, r2, #20
 8003182:	e853 3f00 	ldrex	r3, [r3]
 8003186:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800318a:	3214      	adds	r2, #20
 800318c:	e842 3100 	strex	r1, r3, [r2]
 8003190:	2900      	cmp	r1, #0
 8003192:	d1f3      	bne.n	800317c <UART_DMAReceiveCplt+0x2c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003194:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003196:	f102 0314 	add.w	r3, r2, #20
 800319a:	e853 3f00 	ldrex	r3, [r3]
 800319e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a2:	3214      	adds	r2, #20
 80031a4:	e842 3100 	strex	r1, r3, [r2]
 80031a8:	2900      	cmp	r1, #0
 80031aa:	d1f3      	bne.n	8003194 <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 80031ac:	2320      	movs	r3, #32
 80031ae:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031b2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d007      	beq.n	80031c8 <UART_DMAReceiveCplt+0x78>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031b8:	2300      	movs	r3, #0
 80031ba:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031bc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d00f      	beq.n	80031e2 <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 80031c2:	f7ff ff86 	bl	80030d2 <HAL_UART_RxCpltCallback>
}
 80031c6:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031c8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ca:	f102 030c 	add.w	r3, r2, #12
 80031ce:	e853 3f00 	ldrex	r3, [r3]
 80031d2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d6:	320c      	adds	r2, #12
 80031d8:	e842 3100 	strex	r1, r3, [r2]
 80031dc:	2900      	cmp	r1, #0
 80031de:	d1f3      	bne.n	80031c8 <UART_DMAReceiveCplt+0x78>
 80031e0:	e7ea      	b.n	80031b8 <UART_DMAReceiveCplt+0x68>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031e2:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80031e4:	f7ff ffa4 	bl	8003130 <HAL_UARTEx_RxEventCallback>
 80031e8:	e7ed      	b.n	80031c6 <UART_DMAReceiveCplt+0x76>
	...

080031ec <UART_Start_Receive_DMA>:
{
 80031ec:	b530      	push	{r4, r5, lr}
 80031ee:	b083      	sub	sp, #12
 80031f0:	4604      	mov	r4, r0
 80031f2:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 80031f4:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->RxXferSize = Size;
 80031f6:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f8:	2500      	movs	r5, #0
 80031fa:	6445      	str	r5, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031fc:	2222      	movs	r2, #34	@ 0x22
 80031fe:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003202:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8003204:	481f      	ldr	r0, [pc, #124]	@ (8003284 <UART_Start_Receive_DMA+0x98>)
 8003206:	63d0      	str	r0, [r2, #60]	@ 0x3c
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003208:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800320a:	481f      	ldr	r0, [pc, #124]	@ (8003288 <UART_Start_Receive_DMA+0x9c>)
 800320c:	6410      	str	r0, [r2, #64]	@ 0x40
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800320e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003210:	481e      	ldr	r0, [pc, #120]	@ (800328c <UART_Start_Receive_DMA+0xa0>)
 8003212:	64d0      	str	r0, [r2, #76]	@ 0x4c
  huart->hdmarx->XferAbortCallback = NULL;
 8003214:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003216:	6515      	str	r5, [r2, #80]	@ 0x50
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003218:	6820      	ldr	r0, [r4, #0]
 800321a:	460a      	mov	r2, r1
 800321c:	1d01      	adds	r1, r0, #4
 800321e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003220:	f7fe fe02 	bl	8001e28 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003224:	9501      	str	r5, [sp, #4]
 8003226:	6823      	ldr	r3, [r4, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	9201      	str	r2, [sp, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	9301      	str	r3, [sp, #4]
 8003230:	9b01      	ldr	r3, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003232:	6923      	ldr	r3, [r4, #16]
 8003234:	b15b      	cbz	r3, 800324e <UART_Start_Receive_DMA+0x62>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003236:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003238:	f102 030c 	add.w	r3, r2, #12
 800323c:	e853 3f00 	ldrex	r3, [r3]
 8003240:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003244:	320c      	adds	r2, #12
 8003246:	e842 3100 	strex	r1, r3, [r2]
 800324a:	2900      	cmp	r1, #0
 800324c:	d1f3      	bne.n	8003236 <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800324e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003250:	f102 0314 	add.w	r3, r2, #20
 8003254:	e853 3f00 	ldrex	r3, [r3]
 8003258:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325c:	3214      	adds	r2, #20
 800325e:	e842 3100 	strex	r1, r3, [r2]
 8003262:	2900      	cmp	r1, #0
 8003264:	d1f3      	bne.n	800324e <UART_Start_Receive_DMA+0x62>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003266:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003268:	f102 0314 	add.w	r3, r2, #20
 800326c:	e853 3f00 	ldrex	r3, [r3]
 8003270:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003274:	3214      	adds	r2, #20
 8003276:	e842 3100 	strex	r1, r3, [r2]
 800327a:	2900      	cmp	r1, #0
 800327c:	d1f3      	bne.n	8003266 <UART_Start_Receive_DMA+0x7a>
}
 800327e:	2000      	movs	r0, #0
 8003280:	b003      	add	sp, #12
 8003282:	bd30      	pop	{r4, r5, pc}
 8003284:	08003151 	.word	0x08003151
 8003288:	08003133 	.word	0x08003133
 800328c:	080030d9 	.word	0x080030d9

08003290 <HAL_UART_Receive_DMA>:
{
 8003290:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8003292:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b20      	cmp	r3, #32
 800329a:	d108      	bne.n	80032ae <HAL_UART_Receive_DMA+0x1e>
    if ((pData == NULL) || (Size == 0U))
 800329c:	b149      	cbz	r1, 80032b2 <HAL_UART_Receive_DMA+0x22>
 800329e:	b90a      	cbnz	r2, 80032a4 <HAL_UART_Receive_DMA+0x14>
      return HAL_ERROR;
 80032a0:	2001      	movs	r0, #1
}
 80032a2:	bd08      	pop	{r3, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032a4:	2300      	movs	r3, #0
 80032a6:	6303      	str	r3, [r0, #48]	@ 0x30
    return (UART_Start_Receive_DMA(huart, pData, Size));
 80032a8:	f7ff ffa0 	bl	80031ec <UART_Start_Receive_DMA>
 80032ac:	e7f9      	b.n	80032a2 <HAL_UART_Receive_DMA+0x12>
    return HAL_BUSY;
 80032ae:	2002      	movs	r0, #2
 80032b0:	e7f7      	b.n	80032a2 <HAL_UART_Receive_DMA+0x12>
      return HAL_ERROR;
 80032b2:	2001      	movs	r0, #1
 80032b4:	e7f5      	b.n	80032a2 <HAL_UART_Receive_DMA+0x12>

080032b6 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80032b6:	b410      	push	{r4}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80032b8:	680b      	ldr	r3, [r1, #0]
 80032ba:	b9db      	cbnz	r3, 80032f4 <FMC_SDRAM_Init+0x3e>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80032bc:	6802      	ldr	r2, [r0, #0]
 80032be:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 80032c2:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 80032c6:	684b      	ldr	r3, [r1, #4]
 80032c8:	688c      	ldr	r4, [r1, #8]
 80032ca:	4323      	orrs	r3, r4
 80032cc:	68cc      	ldr	r4, [r1, #12]
 80032ce:	4323      	orrs	r3, r4
 80032d0:	690c      	ldr	r4, [r1, #16]
 80032d2:	4323      	orrs	r3, r4
 80032d4:	694c      	ldr	r4, [r1, #20]
 80032d6:	4323      	orrs	r3, r4
 80032d8:	698c      	ldr	r4, [r1, #24]
 80032da:	4323      	orrs	r3, r4
 80032dc:	69cc      	ldr	r4, [r1, #28]
 80032de:	4323      	orrs	r3, r4
 80032e0:	6a0c      	ldr	r4, [r1, #32]
 80032e2:	4323      	orrs	r3, r4
 80032e4:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 80032e6:	430b      	orrs	r3, r1
 80032e8:	431a      	orrs	r2, r3
 80032ea:	6002      	str	r2, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 80032ec:	2000      	movs	r0, #0
 80032ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032f2:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80032f4:	6803      	ldr	r3, [r0, #0]
 80032f6:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80032fa:	69ca      	ldr	r2, [r1, #28]
 80032fc:	6a0c      	ldr	r4, [r1, #32]
 80032fe:	4322      	orrs	r2, r4
 8003300:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 8003302:	4322      	orrs	r2, r4
 8003304:	4313      	orrs	r3, r2
 8003306:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8003308:	6842      	ldr	r2, [r0, #4]
 800330a:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 800330e:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8003312:	684b      	ldr	r3, [r1, #4]
 8003314:	688c      	ldr	r4, [r1, #8]
 8003316:	4323      	orrs	r3, r4
 8003318:	68cc      	ldr	r4, [r1, #12]
 800331a:	4323      	orrs	r3, r4
 800331c:	690c      	ldr	r4, [r1, #16]
 800331e:	4323      	orrs	r3, r4
 8003320:	694c      	ldr	r4, [r1, #20]
 8003322:	4323      	orrs	r3, r4
 8003324:	6989      	ldr	r1, [r1, #24]
 8003326:	430b      	orrs	r3, r1
 8003328:	431a      	orrs	r2, r3
 800332a:	6042      	str	r2, [r0, #4]
 800332c:	e7de      	b.n	80032ec <FMC_SDRAM_Init+0x36>

0800332e <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800332e:	b410      	push	{r4}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8003330:	bb3a      	cbnz	r2, 8003382 <FMC_SDRAM_Timing_Init+0x54>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8003332:	6882      	ldr	r2, [r0, #8]
 8003334:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8003338:	680b      	ldr	r3, [r1, #0]
 800333a:	3b01      	subs	r3, #1
 800333c:	684c      	ldr	r4, [r1, #4]
 800333e:	f104 3cff 	add.w	ip, r4, #4294967295
 8003342:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 8003346:	688c      	ldr	r4, [r1, #8]
 8003348:	f104 3cff 	add.w	ip, r4, #4294967295
 800334c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8003350:	68cc      	ldr	r4, [r1, #12]
 8003352:	f104 3cff 	add.w	ip, r4, #4294967295
 8003356:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 800335a:	690c      	ldr	r4, [r1, #16]
 800335c:	f104 3cff 	add.w	ip, r4, #4294967295
 8003360:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8003364:	694c      	ldr	r4, [r1, #20]
 8003366:	f104 3cff 	add.w	ip, r4, #4294967295
 800336a:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 800336e:	6989      	ldr	r1, [r1, #24]
 8003370:	3901      	subs	r1, #1
 8003372:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003376:	4313      	orrs	r3, r2
 8003378:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 800337a:	2000      	movs	r0, #0
 800337c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003380:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8003382:	6883      	ldr	r3, [r0, #8]
 8003384:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003388:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800338c:	68ca      	ldr	r2, [r1, #12]
 800338e:	f102 3cff 	add.w	ip, r2, #4294967295
 8003392:	694a      	ldr	r2, [r1, #20]
 8003394:	3a01      	subs	r2, #1
 8003396:	0512      	lsls	r2, r2, #20
 8003398:	ea42 320c 	orr.w	r2, r2, ip, lsl #12
 800339c:	4313      	orrs	r3, r2
 800339e:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80033a0:	68c2      	ldr	r2, [r0, #12]
 80033a2:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 80033a6:	680b      	ldr	r3, [r1, #0]
 80033a8:	3b01      	subs	r3, #1
 80033aa:	684c      	ldr	r4, [r1, #4]
 80033ac:	f104 3cff 	add.w	ip, r4, #4294967295
 80033b0:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 80033b4:	688c      	ldr	r4, [r1, #8]
 80033b6:	f104 3cff 	add.w	ip, r4, #4294967295
 80033ba:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80033be:	690c      	ldr	r4, [r1, #16]
 80033c0:	f104 3cff 	add.w	ip, r4, #4294967295
 80033c4:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80033c8:	6989      	ldr	r1, [r1, #24]
 80033ca:	3901      	subs	r1, #1
 80033cc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80033d0:	4313      	orrs	r3, r2
 80033d2:	60c3      	str	r3, [r0, #12]
 80033d4:	e7d1      	b.n	800337a <FMC_SDRAM_Timing_Init+0x4c>
	...

080033d8 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80033d8:	4b01      	ldr	r3, [pc, #4]	@ (80033e0 <LL_SetSystemCoreClock+0x8>)
 80033da:	6018      	str	r0, [r3, #0]
}
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	20000000 	.word	0x20000000

080033e4 <_strtoul_l.constprop.0>:
 80033e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033e8:	4e34      	ldr	r6, [pc, #208]	@ (80034bc <_strtoul_l.constprop.0+0xd8>)
 80033ea:	4686      	mov	lr, r0
 80033ec:	460d      	mov	r5, r1
 80033ee:	4628      	mov	r0, r5
 80033f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80033f4:	5d37      	ldrb	r7, [r6, r4]
 80033f6:	f017 0708 	ands.w	r7, r7, #8
 80033fa:	d1f8      	bne.n	80033ee <_strtoul_l.constprop.0+0xa>
 80033fc:	2c2d      	cmp	r4, #45	@ 0x2d
 80033fe:	d12f      	bne.n	8003460 <_strtoul_l.constprop.0+0x7c>
 8003400:	782c      	ldrb	r4, [r5, #0]
 8003402:	2701      	movs	r7, #1
 8003404:	1c85      	adds	r5, r0, #2
 8003406:	f033 0010 	bics.w	r0, r3, #16
 800340a:	d109      	bne.n	8003420 <_strtoul_l.constprop.0+0x3c>
 800340c:	2c30      	cmp	r4, #48	@ 0x30
 800340e:	d12c      	bne.n	800346a <_strtoul_l.constprop.0+0x86>
 8003410:	7828      	ldrb	r0, [r5, #0]
 8003412:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8003416:	2858      	cmp	r0, #88	@ 0x58
 8003418:	d127      	bne.n	800346a <_strtoul_l.constprop.0+0x86>
 800341a:	786c      	ldrb	r4, [r5, #1]
 800341c:	2310      	movs	r3, #16
 800341e:	3502      	adds	r5, #2
 8003420:	f04f 38ff 	mov.w	r8, #4294967295
 8003424:	2600      	movs	r6, #0
 8003426:	fbb8 f8f3 	udiv	r8, r8, r3
 800342a:	fb03 f908 	mul.w	r9, r3, r8
 800342e:	ea6f 0909 	mvn.w	r9, r9
 8003432:	4630      	mov	r0, r6
 8003434:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8003438:	f1bc 0f09 	cmp.w	ip, #9
 800343c:	d81c      	bhi.n	8003478 <_strtoul_l.constprop.0+0x94>
 800343e:	4664      	mov	r4, ip
 8003440:	42a3      	cmp	r3, r4
 8003442:	dd2a      	ble.n	800349a <_strtoul_l.constprop.0+0xb6>
 8003444:	f1b6 3fff 	cmp.w	r6, #4294967295
 8003448:	d007      	beq.n	800345a <_strtoul_l.constprop.0+0x76>
 800344a:	4580      	cmp	r8, r0
 800344c:	d322      	bcc.n	8003494 <_strtoul_l.constprop.0+0xb0>
 800344e:	d101      	bne.n	8003454 <_strtoul_l.constprop.0+0x70>
 8003450:	45a1      	cmp	r9, r4
 8003452:	db1f      	blt.n	8003494 <_strtoul_l.constprop.0+0xb0>
 8003454:	fb00 4003 	mla	r0, r0, r3, r4
 8003458:	2601      	movs	r6, #1
 800345a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800345e:	e7e9      	b.n	8003434 <_strtoul_l.constprop.0+0x50>
 8003460:	2c2b      	cmp	r4, #43	@ 0x2b
 8003462:	bf04      	itt	eq
 8003464:	782c      	ldrbeq	r4, [r5, #0]
 8003466:	1c85      	addeq	r5, r0, #2
 8003468:	e7cd      	b.n	8003406 <_strtoul_l.constprop.0+0x22>
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1d8      	bne.n	8003420 <_strtoul_l.constprop.0+0x3c>
 800346e:	2c30      	cmp	r4, #48	@ 0x30
 8003470:	bf0c      	ite	eq
 8003472:	2308      	moveq	r3, #8
 8003474:	230a      	movne	r3, #10
 8003476:	e7d3      	b.n	8003420 <_strtoul_l.constprop.0+0x3c>
 8003478:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800347c:	f1bc 0f19 	cmp.w	ip, #25
 8003480:	d801      	bhi.n	8003486 <_strtoul_l.constprop.0+0xa2>
 8003482:	3c37      	subs	r4, #55	@ 0x37
 8003484:	e7dc      	b.n	8003440 <_strtoul_l.constprop.0+0x5c>
 8003486:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800348a:	f1bc 0f19 	cmp.w	ip, #25
 800348e:	d804      	bhi.n	800349a <_strtoul_l.constprop.0+0xb6>
 8003490:	3c57      	subs	r4, #87	@ 0x57
 8003492:	e7d5      	b.n	8003440 <_strtoul_l.constprop.0+0x5c>
 8003494:	f04f 36ff 	mov.w	r6, #4294967295
 8003498:	e7df      	b.n	800345a <_strtoul_l.constprop.0+0x76>
 800349a:	1c73      	adds	r3, r6, #1
 800349c:	d106      	bne.n	80034ac <_strtoul_l.constprop.0+0xc8>
 800349e:	2322      	movs	r3, #34	@ 0x22
 80034a0:	f8ce 3000 	str.w	r3, [lr]
 80034a4:	4630      	mov	r0, r6
 80034a6:	b932      	cbnz	r2, 80034b6 <_strtoul_l.constprop.0+0xd2>
 80034a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80034ac:	b107      	cbz	r7, 80034b0 <_strtoul_l.constprop.0+0xcc>
 80034ae:	4240      	negs	r0, r0
 80034b0:	2a00      	cmp	r2, #0
 80034b2:	d0f9      	beq.n	80034a8 <_strtoul_l.constprop.0+0xc4>
 80034b4:	b106      	cbz	r6, 80034b8 <_strtoul_l.constprop.0+0xd4>
 80034b6:	1e69      	subs	r1, r5, #1
 80034b8:	6011      	str	r1, [r2, #0]
 80034ba:	e7f5      	b.n	80034a8 <_strtoul_l.constprop.0+0xc4>
 80034bc:	08003eed 	.word	0x08003eed

080034c0 <strtoul>:
 80034c0:	4613      	mov	r3, r2
 80034c2:	460a      	mov	r2, r1
 80034c4:	4601      	mov	r1, r0
 80034c6:	4802      	ldr	r0, [pc, #8]	@ (80034d0 <strtoul+0x10>)
 80034c8:	6800      	ldr	r0, [r0, #0]
 80034ca:	f7ff bf8b 	b.w	80033e4 <_strtoul_l.constprop.0>
 80034ce:	bf00      	nop
 80034d0:	2000000c 	.word	0x2000000c

080034d4 <_vsniprintf_r>:
 80034d4:	b530      	push	{r4, r5, lr}
 80034d6:	4614      	mov	r4, r2
 80034d8:	2c00      	cmp	r4, #0
 80034da:	b09b      	sub	sp, #108	@ 0x6c
 80034dc:	4605      	mov	r5, r0
 80034de:	461a      	mov	r2, r3
 80034e0:	da05      	bge.n	80034ee <_vsniprintf_r+0x1a>
 80034e2:	238b      	movs	r3, #139	@ 0x8b
 80034e4:	6003      	str	r3, [r0, #0]
 80034e6:	f04f 30ff 	mov.w	r0, #4294967295
 80034ea:	b01b      	add	sp, #108	@ 0x6c
 80034ec:	bd30      	pop	{r4, r5, pc}
 80034ee:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80034f2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80034f6:	bf14      	ite	ne
 80034f8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80034fc:	4623      	moveq	r3, r4
 80034fe:	9302      	str	r3, [sp, #8]
 8003500:	9305      	str	r3, [sp, #20]
 8003502:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003506:	9100      	str	r1, [sp, #0]
 8003508:	9104      	str	r1, [sp, #16]
 800350a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800350e:	4669      	mov	r1, sp
 8003510:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8003512:	f000 f9cd 	bl	80038b0 <_svfiprintf_r>
 8003516:	1c43      	adds	r3, r0, #1
 8003518:	bfbc      	itt	lt
 800351a:	238b      	movlt	r3, #139	@ 0x8b
 800351c:	602b      	strlt	r3, [r5, #0]
 800351e:	2c00      	cmp	r4, #0
 8003520:	d0e3      	beq.n	80034ea <_vsniprintf_r+0x16>
 8003522:	9b00      	ldr	r3, [sp, #0]
 8003524:	2200      	movs	r2, #0
 8003526:	701a      	strb	r2, [r3, #0]
 8003528:	e7df      	b.n	80034ea <_vsniprintf_r+0x16>
	...

0800352c <vsniprintf>:
 800352c:	b507      	push	{r0, r1, r2, lr}
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	4613      	mov	r3, r2
 8003532:	460a      	mov	r2, r1
 8003534:	4601      	mov	r1, r0
 8003536:	4803      	ldr	r0, [pc, #12]	@ (8003544 <vsniprintf+0x18>)
 8003538:	6800      	ldr	r0, [r0, #0]
 800353a:	f7ff ffcb 	bl	80034d4 <_vsniprintf_r>
 800353e:	b003      	add	sp, #12
 8003540:	f85d fb04 	ldr.w	pc, [sp], #4
 8003544:	2000000c 	.word	0x2000000c

08003548 <memset>:
 8003548:	4402      	add	r2, r0
 800354a:	4603      	mov	r3, r0
 800354c:	4293      	cmp	r3, r2
 800354e:	d100      	bne.n	8003552 <memset+0xa>
 8003550:	4770      	bx	lr
 8003552:	f803 1b01 	strb.w	r1, [r3], #1
 8003556:	e7f9      	b.n	800354c <memset+0x4>

08003558 <__strtok_r>:
 8003558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800355a:	4604      	mov	r4, r0
 800355c:	b908      	cbnz	r0, 8003562 <__strtok_r+0xa>
 800355e:	6814      	ldr	r4, [r2, #0]
 8003560:	b144      	cbz	r4, 8003574 <__strtok_r+0x1c>
 8003562:	4620      	mov	r0, r4
 8003564:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003568:	460f      	mov	r7, r1
 800356a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800356e:	b91e      	cbnz	r6, 8003578 <__strtok_r+0x20>
 8003570:	b965      	cbnz	r5, 800358c <__strtok_r+0x34>
 8003572:	6015      	str	r5, [r2, #0]
 8003574:	2000      	movs	r0, #0
 8003576:	e005      	b.n	8003584 <__strtok_r+0x2c>
 8003578:	42b5      	cmp	r5, r6
 800357a:	d1f6      	bne.n	800356a <__strtok_r+0x12>
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1f0      	bne.n	8003562 <__strtok_r+0xa>
 8003580:	6014      	str	r4, [r2, #0]
 8003582:	7003      	strb	r3, [r0, #0]
 8003584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003586:	461c      	mov	r4, r3
 8003588:	e00c      	b.n	80035a4 <__strtok_r+0x4c>
 800358a:	b915      	cbnz	r5, 8003592 <__strtok_r+0x3a>
 800358c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003590:	460e      	mov	r6, r1
 8003592:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003596:	42ab      	cmp	r3, r5
 8003598:	d1f7      	bne.n	800358a <__strtok_r+0x32>
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0f3      	beq.n	8003586 <__strtok_r+0x2e>
 800359e:	2300      	movs	r3, #0
 80035a0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80035a4:	6014      	str	r4, [r2, #0]
 80035a6:	e7ed      	b.n	8003584 <__strtok_r+0x2c>

080035a8 <strtok_r>:
 80035a8:	2301      	movs	r3, #1
 80035aa:	f7ff bfd5 	b.w	8003558 <__strtok_r>
	...

080035b0 <__errno>:
 80035b0:	4b01      	ldr	r3, [pc, #4]	@ (80035b8 <__errno+0x8>)
 80035b2:	6818      	ldr	r0, [r3, #0]
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	2000000c 	.word	0x2000000c

080035bc <__libc_init_array>:
 80035bc:	b570      	push	{r4, r5, r6, lr}
 80035be:	4d0d      	ldr	r5, [pc, #52]	@ (80035f4 <__libc_init_array+0x38>)
 80035c0:	4c0d      	ldr	r4, [pc, #52]	@ (80035f8 <__libc_init_array+0x3c>)
 80035c2:	1b64      	subs	r4, r4, r5
 80035c4:	10a4      	asrs	r4, r4, #2
 80035c6:	2600      	movs	r6, #0
 80035c8:	42a6      	cmp	r6, r4
 80035ca:	d109      	bne.n	80035e0 <__libc_init_array+0x24>
 80035cc:	4d0b      	ldr	r5, [pc, #44]	@ (80035fc <__libc_init_array+0x40>)
 80035ce:	4c0c      	ldr	r4, [pc, #48]	@ (8003600 <__libc_init_array+0x44>)
 80035d0:	f000 fc66 	bl	8003ea0 <_init>
 80035d4:	1b64      	subs	r4, r4, r5
 80035d6:	10a4      	asrs	r4, r4, #2
 80035d8:	2600      	movs	r6, #0
 80035da:	42a6      	cmp	r6, r4
 80035dc:	d105      	bne.n	80035ea <__libc_init_array+0x2e>
 80035de:	bd70      	pop	{r4, r5, r6, pc}
 80035e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80035e4:	4798      	blx	r3
 80035e6:	3601      	adds	r6, #1
 80035e8:	e7ee      	b.n	80035c8 <__libc_init_array+0xc>
 80035ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80035ee:	4798      	blx	r3
 80035f0:	3601      	adds	r6, #1
 80035f2:	e7f2      	b.n	80035da <__libc_init_array+0x1e>
 80035f4:	08004028 	.word	0x08004028
 80035f8:	08004028 	.word	0x08004028
 80035fc:	08004028 	.word	0x08004028
 8003600:	0800402c 	.word	0x0800402c

08003604 <__retarget_lock_acquire_recursive>:
 8003604:	4770      	bx	lr

08003606 <__retarget_lock_release_recursive>:
 8003606:	4770      	bx	lr

08003608 <_free_r>:
 8003608:	b538      	push	{r3, r4, r5, lr}
 800360a:	4605      	mov	r5, r0
 800360c:	2900      	cmp	r1, #0
 800360e:	d041      	beq.n	8003694 <_free_r+0x8c>
 8003610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003614:	1f0c      	subs	r4, r1, #4
 8003616:	2b00      	cmp	r3, #0
 8003618:	bfb8      	it	lt
 800361a:	18e4      	addlt	r4, r4, r3
 800361c:	f000 f8e0 	bl	80037e0 <__malloc_lock>
 8003620:	4a1d      	ldr	r2, [pc, #116]	@ (8003698 <_free_r+0x90>)
 8003622:	6813      	ldr	r3, [r2, #0]
 8003624:	b933      	cbnz	r3, 8003634 <_free_r+0x2c>
 8003626:	6063      	str	r3, [r4, #4]
 8003628:	6014      	str	r4, [r2, #0]
 800362a:	4628      	mov	r0, r5
 800362c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003630:	f000 b8dc 	b.w	80037ec <__malloc_unlock>
 8003634:	42a3      	cmp	r3, r4
 8003636:	d908      	bls.n	800364a <_free_r+0x42>
 8003638:	6820      	ldr	r0, [r4, #0]
 800363a:	1821      	adds	r1, r4, r0
 800363c:	428b      	cmp	r3, r1
 800363e:	bf01      	itttt	eq
 8003640:	6819      	ldreq	r1, [r3, #0]
 8003642:	685b      	ldreq	r3, [r3, #4]
 8003644:	1809      	addeq	r1, r1, r0
 8003646:	6021      	streq	r1, [r4, #0]
 8003648:	e7ed      	b.n	8003626 <_free_r+0x1e>
 800364a:	461a      	mov	r2, r3
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	b10b      	cbz	r3, 8003654 <_free_r+0x4c>
 8003650:	42a3      	cmp	r3, r4
 8003652:	d9fa      	bls.n	800364a <_free_r+0x42>
 8003654:	6811      	ldr	r1, [r2, #0]
 8003656:	1850      	adds	r0, r2, r1
 8003658:	42a0      	cmp	r0, r4
 800365a:	d10b      	bne.n	8003674 <_free_r+0x6c>
 800365c:	6820      	ldr	r0, [r4, #0]
 800365e:	4401      	add	r1, r0
 8003660:	1850      	adds	r0, r2, r1
 8003662:	4283      	cmp	r3, r0
 8003664:	6011      	str	r1, [r2, #0]
 8003666:	d1e0      	bne.n	800362a <_free_r+0x22>
 8003668:	6818      	ldr	r0, [r3, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	6053      	str	r3, [r2, #4]
 800366e:	4408      	add	r0, r1
 8003670:	6010      	str	r0, [r2, #0]
 8003672:	e7da      	b.n	800362a <_free_r+0x22>
 8003674:	d902      	bls.n	800367c <_free_r+0x74>
 8003676:	230c      	movs	r3, #12
 8003678:	602b      	str	r3, [r5, #0]
 800367a:	e7d6      	b.n	800362a <_free_r+0x22>
 800367c:	6820      	ldr	r0, [r4, #0]
 800367e:	1821      	adds	r1, r4, r0
 8003680:	428b      	cmp	r3, r1
 8003682:	bf04      	itt	eq
 8003684:	6819      	ldreq	r1, [r3, #0]
 8003686:	685b      	ldreq	r3, [r3, #4]
 8003688:	6063      	str	r3, [r4, #4]
 800368a:	bf04      	itt	eq
 800368c:	1809      	addeq	r1, r1, r0
 800368e:	6021      	streq	r1, [r4, #0]
 8003690:	6054      	str	r4, [r2, #4]
 8003692:	e7ca      	b.n	800362a <_free_r+0x22>
 8003694:	bd38      	pop	{r3, r4, r5, pc}
 8003696:	bf00      	nop
 8003698:	200006e8 	.word	0x200006e8

0800369c <sbrk_aligned>:
 800369c:	b570      	push	{r4, r5, r6, lr}
 800369e:	4e0f      	ldr	r6, [pc, #60]	@ (80036dc <sbrk_aligned+0x40>)
 80036a0:	460c      	mov	r4, r1
 80036a2:	6831      	ldr	r1, [r6, #0]
 80036a4:	4605      	mov	r5, r0
 80036a6:	b911      	cbnz	r1, 80036ae <sbrk_aligned+0x12>
 80036a8:	f000 fba6 	bl	8003df8 <_sbrk_r>
 80036ac:	6030      	str	r0, [r6, #0]
 80036ae:	4621      	mov	r1, r4
 80036b0:	4628      	mov	r0, r5
 80036b2:	f000 fba1 	bl	8003df8 <_sbrk_r>
 80036b6:	1c43      	adds	r3, r0, #1
 80036b8:	d103      	bne.n	80036c2 <sbrk_aligned+0x26>
 80036ba:	f04f 34ff 	mov.w	r4, #4294967295
 80036be:	4620      	mov	r0, r4
 80036c0:	bd70      	pop	{r4, r5, r6, pc}
 80036c2:	1cc4      	adds	r4, r0, #3
 80036c4:	f024 0403 	bic.w	r4, r4, #3
 80036c8:	42a0      	cmp	r0, r4
 80036ca:	d0f8      	beq.n	80036be <sbrk_aligned+0x22>
 80036cc:	1a21      	subs	r1, r4, r0
 80036ce:	4628      	mov	r0, r5
 80036d0:	f000 fb92 	bl	8003df8 <_sbrk_r>
 80036d4:	3001      	adds	r0, #1
 80036d6:	d1f2      	bne.n	80036be <sbrk_aligned+0x22>
 80036d8:	e7ef      	b.n	80036ba <sbrk_aligned+0x1e>
 80036da:	bf00      	nop
 80036dc:	200006e4 	.word	0x200006e4

080036e0 <_malloc_r>:
 80036e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036e4:	1ccd      	adds	r5, r1, #3
 80036e6:	f025 0503 	bic.w	r5, r5, #3
 80036ea:	3508      	adds	r5, #8
 80036ec:	2d0c      	cmp	r5, #12
 80036ee:	bf38      	it	cc
 80036f0:	250c      	movcc	r5, #12
 80036f2:	2d00      	cmp	r5, #0
 80036f4:	4606      	mov	r6, r0
 80036f6:	db01      	blt.n	80036fc <_malloc_r+0x1c>
 80036f8:	42a9      	cmp	r1, r5
 80036fa:	d904      	bls.n	8003706 <_malloc_r+0x26>
 80036fc:	230c      	movs	r3, #12
 80036fe:	6033      	str	r3, [r6, #0]
 8003700:	2000      	movs	r0, #0
 8003702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003706:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80037dc <_malloc_r+0xfc>
 800370a:	f000 f869 	bl	80037e0 <__malloc_lock>
 800370e:	f8d8 3000 	ldr.w	r3, [r8]
 8003712:	461c      	mov	r4, r3
 8003714:	bb44      	cbnz	r4, 8003768 <_malloc_r+0x88>
 8003716:	4629      	mov	r1, r5
 8003718:	4630      	mov	r0, r6
 800371a:	f7ff ffbf 	bl	800369c <sbrk_aligned>
 800371e:	1c43      	adds	r3, r0, #1
 8003720:	4604      	mov	r4, r0
 8003722:	d158      	bne.n	80037d6 <_malloc_r+0xf6>
 8003724:	f8d8 4000 	ldr.w	r4, [r8]
 8003728:	4627      	mov	r7, r4
 800372a:	2f00      	cmp	r7, #0
 800372c:	d143      	bne.n	80037b6 <_malloc_r+0xd6>
 800372e:	2c00      	cmp	r4, #0
 8003730:	d04b      	beq.n	80037ca <_malloc_r+0xea>
 8003732:	6823      	ldr	r3, [r4, #0]
 8003734:	4639      	mov	r1, r7
 8003736:	4630      	mov	r0, r6
 8003738:	eb04 0903 	add.w	r9, r4, r3
 800373c:	f000 fb5c 	bl	8003df8 <_sbrk_r>
 8003740:	4581      	cmp	r9, r0
 8003742:	d142      	bne.n	80037ca <_malloc_r+0xea>
 8003744:	6821      	ldr	r1, [r4, #0]
 8003746:	1a6d      	subs	r5, r5, r1
 8003748:	4629      	mov	r1, r5
 800374a:	4630      	mov	r0, r6
 800374c:	f7ff ffa6 	bl	800369c <sbrk_aligned>
 8003750:	3001      	adds	r0, #1
 8003752:	d03a      	beq.n	80037ca <_malloc_r+0xea>
 8003754:	6823      	ldr	r3, [r4, #0]
 8003756:	442b      	add	r3, r5
 8003758:	6023      	str	r3, [r4, #0]
 800375a:	f8d8 3000 	ldr.w	r3, [r8]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	bb62      	cbnz	r2, 80037bc <_malloc_r+0xdc>
 8003762:	f8c8 7000 	str.w	r7, [r8]
 8003766:	e00f      	b.n	8003788 <_malloc_r+0xa8>
 8003768:	6822      	ldr	r2, [r4, #0]
 800376a:	1b52      	subs	r2, r2, r5
 800376c:	d420      	bmi.n	80037b0 <_malloc_r+0xd0>
 800376e:	2a0b      	cmp	r2, #11
 8003770:	d917      	bls.n	80037a2 <_malloc_r+0xc2>
 8003772:	1961      	adds	r1, r4, r5
 8003774:	42a3      	cmp	r3, r4
 8003776:	6025      	str	r5, [r4, #0]
 8003778:	bf18      	it	ne
 800377a:	6059      	strne	r1, [r3, #4]
 800377c:	6863      	ldr	r3, [r4, #4]
 800377e:	bf08      	it	eq
 8003780:	f8c8 1000 	streq.w	r1, [r8]
 8003784:	5162      	str	r2, [r4, r5]
 8003786:	604b      	str	r3, [r1, #4]
 8003788:	4630      	mov	r0, r6
 800378a:	f000 f82f 	bl	80037ec <__malloc_unlock>
 800378e:	f104 000b 	add.w	r0, r4, #11
 8003792:	1d23      	adds	r3, r4, #4
 8003794:	f020 0007 	bic.w	r0, r0, #7
 8003798:	1ac2      	subs	r2, r0, r3
 800379a:	bf1c      	itt	ne
 800379c:	1a1b      	subne	r3, r3, r0
 800379e:	50a3      	strne	r3, [r4, r2]
 80037a0:	e7af      	b.n	8003702 <_malloc_r+0x22>
 80037a2:	6862      	ldr	r2, [r4, #4]
 80037a4:	42a3      	cmp	r3, r4
 80037a6:	bf0c      	ite	eq
 80037a8:	f8c8 2000 	streq.w	r2, [r8]
 80037ac:	605a      	strne	r2, [r3, #4]
 80037ae:	e7eb      	b.n	8003788 <_malloc_r+0xa8>
 80037b0:	4623      	mov	r3, r4
 80037b2:	6864      	ldr	r4, [r4, #4]
 80037b4:	e7ae      	b.n	8003714 <_malloc_r+0x34>
 80037b6:	463c      	mov	r4, r7
 80037b8:	687f      	ldr	r7, [r7, #4]
 80037ba:	e7b6      	b.n	800372a <_malloc_r+0x4a>
 80037bc:	461a      	mov	r2, r3
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	42a3      	cmp	r3, r4
 80037c2:	d1fb      	bne.n	80037bc <_malloc_r+0xdc>
 80037c4:	2300      	movs	r3, #0
 80037c6:	6053      	str	r3, [r2, #4]
 80037c8:	e7de      	b.n	8003788 <_malloc_r+0xa8>
 80037ca:	230c      	movs	r3, #12
 80037cc:	6033      	str	r3, [r6, #0]
 80037ce:	4630      	mov	r0, r6
 80037d0:	f000 f80c 	bl	80037ec <__malloc_unlock>
 80037d4:	e794      	b.n	8003700 <_malloc_r+0x20>
 80037d6:	6005      	str	r5, [r0, #0]
 80037d8:	e7d6      	b.n	8003788 <_malloc_r+0xa8>
 80037da:	bf00      	nop
 80037dc:	200006e8 	.word	0x200006e8

080037e0 <__malloc_lock>:
 80037e0:	4801      	ldr	r0, [pc, #4]	@ (80037e8 <__malloc_lock+0x8>)
 80037e2:	f7ff bf0f 	b.w	8003604 <__retarget_lock_acquire_recursive>
 80037e6:	bf00      	nop
 80037e8:	200006e0 	.word	0x200006e0

080037ec <__malloc_unlock>:
 80037ec:	4801      	ldr	r0, [pc, #4]	@ (80037f4 <__malloc_unlock+0x8>)
 80037ee:	f7ff bf0a 	b.w	8003606 <__retarget_lock_release_recursive>
 80037f2:	bf00      	nop
 80037f4:	200006e0 	.word	0x200006e0

080037f8 <__ssputs_r>:
 80037f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037fc:	688e      	ldr	r6, [r1, #8]
 80037fe:	461f      	mov	r7, r3
 8003800:	42be      	cmp	r6, r7
 8003802:	680b      	ldr	r3, [r1, #0]
 8003804:	4682      	mov	sl, r0
 8003806:	460c      	mov	r4, r1
 8003808:	4690      	mov	r8, r2
 800380a:	d82d      	bhi.n	8003868 <__ssputs_r+0x70>
 800380c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003810:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003814:	d026      	beq.n	8003864 <__ssputs_r+0x6c>
 8003816:	6965      	ldr	r5, [r4, #20]
 8003818:	6909      	ldr	r1, [r1, #16]
 800381a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800381e:	eba3 0901 	sub.w	r9, r3, r1
 8003822:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003826:	1c7b      	adds	r3, r7, #1
 8003828:	444b      	add	r3, r9
 800382a:	106d      	asrs	r5, r5, #1
 800382c:	429d      	cmp	r5, r3
 800382e:	bf38      	it	cc
 8003830:	461d      	movcc	r5, r3
 8003832:	0553      	lsls	r3, r2, #21
 8003834:	d527      	bpl.n	8003886 <__ssputs_r+0x8e>
 8003836:	4629      	mov	r1, r5
 8003838:	f7ff ff52 	bl	80036e0 <_malloc_r>
 800383c:	4606      	mov	r6, r0
 800383e:	b360      	cbz	r0, 800389a <__ssputs_r+0xa2>
 8003840:	6921      	ldr	r1, [r4, #16]
 8003842:	464a      	mov	r2, r9
 8003844:	f000 fae8 	bl	8003e18 <memcpy>
 8003848:	89a3      	ldrh	r3, [r4, #12]
 800384a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800384e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003852:	81a3      	strh	r3, [r4, #12]
 8003854:	6126      	str	r6, [r4, #16]
 8003856:	6165      	str	r5, [r4, #20]
 8003858:	444e      	add	r6, r9
 800385a:	eba5 0509 	sub.w	r5, r5, r9
 800385e:	6026      	str	r6, [r4, #0]
 8003860:	60a5      	str	r5, [r4, #8]
 8003862:	463e      	mov	r6, r7
 8003864:	42be      	cmp	r6, r7
 8003866:	d900      	bls.n	800386a <__ssputs_r+0x72>
 8003868:	463e      	mov	r6, r7
 800386a:	6820      	ldr	r0, [r4, #0]
 800386c:	4632      	mov	r2, r6
 800386e:	4641      	mov	r1, r8
 8003870:	f000 faa8 	bl	8003dc4 <memmove>
 8003874:	68a3      	ldr	r3, [r4, #8]
 8003876:	1b9b      	subs	r3, r3, r6
 8003878:	60a3      	str	r3, [r4, #8]
 800387a:	6823      	ldr	r3, [r4, #0]
 800387c:	4433      	add	r3, r6
 800387e:	6023      	str	r3, [r4, #0]
 8003880:	2000      	movs	r0, #0
 8003882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003886:	462a      	mov	r2, r5
 8003888:	f000 fad4 	bl	8003e34 <_realloc_r>
 800388c:	4606      	mov	r6, r0
 800388e:	2800      	cmp	r0, #0
 8003890:	d1e0      	bne.n	8003854 <__ssputs_r+0x5c>
 8003892:	6921      	ldr	r1, [r4, #16]
 8003894:	4650      	mov	r0, sl
 8003896:	f7ff feb7 	bl	8003608 <_free_r>
 800389a:	230c      	movs	r3, #12
 800389c:	f8ca 3000 	str.w	r3, [sl]
 80038a0:	89a3      	ldrh	r3, [r4, #12]
 80038a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038a6:	81a3      	strh	r3, [r4, #12]
 80038a8:	f04f 30ff 	mov.w	r0, #4294967295
 80038ac:	e7e9      	b.n	8003882 <__ssputs_r+0x8a>
	...

080038b0 <_svfiprintf_r>:
 80038b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038b4:	4698      	mov	r8, r3
 80038b6:	898b      	ldrh	r3, [r1, #12]
 80038b8:	061b      	lsls	r3, r3, #24
 80038ba:	b09d      	sub	sp, #116	@ 0x74
 80038bc:	4607      	mov	r7, r0
 80038be:	460d      	mov	r5, r1
 80038c0:	4614      	mov	r4, r2
 80038c2:	d510      	bpl.n	80038e6 <_svfiprintf_r+0x36>
 80038c4:	690b      	ldr	r3, [r1, #16]
 80038c6:	b973      	cbnz	r3, 80038e6 <_svfiprintf_r+0x36>
 80038c8:	2140      	movs	r1, #64	@ 0x40
 80038ca:	f7ff ff09 	bl	80036e0 <_malloc_r>
 80038ce:	6028      	str	r0, [r5, #0]
 80038d0:	6128      	str	r0, [r5, #16]
 80038d2:	b930      	cbnz	r0, 80038e2 <_svfiprintf_r+0x32>
 80038d4:	230c      	movs	r3, #12
 80038d6:	603b      	str	r3, [r7, #0]
 80038d8:	f04f 30ff 	mov.w	r0, #4294967295
 80038dc:	b01d      	add	sp, #116	@ 0x74
 80038de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038e2:	2340      	movs	r3, #64	@ 0x40
 80038e4:	616b      	str	r3, [r5, #20]
 80038e6:	2300      	movs	r3, #0
 80038e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80038ea:	2320      	movs	r3, #32
 80038ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80038f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80038f4:	2330      	movs	r3, #48	@ 0x30
 80038f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003a94 <_svfiprintf_r+0x1e4>
 80038fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80038fe:	f04f 0901 	mov.w	r9, #1
 8003902:	4623      	mov	r3, r4
 8003904:	469a      	mov	sl, r3
 8003906:	f813 2b01 	ldrb.w	r2, [r3], #1
 800390a:	b10a      	cbz	r2, 8003910 <_svfiprintf_r+0x60>
 800390c:	2a25      	cmp	r2, #37	@ 0x25
 800390e:	d1f9      	bne.n	8003904 <_svfiprintf_r+0x54>
 8003910:	ebba 0b04 	subs.w	fp, sl, r4
 8003914:	d00b      	beq.n	800392e <_svfiprintf_r+0x7e>
 8003916:	465b      	mov	r3, fp
 8003918:	4622      	mov	r2, r4
 800391a:	4629      	mov	r1, r5
 800391c:	4638      	mov	r0, r7
 800391e:	f7ff ff6b 	bl	80037f8 <__ssputs_r>
 8003922:	3001      	adds	r0, #1
 8003924:	f000 80a7 	beq.w	8003a76 <_svfiprintf_r+0x1c6>
 8003928:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800392a:	445a      	add	r2, fp
 800392c:	9209      	str	r2, [sp, #36]	@ 0x24
 800392e:	f89a 3000 	ldrb.w	r3, [sl]
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 809f 	beq.w	8003a76 <_svfiprintf_r+0x1c6>
 8003938:	2300      	movs	r3, #0
 800393a:	f04f 32ff 	mov.w	r2, #4294967295
 800393e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003942:	f10a 0a01 	add.w	sl, sl, #1
 8003946:	9304      	str	r3, [sp, #16]
 8003948:	9307      	str	r3, [sp, #28]
 800394a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800394e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003950:	4654      	mov	r4, sl
 8003952:	2205      	movs	r2, #5
 8003954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003958:	484e      	ldr	r0, [pc, #312]	@ (8003a94 <_svfiprintf_r+0x1e4>)
 800395a:	f7fc fc59 	bl	8000210 <memchr>
 800395e:	9a04      	ldr	r2, [sp, #16]
 8003960:	b9d8      	cbnz	r0, 800399a <_svfiprintf_r+0xea>
 8003962:	06d0      	lsls	r0, r2, #27
 8003964:	bf44      	itt	mi
 8003966:	2320      	movmi	r3, #32
 8003968:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800396c:	0711      	lsls	r1, r2, #28
 800396e:	bf44      	itt	mi
 8003970:	232b      	movmi	r3, #43	@ 0x2b
 8003972:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003976:	f89a 3000 	ldrb.w	r3, [sl]
 800397a:	2b2a      	cmp	r3, #42	@ 0x2a
 800397c:	d015      	beq.n	80039aa <_svfiprintf_r+0xfa>
 800397e:	9a07      	ldr	r2, [sp, #28]
 8003980:	4654      	mov	r4, sl
 8003982:	2000      	movs	r0, #0
 8003984:	f04f 0c0a 	mov.w	ip, #10
 8003988:	4621      	mov	r1, r4
 800398a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800398e:	3b30      	subs	r3, #48	@ 0x30
 8003990:	2b09      	cmp	r3, #9
 8003992:	d94b      	bls.n	8003a2c <_svfiprintf_r+0x17c>
 8003994:	b1b0      	cbz	r0, 80039c4 <_svfiprintf_r+0x114>
 8003996:	9207      	str	r2, [sp, #28]
 8003998:	e014      	b.n	80039c4 <_svfiprintf_r+0x114>
 800399a:	eba0 0308 	sub.w	r3, r0, r8
 800399e:	fa09 f303 	lsl.w	r3, r9, r3
 80039a2:	4313      	orrs	r3, r2
 80039a4:	9304      	str	r3, [sp, #16]
 80039a6:	46a2      	mov	sl, r4
 80039a8:	e7d2      	b.n	8003950 <_svfiprintf_r+0xa0>
 80039aa:	9b03      	ldr	r3, [sp, #12]
 80039ac:	1d19      	adds	r1, r3, #4
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	9103      	str	r1, [sp, #12]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	bfbb      	ittet	lt
 80039b6:	425b      	neglt	r3, r3
 80039b8:	f042 0202 	orrlt.w	r2, r2, #2
 80039bc:	9307      	strge	r3, [sp, #28]
 80039be:	9307      	strlt	r3, [sp, #28]
 80039c0:	bfb8      	it	lt
 80039c2:	9204      	strlt	r2, [sp, #16]
 80039c4:	7823      	ldrb	r3, [r4, #0]
 80039c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80039c8:	d10a      	bne.n	80039e0 <_svfiprintf_r+0x130>
 80039ca:	7863      	ldrb	r3, [r4, #1]
 80039cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80039ce:	d132      	bne.n	8003a36 <_svfiprintf_r+0x186>
 80039d0:	9b03      	ldr	r3, [sp, #12]
 80039d2:	1d1a      	adds	r2, r3, #4
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	9203      	str	r2, [sp, #12]
 80039d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80039dc:	3402      	adds	r4, #2
 80039de:	9305      	str	r3, [sp, #20]
 80039e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003aa4 <_svfiprintf_r+0x1f4>
 80039e4:	7821      	ldrb	r1, [r4, #0]
 80039e6:	2203      	movs	r2, #3
 80039e8:	4650      	mov	r0, sl
 80039ea:	f7fc fc11 	bl	8000210 <memchr>
 80039ee:	b138      	cbz	r0, 8003a00 <_svfiprintf_r+0x150>
 80039f0:	9b04      	ldr	r3, [sp, #16]
 80039f2:	eba0 000a 	sub.w	r0, r0, sl
 80039f6:	2240      	movs	r2, #64	@ 0x40
 80039f8:	4082      	lsls	r2, r0
 80039fa:	4313      	orrs	r3, r2
 80039fc:	3401      	adds	r4, #1
 80039fe:	9304      	str	r3, [sp, #16]
 8003a00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a04:	4824      	ldr	r0, [pc, #144]	@ (8003a98 <_svfiprintf_r+0x1e8>)
 8003a06:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003a0a:	2206      	movs	r2, #6
 8003a0c:	f7fc fc00 	bl	8000210 <memchr>
 8003a10:	2800      	cmp	r0, #0
 8003a12:	d036      	beq.n	8003a82 <_svfiprintf_r+0x1d2>
 8003a14:	4b21      	ldr	r3, [pc, #132]	@ (8003a9c <_svfiprintf_r+0x1ec>)
 8003a16:	bb1b      	cbnz	r3, 8003a60 <_svfiprintf_r+0x1b0>
 8003a18:	9b03      	ldr	r3, [sp, #12]
 8003a1a:	3307      	adds	r3, #7
 8003a1c:	f023 0307 	bic.w	r3, r3, #7
 8003a20:	3308      	adds	r3, #8
 8003a22:	9303      	str	r3, [sp, #12]
 8003a24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a26:	4433      	add	r3, r6
 8003a28:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a2a:	e76a      	b.n	8003902 <_svfiprintf_r+0x52>
 8003a2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a30:	460c      	mov	r4, r1
 8003a32:	2001      	movs	r0, #1
 8003a34:	e7a8      	b.n	8003988 <_svfiprintf_r+0xd8>
 8003a36:	2300      	movs	r3, #0
 8003a38:	3401      	adds	r4, #1
 8003a3a:	9305      	str	r3, [sp, #20]
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	f04f 0c0a 	mov.w	ip, #10
 8003a42:	4620      	mov	r0, r4
 8003a44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a48:	3a30      	subs	r2, #48	@ 0x30
 8003a4a:	2a09      	cmp	r2, #9
 8003a4c:	d903      	bls.n	8003a56 <_svfiprintf_r+0x1a6>
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0c6      	beq.n	80039e0 <_svfiprintf_r+0x130>
 8003a52:	9105      	str	r1, [sp, #20]
 8003a54:	e7c4      	b.n	80039e0 <_svfiprintf_r+0x130>
 8003a56:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a5a:	4604      	mov	r4, r0
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e7f0      	b.n	8003a42 <_svfiprintf_r+0x192>
 8003a60:	ab03      	add	r3, sp, #12
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	462a      	mov	r2, r5
 8003a66:	4b0e      	ldr	r3, [pc, #56]	@ (8003aa0 <_svfiprintf_r+0x1f0>)
 8003a68:	a904      	add	r1, sp, #16
 8003a6a:	4638      	mov	r0, r7
 8003a6c:	f3af 8000 	nop.w
 8003a70:	1c42      	adds	r2, r0, #1
 8003a72:	4606      	mov	r6, r0
 8003a74:	d1d6      	bne.n	8003a24 <_svfiprintf_r+0x174>
 8003a76:	89ab      	ldrh	r3, [r5, #12]
 8003a78:	065b      	lsls	r3, r3, #25
 8003a7a:	f53f af2d 	bmi.w	80038d8 <_svfiprintf_r+0x28>
 8003a7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003a80:	e72c      	b.n	80038dc <_svfiprintf_r+0x2c>
 8003a82:	ab03      	add	r3, sp, #12
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	462a      	mov	r2, r5
 8003a88:	4b05      	ldr	r3, [pc, #20]	@ (8003aa0 <_svfiprintf_r+0x1f0>)
 8003a8a:	a904      	add	r1, sp, #16
 8003a8c:	4638      	mov	r0, r7
 8003a8e:	f000 f879 	bl	8003b84 <_printf_i>
 8003a92:	e7ed      	b.n	8003a70 <_svfiprintf_r+0x1c0>
 8003a94:	08003fed 	.word	0x08003fed
 8003a98:	08003ff7 	.word	0x08003ff7
 8003a9c:	00000000 	.word	0x00000000
 8003aa0:	080037f9 	.word	0x080037f9
 8003aa4:	08003ff3 	.word	0x08003ff3

08003aa8 <_printf_common>:
 8003aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aac:	4616      	mov	r6, r2
 8003aae:	4698      	mov	r8, r3
 8003ab0:	688a      	ldr	r2, [r1, #8]
 8003ab2:	690b      	ldr	r3, [r1, #16]
 8003ab4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	bfb8      	it	lt
 8003abc:	4613      	movlt	r3, r2
 8003abe:	6033      	str	r3, [r6, #0]
 8003ac0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003ac4:	4607      	mov	r7, r0
 8003ac6:	460c      	mov	r4, r1
 8003ac8:	b10a      	cbz	r2, 8003ace <_printf_common+0x26>
 8003aca:	3301      	adds	r3, #1
 8003acc:	6033      	str	r3, [r6, #0]
 8003ace:	6823      	ldr	r3, [r4, #0]
 8003ad0:	0699      	lsls	r1, r3, #26
 8003ad2:	bf42      	ittt	mi
 8003ad4:	6833      	ldrmi	r3, [r6, #0]
 8003ad6:	3302      	addmi	r3, #2
 8003ad8:	6033      	strmi	r3, [r6, #0]
 8003ada:	6825      	ldr	r5, [r4, #0]
 8003adc:	f015 0506 	ands.w	r5, r5, #6
 8003ae0:	d106      	bne.n	8003af0 <_printf_common+0x48>
 8003ae2:	f104 0a19 	add.w	sl, r4, #25
 8003ae6:	68e3      	ldr	r3, [r4, #12]
 8003ae8:	6832      	ldr	r2, [r6, #0]
 8003aea:	1a9b      	subs	r3, r3, r2
 8003aec:	42ab      	cmp	r3, r5
 8003aee:	dc26      	bgt.n	8003b3e <_printf_common+0x96>
 8003af0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003af4:	6822      	ldr	r2, [r4, #0]
 8003af6:	3b00      	subs	r3, #0
 8003af8:	bf18      	it	ne
 8003afa:	2301      	movne	r3, #1
 8003afc:	0692      	lsls	r2, r2, #26
 8003afe:	d42b      	bmi.n	8003b58 <_printf_common+0xb0>
 8003b00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003b04:	4641      	mov	r1, r8
 8003b06:	4638      	mov	r0, r7
 8003b08:	47c8      	blx	r9
 8003b0a:	3001      	adds	r0, #1
 8003b0c:	d01e      	beq.n	8003b4c <_printf_common+0xa4>
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	6922      	ldr	r2, [r4, #16]
 8003b12:	f003 0306 	and.w	r3, r3, #6
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	bf02      	ittt	eq
 8003b1a:	68e5      	ldreq	r5, [r4, #12]
 8003b1c:	6833      	ldreq	r3, [r6, #0]
 8003b1e:	1aed      	subeq	r5, r5, r3
 8003b20:	68a3      	ldr	r3, [r4, #8]
 8003b22:	bf0c      	ite	eq
 8003b24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b28:	2500      	movne	r5, #0
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	bfc4      	itt	gt
 8003b2e:	1a9b      	subgt	r3, r3, r2
 8003b30:	18ed      	addgt	r5, r5, r3
 8003b32:	2600      	movs	r6, #0
 8003b34:	341a      	adds	r4, #26
 8003b36:	42b5      	cmp	r5, r6
 8003b38:	d11a      	bne.n	8003b70 <_printf_common+0xc8>
 8003b3a:	2000      	movs	r0, #0
 8003b3c:	e008      	b.n	8003b50 <_printf_common+0xa8>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	4652      	mov	r2, sl
 8003b42:	4641      	mov	r1, r8
 8003b44:	4638      	mov	r0, r7
 8003b46:	47c8      	blx	r9
 8003b48:	3001      	adds	r0, #1
 8003b4a:	d103      	bne.n	8003b54 <_printf_common+0xac>
 8003b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b54:	3501      	adds	r5, #1
 8003b56:	e7c6      	b.n	8003ae6 <_printf_common+0x3e>
 8003b58:	18e1      	adds	r1, r4, r3
 8003b5a:	1c5a      	adds	r2, r3, #1
 8003b5c:	2030      	movs	r0, #48	@ 0x30
 8003b5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003b62:	4422      	add	r2, r4
 8003b64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003b68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003b6c:	3302      	adds	r3, #2
 8003b6e:	e7c7      	b.n	8003b00 <_printf_common+0x58>
 8003b70:	2301      	movs	r3, #1
 8003b72:	4622      	mov	r2, r4
 8003b74:	4641      	mov	r1, r8
 8003b76:	4638      	mov	r0, r7
 8003b78:	47c8      	blx	r9
 8003b7a:	3001      	adds	r0, #1
 8003b7c:	d0e6      	beq.n	8003b4c <_printf_common+0xa4>
 8003b7e:	3601      	adds	r6, #1
 8003b80:	e7d9      	b.n	8003b36 <_printf_common+0x8e>
	...

08003b84 <_printf_i>:
 8003b84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b88:	7e0f      	ldrb	r7, [r1, #24]
 8003b8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003b8c:	2f78      	cmp	r7, #120	@ 0x78
 8003b8e:	4691      	mov	r9, r2
 8003b90:	4680      	mov	r8, r0
 8003b92:	460c      	mov	r4, r1
 8003b94:	469a      	mov	sl, r3
 8003b96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003b9a:	d807      	bhi.n	8003bac <_printf_i+0x28>
 8003b9c:	2f62      	cmp	r7, #98	@ 0x62
 8003b9e:	d80a      	bhi.n	8003bb6 <_printf_i+0x32>
 8003ba0:	2f00      	cmp	r7, #0
 8003ba2:	f000 80d2 	beq.w	8003d4a <_printf_i+0x1c6>
 8003ba6:	2f58      	cmp	r7, #88	@ 0x58
 8003ba8:	f000 80b9 	beq.w	8003d1e <_printf_i+0x19a>
 8003bac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003bb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003bb4:	e03a      	b.n	8003c2c <_printf_i+0xa8>
 8003bb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003bba:	2b15      	cmp	r3, #21
 8003bbc:	d8f6      	bhi.n	8003bac <_printf_i+0x28>
 8003bbe:	a101      	add	r1, pc, #4	@ (adr r1, 8003bc4 <_printf_i+0x40>)
 8003bc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003bc4:	08003c1d 	.word	0x08003c1d
 8003bc8:	08003c31 	.word	0x08003c31
 8003bcc:	08003bad 	.word	0x08003bad
 8003bd0:	08003bad 	.word	0x08003bad
 8003bd4:	08003bad 	.word	0x08003bad
 8003bd8:	08003bad 	.word	0x08003bad
 8003bdc:	08003c31 	.word	0x08003c31
 8003be0:	08003bad 	.word	0x08003bad
 8003be4:	08003bad 	.word	0x08003bad
 8003be8:	08003bad 	.word	0x08003bad
 8003bec:	08003bad 	.word	0x08003bad
 8003bf0:	08003d31 	.word	0x08003d31
 8003bf4:	08003c5b 	.word	0x08003c5b
 8003bf8:	08003ceb 	.word	0x08003ceb
 8003bfc:	08003bad 	.word	0x08003bad
 8003c00:	08003bad 	.word	0x08003bad
 8003c04:	08003d53 	.word	0x08003d53
 8003c08:	08003bad 	.word	0x08003bad
 8003c0c:	08003c5b 	.word	0x08003c5b
 8003c10:	08003bad 	.word	0x08003bad
 8003c14:	08003bad 	.word	0x08003bad
 8003c18:	08003cf3 	.word	0x08003cf3
 8003c1c:	6833      	ldr	r3, [r6, #0]
 8003c1e:	1d1a      	adds	r2, r3, #4
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6032      	str	r2, [r6, #0]
 8003c24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e09d      	b.n	8003d6c <_printf_i+0x1e8>
 8003c30:	6833      	ldr	r3, [r6, #0]
 8003c32:	6820      	ldr	r0, [r4, #0]
 8003c34:	1d19      	adds	r1, r3, #4
 8003c36:	6031      	str	r1, [r6, #0]
 8003c38:	0606      	lsls	r6, r0, #24
 8003c3a:	d501      	bpl.n	8003c40 <_printf_i+0xbc>
 8003c3c:	681d      	ldr	r5, [r3, #0]
 8003c3e:	e003      	b.n	8003c48 <_printf_i+0xc4>
 8003c40:	0645      	lsls	r5, r0, #25
 8003c42:	d5fb      	bpl.n	8003c3c <_printf_i+0xb8>
 8003c44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003c48:	2d00      	cmp	r5, #0
 8003c4a:	da03      	bge.n	8003c54 <_printf_i+0xd0>
 8003c4c:	232d      	movs	r3, #45	@ 0x2d
 8003c4e:	426d      	negs	r5, r5
 8003c50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c54:	4859      	ldr	r0, [pc, #356]	@ (8003dbc <_printf_i+0x238>)
 8003c56:	230a      	movs	r3, #10
 8003c58:	e011      	b.n	8003c7e <_printf_i+0xfa>
 8003c5a:	6821      	ldr	r1, [r4, #0]
 8003c5c:	6833      	ldr	r3, [r6, #0]
 8003c5e:	0608      	lsls	r0, r1, #24
 8003c60:	f853 5b04 	ldr.w	r5, [r3], #4
 8003c64:	d402      	bmi.n	8003c6c <_printf_i+0xe8>
 8003c66:	0649      	lsls	r1, r1, #25
 8003c68:	bf48      	it	mi
 8003c6a:	b2ad      	uxthmi	r5, r5
 8003c6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8003c6e:	4853      	ldr	r0, [pc, #332]	@ (8003dbc <_printf_i+0x238>)
 8003c70:	6033      	str	r3, [r6, #0]
 8003c72:	bf14      	ite	ne
 8003c74:	230a      	movne	r3, #10
 8003c76:	2308      	moveq	r3, #8
 8003c78:	2100      	movs	r1, #0
 8003c7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003c7e:	6866      	ldr	r6, [r4, #4]
 8003c80:	60a6      	str	r6, [r4, #8]
 8003c82:	2e00      	cmp	r6, #0
 8003c84:	bfa2      	ittt	ge
 8003c86:	6821      	ldrge	r1, [r4, #0]
 8003c88:	f021 0104 	bicge.w	r1, r1, #4
 8003c8c:	6021      	strge	r1, [r4, #0]
 8003c8e:	b90d      	cbnz	r5, 8003c94 <_printf_i+0x110>
 8003c90:	2e00      	cmp	r6, #0
 8003c92:	d04b      	beq.n	8003d2c <_printf_i+0x1a8>
 8003c94:	4616      	mov	r6, r2
 8003c96:	fbb5 f1f3 	udiv	r1, r5, r3
 8003c9a:	fb03 5711 	mls	r7, r3, r1, r5
 8003c9e:	5dc7      	ldrb	r7, [r0, r7]
 8003ca0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ca4:	462f      	mov	r7, r5
 8003ca6:	42bb      	cmp	r3, r7
 8003ca8:	460d      	mov	r5, r1
 8003caa:	d9f4      	bls.n	8003c96 <_printf_i+0x112>
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d10b      	bne.n	8003cc8 <_printf_i+0x144>
 8003cb0:	6823      	ldr	r3, [r4, #0]
 8003cb2:	07df      	lsls	r7, r3, #31
 8003cb4:	d508      	bpl.n	8003cc8 <_printf_i+0x144>
 8003cb6:	6923      	ldr	r3, [r4, #16]
 8003cb8:	6861      	ldr	r1, [r4, #4]
 8003cba:	4299      	cmp	r1, r3
 8003cbc:	bfde      	ittt	le
 8003cbe:	2330      	movle	r3, #48	@ 0x30
 8003cc0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003cc4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003cc8:	1b92      	subs	r2, r2, r6
 8003cca:	6122      	str	r2, [r4, #16]
 8003ccc:	f8cd a000 	str.w	sl, [sp]
 8003cd0:	464b      	mov	r3, r9
 8003cd2:	aa03      	add	r2, sp, #12
 8003cd4:	4621      	mov	r1, r4
 8003cd6:	4640      	mov	r0, r8
 8003cd8:	f7ff fee6 	bl	8003aa8 <_printf_common>
 8003cdc:	3001      	adds	r0, #1
 8003cde:	d14a      	bne.n	8003d76 <_printf_i+0x1f2>
 8003ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce4:	b004      	add	sp, #16
 8003ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cea:	6823      	ldr	r3, [r4, #0]
 8003cec:	f043 0320 	orr.w	r3, r3, #32
 8003cf0:	6023      	str	r3, [r4, #0]
 8003cf2:	4833      	ldr	r0, [pc, #204]	@ (8003dc0 <_printf_i+0x23c>)
 8003cf4:	2778      	movs	r7, #120	@ 0x78
 8003cf6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003cfa:	6823      	ldr	r3, [r4, #0]
 8003cfc:	6831      	ldr	r1, [r6, #0]
 8003cfe:	061f      	lsls	r7, r3, #24
 8003d00:	f851 5b04 	ldr.w	r5, [r1], #4
 8003d04:	d402      	bmi.n	8003d0c <_printf_i+0x188>
 8003d06:	065f      	lsls	r7, r3, #25
 8003d08:	bf48      	it	mi
 8003d0a:	b2ad      	uxthmi	r5, r5
 8003d0c:	6031      	str	r1, [r6, #0]
 8003d0e:	07d9      	lsls	r1, r3, #31
 8003d10:	bf44      	itt	mi
 8003d12:	f043 0320 	orrmi.w	r3, r3, #32
 8003d16:	6023      	strmi	r3, [r4, #0]
 8003d18:	b11d      	cbz	r5, 8003d22 <_printf_i+0x19e>
 8003d1a:	2310      	movs	r3, #16
 8003d1c:	e7ac      	b.n	8003c78 <_printf_i+0xf4>
 8003d1e:	4827      	ldr	r0, [pc, #156]	@ (8003dbc <_printf_i+0x238>)
 8003d20:	e7e9      	b.n	8003cf6 <_printf_i+0x172>
 8003d22:	6823      	ldr	r3, [r4, #0]
 8003d24:	f023 0320 	bic.w	r3, r3, #32
 8003d28:	6023      	str	r3, [r4, #0]
 8003d2a:	e7f6      	b.n	8003d1a <_printf_i+0x196>
 8003d2c:	4616      	mov	r6, r2
 8003d2e:	e7bd      	b.n	8003cac <_printf_i+0x128>
 8003d30:	6833      	ldr	r3, [r6, #0]
 8003d32:	6825      	ldr	r5, [r4, #0]
 8003d34:	6961      	ldr	r1, [r4, #20]
 8003d36:	1d18      	adds	r0, r3, #4
 8003d38:	6030      	str	r0, [r6, #0]
 8003d3a:	062e      	lsls	r6, r5, #24
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	d501      	bpl.n	8003d44 <_printf_i+0x1c0>
 8003d40:	6019      	str	r1, [r3, #0]
 8003d42:	e002      	b.n	8003d4a <_printf_i+0x1c6>
 8003d44:	0668      	lsls	r0, r5, #25
 8003d46:	d5fb      	bpl.n	8003d40 <_printf_i+0x1bc>
 8003d48:	8019      	strh	r1, [r3, #0]
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	6123      	str	r3, [r4, #16]
 8003d4e:	4616      	mov	r6, r2
 8003d50:	e7bc      	b.n	8003ccc <_printf_i+0x148>
 8003d52:	6833      	ldr	r3, [r6, #0]
 8003d54:	1d1a      	adds	r2, r3, #4
 8003d56:	6032      	str	r2, [r6, #0]
 8003d58:	681e      	ldr	r6, [r3, #0]
 8003d5a:	6862      	ldr	r2, [r4, #4]
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	4630      	mov	r0, r6
 8003d60:	f7fc fa56 	bl	8000210 <memchr>
 8003d64:	b108      	cbz	r0, 8003d6a <_printf_i+0x1e6>
 8003d66:	1b80      	subs	r0, r0, r6
 8003d68:	6060      	str	r0, [r4, #4]
 8003d6a:	6863      	ldr	r3, [r4, #4]
 8003d6c:	6123      	str	r3, [r4, #16]
 8003d6e:	2300      	movs	r3, #0
 8003d70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d74:	e7aa      	b.n	8003ccc <_printf_i+0x148>
 8003d76:	6923      	ldr	r3, [r4, #16]
 8003d78:	4632      	mov	r2, r6
 8003d7a:	4649      	mov	r1, r9
 8003d7c:	4640      	mov	r0, r8
 8003d7e:	47d0      	blx	sl
 8003d80:	3001      	adds	r0, #1
 8003d82:	d0ad      	beq.n	8003ce0 <_printf_i+0x15c>
 8003d84:	6823      	ldr	r3, [r4, #0]
 8003d86:	079b      	lsls	r3, r3, #30
 8003d88:	d413      	bmi.n	8003db2 <_printf_i+0x22e>
 8003d8a:	68e0      	ldr	r0, [r4, #12]
 8003d8c:	9b03      	ldr	r3, [sp, #12]
 8003d8e:	4298      	cmp	r0, r3
 8003d90:	bfb8      	it	lt
 8003d92:	4618      	movlt	r0, r3
 8003d94:	e7a6      	b.n	8003ce4 <_printf_i+0x160>
 8003d96:	2301      	movs	r3, #1
 8003d98:	4632      	mov	r2, r6
 8003d9a:	4649      	mov	r1, r9
 8003d9c:	4640      	mov	r0, r8
 8003d9e:	47d0      	blx	sl
 8003da0:	3001      	adds	r0, #1
 8003da2:	d09d      	beq.n	8003ce0 <_printf_i+0x15c>
 8003da4:	3501      	adds	r5, #1
 8003da6:	68e3      	ldr	r3, [r4, #12]
 8003da8:	9903      	ldr	r1, [sp, #12]
 8003daa:	1a5b      	subs	r3, r3, r1
 8003dac:	42ab      	cmp	r3, r5
 8003dae:	dcf2      	bgt.n	8003d96 <_printf_i+0x212>
 8003db0:	e7eb      	b.n	8003d8a <_printf_i+0x206>
 8003db2:	2500      	movs	r5, #0
 8003db4:	f104 0619 	add.w	r6, r4, #25
 8003db8:	e7f5      	b.n	8003da6 <_printf_i+0x222>
 8003dba:	bf00      	nop
 8003dbc:	08003ffe 	.word	0x08003ffe
 8003dc0:	0800400f 	.word	0x0800400f

08003dc4 <memmove>:
 8003dc4:	4288      	cmp	r0, r1
 8003dc6:	b510      	push	{r4, lr}
 8003dc8:	eb01 0402 	add.w	r4, r1, r2
 8003dcc:	d902      	bls.n	8003dd4 <memmove+0x10>
 8003dce:	4284      	cmp	r4, r0
 8003dd0:	4623      	mov	r3, r4
 8003dd2:	d807      	bhi.n	8003de4 <memmove+0x20>
 8003dd4:	1e43      	subs	r3, r0, #1
 8003dd6:	42a1      	cmp	r1, r4
 8003dd8:	d008      	beq.n	8003dec <memmove+0x28>
 8003dda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003dde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003de2:	e7f8      	b.n	8003dd6 <memmove+0x12>
 8003de4:	4402      	add	r2, r0
 8003de6:	4601      	mov	r1, r0
 8003de8:	428a      	cmp	r2, r1
 8003dea:	d100      	bne.n	8003dee <memmove+0x2a>
 8003dec:	bd10      	pop	{r4, pc}
 8003dee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003df2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003df6:	e7f7      	b.n	8003de8 <memmove+0x24>

08003df8 <_sbrk_r>:
 8003df8:	b538      	push	{r3, r4, r5, lr}
 8003dfa:	4d06      	ldr	r5, [pc, #24]	@ (8003e14 <_sbrk_r+0x1c>)
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	4604      	mov	r4, r0
 8003e00:	4608      	mov	r0, r1
 8003e02:	602b      	str	r3, [r5, #0]
 8003e04:	f7fd fb78 	bl	80014f8 <_sbrk>
 8003e08:	1c43      	adds	r3, r0, #1
 8003e0a:	d102      	bne.n	8003e12 <_sbrk_r+0x1a>
 8003e0c:	682b      	ldr	r3, [r5, #0]
 8003e0e:	b103      	cbz	r3, 8003e12 <_sbrk_r+0x1a>
 8003e10:	6023      	str	r3, [r4, #0]
 8003e12:	bd38      	pop	{r3, r4, r5, pc}
 8003e14:	200006dc 	.word	0x200006dc

08003e18 <memcpy>:
 8003e18:	440a      	add	r2, r1
 8003e1a:	4291      	cmp	r1, r2
 8003e1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e20:	d100      	bne.n	8003e24 <memcpy+0xc>
 8003e22:	4770      	bx	lr
 8003e24:	b510      	push	{r4, lr}
 8003e26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e2e:	4291      	cmp	r1, r2
 8003e30:	d1f9      	bne.n	8003e26 <memcpy+0xe>
 8003e32:	bd10      	pop	{r4, pc}

08003e34 <_realloc_r>:
 8003e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e38:	4680      	mov	r8, r0
 8003e3a:	4615      	mov	r5, r2
 8003e3c:	460c      	mov	r4, r1
 8003e3e:	b921      	cbnz	r1, 8003e4a <_realloc_r+0x16>
 8003e40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e44:	4611      	mov	r1, r2
 8003e46:	f7ff bc4b 	b.w	80036e0 <_malloc_r>
 8003e4a:	b92a      	cbnz	r2, 8003e58 <_realloc_r+0x24>
 8003e4c:	f7ff fbdc 	bl	8003608 <_free_r>
 8003e50:	2400      	movs	r4, #0
 8003e52:	4620      	mov	r0, r4
 8003e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e58:	f000 f81a 	bl	8003e90 <_malloc_usable_size_r>
 8003e5c:	4285      	cmp	r5, r0
 8003e5e:	4606      	mov	r6, r0
 8003e60:	d802      	bhi.n	8003e68 <_realloc_r+0x34>
 8003e62:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003e66:	d8f4      	bhi.n	8003e52 <_realloc_r+0x1e>
 8003e68:	4629      	mov	r1, r5
 8003e6a:	4640      	mov	r0, r8
 8003e6c:	f7ff fc38 	bl	80036e0 <_malloc_r>
 8003e70:	4607      	mov	r7, r0
 8003e72:	2800      	cmp	r0, #0
 8003e74:	d0ec      	beq.n	8003e50 <_realloc_r+0x1c>
 8003e76:	42b5      	cmp	r5, r6
 8003e78:	462a      	mov	r2, r5
 8003e7a:	4621      	mov	r1, r4
 8003e7c:	bf28      	it	cs
 8003e7e:	4632      	movcs	r2, r6
 8003e80:	f7ff ffca 	bl	8003e18 <memcpy>
 8003e84:	4621      	mov	r1, r4
 8003e86:	4640      	mov	r0, r8
 8003e88:	f7ff fbbe 	bl	8003608 <_free_r>
 8003e8c:	463c      	mov	r4, r7
 8003e8e:	e7e0      	b.n	8003e52 <_realloc_r+0x1e>

08003e90 <_malloc_usable_size_r>:
 8003e90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e94:	1f18      	subs	r0, r3, #4
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	bfbc      	itt	lt
 8003e9a:	580b      	ldrlt	r3, [r1, r0]
 8003e9c:	18c0      	addlt	r0, r0, r3
 8003e9e:	4770      	bx	lr

08003ea0 <_init>:
 8003ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea2:	bf00      	nop
 8003ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ea6:	bc08      	pop	{r3}
 8003ea8:	469e      	mov	lr, r3
 8003eaa:	4770      	bx	lr

08003eac <_fini>:
 8003eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eae:	bf00      	nop
 8003eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eb2:	bc08      	pop	{r3}
 8003eb4:	469e      	mov	lr, r3
 8003eb6:	4770      	bx	lr
