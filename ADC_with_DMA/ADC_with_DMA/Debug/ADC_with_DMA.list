
ADC_with_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1f0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800b3a0  0800b3a0  0000c3a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b434  0800b434  0000d088  2**0
                  CONTENTS
  4 .ARM          00000008  0800b434  0800b434  0000c434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b43c  0800b43c  0000d088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b43c  0800b43c  0000c43c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b440  0800b440  0000c440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800b444  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d088  2**0
                  CONTENTS
 10 .bss          00000b9c  20000088  20000088  0000d088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000c24  20000c24  0000d088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020896  00000000  00000000  0000d0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ad9  00000000  00000000  0002d94e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001be0  00000000  00000000  00032428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000159d  00000000  00000000  00034008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b02b  00000000  00000000  000355a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002444a  00000000  00000000  000605d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f7211  00000000  00000000  00084a1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0017bc2b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007e90  00000000  00000000  0017bc70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00183b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b388 	.word	0x0800b388

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	0800b388 	.word	0x0800b388

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <_write>:
static void MX_ADC1_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
// printf -> _write ?��?���? ?��?��?��?��?�� HAL_UART_Transmit�? ?��?��?�� 출력?��?���? �?�?
int _write(int file, char* p, int len){
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, p, len, 10);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	b29a      	uxth	r2, r3
 8000590:	230a      	movs	r3, #10
 8000592:	68b9      	ldr	r1, [r7, #8]
 8000594:	4803      	ldr	r0, [pc, #12]	@ (80005a4 <_write+0x24>)
 8000596:	f005 fe37 	bl	8006208 <HAL_UART_Transmit>
	return len;
 800059a:	687b      	ldr	r3, [r7, #4]
}
 800059c:	4618      	mov	r0, r3
 800059e:	3710      	adds	r7, #16
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000248 	.word	0x20000248

080005a8 <kgs_get_adc_array>:


void kgs_get_adc_array(ADC_HandleTypeDef *hadc,uint32_t value_1,uint32_t value_2,uint32_t value_3)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
 80005b4:	603b      	str	r3, [r7, #0]

	adc_value_1 = (hadc->Instance->SQR3 & ADC_SQR3_SQ1 ) ;
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	f003 031f 	and.w	r3, r3, #31
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	4b0d      	ldr	r3, [pc, #52]	@ (80005fc <kgs_get_adc_array+0x54>)
 80005c6:	701a      	strb	r2, [r3, #0]
	adc_value_2 = (  (hadc->Instance->SQR3) >> 5  & ADC_SQR3_SQ1) ;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005ce:	095b      	lsrs	r3, r3, #5
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	f003 031f 	and.w	r3, r3, #31
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	4b09      	ldr	r3, [pc, #36]	@ (8000600 <kgs_get_adc_array+0x58>)
 80005da:	701a      	strb	r2, [r3, #0]
	adc_value_3 = (  (hadc->Instance->SQR3) >> 10  & ADC_SQR3_SQ1 ) ;
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005e2:	0a9b      	lsrs	r3, r3, #10
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	f003 031f 	and.w	r3, r3, #31
 80005ea:	b2da      	uxtb	r2, r3
 80005ec:	4b05      	ldr	r3, [pc, #20]	@ (8000604 <kgs_get_adc_array+0x5c>)
 80005ee:	701a      	strb	r2, [r3, #0]

}
 80005f0:	bf00      	nop
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	200002c4 	.word	0x200002c4
 8000600:	200002c5 	.word	0x200002c5
 8000604:	200002c6 	.word	0x200002c6

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f001 f84a 	bl	80016a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f84e 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 fa94 	bl	8000b40 <MX_GPIO_Init>
  MX_DMA_Init();
 8000618:	f000 fa28 	bl	8000a6c <MX_DMA_Init>
  MX_CRC_Init();
 800061c:	f000 f922 	bl	8000864 <MX_CRC_Init>
  MX_FMC_Init();
 8000620:	f000 fa3e 	bl	8000aa0 <MX_FMC_Init>
  MX_I2C3_Init();
 8000624:	f000 f932 	bl	800088c <MX_I2C3_Init>
  MX_SPI5_Init();
 8000628:	f000 f970 	bl	800090c <MX_SPI5_Init>
  MX_TIM1_Init();
 800062c:	f000 f9a4 	bl	8000978 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000630:	f000 f9f2 	bl	8000a18 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 8000634:	f009 fc58 	bl	8009ee8 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000638:	f000 f8a4 	bl	8000784 <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 800063c:	4815      	ldr	r0, [pc, #84]	@ (8000694 <main+0x8c>)
 800063e:	f001 f8db 	bl	80017f8 <HAL_ADC_Start>


	 // adc_value = HAL_ADC_GetValue(&hadc1);
	  kgs_get_adc_array(&hadc1    ,adc_value_1,adc_value_2,adc_value_3 );
 8000642:	4b15      	ldr	r3, [pc, #84]	@ (8000698 <main+0x90>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	4619      	mov	r1, r3
 8000648:	4b14      	ldr	r3, [pc, #80]	@ (800069c <main+0x94>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	461a      	mov	r2, r3
 800064e:	4b14      	ldr	r3, [pc, #80]	@ (80006a0 <main+0x98>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	4810      	ldr	r0, [pc, #64]	@ (8000694 <main+0x8c>)
 8000654:	f7ff ffa8 	bl	80005a8 <kgs_get_adc_array>
	  HAL_ADC_PollForConversion(&hadc1,10);
 8000658:	210a      	movs	r1, #10
 800065a:	480e      	ldr	r0, [pc, #56]	@ (8000694 <main+0x8c>)
 800065c:	f001 f9d1 	bl	8001a02 <HAL_ADC_PollForConversion>


    HAL_ADC_Stop(&hadc1);
 8000660:	480c      	ldr	r0, [pc, #48]	@ (8000694 <main+0x8c>)
 8000662:	f001 f99b 	bl	800199c <HAL_ADC_Stop>

	printf("adc_value 1 : %d\n", adc_value_1);
 8000666:	4b0c      	ldr	r3, [pc, #48]	@ (8000698 <main+0x90>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	4619      	mov	r1, r3
 800066c:	480d      	ldr	r0, [pc, #52]	@ (80006a4 <main+0x9c>)
 800066e:	f00a f8cb 	bl	800a808 <iprintf>
	printf("adc_value 2 : %d\n", adc_value_2);
 8000672:	4b0a      	ldr	r3, [pc, #40]	@ (800069c <main+0x94>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	4619      	mov	r1, r3
 8000678:	480b      	ldr	r0, [pc, #44]	@ (80006a8 <main+0xa0>)
 800067a:	f00a f8c5 	bl	800a808 <iprintf>
	printf("adc_value 3 : %d\n", adc_value_3);
 800067e:	4b08      	ldr	r3, [pc, #32]	@ (80006a0 <main+0x98>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	4619      	mov	r1, r3
 8000684:	4809      	ldr	r0, [pc, #36]	@ (80006ac <main+0xa4>)
 8000686:	f00a f8bf 	bl	800a808 <iprintf>
	//HAL_Delay(100);
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800068a:	f009 fc53 	bl	8009f34 <MX_USB_HOST_Process>
  {
 800068e:	bf00      	nop
 8000690:	e7d4      	b.n	800063c <main+0x34>
 8000692:	bf00      	nop
 8000694:	200000a4 	.word	0x200000a4
 8000698:	200002c4 	.word	0x200002c4
 800069c:	200002c5 	.word	0x200002c5
 80006a0:	200002c6 	.word	0x200002c6
 80006a4:	0800b3a0 	.word	0x0800b3a0
 80006a8:	0800b3b4 	.word	0x0800b3b4
 80006ac:	0800b3c8 	.word	0x0800b3c8

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b094      	sub	sp, #80	@ 0x50
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0320 	add.w	r3, r7, #32
 80006ba:	2230      	movs	r2, #48	@ 0x30
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f00a f8f7 	bl	800a8b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	4b28      	ldr	r3, [pc, #160]	@ (800077c <SystemClock_Config+0xcc>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006dc:	4a27      	ldr	r2, [pc, #156]	@ (800077c <SystemClock_Config+0xcc>)
 80006de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006e4:	4b25      	ldr	r3, [pc, #148]	@ (800077c <SystemClock_Config+0xcc>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	4b22      	ldr	r3, [pc, #136]	@ (8000780 <SystemClock_Config+0xd0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006fc:	4a20      	ldr	r2, [pc, #128]	@ (8000780 <SystemClock_Config+0xd0>)
 80006fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b1e      	ldr	r3, [pc, #120]	@ (8000780 <SystemClock_Config+0xd0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000710:	2301      	movs	r3, #1
 8000712:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000714:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000718:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071a:	2302      	movs	r3, #2
 800071c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000722:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000724:	2304      	movs	r3, #4
 8000726:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000728:	2348      	movs	r3, #72	@ 0x48
 800072a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072c:	2302      	movs	r3, #2
 800072e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000730:	2303      	movs	r3, #3
 8000732:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000734:	f107 0320 	add.w	r3, r7, #32
 8000738:	4618      	mov	r0, r3
 800073a:	f004 fb19 	bl	8004d70 <HAL_RCC_OscConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000744:	f000 fbaa 	bl	8000e9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000748:	230f      	movs	r3, #15
 800074a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074c:	2302      	movs	r3, #2
 800074e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000754:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000758:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	2102      	movs	r1, #2
 8000764:	4618      	mov	r0, r3
 8000766:	f004 fd7b 	bl	8005260 <HAL_RCC_ClockConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000770:	f000 fb94 	bl	8000e9c <Error_Handler>
  }
}
 8000774:	bf00      	nop
 8000776:	3750      	adds	r7, #80	@ 0x50
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40023800 	.word	0x40023800
 8000780:	40007000 	.word	0x40007000

08000784 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800078a:	463b      	mov	r3, r7
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000796:	4b2f      	ldr	r3, [pc, #188]	@ (8000854 <MX_ADC1_Init+0xd0>)
 8000798:	4a2f      	ldr	r2, [pc, #188]	@ (8000858 <MX_ADC1_Init+0xd4>)
 800079a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800079c:	4b2d      	ldr	r3, [pc, #180]	@ (8000854 <MX_ADC1_Init+0xd0>)
 800079e:	2200      	movs	r2, #0
 80007a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80007a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000854 <MX_ADC1_Init+0xd0>)
 80007a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80007a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80007aa:	4b2a      	ldr	r3, [pc, #168]	@ (8000854 <MX_ADC1_Init+0xd0>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007b0:	4b28      	ldr	r3, [pc, #160]	@ (8000854 <MX_ADC1_Init+0xd0>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007b6:	4b27      	ldr	r3, [pc, #156]	@ (8000854 <MX_ADC1_Init+0xd0>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007be:	4b25      	ldr	r3, [pc, #148]	@ (8000854 <MX_ADC1_Init+0xd0>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007c4:	4b23      	ldr	r3, [pc, #140]	@ (8000854 <MX_ADC1_Init+0xd0>)
 80007c6:	4a25      	ldr	r2, [pc, #148]	@ (800085c <MX_ADC1_Init+0xd8>)
 80007c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ca:	4b22      	ldr	r3, [pc, #136]	@ (8000854 <MX_ADC1_Init+0xd0>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80007d0:	4b20      	ldr	r3, [pc, #128]	@ (8000854 <MX_ADC1_Init+0xd0>)
 80007d2:	2203      	movs	r2, #3
 80007d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000854 <MX_ADC1_Init+0xd0>)
 80007d8:	2200      	movs	r2, #0
 80007da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007de:	4b1d      	ldr	r3, [pc, #116]	@ (8000854 <MX_ADC1_Init+0xd0>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007e4:	481b      	ldr	r0, [pc, #108]	@ (8000854 <MX_ADC1_Init+0xd0>)
 80007e6:	f000 ffc3 	bl	8001770 <HAL_ADC_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007f0:	f000 fb54 	bl	8000e9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80007f4:	2305      	movs	r3, #5
 80007f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007f8:	2301      	movs	r3, #1
 80007fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000800:	463b      	mov	r3, r7
 8000802:	4619      	mov	r1, r3
 8000804:	4813      	ldr	r0, [pc, #76]	@ (8000854 <MX_ADC1_Init+0xd0>)
 8000806:	f001 f987 	bl	8001b18 <HAL_ADC_ConfigChannel>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000810:	f000 fb44 	bl	8000e9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000814:	4b12      	ldr	r3, [pc, #72]	@ (8000860 <MX_ADC1_Init+0xdc>)
 8000816:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000818:	2302      	movs	r3, #2
 800081a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800081c:	463b      	mov	r3, r7
 800081e:	4619      	mov	r1, r3
 8000820:	480c      	ldr	r0, [pc, #48]	@ (8000854 <MX_ADC1_Init+0xd0>)
 8000822:	f001 f979 	bl	8001b18 <HAL_ADC_ConfigChannel>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800082c:	f000 fb36 	bl	8000e9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000830:	2311      	movs	r3, #17
 8000832:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000834:	2303      	movs	r3, #3
 8000836:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000838:	463b      	mov	r3, r7
 800083a:	4619      	mov	r1, r3
 800083c:	4805      	ldr	r0, [pc, #20]	@ (8000854 <MX_ADC1_Init+0xd0>)
 800083e:	f001 f96b 	bl	8001b18 <HAL_ADC_ConfigChannel>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000848:	f000 fb28 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800084c:	bf00      	nop
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	200000a4 	.word	0x200000a4
 8000858:	40012000 	.word	0x40012000
 800085c:	0f000001 	.word	0x0f000001
 8000860:	10000012 	.word	0x10000012

08000864 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000868:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <MX_CRC_Init+0x20>)
 800086a:	4a07      	ldr	r2, [pc, #28]	@ (8000888 <MX_CRC_Init+0x24>)
 800086c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	@ (8000884 <MX_CRC_Init+0x20>)
 8000870:	f001 fc62 	bl	8002138 <HAL_CRC_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800087a:	f000 fb0f 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	2000014c 	.word	0x2000014c
 8000888:	40023000 	.word	0x40023000

0800088c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000890:	4b1b      	ldr	r3, [pc, #108]	@ (8000900 <MX_I2C3_Init+0x74>)
 8000892:	4a1c      	ldr	r2, [pc, #112]	@ (8000904 <MX_I2C3_Init+0x78>)
 8000894:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000896:	4b1a      	ldr	r3, [pc, #104]	@ (8000900 <MX_I2C3_Init+0x74>)
 8000898:	4a1b      	ldr	r2, [pc, #108]	@ (8000908 <MX_I2C3_Init+0x7c>)
 800089a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800089c:	4b18      	ldr	r3, [pc, #96]	@ (8000900 <MX_I2C3_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80008a2:	4b17      	ldr	r3, [pc, #92]	@ (8000900 <MX_I2C3_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a8:	4b15      	ldr	r3, [pc, #84]	@ (8000900 <MX_I2C3_Init+0x74>)
 80008aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008ae:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b0:	4b13      	ldr	r3, [pc, #76]	@ (8000900 <MX_I2C3_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80008b6:	4b12      	ldr	r3, [pc, #72]	@ (8000900 <MX_I2C3_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008bc:	4b10      	ldr	r3, [pc, #64]	@ (8000900 <MX_I2C3_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000900 <MX_I2C3_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80008c8:	480d      	ldr	r0, [pc, #52]	@ (8000900 <MX_I2C3_Init+0x74>)
 80008ca:	f004 f891 	bl	80049f0 <HAL_I2C_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80008d4:	f000 fae2 	bl	8000e9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008d8:	2100      	movs	r1, #0
 80008da:	4809      	ldr	r0, [pc, #36]	@ (8000900 <MX_I2C3_Init+0x74>)
 80008dc:	f004 f9cc 	bl	8004c78 <HAL_I2CEx_ConfigAnalogFilter>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80008e6:	f000 fad9 	bl	8000e9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80008ea:	2100      	movs	r1, #0
 80008ec:	4804      	ldr	r0, [pc, #16]	@ (8000900 <MX_I2C3_Init+0x74>)
 80008ee:	f004 f9ff 	bl	8004cf0 <HAL_I2CEx_ConfigDigitalFilter>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80008f8:	f000 fad0 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000154 	.word	0x20000154
 8000904:	40005c00 	.word	0x40005c00
 8000908:	000186a0 	.word	0x000186a0

0800090c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000910:	4b17      	ldr	r3, [pc, #92]	@ (8000970 <MX_SPI5_Init+0x64>)
 8000912:	4a18      	ldr	r2, [pc, #96]	@ (8000974 <MX_SPI5_Init+0x68>)
 8000914:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000916:	4b16      	ldr	r3, [pc, #88]	@ (8000970 <MX_SPI5_Init+0x64>)
 8000918:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800091c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800091e:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <MX_SPI5_Init+0x64>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000924:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <MX_SPI5_Init+0x64>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800092a:	4b11      	ldr	r3, [pc, #68]	@ (8000970 <MX_SPI5_Init+0x64>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000930:	4b0f      	ldr	r3, [pc, #60]	@ (8000970 <MX_SPI5_Init+0x64>)
 8000932:	2200      	movs	r2, #0
 8000934:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000936:	4b0e      	ldr	r3, [pc, #56]	@ (8000970 <MX_SPI5_Init+0x64>)
 8000938:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800093c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800093e:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <MX_SPI5_Init+0x64>)
 8000940:	2218      	movs	r2, #24
 8000942:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000944:	4b0a      	ldr	r3, [pc, #40]	@ (8000970 <MX_SPI5_Init+0x64>)
 8000946:	2200      	movs	r2, #0
 8000948:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800094a:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <MX_SPI5_Init+0x64>)
 800094c:	2200      	movs	r2, #0
 800094e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000950:	4b07      	ldr	r3, [pc, #28]	@ (8000970 <MX_SPI5_Init+0x64>)
 8000952:	2200      	movs	r2, #0
 8000954:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000956:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <MX_SPI5_Init+0x64>)
 8000958:	220a      	movs	r2, #10
 800095a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800095c:	4804      	ldr	r0, [pc, #16]	@ (8000970 <MX_SPI5_Init+0x64>)
 800095e:	f004 ff05 	bl	800576c <HAL_SPI_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000968:	f000 fa98 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	200001a8 	.word	0x200001a8
 8000974:	40015000 	.word	0x40015000

08000978 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800097e:	f107 0308 	add.w	r3, r7, #8
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800098c:	463b      	mov	r3, r7
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000994:	4b1e      	ldr	r3, [pc, #120]	@ (8000a10 <MX_TIM1_Init+0x98>)
 8000996:	4a1f      	ldr	r2, [pc, #124]	@ (8000a14 <MX_TIM1_Init+0x9c>)
 8000998:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800099a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a10 <MX_TIM1_Init+0x98>)
 800099c:	2200      	movs	r2, #0
 800099e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a10 <MX_TIM1_Init+0x98>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a10 <MX_TIM1_Init+0x98>)
 80009a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ae:	4b18      	ldr	r3, [pc, #96]	@ (8000a10 <MX_TIM1_Init+0x98>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009b4:	4b16      	ldr	r3, [pc, #88]	@ (8000a10 <MX_TIM1_Init+0x98>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ba:	4b15      	ldr	r3, [pc, #84]	@ (8000a10 <MX_TIM1_Init+0x98>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009c0:	4813      	ldr	r0, [pc, #76]	@ (8000a10 <MX_TIM1_Init+0x98>)
 80009c2:	f004 ff5c 	bl	800587e <HAL_TIM_Base_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80009cc:	f000 fa66 	bl	8000e9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009d6:	f107 0308 	add.w	r3, r7, #8
 80009da:	4619      	mov	r1, r3
 80009dc:	480c      	ldr	r0, [pc, #48]	@ (8000a10 <MX_TIM1_Init+0x98>)
 80009de:	f005 f8fd 	bl	8005bdc <HAL_TIM_ConfigClockSource>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80009e8:	f000 fa58 	bl	8000e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ec:	2300      	movs	r3, #0
 80009ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009f4:	463b      	mov	r3, r7
 80009f6:	4619      	mov	r1, r3
 80009f8:	4805      	ldr	r0, [pc, #20]	@ (8000a10 <MX_TIM1_Init+0x98>)
 80009fa:	f005 fb25 	bl	8006048 <HAL_TIMEx_MasterConfigSynchronization>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a04:	f000 fa4a 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a08:	bf00      	nop
 8000a0a:	3718      	adds	r7, #24
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000200 	.word	0x20000200
 8000a14:	40010000 	.word	0x40010000

08000a18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	@ (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a1e:	4a12      	ldr	r2, [pc, #72]	@ (8000a68 <MX_USART1_UART_Init+0x50>)
 8000a20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a22:	4b10      	ldr	r3, [pc, #64]	@ (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	@ (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	@ (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a3c:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a3e:	220c      	movs	r2, #12
 8000a40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a42:	4b08      	ldr	r3, [pc, #32]	@ (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a48:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a4e:	4805      	ldr	r0, [pc, #20]	@ (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a50:	f005 fb8a 	bl	8006168 <HAL_UART_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a5a:	f000 fa1f 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000248 	.word	0x20000248
 8000a68:	40011000 	.word	0x40011000

08000a6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	4b09      	ldr	r3, [pc, #36]	@ (8000a9c <MX_DMA_Init+0x30>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	4a08      	ldr	r2, [pc, #32]	@ (8000a9c <MX_DMA_Init+0x30>)
 8000a7c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a82:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <MX_DMA_Init+0x30>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]

}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b088      	sub	sp, #32
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
 8000ab4:	615a      	str	r2, [r3, #20]
 8000ab6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000ab8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b38 <MX_FMC_Init+0x98>)
 8000aba:	4a20      	ldr	r2, [pc, #128]	@ (8000b3c <MX_FMC_Init+0x9c>)
 8000abc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000abe:	4b1e      	ldr	r3, [pc, #120]	@ (8000b38 <MX_FMC_Init+0x98>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000ac4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b38 <MX_FMC_Init+0x98>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000aca:	4b1b      	ldr	r3, [pc, #108]	@ (8000b38 <MX_FMC_Init+0x98>)
 8000acc:	2204      	movs	r2, #4
 8000ace:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000ad0:	4b19      	ldr	r3, [pc, #100]	@ (8000b38 <MX_FMC_Init+0x98>)
 8000ad2:	2210      	movs	r2, #16
 8000ad4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000ad6:	4b18      	ldr	r3, [pc, #96]	@ (8000b38 <MX_FMC_Init+0x98>)
 8000ad8:	2240      	movs	r2, #64	@ 0x40
 8000ada:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000adc:	4b16      	ldr	r3, [pc, #88]	@ (8000b38 <MX_FMC_Init+0x98>)
 8000ade:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000ae2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000ae4:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <MX_FMC_Init+0x98>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000aea:	4b13      	ldr	r3, [pc, #76]	@ (8000b38 <MX_FMC_Init+0x98>)
 8000aec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000af0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000af2:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <MX_FMC_Init+0x98>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b38 <MX_FMC_Init+0x98>)
 8000afa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000afe:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000b00:	2302      	movs	r3, #2
 8000b02:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000b04:	2307      	movs	r3, #7
 8000b06:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000b08:	2304      	movs	r3, #4
 8000b0a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000b0c:	2307      	movs	r3, #7
 8000b0e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000b10:	2303      	movs	r3, #3
 8000b12:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000b14:	2302      	movs	r3, #2
 8000b16:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4805      	ldr	r0, [pc, #20]	@ (8000b38 <MX_FMC_Init+0x98>)
 8000b22:	f004 fdef 	bl	8005704 <HAL_SDRAM_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000b2c:	f000 f9b6 	bl	8000e9c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b30:	bf00      	nop
 8000b32:	3720      	adds	r7, #32
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000290 	.word	0x20000290
 8000b3c:	a0000140 	.word	0xa0000140

08000b40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08e      	sub	sp, #56	@ 0x38
 8000b44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
 8000b54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
 8000b5a:	4bb2      	ldr	r3, [pc, #712]	@ (8000e24 <MX_GPIO_Init+0x2e4>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	4ab1      	ldr	r2, [pc, #708]	@ (8000e24 <MX_GPIO_Init+0x2e4>)
 8000b60:	f043 0304 	orr.w	r3, r3, #4
 8000b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b66:	4baf      	ldr	r3, [pc, #700]	@ (8000e24 <MX_GPIO_Init+0x2e4>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	f003 0304 	and.w	r3, r3, #4
 8000b6e:	623b      	str	r3, [r7, #32]
 8000b70:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
 8000b76:	4bab      	ldr	r3, [pc, #684]	@ (8000e24 <MX_GPIO_Init+0x2e4>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	4aaa      	ldr	r2, [pc, #680]	@ (8000e24 <MX_GPIO_Init+0x2e4>)
 8000b7c:	f043 0320 	orr.w	r3, r3, #32
 8000b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b82:	4ba8      	ldr	r3, [pc, #672]	@ (8000e24 <MX_GPIO_Init+0x2e4>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	f003 0320 	and.w	r3, r3, #32
 8000b8a:	61fb      	str	r3, [r7, #28]
 8000b8c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61bb      	str	r3, [r7, #24]
 8000b92:	4ba4      	ldr	r3, [pc, #656]	@ (8000e24 <MX_GPIO_Init+0x2e4>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	4aa3      	ldr	r2, [pc, #652]	@ (8000e24 <MX_GPIO_Init+0x2e4>)
 8000b98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9e:	4ba1      	ldr	r3, [pc, #644]	@ (8000e24 <MX_GPIO_Init+0x2e4>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ba6:	61bb      	str	r3, [r7, #24]
 8000ba8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
 8000bae:	4b9d      	ldr	r3, [pc, #628]	@ (8000e24 <MX_GPIO_Init+0x2e4>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	4a9c      	ldr	r2, [pc, #624]	@ (8000e24 <MX_GPIO_Init+0x2e4>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bba:	4b9a      	ldr	r3, [pc, #616]	@ (8000e24 <MX_GPIO_Init+0x2e4>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	4b96      	ldr	r3, [pc, #600]	@ (8000e24 <MX_GPIO_Init+0x2e4>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	4a95      	ldr	r2, [pc, #596]	@ (8000e24 <MX_GPIO_Init+0x2e4>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd6:	4b93      	ldr	r3, [pc, #588]	@ (8000e24 <MX_GPIO_Init+0x2e4>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	4b8f      	ldr	r3, [pc, #572]	@ (8000e24 <MX_GPIO_Init+0x2e4>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	4a8e      	ldr	r2, [pc, #568]	@ (8000e24 <MX_GPIO_Init+0x2e4>)
 8000bec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf2:	4b8c      	ldr	r3, [pc, #560]	@ (8000e24 <MX_GPIO_Init+0x2e4>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	4b88      	ldr	r3, [pc, #544]	@ (8000e24 <MX_GPIO_Init+0x2e4>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	4a87      	ldr	r2, [pc, #540]	@ (8000e24 <MX_GPIO_Init+0x2e4>)
 8000c08:	f043 0310 	orr.w	r3, r3, #16
 8000c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0e:	4b85      	ldr	r3, [pc, #532]	@ (8000e24 <MX_GPIO_Init+0x2e4>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	f003 0310 	and.w	r3, r3, #16
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	4b81      	ldr	r3, [pc, #516]	@ (8000e24 <MX_GPIO_Init+0x2e4>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	4a80      	ldr	r2, [pc, #512]	@ (8000e24 <MX_GPIO_Init+0x2e4>)
 8000c24:	f043 0308 	orr.w	r3, r3, #8
 8000c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2a:	4b7e      	ldr	r3, [pc, #504]	@ (8000e24 <MX_GPIO_Init+0x2e4>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	f003 0308 	and.w	r3, r3, #8
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2116      	movs	r1, #22
 8000c3a:	487b      	ldr	r0, [pc, #492]	@ (8000e28 <MX_GPIO_Init+0x2e8>)
 8000c3c:	f001 fda4 	bl	8002788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2180      	movs	r1, #128	@ 0x80
 8000c44:	4879      	ldr	r0, [pc, #484]	@ (8000e2c <MX_GPIO_Init+0x2ec>)
 8000c46:	f001 fd9f 	bl	8002788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000c50:	4877      	ldr	r0, [pc, #476]	@ (8000e30 <MX_GPIO_Init+0x2f0>)
 8000c52:	f001 fd99 	bl	8002788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000c5c:	4875      	ldr	r0, [pc, #468]	@ (8000e34 <MX_GPIO_Init+0x2f4>)
 8000c5e:	f001 fd93 	bl	8002788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000c62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c74:	230e      	movs	r3, #14
 8000c76:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	486e      	ldr	r0, [pc, #440]	@ (8000e38 <MX_GPIO_Init+0x2f8>)
 8000c80:	f001 fbd6 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000c84:	2316      	movs	r3, #22
 8000c86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4863      	ldr	r0, [pc, #396]	@ (8000e28 <MX_GPIO_Init+0x2e8>)
 8000c9c:	f001 fbc8 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000ca0:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ca6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000caa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	485d      	ldr	r0, [pc, #372]	@ (8000e2c <MX_GPIO_Init+0x2ec>)
 8000cb8:	f001 fbba 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000cbc:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000cc0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000cce:	230e      	movs	r3, #14
 8000cd0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4854      	ldr	r0, [pc, #336]	@ (8000e2c <MX_GPIO_Init+0x2ec>)
 8000cda:	f001 fba9 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000cde:	2380      	movs	r3, #128	@ 0x80
 8000ce0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	484d      	ldr	r0, [pc, #308]	@ (8000e2c <MX_GPIO_Init+0x2ec>)
 8000cf6:	f001 fb9b 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000cfa:	2320      	movs	r3, #32
 8000cfc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cfe:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000d02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000d08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4846      	ldr	r0, [pc, #280]	@ (8000e28 <MX_GPIO_Init+0x2e8>)
 8000d10:	f001 fb8e 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000d14:	2303      	movs	r3, #3
 8000d16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000d24:	2309      	movs	r3, #9
 8000d26:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4843      	ldr	r0, [pc, #268]	@ (8000e3c <MX_GPIO_Init+0x2fc>)
 8000d30:	f001 fb7e 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d34:	2304      	movs	r3, #4
 8000d36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d44:	4619      	mov	r1, r3
 8000d46:	483d      	ldr	r0, [pc, #244]	@ (8000e3c <MX_GPIO_Init+0x2fc>)
 8000d48:	f001 fb72 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000d4c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000d50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d5e:	230e      	movs	r3, #14
 8000d60:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d66:	4619      	mov	r1, r3
 8000d68:	4834      	ldr	r0, [pc, #208]	@ (8000e3c <MX_GPIO_Init+0x2fc>)
 8000d6a:	f001 fb61 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000d6e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000d7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d80:	4619      	mov	r1, r3
 8000d82:	482b      	ldr	r0, [pc, #172]	@ (8000e30 <MX_GPIO_Init+0x2f0>)
 8000d84:	f001 fb54 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000d88:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4823      	ldr	r0, [pc, #140]	@ (8000e30 <MX_GPIO_Init+0x2f0>)
 8000da2:	f001 fb45 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000da6:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000daa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2300      	movs	r3, #0
 8000db6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000db8:	230e      	movs	r3, #14
 8000dba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	481c      	ldr	r0, [pc, #112]	@ (8000e34 <MX_GPIO_Init+0x2f4>)
 8000dc4:	f001 fb34 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000dc8:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000dda:	230e      	movs	r3, #14
 8000ddc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000de2:	4619      	mov	r1, r3
 8000de4:	4810      	ldr	r0, [pc, #64]	@ (8000e28 <MX_GPIO_Init+0x2e8>)
 8000de6:	f001 fb23 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000dea:	2348      	movs	r3, #72	@ 0x48
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000dfa:	230e      	movs	r3, #14
 8000dfc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e02:	4619      	mov	r1, r3
 8000e04:	480a      	ldr	r0, [pc, #40]	@ (8000e30 <MX_GPIO_Init+0x2f0>)
 8000e06:	f001 fb13 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000e0a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000e1c:	2309      	movs	r3, #9
 8000e1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8000e20:	e00e      	b.n	8000e40 <MX_GPIO_Init+0x300>
 8000e22:	bf00      	nop
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40020800 	.word	0x40020800
 8000e2c:	40020000 	.word	0x40020000
 8000e30:	40020c00 	.word	0x40020c00
 8000e34:	40021800 	.word	0x40021800
 8000e38:	40021400 	.word	0x40021400
 8000e3c:	40020400 	.word	0x40020400
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e44:	4619      	mov	r1, r3
 8000e46:	480b      	ldr	r0, [pc, #44]	@ (8000e74 <MX_GPIO_Init+0x334>)
 8000e48:	f001 faf2 	bl	8002430 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000e4c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000e50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e52:	2301      	movs	r3, #1
 8000e54:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e62:	4619      	mov	r1, r3
 8000e64:	4803      	ldr	r0, [pc, #12]	@ (8000e74 <MX_GPIO_Init+0x334>)
 8000e66:	f001 fae3 	bl	8002430 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e6a:	bf00      	nop
 8000e6c:	3738      	adds	r7, #56	@ 0x38
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40021800 	.word	0x40021800

08000e78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a04      	ldr	r2, [pc, #16]	@ (8000e98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d101      	bne.n	8000e8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e8a:	f000 fc2d 	bl	80016e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40001000 	.word	0x40001000

08000e9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea0:	b672      	cpsid	i
}
 8000ea2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <Error_Handler+0x8>

08000ea8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ef4 <HAL_MspInit+0x4c>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb6:	4a0f      	ldr	r2, [pc, #60]	@ (8000ef4 <HAL_MspInit+0x4c>)
 8000eb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ebc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef4 <HAL_MspInit+0x4c>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	603b      	str	r3, [r7, #0]
 8000ece:	4b09      	ldr	r3, [pc, #36]	@ (8000ef4 <HAL_MspInit+0x4c>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed2:	4a08      	ldr	r2, [pc, #32]	@ (8000ef4 <HAL_MspInit+0x4c>)
 8000ed4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eda:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <HAL_MspInit+0x4c>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ee2:	603b      	str	r3, [r7, #0]
 8000ee4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	40023800 	.word	0x40023800

08000ef8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	@ 0x28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a2f      	ldr	r2, [pc, #188]	@ (8000fd4 <HAL_ADC_MspInit+0xdc>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d157      	bne.n	8000fca <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	4b2e      	ldr	r3, [pc, #184]	@ (8000fd8 <HAL_ADC_MspInit+0xe0>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f22:	4a2d      	ldr	r2, [pc, #180]	@ (8000fd8 <HAL_ADC_MspInit+0xe0>)
 8000f24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f2a:	4b2b      	ldr	r3, [pc, #172]	@ (8000fd8 <HAL_ADC_MspInit+0xe0>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b27      	ldr	r3, [pc, #156]	@ (8000fd8 <HAL_ADC_MspInit+0xe0>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	4a26      	ldr	r2, [pc, #152]	@ (8000fd8 <HAL_ADC_MspInit+0xe0>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f46:	4b24      	ldr	r3, [pc, #144]	@ (8000fd8 <HAL_ADC_MspInit+0xe0>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f52:	2320      	movs	r3, #32
 8000f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f56:	2303      	movs	r3, #3
 8000f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	481d      	ldr	r0, [pc, #116]	@ (8000fdc <HAL_ADC_MspInit+0xe4>)
 8000f66:	f001 fa63 	bl	8002430 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe0 <HAL_ADC_MspInit+0xe8>)
 8000f6c:	4a1d      	ldr	r2, [pc, #116]	@ (8000fe4 <HAL_ADC_MspInit+0xec>)
 8000f6e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f70:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe0 <HAL_ADC_MspInit+0xe8>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f76:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe0 <HAL_ADC_MspInit+0xe8>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f7c:	4b18      	ldr	r3, [pc, #96]	@ (8000fe0 <HAL_ADC_MspInit+0xe8>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f82:	4b17      	ldr	r3, [pc, #92]	@ (8000fe0 <HAL_ADC_MspInit+0xe8>)
 8000f84:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f88:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f8a:	4b15      	ldr	r3, [pc, #84]	@ (8000fe0 <HAL_ADC_MspInit+0xe8>)
 8000f8c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f90:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f92:	4b13      	ldr	r3, [pc, #76]	@ (8000fe0 <HAL_ADC_MspInit+0xe8>)
 8000f94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f98:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f9a:	4b11      	ldr	r3, [pc, #68]	@ (8000fe0 <HAL_ADC_MspInit+0xe8>)
 8000f9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fa0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe0 <HAL_ADC_MspInit+0xe8>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fa8:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe0 <HAL_ADC_MspInit+0xe8>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fae:	480c      	ldr	r0, [pc, #48]	@ (8000fe0 <HAL_ADC_MspInit+0xe8>)
 8000fb0:	f001 f8de 	bl	8002170 <HAL_DMA_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000fba:	f7ff ff6f 	bl	8000e9c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a07      	ldr	r2, [pc, #28]	@ (8000fe0 <HAL_ADC_MspInit+0xe8>)
 8000fc2:	639a      	str	r2, [r3, #56]	@ 0x38
 8000fc4:	4a06      	ldr	r2, [pc, #24]	@ (8000fe0 <HAL_ADC_MspInit+0xe8>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fca:	bf00      	nop
 8000fcc:	3728      	adds	r7, #40	@ 0x28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40012000 	.word	0x40012000
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40020000 	.word	0x40020000
 8000fe0:	200000ec 	.word	0x200000ec
 8000fe4:	40026410 	.word	0x40026410

08000fe8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a0b      	ldr	r2, [pc, #44]	@ (8001024 <HAL_CRC_MspInit+0x3c>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d10d      	bne.n	8001016 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8001028 <HAL_CRC_MspInit+0x40>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	4a09      	ldr	r2, [pc, #36]	@ (8001028 <HAL_CRC_MspInit+0x40>)
 8001004:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001008:	6313      	str	r3, [r2, #48]	@ 0x30
 800100a:	4b07      	ldr	r3, [pc, #28]	@ (8001028 <HAL_CRC_MspInit+0x40>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001016:	bf00      	nop
 8001018:	3714      	adds	r7, #20
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40023000 	.word	0x40023000
 8001028:	40023800 	.word	0x40023800

0800102c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	@ 0x28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a29      	ldr	r2, [pc, #164]	@ (80010f0 <HAL_I2C_MspInit+0xc4>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d14b      	bne.n	80010e6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	4b28      	ldr	r3, [pc, #160]	@ (80010f4 <HAL_I2C_MspInit+0xc8>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	4a27      	ldr	r2, [pc, #156]	@ (80010f4 <HAL_I2C_MspInit+0xc8>)
 8001058:	f043 0304 	orr.w	r3, r3, #4
 800105c:	6313      	str	r3, [r2, #48]	@ 0x30
 800105e:	4b25      	ldr	r3, [pc, #148]	@ (80010f4 <HAL_I2C_MspInit+0xc8>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	f003 0304 	and.w	r3, r3, #4
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b21      	ldr	r3, [pc, #132]	@ (80010f4 <HAL_I2C_MspInit+0xc8>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	4a20      	ldr	r2, [pc, #128]	@ (80010f4 <HAL_I2C_MspInit+0xc8>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6313      	str	r3, [r2, #48]	@ 0x30
 800107a:	4b1e      	ldr	r3, [pc, #120]	@ (80010f4 <HAL_I2C_MspInit+0xc8>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001086:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800108a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800108c:	2312      	movs	r3, #18
 800108e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001090:	2301      	movs	r3, #1
 8001092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	2300      	movs	r3, #0
 8001096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001098:	2304      	movs	r3, #4
 800109a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4619      	mov	r1, r3
 80010a2:	4815      	ldr	r0, [pc, #84]	@ (80010f8 <HAL_I2C_MspInit+0xcc>)
 80010a4:	f001 f9c4 	bl	8002430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80010a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ae:	2312      	movs	r3, #18
 80010b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b2:	2301      	movs	r3, #1
 80010b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80010ba:	2304      	movs	r3, #4
 80010bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4619      	mov	r1, r3
 80010c4:	480d      	ldr	r0, [pc, #52]	@ (80010fc <HAL_I2C_MspInit+0xd0>)
 80010c6:	f001 f9b3 	bl	8002430 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <HAL_I2C_MspInit+0xc8>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d2:	4a08      	ldr	r2, [pc, #32]	@ (80010f4 <HAL_I2C_MspInit+0xc8>)
 80010d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80010d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010da:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <HAL_I2C_MspInit+0xc8>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80010e6:	bf00      	nop
 80010e8:	3728      	adds	r7, #40	@ 0x28
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40005c00 	.word	0x40005c00
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40020800 	.word	0x40020800
 80010fc:	40020000 	.word	0x40020000

08001100 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	@ 0x28
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a19      	ldr	r2, [pc, #100]	@ (8001184 <HAL_SPI_MspInit+0x84>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d12c      	bne.n	800117c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
 8001126:	4b18      	ldr	r3, [pc, #96]	@ (8001188 <HAL_SPI_MspInit+0x88>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112a:	4a17      	ldr	r2, [pc, #92]	@ (8001188 <HAL_SPI_MspInit+0x88>)
 800112c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001130:	6453      	str	r3, [r2, #68]	@ 0x44
 8001132:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <HAL_SPI_MspInit+0x88>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001136:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <HAL_SPI_MspInit+0x88>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	4a10      	ldr	r2, [pc, #64]	@ (8001188 <HAL_SPI_MspInit+0x88>)
 8001148:	f043 0320 	orr.w	r3, r3, #32
 800114c:	6313      	str	r3, [r2, #48]	@ 0x30
 800114e:	4b0e      	ldr	r3, [pc, #56]	@ (8001188 <HAL_SPI_MspInit+0x88>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	f003 0320 	and.w	r3, r3, #32
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800115a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800115e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	2300      	movs	r3, #0
 800116a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800116c:	2305      	movs	r3, #5
 800116e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4619      	mov	r1, r3
 8001176:	4805      	ldr	r0, [pc, #20]	@ (800118c <HAL_SPI_MspInit+0x8c>)
 8001178:	f001 f95a 	bl	8002430 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800117c:	bf00      	nop
 800117e:	3728      	adds	r7, #40	@ 0x28
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40015000 	.word	0x40015000
 8001188:	40023800 	.word	0x40023800
 800118c:	40021400 	.word	0x40021400

08001190 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a0b      	ldr	r2, [pc, #44]	@ (80011cc <HAL_TIM_Base_MspInit+0x3c>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d10d      	bne.n	80011be <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	4b0a      	ldr	r3, [pc, #40]	@ (80011d0 <HAL_TIM_Base_MspInit+0x40>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011aa:	4a09      	ldr	r2, [pc, #36]	@ (80011d0 <HAL_TIM_Base_MspInit+0x40>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011b2:	4b07      	ldr	r3, [pc, #28]	@ (80011d0 <HAL_TIM_Base_MspInit+0x40>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80011be:	bf00      	nop
 80011c0:	3714      	adds	r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40010000 	.word	0x40010000
 80011d0:	40023800 	.word	0x40023800

080011d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	@ 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a19      	ldr	r2, [pc, #100]	@ (8001258 <HAL_UART_MspInit+0x84>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d12c      	bne.n	8001250 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	4b18      	ldr	r3, [pc, #96]	@ (800125c <HAL_UART_MspInit+0x88>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fe:	4a17      	ldr	r2, [pc, #92]	@ (800125c <HAL_UART_MspInit+0x88>)
 8001200:	f043 0310 	orr.w	r3, r3, #16
 8001204:	6453      	str	r3, [r2, #68]	@ 0x44
 8001206:	4b15      	ldr	r3, [pc, #84]	@ (800125c <HAL_UART_MspInit+0x88>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120a:	f003 0310 	and.w	r3, r3, #16
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	4b11      	ldr	r3, [pc, #68]	@ (800125c <HAL_UART_MspInit+0x88>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	4a10      	ldr	r2, [pc, #64]	@ (800125c <HAL_UART_MspInit+0x88>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6313      	str	r3, [r2, #48]	@ 0x30
 8001222:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <HAL_UART_MspInit+0x88>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800122e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123c:	2303      	movs	r3, #3
 800123e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001240:	2307      	movs	r3, #7
 8001242:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	4619      	mov	r1, r3
 800124a:	4805      	ldr	r0, [pc, #20]	@ (8001260 <HAL_UART_MspInit+0x8c>)
 800124c:	f001 f8f0 	bl	8002430 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001250:	bf00      	nop
 8001252:	3728      	adds	r7, #40	@ 0x28
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40011000 	.word	0x40011000
 800125c:	40023800 	.word	0x40023800
 8001260:	40020000 	.word	0x40020000

08001264 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001278:	4b3b      	ldr	r3, [pc, #236]	@ (8001368 <HAL_FMC_MspInit+0x104>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d16f      	bne.n	8001360 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001280:	4b39      	ldr	r3, [pc, #228]	@ (8001368 <HAL_FMC_MspInit+0x104>)
 8001282:	2201      	movs	r2, #1
 8001284:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	603b      	str	r3, [r7, #0]
 800128a:	4b38      	ldr	r3, [pc, #224]	@ (800136c <HAL_FMC_MspInit+0x108>)
 800128c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800128e:	4a37      	ldr	r2, [pc, #220]	@ (800136c <HAL_FMC_MspInit+0x108>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6393      	str	r3, [r2, #56]	@ 0x38
 8001296:	4b35      	ldr	r3, [pc, #212]	@ (800136c <HAL_FMC_MspInit+0x108>)
 8001298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80012a2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80012a6:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a8:	2302      	movs	r3, #2
 80012aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b0:	2303      	movs	r3, #3
 80012b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012b4:	230c      	movs	r3, #12
 80012b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	4619      	mov	r1, r3
 80012bc:	482c      	ldr	r0, [pc, #176]	@ (8001370 <HAL_FMC_MspInit+0x10c>)
 80012be:	f001 f8b7 	bl	8002430 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80012c2:	2301      	movs	r3, #1
 80012c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	2302      	movs	r3, #2
 80012c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ce:	2303      	movs	r3, #3
 80012d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012d2:	230c      	movs	r3, #12
 80012d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	4619      	mov	r1, r3
 80012da:	4826      	ldr	r0, [pc, #152]	@ (8001374 <HAL_FMC_MspInit+0x110>)
 80012dc:	f001 f8a8 	bl	8002430 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80012e0:	f248 1333 	movw	r3, #33075	@ 0x8133
 80012e4:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e6:	2302      	movs	r3, #2
 80012e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ee:	2303      	movs	r3, #3
 80012f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012f2:	230c      	movs	r3, #12
 80012f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	4619      	mov	r1, r3
 80012fa:	481f      	ldr	r0, [pc, #124]	@ (8001378 <HAL_FMC_MspInit+0x114>)
 80012fc:	f001 f898 	bl	8002430 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001300:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001304:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130e:	2303      	movs	r3, #3
 8001310:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001312:	230c      	movs	r3, #12
 8001314:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	4619      	mov	r1, r3
 800131a:	4818      	ldr	r0, [pc, #96]	@ (800137c <HAL_FMC_MspInit+0x118>)
 800131c:	f001 f888 	bl	8002430 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001320:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001324:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001326:	2302      	movs	r3, #2
 8001328:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132e:	2303      	movs	r3, #3
 8001330:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001332:	230c      	movs	r3, #12
 8001334:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	4619      	mov	r1, r3
 800133a:	4811      	ldr	r0, [pc, #68]	@ (8001380 <HAL_FMC_MspInit+0x11c>)
 800133c:	f001 f878 	bl	8002430 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001340:	2360      	movs	r3, #96	@ 0x60
 8001342:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134c:	2303      	movs	r3, #3
 800134e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001350:	230c      	movs	r3, #12
 8001352:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	4619      	mov	r1, r3
 8001358:	480a      	ldr	r0, [pc, #40]	@ (8001384 <HAL_FMC_MspInit+0x120>)
 800135a:	f001 f869 	bl	8002430 <HAL_GPIO_Init>
 800135e:	e000      	b.n	8001362 <HAL_FMC_MspInit+0xfe>
    return;
 8001360:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	200002c8 	.word	0x200002c8
 800136c:	40023800 	.word	0x40023800
 8001370:	40021400 	.word	0x40021400
 8001374:	40020800 	.word	0x40020800
 8001378:	40021800 	.word	0x40021800
 800137c:	40021000 	.word	0x40021000
 8001380:	40020c00 	.word	0x40020c00
 8001384:	40020400 	.word	0x40020400

08001388 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001390:	f7ff ff68 	bl	8001264 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08e      	sub	sp, #56	@ 0x38
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	4b33      	ldr	r3, [pc, #204]	@ (8001480 <HAL_InitTick+0xe4>)
 80013b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b4:	4a32      	ldr	r2, [pc, #200]	@ (8001480 <HAL_InitTick+0xe4>)
 80013b6:	f043 0310 	orr.w	r3, r3, #16
 80013ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80013bc:	4b30      	ldr	r3, [pc, #192]	@ (8001480 <HAL_InitTick+0xe4>)
 80013be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c0:	f003 0310 	and.w	r3, r3, #16
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013c8:	f107 0210 	add.w	r2, r7, #16
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	4611      	mov	r1, r2
 80013d2:	4618      	mov	r0, r3
 80013d4:	f004 f964 	bl	80056a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013d8:	6a3b      	ldr	r3, [r7, #32]
 80013da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d103      	bne.n	80013ea <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013e2:	f004 f935 	bl	8005650 <HAL_RCC_GetPCLK1Freq>
 80013e6:	6378      	str	r0, [r7, #52]	@ 0x34
 80013e8:	e004      	b.n	80013f4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013ea:	f004 f931 	bl	8005650 <HAL_RCC_GetPCLK1Freq>
 80013ee:	4603      	mov	r3, r0
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013f6:	4a23      	ldr	r2, [pc, #140]	@ (8001484 <HAL_InitTick+0xe8>)
 80013f8:	fba2 2303 	umull	r2, r3, r2, r3
 80013fc:	0c9b      	lsrs	r3, r3, #18
 80013fe:	3b01      	subs	r3, #1
 8001400:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001402:	4b21      	ldr	r3, [pc, #132]	@ (8001488 <HAL_InitTick+0xec>)
 8001404:	4a21      	ldr	r2, [pc, #132]	@ (800148c <HAL_InitTick+0xf0>)
 8001406:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001408:	4b1f      	ldr	r3, [pc, #124]	@ (8001488 <HAL_InitTick+0xec>)
 800140a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800140e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001410:	4a1d      	ldr	r2, [pc, #116]	@ (8001488 <HAL_InitTick+0xec>)
 8001412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001414:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001416:	4b1c      	ldr	r3, [pc, #112]	@ (8001488 <HAL_InitTick+0xec>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141c:	4b1a      	ldr	r3, [pc, #104]	@ (8001488 <HAL_InitTick+0xec>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001422:	4b19      	ldr	r3, [pc, #100]	@ (8001488 <HAL_InitTick+0xec>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001428:	4817      	ldr	r0, [pc, #92]	@ (8001488 <HAL_InitTick+0xec>)
 800142a:	f004 fa28 	bl	800587e <HAL_TIM_Base_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001434:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001438:	2b00      	cmp	r3, #0
 800143a:	d11b      	bne.n	8001474 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800143c:	4812      	ldr	r0, [pc, #72]	@ (8001488 <HAL_InitTick+0xec>)
 800143e:	f004 fa6d 	bl	800591c <HAL_TIM_Base_Start_IT>
 8001442:	4603      	mov	r3, r0
 8001444:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001448:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800144c:	2b00      	cmp	r3, #0
 800144e:	d111      	bne.n	8001474 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001450:	2036      	movs	r0, #54	@ 0x36
 8001452:	f000 fe63 	bl	800211c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b0f      	cmp	r3, #15
 800145a:	d808      	bhi.n	800146e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800145c:	2200      	movs	r2, #0
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	2036      	movs	r0, #54	@ 0x36
 8001462:	f000 fe3f 	bl	80020e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001466:	4a0a      	ldr	r2, [pc, #40]	@ (8001490 <HAL_InitTick+0xf4>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	e002      	b.n	8001474 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001474:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001478:	4618      	mov	r0, r3
 800147a:	3738      	adds	r7, #56	@ 0x38
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40023800 	.word	0x40023800
 8001484:	431bde83 	.word	0x431bde83
 8001488:	200002cc 	.word	0x200002cc
 800148c:	40001000 	.word	0x40001000
 8001490:	20000004 	.word	0x20000004

08001494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001498:	bf00      	nop
 800149a:	e7fd      	b.n	8001498 <NMI_Handler+0x4>

0800149c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <HardFault_Handler+0x4>

080014a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <MemManage_Handler+0x4>

080014ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <BusFault_Handler+0x4>

080014b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <UsageFault_Handler+0x4>

080014bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014f8:	4802      	ldr	r0, [pc, #8]	@ (8001504 <TIM6_DAC_IRQHandler+0x10>)
 80014fa:	f004 fa7f 	bl	80059fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	200002cc 	.word	0x200002cc

08001508 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 800150c:	4802      	ldr	r0, [pc, #8]	@ (8001518 <OTG_HS_IRQHandler+0x10>)
 800150e:	f001 fc35 	bl	8002d7c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200006f8 	.word	0x200006f8

0800151c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	e00a      	b.n	8001544 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800152e:	f3af 8000 	nop.w
 8001532:	4601      	mov	r1, r0
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	1c5a      	adds	r2, r3, #1
 8001538:	60ba      	str	r2, [r7, #8]
 800153a:	b2ca      	uxtb	r2, r1
 800153c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	3301      	adds	r3, #1
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	697a      	ldr	r2, [r7, #20]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	429a      	cmp	r2, r3
 800154a:	dbf0      	blt.n	800152e <_read+0x12>
  }

  return len;
 800154c:	687b      	ldr	r3, [r7, #4]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001556:	b480      	push	{r7}
 8001558:	b083      	sub	sp, #12
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800155e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001562:	4618      	mov	r0, r3
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800157e:	605a      	str	r2, [r3, #4]
  return 0;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <_isatty>:

int _isatty(int file)
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001596:	2301      	movs	r3, #1
}
 8001598:	4618      	mov	r0, r3
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015c8:	4a14      	ldr	r2, [pc, #80]	@ (800161c <_sbrk+0x5c>)
 80015ca:	4b15      	ldr	r3, [pc, #84]	@ (8001620 <_sbrk+0x60>)
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d4:	4b13      	ldr	r3, [pc, #76]	@ (8001624 <_sbrk+0x64>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d102      	bne.n	80015e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015dc:	4b11      	ldr	r3, [pc, #68]	@ (8001624 <_sbrk+0x64>)
 80015de:	4a12      	ldr	r2, [pc, #72]	@ (8001628 <_sbrk+0x68>)
 80015e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015e2:	4b10      	ldr	r3, [pc, #64]	@ (8001624 <_sbrk+0x64>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d207      	bcs.n	8001600 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f0:	f009 f9be 	bl	800a970 <__errno>
 80015f4:	4603      	mov	r3, r0
 80015f6:	220c      	movs	r2, #12
 80015f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015fa:	f04f 33ff 	mov.w	r3, #4294967295
 80015fe:	e009      	b.n	8001614 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001600:	4b08      	ldr	r3, [pc, #32]	@ (8001624 <_sbrk+0x64>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001606:	4b07      	ldr	r3, [pc, #28]	@ (8001624 <_sbrk+0x64>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4413      	add	r3, r2
 800160e:	4a05      	ldr	r2, [pc, #20]	@ (8001624 <_sbrk+0x64>)
 8001610:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001612:	68fb      	ldr	r3, [r7, #12]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20030000 	.word	0x20030000
 8001620:	00000400 	.word	0x00000400
 8001624:	20000314 	.word	0x20000314
 8001628:	20000c28 	.word	0x20000c28

0800162c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001630:	4b06      	ldr	r3, [pc, #24]	@ (800164c <SystemInit+0x20>)
 8001632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001636:	4a05      	ldr	r2, [pc, #20]	@ (800164c <SystemInit+0x20>)
 8001638:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800163c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001650:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001688 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001654:	f7ff ffea 	bl	800162c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001658:	480c      	ldr	r0, [pc, #48]	@ (800168c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800165a:	490d      	ldr	r1, [pc, #52]	@ (8001690 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800165c:	4a0d      	ldr	r2, [pc, #52]	@ (8001694 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001660:	e002      	b.n	8001668 <LoopCopyDataInit>

08001662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001666:	3304      	adds	r3, #4

08001668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800166c:	d3f9      	bcc.n	8001662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166e:	4a0a      	ldr	r2, [pc, #40]	@ (8001698 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001670:	4c0a      	ldr	r4, [pc, #40]	@ (800169c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001674:	e001      	b.n	800167a <LoopFillZerobss>

08001676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001678:	3204      	adds	r2, #4

0800167a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800167c:	d3fb      	bcc.n	8001676 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800167e:	f009 f97d 	bl	800a97c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001682:	f7fe ffc1 	bl	8000608 <main>
  bx  lr    
 8001686:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001688:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800168c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001690:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001694:	0800b444 	.word	0x0800b444
  ldr r2, =_sbss
 8001698:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800169c:	20000c24 	.word	0x20000c24

080016a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a0:	e7fe      	b.n	80016a0 <ADC_IRQHandler>
	...

080016a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016a8:	4b0e      	ldr	r3, [pc, #56]	@ (80016e4 <HAL_Init+0x40>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a0d      	ldr	r2, [pc, #52]	@ (80016e4 <HAL_Init+0x40>)
 80016ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016b4:	4b0b      	ldr	r3, [pc, #44]	@ (80016e4 <HAL_Init+0x40>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0a      	ldr	r2, [pc, #40]	@ (80016e4 <HAL_Init+0x40>)
 80016ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c0:	4b08      	ldr	r3, [pc, #32]	@ (80016e4 <HAL_Init+0x40>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a07      	ldr	r2, [pc, #28]	@ (80016e4 <HAL_Init+0x40>)
 80016c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016cc:	2003      	movs	r0, #3
 80016ce:	f000 fcfe 	bl	80020ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016d2:	200f      	movs	r0, #15
 80016d4:	f7ff fe62 	bl	800139c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d8:	f7ff fbe6 	bl	8000ea8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40023c00 	.word	0x40023c00

080016e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016ec:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <HAL_IncTick+0x20>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b06      	ldr	r3, [pc, #24]	@ (800170c <HAL_IncTick+0x24>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4413      	add	r3, r2
 80016f8:	4a04      	ldr	r2, [pc, #16]	@ (800170c <HAL_IncTick+0x24>)
 80016fa:	6013      	str	r3, [r2, #0]
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000008 	.word	0x20000008
 800170c:	20000318 	.word	0x20000318

08001710 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return uwTick;
 8001714:	4b03      	ldr	r3, [pc, #12]	@ (8001724 <HAL_GetTick+0x14>)
 8001716:	681b      	ldr	r3, [r3, #0]
}
 8001718:	4618      	mov	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	20000318 	.word	0x20000318

08001728 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001730:	f7ff ffee 	bl	8001710 <HAL_GetTick>
 8001734:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001740:	d005      	beq.n	800174e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001742:	4b0a      	ldr	r3, [pc, #40]	@ (800176c <HAL_Delay+0x44>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4413      	add	r3, r2
 800174c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800174e:	bf00      	nop
 8001750:	f7ff ffde 	bl	8001710 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	429a      	cmp	r2, r3
 800175e:	d8f7      	bhi.n	8001750 <HAL_Delay+0x28>
  {
  }
}
 8001760:	bf00      	nop
 8001762:	bf00      	nop
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000008 	.word	0x20000008

08001770 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001778:	2300      	movs	r3, #0
 800177a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e033      	b.n	80017ee <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	2b00      	cmp	r3, #0
 800178c:	d109      	bne.n	80017a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff fbb2 	bl	8000ef8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a6:	f003 0310 	and.w	r3, r3, #16
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d118      	bne.n	80017e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80017b6:	f023 0302 	bic.w	r3, r3, #2
 80017ba:	f043 0202 	orr.w	r2, r3, #2
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 fada 	bl	8001d7c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d2:	f023 0303 	bic.w	r3, r3, #3
 80017d6:	f043 0201 	orr.w	r2, r3, #1
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80017de:	e001      	b.n	80017e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001800:	2300      	movs	r3, #0
 8001802:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800180a:	2b01      	cmp	r3, #1
 800180c:	d101      	bne.n	8001812 <HAL_ADC_Start+0x1a>
 800180e:	2302      	movs	r3, #2
 8001810:	e0b2      	b.n	8001978 <HAL_ADC_Start+0x180>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	2b01      	cmp	r3, #1
 8001826:	d018      	beq.n	800185a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f042 0201 	orr.w	r2, r2, #1
 8001836:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001838:	4b52      	ldr	r3, [pc, #328]	@ (8001984 <HAL_ADC_Start+0x18c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a52      	ldr	r2, [pc, #328]	@ (8001988 <HAL_ADC_Start+0x190>)
 800183e:	fba2 2303 	umull	r2, r3, r2, r3
 8001842:	0c9a      	lsrs	r2, r3, #18
 8001844:	4613      	mov	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4413      	add	r3, r2
 800184a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800184c:	e002      	b.n	8001854 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	3b01      	subs	r3, #1
 8001852:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1f9      	bne.n	800184e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	2b01      	cmp	r3, #1
 8001866:	d17a      	bne.n	800195e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001870:	f023 0301 	bic.w	r3, r3, #1
 8001874:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001886:	2b00      	cmp	r3, #0
 8001888:	d007      	beq.n	800189a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001892:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018a6:	d106      	bne.n	80018b6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ac:	f023 0206 	bic.w	r2, r3, #6
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	645a      	str	r2, [r3, #68]	@ 0x44
 80018b4:	e002      	b.n	80018bc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018c4:	4b31      	ldr	r3, [pc, #196]	@ (800198c <HAL_ADC_Start+0x194>)
 80018c6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80018d0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 031f 	and.w	r3, r3, #31
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d12a      	bne.n	8001934 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a2b      	ldr	r2, [pc, #172]	@ (8001990 <HAL_ADC_Start+0x198>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d015      	beq.n	8001914 <HAL_ADC_Start+0x11c>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a29      	ldr	r2, [pc, #164]	@ (8001994 <HAL_ADC_Start+0x19c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d105      	bne.n	80018fe <HAL_ADC_Start+0x106>
 80018f2:	4b26      	ldr	r3, [pc, #152]	@ (800198c <HAL_ADC_Start+0x194>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 031f 	and.w	r3, r3, #31
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00a      	beq.n	8001914 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a25      	ldr	r2, [pc, #148]	@ (8001998 <HAL_ADC_Start+0x1a0>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d136      	bne.n	8001976 <HAL_ADC_Start+0x17e>
 8001908:	4b20      	ldr	r3, [pc, #128]	@ (800198c <HAL_ADC_Start+0x194>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 0310 	and.w	r3, r3, #16
 8001910:	2b00      	cmp	r3, #0
 8001912:	d130      	bne.n	8001976 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d129      	bne.n	8001976 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	e020      	b.n	8001976 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a15      	ldr	r2, [pc, #84]	@ (8001990 <HAL_ADC_Start+0x198>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d11b      	bne.n	8001976 <HAL_ADC_Start+0x17e>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d114      	bne.n	8001976 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	e00b      	b.n	8001976 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001962:	f043 0210 	orr.w	r2, r3, #16
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196e:	f043 0201 	orr.w	r2, r3, #1
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	20000000 	.word	0x20000000
 8001988:	431bde83 	.word	0x431bde83
 800198c:	40012300 	.word	0x40012300
 8001990:	40012000 	.word	0x40012000
 8001994:	40012100 	.word	0x40012100
 8001998:	40012200 	.word	0x40012200

0800199c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d101      	bne.n	80019b2 <HAL_ADC_Stop+0x16>
 80019ae:	2302      	movs	r3, #2
 80019b0:	e021      	b.n	80019f6 <HAL_ADC_Stop+0x5a>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 0201 	bic.w	r2, r2, #1
 80019c8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d109      	bne.n	80019ec <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019dc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80019e0:	f023 0301 	bic.w	r3, r3, #1
 80019e4:	f043 0201 	orr.w	r2, r3, #1
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b084      	sub	sp, #16
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a1e:	d113      	bne.n	8001a48 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a2e:	d10b      	bne.n	8001a48 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a34:	f043 0220 	orr.w	r2, r3, #32
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e063      	b.n	8001b10 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a48:	f7ff fe62 	bl	8001710 <HAL_GetTick>
 8001a4c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a4e:	e021      	b.n	8001a94 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a56:	d01d      	beq.n	8001a94 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d007      	beq.n	8001a6e <HAL_ADC_PollForConversion+0x6c>
 8001a5e:	f7ff fe57 	bl	8001710 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d212      	bcs.n	8001a94 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d00b      	beq.n	8001a94 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a80:	f043 0204 	orr.w	r2, r3, #4
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e03d      	b.n	8001b10 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d1d6      	bne.n	8001a50 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f06f 0212 	mvn.w	r2, #18
 8001aaa:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d123      	bne.n	8001b0e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d11f      	bne.n	8001b0e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ad4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d006      	beq.n	8001aea <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d111      	bne.n	8001b0e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d105      	bne.n	8001b0e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	f043 0201 	orr.w	r2, r3, #1
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d101      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x1c>
 8001b30:	2302      	movs	r3, #2
 8001b32:	e113      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x244>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b09      	cmp	r3, #9
 8001b42:	d925      	bls.n	8001b90 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68d9      	ldr	r1, [r3, #12]
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	461a      	mov	r2, r3
 8001b52:	4613      	mov	r3, r2
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	4413      	add	r3, r2
 8001b58:	3b1e      	subs	r3, #30
 8001b5a:	2207      	movs	r2, #7
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43da      	mvns	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	400a      	ands	r2, r1
 8001b68:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68d9      	ldr	r1, [r3, #12]
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	4403      	add	r3, r0
 8001b82:	3b1e      	subs	r3, #30
 8001b84:	409a      	lsls	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	e022      	b.n	8001bd6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6919      	ldr	r1, [r3, #16]
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	4413      	add	r3, r2
 8001ba4:	2207      	movs	r2, #7
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43da      	mvns	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	400a      	ands	r2, r1
 8001bb2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6919      	ldr	r1, [r3, #16]
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	689a      	ldr	r2, [r3, #8]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4403      	add	r3, r0
 8001bcc:	409a      	lsls	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b06      	cmp	r3, #6
 8001bdc:	d824      	bhi.n	8001c28 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	3b05      	subs	r3, #5
 8001bf0:	221f      	movs	r2, #31
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43da      	mvns	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	400a      	ands	r2, r1
 8001bfe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	3b05      	subs	r3, #5
 8001c1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	430a      	orrs	r2, r1
 8001c24:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c26:	e04c      	b.n	8001cc2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b0c      	cmp	r3, #12
 8001c2e:	d824      	bhi.n	8001c7a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	3b23      	subs	r3, #35	@ 0x23
 8001c42:	221f      	movs	r2, #31
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43da      	mvns	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	400a      	ands	r2, r1
 8001c50:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	4618      	mov	r0, r3
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	4613      	mov	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	3b23      	subs	r3, #35	@ 0x23
 8001c6c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	430a      	orrs	r2, r1
 8001c76:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c78:	e023      	b.n	8001cc2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	4613      	mov	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	3b41      	subs	r3, #65	@ 0x41
 8001c8c:	221f      	movs	r2, #31
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43da      	mvns	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	400a      	ands	r2, r1
 8001c9a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	4618      	mov	r0, r3
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	3b41      	subs	r3, #65	@ 0x41
 8001cb6:	fa00 f203 	lsl.w	r2, r0, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cc2:	4b29      	ldr	r3, [pc, #164]	@ (8001d68 <HAL_ADC_ConfigChannel+0x250>)
 8001cc4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a28      	ldr	r2, [pc, #160]	@ (8001d6c <HAL_ADC_ConfigChannel+0x254>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d10f      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x1d8>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b12      	cmp	r3, #18
 8001cd6:	d10b      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a1d      	ldr	r2, [pc, #116]	@ (8001d6c <HAL_ADC_ConfigChannel+0x254>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d12b      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x23a>
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a1c      	ldr	r2, [pc, #112]	@ (8001d70 <HAL_ADC_ConfigChannel+0x258>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d003      	beq.n	8001d0c <HAL_ADC_ConfigChannel+0x1f4>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b11      	cmp	r3, #17
 8001d0a:	d122      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a11      	ldr	r2, [pc, #68]	@ (8001d70 <HAL_ADC_ConfigChannel+0x258>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d111      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d2e:	4b11      	ldr	r3, [pc, #68]	@ (8001d74 <HAL_ADC_ConfigChannel+0x25c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a11      	ldr	r2, [pc, #68]	@ (8001d78 <HAL_ADC_ConfigChannel+0x260>)
 8001d34:	fba2 2303 	umull	r2, r3, r2, r3
 8001d38:	0c9a      	lsrs	r2, r3, #18
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d44:	e002      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f9      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	40012300 	.word	0x40012300
 8001d6c:	40012000 	.word	0x40012000
 8001d70:	10000012 	.word	0x10000012
 8001d74:	20000000 	.word	0x20000000
 8001d78:	431bde83 	.word	0x431bde83

08001d7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d84:	4b79      	ldr	r3, [pc, #484]	@ (8001f6c <ADC_Init+0x1f0>)
 8001d86:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001db0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6859      	ldr	r1, [r3, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	021a      	lsls	r2, r3, #8
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001dd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6859      	ldr	r1, [r3, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001df6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6899      	ldr	r1, [r3, #8]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	68da      	ldr	r2, [r3, #12]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	430a      	orrs	r2, r1
 8001e08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e0e:	4a58      	ldr	r2, [pc, #352]	@ (8001f70 <ADC_Init+0x1f4>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d022      	beq.n	8001e5a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6899      	ldr	r1, [r3, #8]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6899      	ldr	r1, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	e00f      	b.n	8001e7a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e78:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 0202 	bic.w	r2, r2, #2
 8001e88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6899      	ldr	r1, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	7e1b      	ldrb	r3, [r3, #24]
 8001e94:	005a      	lsls	r2, r3, #1
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d01b      	beq.n	8001ee0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001eb6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001ec6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6859      	ldr	r1, [r3, #4]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	035a      	lsls	r2, r3, #13
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	e007      	b.n	8001ef0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001eee:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001efe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	051a      	lsls	r2, r3, #20
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001f24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6899      	ldr	r1, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f32:	025a      	lsls	r2, r3, #9
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6899      	ldr	r1, [r3, #8]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	029a      	lsls	r2, r3, #10
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	609a      	str	r2, [r3, #8]
}
 8001f60:	bf00      	nop
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	40012300 	.word	0x40012300
 8001f70:	0f000001 	.word	0x0f000001

08001f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f84:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f90:	4013      	ands	r3, r2
 8001f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fa6:	4a04      	ldr	r2, [pc, #16]	@ (8001fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	60d3      	str	r3, [r2, #12]
}
 8001fac:	bf00      	nop
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc0:	4b04      	ldr	r3, [pc, #16]	@ (8001fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	0a1b      	lsrs	r3, r3, #8
 8001fc6:	f003 0307 	and.w	r3, r3, #7
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	db0b      	blt.n	8002002 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fea:	79fb      	ldrb	r3, [r7, #7]
 8001fec:	f003 021f 	and.w	r2, r3, #31
 8001ff0:	4907      	ldr	r1, [pc, #28]	@ (8002010 <__NVIC_EnableIRQ+0x38>)
 8001ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff6:	095b      	lsrs	r3, r3, #5
 8001ff8:	2001      	movs	r0, #1
 8001ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8001ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	e000e100 	.word	0xe000e100

08002014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	6039      	str	r1, [r7, #0]
 800201e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002024:	2b00      	cmp	r3, #0
 8002026:	db0a      	blt.n	800203e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	b2da      	uxtb	r2, r3
 800202c:	490c      	ldr	r1, [pc, #48]	@ (8002060 <__NVIC_SetPriority+0x4c>)
 800202e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002032:	0112      	lsls	r2, r2, #4
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	440b      	add	r3, r1
 8002038:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800203c:	e00a      	b.n	8002054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	b2da      	uxtb	r2, r3
 8002042:	4908      	ldr	r1, [pc, #32]	@ (8002064 <__NVIC_SetPriority+0x50>)
 8002044:	79fb      	ldrb	r3, [r7, #7]
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	3b04      	subs	r3, #4
 800204c:	0112      	lsls	r2, r2, #4
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	440b      	add	r3, r1
 8002052:	761a      	strb	r2, [r3, #24]
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	e000e100 	.word	0xe000e100
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002068:	b480      	push	{r7}
 800206a:	b089      	sub	sp, #36	@ 0x24
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f1c3 0307 	rsb	r3, r3, #7
 8002082:	2b04      	cmp	r3, #4
 8002084:	bf28      	it	cs
 8002086:	2304      	movcs	r3, #4
 8002088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	3304      	adds	r3, #4
 800208e:	2b06      	cmp	r3, #6
 8002090:	d902      	bls.n	8002098 <NVIC_EncodePriority+0x30>
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	3b03      	subs	r3, #3
 8002096:	e000      	b.n	800209a <NVIC_EncodePriority+0x32>
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800209c:	f04f 32ff 	mov.w	r2, #4294967295
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43da      	mvns	r2, r3
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	401a      	ands	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b0:	f04f 31ff 	mov.w	r1, #4294967295
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ba:	43d9      	mvns	r1, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c0:	4313      	orrs	r3, r2
         );
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3724      	adds	r7, #36	@ 0x24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7ff ff4c 	bl	8001f74 <__NVIC_SetPriorityGrouping>
}
 80020dc:	bf00      	nop
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
 80020f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020f6:	f7ff ff61 	bl	8001fbc <__NVIC_GetPriorityGrouping>
 80020fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	68b9      	ldr	r1, [r7, #8]
 8002100:	6978      	ldr	r0, [r7, #20]
 8002102:	f7ff ffb1 	bl	8002068 <NVIC_EncodePriority>
 8002106:	4602      	mov	r2, r0
 8002108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800210c:	4611      	mov	r1, r2
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff ff80 	bl	8002014 <__NVIC_SetPriority>
}
 8002114:	bf00      	nop
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff ff54 	bl	8001fd8 <__NVIC_EnableIRQ>
}
 8002130:	bf00      	nop
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e00e      	b.n	8002168 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	795b      	ldrb	r3, [r3, #5]
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d105      	bne.n	8002160 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7fe ff44 	bl	8000fe8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800217c:	f7ff fac8 	bl	8001710 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e099      	b.n	80022c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2202      	movs	r2, #2
 8002190:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 0201 	bic.w	r2, r2, #1
 80021aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021ac:	e00f      	b.n	80021ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021ae:	f7ff faaf 	bl	8001710 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b05      	cmp	r3, #5
 80021ba:	d908      	bls.n	80021ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2220      	movs	r2, #32
 80021c0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2203      	movs	r2, #3
 80021c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e078      	b.n	80022c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1e8      	bne.n	80021ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021e4:	697a      	ldr	r2, [r7, #20]
 80021e6:	4b38      	ldr	r3, [pc, #224]	@ (80022c8 <HAL_DMA_Init+0x158>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002206:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002212:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	4313      	orrs	r3, r2
 800221e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002224:	2b04      	cmp	r3, #4
 8002226:	d107      	bne.n	8002238 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002230:	4313      	orrs	r3, r2
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	4313      	orrs	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f023 0307 	bic.w	r3, r3, #7
 800224e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	4313      	orrs	r3, r2
 8002258:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225e:	2b04      	cmp	r3, #4
 8002260:	d117      	bne.n	8002292 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	4313      	orrs	r3, r2
 800226a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00e      	beq.n	8002292 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 f85f 	bl	8002338 <DMA_CheckFifoParam>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d008      	beq.n	8002292 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2240      	movs	r2, #64	@ 0x40
 8002284:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800228e:	2301      	movs	r3, #1
 8002290:	e016      	b.n	80022c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f816 	bl	80022cc <DMA_CalcBaseAndBitshift>
 80022a0:	4603      	mov	r3, r0
 80022a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a8:	223f      	movs	r2, #63	@ 0x3f
 80022aa:	409a      	lsls	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	f010803f 	.word	0xf010803f

080022cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	3b10      	subs	r3, #16
 80022dc:	4a14      	ldr	r2, [pc, #80]	@ (8002330 <DMA_CalcBaseAndBitshift+0x64>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	091b      	lsrs	r3, r3, #4
 80022e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022e6:	4a13      	ldr	r2, [pc, #76]	@ (8002334 <DMA_CalcBaseAndBitshift+0x68>)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	4413      	add	r3, r2
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	d909      	bls.n	800230e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002302:	f023 0303 	bic.w	r3, r3, #3
 8002306:	1d1a      	adds	r2, r3, #4
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	659a      	str	r2, [r3, #88]	@ 0x58
 800230c:	e007      	b.n	800231e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002316:	f023 0303 	bic.w	r3, r3, #3
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	aaaaaaab 	.word	0xaaaaaaab
 8002334:	0800b3f8 	.word	0x0800b3f8

08002338 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002348:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d11f      	bne.n	8002392 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	2b03      	cmp	r3, #3
 8002356:	d856      	bhi.n	8002406 <DMA_CheckFifoParam+0xce>
 8002358:	a201      	add	r2, pc, #4	@ (adr r2, 8002360 <DMA_CheckFifoParam+0x28>)
 800235a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800235e:	bf00      	nop
 8002360:	08002371 	.word	0x08002371
 8002364:	08002383 	.word	0x08002383
 8002368:	08002371 	.word	0x08002371
 800236c:	08002407 	.word	0x08002407
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002374:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d046      	beq.n	800240a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002380:	e043      	b.n	800240a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002386:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800238a:	d140      	bne.n	800240e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002390:	e03d      	b.n	800240e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800239a:	d121      	bne.n	80023e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	2b03      	cmp	r3, #3
 80023a0:	d837      	bhi.n	8002412 <DMA_CheckFifoParam+0xda>
 80023a2:	a201      	add	r2, pc, #4	@ (adr r2, 80023a8 <DMA_CheckFifoParam+0x70>)
 80023a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a8:	080023b9 	.word	0x080023b9
 80023ac:	080023bf 	.word	0x080023bf
 80023b0:	080023b9 	.word	0x080023b9
 80023b4:	080023d1 	.word	0x080023d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	73fb      	strb	r3, [r7, #15]
      break;
 80023bc:	e030      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d025      	beq.n	8002416 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ce:	e022      	b.n	8002416 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023d8:	d11f      	bne.n	800241a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023de:	e01c      	b.n	800241a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d903      	bls.n	80023ee <DMA_CheckFifoParam+0xb6>
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d003      	beq.n	80023f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023ec:	e018      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	73fb      	strb	r3, [r7, #15]
      break;
 80023f2:	e015      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00e      	beq.n	800241e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	73fb      	strb	r3, [r7, #15]
      break;
 8002404:	e00b      	b.n	800241e <DMA_CheckFifoParam+0xe6>
      break;
 8002406:	bf00      	nop
 8002408:	e00a      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      break;
 800240a:	bf00      	nop
 800240c:	e008      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      break;
 800240e:	bf00      	nop
 8002410:	e006      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      break;
 8002412:	bf00      	nop
 8002414:	e004      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      break;
 8002416:	bf00      	nop
 8002418:	e002      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      break;   
 800241a:	bf00      	nop
 800241c:	e000      	b.n	8002420 <DMA_CheckFifoParam+0xe8>
      break;
 800241e:	bf00      	nop
    }
  } 
  
  return status; 
 8002420:	7bfb      	ldrb	r3, [r7, #15]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop

08002430 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002430:	b480      	push	{r7}
 8002432:	b089      	sub	sp, #36	@ 0x24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800243e:	2300      	movs	r3, #0
 8002440:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002442:	2300      	movs	r3, #0
 8002444:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002446:	2300      	movs	r3, #0
 8002448:	61fb      	str	r3, [r7, #28]
 800244a:	e177      	b.n	800273c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800244c:	2201      	movs	r2, #1
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	4013      	ands	r3, r2
 800245e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	429a      	cmp	r2, r3
 8002466:	f040 8166 	bne.w	8002736 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	2b01      	cmp	r3, #1
 8002474:	d005      	beq.n	8002482 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800247e:	2b02      	cmp	r3, #2
 8002480:	d130      	bne.n	80024e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	2203      	movs	r2, #3
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43db      	mvns	r3, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4013      	ands	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024b8:	2201      	movs	r2, #1
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4013      	ands	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	091b      	lsrs	r3, r3, #4
 80024ce:	f003 0201 	and.w	r2, r3, #1
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 0303 	and.w	r3, r3, #3
 80024ec:	2b03      	cmp	r3, #3
 80024ee:	d017      	beq.n	8002520 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	2203      	movs	r2, #3
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 0303 	and.w	r3, r3, #3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d123      	bne.n	8002574 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	08da      	lsrs	r2, r3, #3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3208      	adds	r2, #8
 8002534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002538:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	220f      	movs	r2, #15
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	691a      	ldr	r2, [r3, #16]
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	08da      	lsrs	r2, r3, #3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3208      	adds	r2, #8
 800256e:	69b9      	ldr	r1, [r7, #24]
 8002570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	2203      	movs	r2, #3
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 0203 	and.w	r2, r3, #3
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 80c0 	beq.w	8002736 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	4b66      	ldr	r3, [pc, #408]	@ (8002754 <HAL_GPIO_Init+0x324>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025be:	4a65      	ldr	r2, [pc, #404]	@ (8002754 <HAL_GPIO_Init+0x324>)
 80025c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80025c6:	4b63      	ldr	r3, [pc, #396]	@ (8002754 <HAL_GPIO_Init+0x324>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025d2:	4a61      	ldr	r2, [pc, #388]	@ (8002758 <HAL_GPIO_Init+0x328>)
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	089b      	lsrs	r3, r3, #2
 80025d8:	3302      	adds	r3, #2
 80025da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	220f      	movs	r2, #15
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4013      	ands	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a58      	ldr	r2, [pc, #352]	@ (800275c <HAL_GPIO_Init+0x32c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d037      	beq.n	800266e <HAL_GPIO_Init+0x23e>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a57      	ldr	r2, [pc, #348]	@ (8002760 <HAL_GPIO_Init+0x330>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d031      	beq.n	800266a <HAL_GPIO_Init+0x23a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a56      	ldr	r2, [pc, #344]	@ (8002764 <HAL_GPIO_Init+0x334>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d02b      	beq.n	8002666 <HAL_GPIO_Init+0x236>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a55      	ldr	r2, [pc, #340]	@ (8002768 <HAL_GPIO_Init+0x338>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d025      	beq.n	8002662 <HAL_GPIO_Init+0x232>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a54      	ldr	r2, [pc, #336]	@ (800276c <HAL_GPIO_Init+0x33c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d01f      	beq.n	800265e <HAL_GPIO_Init+0x22e>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a53      	ldr	r2, [pc, #332]	@ (8002770 <HAL_GPIO_Init+0x340>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d019      	beq.n	800265a <HAL_GPIO_Init+0x22a>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a52      	ldr	r2, [pc, #328]	@ (8002774 <HAL_GPIO_Init+0x344>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d013      	beq.n	8002656 <HAL_GPIO_Init+0x226>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a51      	ldr	r2, [pc, #324]	@ (8002778 <HAL_GPIO_Init+0x348>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d00d      	beq.n	8002652 <HAL_GPIO_Init+0x222>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a50      	ldr	r2, [pc, #320]	@ (800277c <HAL_GPIO_Init+0x34c>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d007      	beq.n	800264e <HAL_GPIO_Init+0x21e>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a4f      	ldr	r2, [pc, #316]	@ (8002780 <HAL_GPIO_Init+0x350>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d101      	bne.n	800264a <HAL_GPIO_Init+0x21a>
 8002646:	2309      	movs	r3, #9
 8002648:	e012      	b.n	8002670 <HAL_GPIO_Init+0x240>
 800264a:	230a      	movs	r3, #10
 800264c:	e010      	b.n	8002670 <HAL_GPIO_Init+0x240>
 800264e:	2308      	movs	r3, #8
 8002650:	e00e      	b.n	8002670 <HAL_GPIO_Init+0x240>
 8002652:	2307      	movs	r3, #7
 8002654:	e00c      	b.n	8002670 <HAL_GPIO_Init+0x240>
 8002656:	2306      	movs	r3, #6
 8002658:	e00a      	b.n	8002670 <HAL_GPIO_Init+0x240>
 800265a:	2305      	movs	r3, #5
 800265c:	e008      	b.n	8002670 <HAL_GPIO_Init+0x240>
 800265e:	2304      	movs	r3, #4
 8002660:	e006      	b.n	8002670 <HAL_GPIO_Init+0x240>
 8002662:	2303      	movs	r3, #3
 8002664:	e004      	b.n	8002670 <HAL_GPIO_Init+0x240>
 8002666:	2302      	movs	r3, #2
 8002668:	e002      	b.n	8002670 <HAL_GPIO_Init+0x240>
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <HAL_GPIO_Init+0x240>
 800266e:	2300      	movs	r3, #0
 8002670:	69fa      	ldr	r2, [r7, #28]
 8002672:	f002 0203 	and.w	r2, r2, #3
 8002676:	0092      	lsls	r2, r2, #2
 8002678:	4093      	lsls	r3, r2
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002680:	4935      	ldr	r1, [pc, #212]	@ (8002758 <HAL_GPIO_Init+0x328>)
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	089b      	lsrs	r3, r3, #2
 8002686:	3302      	adds	r3, #2
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800268e:	4b3d      	ldr	r3, [pc, #244]	@ (8002784 <HAL_GPIO_Init+0x354>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	43db      	mvns	r3, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4013      	ands	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026b2:	4a34      	ldr	r2, [pc, #208]	@ (8002784 <HAL_GPIO_Init+0x354>)
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026b8:	4b32      	ldr	r3, [pc, #200]	@ (8002784 <HAL_GPIO_Init+0x354>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026dc:	4a29      	ldr	r2, [pc, #164]	@ (8002784 <HAL_GPIO_Init+0x354>)
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026e2:	4b28      	ldr	r3, [pc, #160]	@ (8002784 <HAL_GPIO_Init+0x354>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	43db      	mvns	r3, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4013      	ands	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002706:	4a1f      	ldr	r2, [pc, #124]	@ (8002784 <HAL_GPIO_Init+0x354>)
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800270c:	4b1d      	ldr	r3, [pc, #116]	@ (8002784 <HAL_GPIO_Init+0x354>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002730:	4a14      	ldr	r2, [pc, #80]	@ (8002784 <HAL_GPIO_Init+0x354>)
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	3301      	adds	r3, #1
 800273a:	61fb      	str	r3, [r7, #28]
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	2b0f      	cmp	r3, #15
 8002740:	f67f ae84 	bls.w	800244c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002744:	bf00      	nop
 8002746:	bf00      	nop
 8002748:	3724      	adds	r7, #36	@ 0x24
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40023800 	.word	0x40023800
 8002758:	40013800 	.word	0x40013800
 800275c:	40020000 	.word	0x40020000
 8002760:	40020400 	.word	0x40020400
 8002764:	40020800 	.word	0x40020800
 8002768:	40020c00 	.word	0x40020c00
 800276c:	40021000 	.word	0x40021000
 8002770:	40021400 	.word	0x40021400
 8002774:	40021800 	.word	0x40021800
 8002778:	40021c00 	.word	0x40021c00
 800277c:	40022000 	.word	0x40022000
 8002780:	40022400 	.word	0x40022400
 8002784:	40013c00 	.word	0x40013c00

08002788 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	460b      	mov	r3, r1
 8002792:	807b      	strh	r3, [r7, #2]
 8002794:	4613      	mov	r3, r2
 8002796:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002798:	787b      	ldrb	r3, [r7, #1]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800279e:	887a      	ldrh	r2, [r7, #2]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027a4:	e003      	b.n	80027ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027a6:	887b      	ldrh	r3, [r7, #2]
 80027a8:	041a      	lsls	r2, r3, #16
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	619a      	str	r2, [r3, #24]
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b086      	sub	sp, #24
 80027be:	af02      	add	r7, sp, #8
 80027c0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e059      	b.n	8002880 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d106      	bne.n	80027ec <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f007 fbdc 	bl	8009fa4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2203      	movs	r2, #3
 80027f0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027fa:	d102      	bne.n	8002802 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f004 f9f5 	bl	8006bf6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6818      	ldr	r0, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	7c1a      	ldrb	r2, [r3, #16]
 8002814:	f88d 2000 	strb.w	r2, [sp]
 8002818:	3304      	adds	r3, #4
 800281a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800281c:	f004 f976 	bl	8006b0c <USB_CoreInit>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d005      	beq.n	8002832 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2202      	movs	r2, #2
 800282a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e026      	b.n	8002880 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2101      	movs	r1, #1
 8002838:	4618      	mov	r0, r3
 800283a:	f004 f9ed 	bl	8006c18 <USB_SetCurrentMode>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d005      	beq.n	8002850 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2202      	movs	r2, #2
 8002848:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e017      	b.n	8002880 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6818      	ldr	r0, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	7c1a      	ldrb	r2, [r3, #16]
 8002858:	f88d 2000 	strb.w	r2, [sp]
 800285c:	3304      	adds	r3, #4
 800285e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002860:	f004 fb90 	bl	8006f84 <USB_HostInit>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d005      	beq.n	8002876 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2202      	movs	r2, #2
 800286e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e004      	b.n	8002880 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002888:	b590      	push	{r4, r7, lr}
 800288a:	b08b      	sub	sp, #44	@ 0x2c
 800288c:	af04      	add	r7, sp, #16
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	4608      	mov	r0, r1
 8002892:	4611      	mov	r1, r2
 8002894:	461a      	mov	r2, r3
 8002896:	4603      	mov	r3, r0
 8002898:	70fb      	strb	r3, [r7, #3]
 800289a:	460b      	mov	r3, r1
 800289c:	70bb      	strb	r3, [r7, #2]
 800289e:	4613      	mov	r3, r2
 80028a0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80028a2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80028a4:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d101      	bne.n	80028b4 <HAL_HCD_HC_Init+0x2c>
 80028b0:	2302      	movs	r3, #2
 80028b2:	e09d      	b.n	80029f0 <HAL_HCD_HC_Init+0x168>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80028bc:	78fa      	ldrb	r2, [r7, #3]
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	1a9b      	subs	r3, r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	3319      	adds	r3, #25
 80028cc:	2200      	movs	r2, #0
 80028ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80028d0:	78fa      	ldrb	r2, [r7, #3]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	1a9b      	subs	r3, r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	3314      	adds	r3, #20
 80028e0:	787a      	ldrb	r2, [r7, #1]
 80028e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80028e4:	78fa      	ldrb	r2, [r7, #3]
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	1a9b      	subs	r3, r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	3315      	adds	r3, #21
 80028f4:	78fa      	ldrb	r2, [r7, #3]
 80028f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80028f8:	78fa      	ldrb	r2, [r7, #3]
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	4613      	mov	r3, r2
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	1a9b      	subs	r3, r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	3326      	adds	r3, #38	@ 0x26
 8002908:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800290c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800290e:	78fa      	ldrb	r2, [r7, #3]
 8002910:	78bb      	ldrb	r3, [r7, #2]
 8002912:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002916:	b2d8      	uxtb	r0, r3
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	1a9b      	subs	r3, r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	440b      	add	r3, r1
 8002924:	3316      	adds	r3, #22
 8002926:	4602      	mov	r2, r0
 8002928:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800292a:	78fb      	ldrb	r3, [r7, #3]
 800292c:	4619      	mov	r1, r3
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 fbc8 	bl	80030c4 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002934:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002938:	2b00      	cmp	r3, #0
 800293a:	da0a      	bge.n	8002952 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800293c:	78fa      	ldrb	r2, [r7, #3]
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	1a9b      	subs	r3, r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	3317      	adds	r3, #23
 800294c:	2201      	movs	r2, #1
 800294e:	701a      	strb	r2, [r3, #0]
 8002950:	e009      	b.n	8002966 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002952:	78fa      	ldrb	r2, [r7, #3]
 8002954:	6879      	ldr	r1, [r7, #4]
 8002956:	4613      	mov	r3, r2
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	1a9b      	subs	r3, r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	440b      	add	r3, r1
 8002960:	3317      	adds	r3, #23
 8002962:	2200      	movs	r2, #0
 8002964:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f004 fc6e 	bl	800724c <USB_GetHostSpeed>
 8002970:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002972:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002976:	2b01      	cmp	r3, #1
 8002978:	d10b      	bne.n	8002992 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800297a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800297e:	2b01      	cmp	r3, #1
 8002980:	d107      	bne.n	8002992 <HAL_HCD_HC_Init+0x10a>
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d104      	bne.n	8002992 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	2bbc      	cmp	r3, #188	@ 0xbc
 800298c:	d901      	bls.n	8002992 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800298e:	23bc      	movs	r3, #188	@ 0xbc
 8002990:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002992:	78fa      	ldrb	r2, [r7, #3]
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	1a9b      	subs	r3, r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	3318      	adds	r3, #24
 80029a2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80029a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80029a8:	78fa      	ldrb	r2, [r7, #3]
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	b298      	uxth	r0, r3
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	4613      	mov	r3, r2
 80029b2:	011b      	lsls	r3, r3, #4
 80029b4:	1a9b      	subs	r3, r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	3328      	adds	r3, #40	@ 0x28
 80029bc:	4602      	mov	r2, r0
 80029be:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6818      	ldr	r0, [r3, #0]
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	787c      	ldrb	r4, [r7, #1]
 80029ca:	78ba      	ldrb	r2, [r7, #2]
 80029cc:	78f9      	ldrb	r1, [r7, #3]
 80029ce:	9302      	str	r3, [sp, #8]
 80029d0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80029d4:	9301      	str	r3, [sp, #4]
 80029d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	4623      	mov	r3, r4
 80029de:	f004 fc5d 	bl	800729c <USB_HC_Init>
 80029e2:	4603      	mov	r3, r0
 80029e4:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80029ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	371c      	adds	r7, #28
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd90      	pop	{r4, r7, pc}

080029f8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	460b      	mov	r3, r1
 8002a02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002a04:	2300      	movs	r3, #0
 8002a06:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d101      	bne.n	8002a16 <HAL_HCD_HC_Halt+0x1e>
 8002a12:	2302      	movs	r3, #2
 8002a14:	e00f      	b.n	8002a36 <HAL_HCD_HC_Halt+0x3e>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	78fa      	ldrb	r2, [r7, #3]
 8002a24:	4611      	mov	r1, r2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f004 ffef 	bl	8007a0a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	4608      	mov	r0, r1
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4603      	mov	r3, r0
 8002a50:	70fb      	strb	r3, [r7, #3]
 8002a52:	460b      	mov	r3, r1
 8002a54:	70bb      	strb	r3, [r7, #2]
 8002a56:	4613      	mov	r3, r2
 8002a58:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002a5a:	78fa      	ldrb	r2, [r7, #3]
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	1a9b      	subs	r3, r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	440b      	add	r3, r1
 8002a68:	3317      	adds	r3, #23
 8002a6a:	78ba      	ldrb	r2, [r7, #2]
 8002a6c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002a6e:	78fa      	ldrb	r2, [r7, #3]
 8002a70:	6879      	ldr	r1, [r7, #4]
 8002a72:	4613      	mov	r3, r2
 8002a74:	011b      	lsls	r3, r3, #4
 8002a76:	1a9b      	subs	r3, r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	3326      	adds	r3, #38	@ 0x26
 8002a7e:	787a      	ldrb	r2, [r7, #1]
 8002a80:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002a82:	7c3b      	ldrb	r3, [r7, #16]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d114      	bne.n	8002ab2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002a88:	78fa      	ldrb	r2, [r7, #3]
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	011b      	lsls	r3, r3, #4
 8002a90:	1a9b      	subs	r3, r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	332a      	adds	r3, #42	@ 0x2a
 8002a98:	2203      	movs	r2, #3
 8002a9a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002a9c:	78fa      	ldrb	r2, [r7, #3]
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	1a9b      	subs	r3, r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	3319      	adds	r3, #25
 8002aac:	7f3a      	ldrb	r2, [r7, #28]
 8002aae:	701a      	strb	r2, [r3, #0]
 8002ab0:	e009      	b.n	8002ac6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ab2:	78fa      	ldrb	r2, [r7, #3]
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	011b      	lsls	r3, r3, #4
 8002aba:	1a9b      	subs	r3, r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	332a      	adds	r3, #42	@ 0x2a
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002ac6:	787b      	ldrb	r3, [r7, #1]
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	f200 8102 	bhi.w	8002cd2 <HAL_HCD_HC_SubmitRequest+0x292>
 8002ace:	a201      	add	r2, pc, #4	@ (adr r2, 8002ad4 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad4:	08002ae5 	.word	0x08002ae5
 8002ad8:	08002cbd 	.word	0x08002cbd
 8002adc:	08002ba9 	.word	0x08002ba9
 8002ae0:	08002c33 	.word	0x08002c33
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002ae4:	7c3b      	ldrb	r3, [r7, #16]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	f040 80f5 	bne.w	8002cd6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002aec:	78bb      	ldrb	r3, [r7, #2]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d12d      	bne.n	8002b4e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002af2:	8b3b      	ldrh	r3, [r7, #24]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d109      	bne.n	8002b0c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002af8:	78fa      	ldrb	r2, [r7, #3]
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	4613      	mov	r3, r2
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	1a9b      	subs	r3, r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	333d      	adds	r3, #61	@ 0x3d
 8002b08:	2201      	movs	r2, #1
 8002b0a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002b0c:	78fa      	ldrb	r2, [r7, #3]
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	011b      	lsls	r3, r3, #4
 8002b14:	1a9b      	subs	r3, r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	333d      	adds	r3, #61	@ 0x3d
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10a      	bne.n	8002b38 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b22:	78fa      	ldrb	r2, [r7, #3]
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	4613      	mov	r3, r2
 8002b28:	011b      	lsls	r3, r3, #4
 8002b2a:	1a9b      	subs	r3, r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	440b      	add	r3, r1
 8002b30:	332a      	adds	r3, #42	@ 0x2a
 8002b32:	2200      	movs	r2, #0
 8002b34:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002b36:	e0ce      	b.n	8002cd6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b38:	78fa      	ldrb	r2, [r7, #3]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	011b      	lsls	r3, r3, #4
 8002b40:	1a9b      	subs	r3, r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	332a      	adds	r3, #42	@ 0x2a
 8002b48:	2202      	movs	r2, #2
 8002b4a:	701a      	strb	r2, [r3, #0]
      break;
 8002b4c:	e0c3      	b.n	8002cd6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002b4e:	78fa      	ldrb	r2, [r7, #3]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	1a9b      	subs	r3, r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	331a      	adds	r3, #26
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	f040 80b8 	bne.w	8002cd6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002b66:	78fa      	ldrb	r2, [r7, #3]
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	011b      	lsls	r3, r3, #4
 8002b6e:	1a9b      	subs	r3, r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	440b      	add	r3, r1
 8002b74:	333c      	adds	r3, #60	@ 0x3c
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10a      	bne.n	8002b92 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b7c:	78fa      	ldrb	r2, [r7, #3]
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	4613      	mov	r3, r2
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	1a9b      	subs	r3, r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	440b      	add	r3, r1
 8002b8a:	332a      	adds	r3, #42	@ 0x2a
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	701a      	strb	r2, [r3, #0]
      break;
 8002b90:	e0a1      	b.n	8002cd6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b92:	78fa      	ldrb	r2, [r7, #3]
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	4613      	mov	r3, r2
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	1a9b      	subs	r3, r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	332a      	adds	r3, #42	@ 0x2a
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	701a      	strb	r2, [r3, #0]
      break;
 8002ba6:	e096      	b.n	8002cd6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002ba8:	78bb      	ldrb	r3, [r7, #2]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d120      	bne.n	8002bf0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002bae:	78fa      	ldrb	r2, [r7, #3]
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	1a9b      	subs	r3, r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	440b      	add	r3, r1
 8002bbc:	333d      	adds	r3, #61	@ 0x3d
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10a      	bne.n	8002bda <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002bc4:	78fa      	ldrb	r2, [r7, #3]
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	332a      	adds	r3, #42	@ 0x2a
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002bd8:	e07e      	b.n	8002cd8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bda:	78fa      	ldrb	r2, [r7, #3]
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	4613      	mov	r3, r2
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	1a9b      	subs	r3, r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	440b      	add	r3, r1
 8002be8:	332a      	adds	r3, #42	@ 0x2a
 8002bea:	2202      	movs	r2, #2
 8002bec:	701a      	strb	r2, [r3, #0]
      break;
 8002bee:	e073      	b.n	8002cd8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002bf0:	78fa      	ldrb	r2, [r7, #3]
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	1a9b      	subs	r3, r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	333c      	adds	r3, #60	@ 0x3c
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10a      	bne.n	8002c1c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c06:	78fa      	ldrb	r2, [r7, #3]
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	011b      	lsls	r3, r3, #4
 8002c0e:	1a9b      	subs	r3, r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	440b      	add	r3, r1
 8002c14:	332a      	adds	r3, #42	@ 0x2a
 8002c16:	2200      	movs	r2, #0
 8002c18:	701a      	strb	r2, [r3, #0]
      break;
 8002c1a:	e05d      	b.n	8002cd8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c1c:	78fa      	ldrb	r2, [r7, #3]
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	4613      	mov	r3, r2
 8002c22:	011b      	lsls	r3, r3, #4
 8002c24:	1a9b      	subs	r3, r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	332a      	adds	r3, #42	@ 0x2a
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	701a      	strb	r2, [r3, #0]
      break;
 8002c30:	e052      	b.n	8002cd8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002c32:	78bb      	ldrb	r3, [r7, #2]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d120      	bne.n	8002c7a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c38:	78fa      	ldrb	r2, [r7, #3]
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	011b      	lsls	r3, r3, #4
 8002c40:	1a9b      	subs	r3, r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	333d      	adds	r3, #61	@ 0x3d
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10a      	bne.n	8002c64 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c4e:	78fa      	ldrb	r2, [r7, #3]
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	1a9b      	subs	r3, r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	332a      	adds	r3, #42	@ 0x2a
 8002c5e:	2200      	movs	r2, #0
 8002c60:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002c62:	e039      	b.n	8002cd8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c64:	78fa      	ldrb	r2, [r7, #3]
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	1a9b      	subs	r3, r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	332a      	adds	r3, #42	@ 0x2a
 8002c74:	2202      	movs	r2, #2
 8002c76:	701a      	strb	r2, [r3, #0]
      break;
 8002c78:	e02e      	b.n	8002cd8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002c7a:	78fa      	ldrb	r2, [r7, #3]
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	011b      	lsls	r3, r3, #4
 8002c82:	1a9b      	subs	r3, r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	440b      	add	r3, r1
 8002c88:	333c      	adds	r3, #60	@ 0x3c
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10a      	bne.n	8002ca6 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c90:	78fa      	ldrb	r2, [r7, #3]
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	1a9b      	subs	r3, r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	332a      	adds	r3, #42	@ 0x2a
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	701a      	strb	r2, [r3, #0]
      break;
 8002ca4:	e018      	b.n	8002cd8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ca6:	78fa      	ldrb	r2, [r7, #3]
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	011b      	lsls	r3, r3, #4
 8002cae:	1a9b      	subs	r3, r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	332a      	adds	r3, #42	@ 0x2a
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	701a      	strb	r2, [r3, #0]
      break;
 8002cba:	e00d      	b.n	8002cd8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002cbc:	78fa      	ldrb	r2, [r7, #3]
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	332a      	adds	r3, #42	@ 0x2a
 8002ccc:	2200      	movs	r2, #0
 8002cce:	701a      	strb	r2, [r3, #0]
      break;
 8002cd0:	e002      	b.n	8002cd8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002cd2:	bf00      	nop
 8002cd4:	e000      	b.n	8002cd8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002cd6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002cd8:	78fa      	ldrb	r2, [r7, #3]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	1a9b      	subs	r3, r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	332c      	adds	r3, #44	@ 0x2c
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002cec:	78fa      	ldrb	r2, [r7, #3]
 8002cee:	8b39      	ldrh	r1, [r7, #24]
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	1a9b      	subs	r3, r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4403      	add	r3, r0
 8002cfc:	3334      	adds	r3, #52	@ 0x34
 8002cfe:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002d00:	78fa      	ldrb	r2, [r7, #3]
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	011b      	lsls	r3, r3, #4
 8002d08:	1a9b      	subs	r3, r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	334c      	adds	r3, #76	@ 0x4c
 8002d10:	2200      	movs	r2, #0
 8002d12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002d14:	78fa      	ldrb	r2, [r7, #3]
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	1a9b      	subs	r3, r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	440b      	add	r3, r1
 8002d22:	3338      	adds	r3, #56	@ 0x38
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002d28:	78fa      	ldrb	r2, [r7, #3]
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	1a9b      	subs	r3, r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	3315      	adds	r3, #21
 8002d38:	78fa      	ldrb	r2, [r7, #3]
 8002d3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002d3c:	78fa      	ldrb	r2, [r7, #3]
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	4613      	mov	r3, r2
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	1a9b      	subs	r3, r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	334d      	adds	r3, #77	@ 0x4d
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6818      	ldr	r0, [r3, #0]
 8002d54:	78fa      	ldrb	r2, [r7, #3]
 8002d56:	4613      	mov	r3, r2
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	1a9b      	subs	r3, r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	3310      	adds	r3, #16
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	4413      	add	r3, r2
 8002d64:	1d19      	adds	r1, r3, #4
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	799b      	ldrb	r3, [r3, #6]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	f004 fbc2 	bl	80074f4 <USB_HC_StartXfer>
 8002d70:	4603      	mov	r3, r0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop

08002d7c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f004 f8b6 	bl	8006f04 <USB_GetMode>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	f040 80fb 	bne.w	8002f96 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f004 f879 	bl	8006e9c <USB_ReadInterrupts>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 80f1 	beq.w	8002f94 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f004 f870 	bl	8006e9c <USB_ReadInterrupts>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002dc6:	d104      	bne.n	8002dd2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002dd0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f004 f860 	bl	8006e9c <USB_ReadInterrupts>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002de2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002de6:	d104      	bne.n	8002df2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002df0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f004 f850 	bl	8006e9c <USB_ReadInterrupts>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e02:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e06:	d104      	bne.n	8002e12 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002e10:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f004 f840 	bl	8006e9c <USB_ReadInterrupts>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d103      	bne.n	8002e2e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f004 f832 	bl	8006e9c <USB_ReadInterrupts>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e42:	d120      	bne.n	8002e86 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002e4c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d113      	bne.n	8002e86 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002e5e:	2110      	movs	r1, #16
 8002e60:	6938      	ldr	r0, [r7, #16]
 8002e62:	f003 ff25 	bl	8006cb0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002e66:	6938      	ldr	r0, [r7, #16]
 8002e68:	f003 ff54 	bl	8006d14 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	7a5b      	ldrb	r3, [r3, #9]
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d105      	bne.n	8002e80 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2101      	movs	r1, #1
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f004 f946 	bl	800710c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f007 f909 	bl	800a098 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f004 f806 	bl	8006e9c <USB_ReadInterrupts>
 8002e90:	4603      	mov	r3, r0
 8002e92:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e9a:	d102      	bne.n	8002ea2 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f001 fd33 	bl	8004908 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f003 fff8 	bl	8006e9c <USB_ReadInterrupts>
 8002eac:	4603      	mov	r3, r0
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d106      	bne.n	8002ec4 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f007 f8d2 	bl	800a060 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2208      	movs	r2, #8
 8002ec2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f003 ffe7 	bl	8006e9c <USB_ReadInterrupts>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ed4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ed8:	d139      	bne.n	8002f4e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f004 fd82 	bl	80079e8 <USB_HC_ReadInterrupt>
 8002ee4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	617b      	str	r3, [r7, #20]
 8002eea:	e025      	b.n	8002f38 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f003 030f 	and.w	r3, r3, #15
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d018      	beq.n	8002f32 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	015a      	lsls	r2, r3, #5
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4413      	add	r3, r2
 8002f08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f16:	d106      	bne.n	8002f26 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f905 	bl	800312e <HCD_HC_IN_IRQHandler>
 8002f24:	e005      	b.n	8002f32 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 ff67 	bl	8003e00 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	3301      	adds	r3, #1
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	795b      	ldrb	r3, [r3, #5]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d3d3      	bcc.n	8002eec <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f003 ffa2 	bl	8006e9c <USB_ReadInterrupts>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	f003 0310 	and.w	r3, r3, #16
 8002f5e:	2b10      	cmp	r3, #16
 8002f60:	d101      	bne.n	8002f66 <HAL_HCD_IRQHandler+0x1ea>
 8002f62:	2301      	movs	r3, #1
 8002f64:	e000      	b.n	8002f68 <HAL_HCD_IRQHandler+0x1ec>
 8002f66:	2300      	movs	r3, #0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d014      	beq.n	8002f96 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699a      	ldr	r2, [r3, #24]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0210 	bic.w	r2, r2, #16
 8002f7a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f001 fbe4 	bl	800474a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	699a      	ldr	r2, [r3, #24]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f042 0210 	orr.w	r2, r2, #16
 8002f90:	619a      	str	r2, [r3, #24]
 8002f92:	e000      	b.n	8002f96 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002f94:	bf00      	nop
    }
  }
}
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <HAL_HCD_Start+0x16>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	e013      	b.n	8002fda <HAL_HCD_Start+0x3e>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f004 f90a 	bl	80071da <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f003 fe02 	bl	8006bd4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b082      	sub	sp, #8
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d101      	bne.n	8002ff8 <HAL_HCD_Stop+0x16>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	e00d      	b.n	8003014 <HAL_HCD_Stop+0x32>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f004 fe5d 	bl	8007cc4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f004 f8ac 	bl	8007186 <USB_ResetPort>
 800302e:	4603      	mov	r3, r0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003044:	78fa      	ldrb	r2, [r7, #3]
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	011b      	lsls	r3, r3, #4
 800304c:	1a9b      	subs	r3, r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	334c      	adds	r3, #76	@ 0x4c
 8003054:	781b      	ldrb	r3, [r3, #0]
}
 8003056:	4618      	mov	r0, r3
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
 800306a:	460b      	mov	r3, r1
 800306c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800306e:	78fa      	ldrb	r2, [r7, #3]
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	4613      	mov	r3, r2
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	1a9b      	subs	r3, r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	440b      	add	r3, r1
 800307c:	3338      	adds	r3, #56	@ 0x38
 800307e:	681b      	ldr	r3, [r3, #0]
}
 8003080:	4618      	mov	r0, r3
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4618      	mov	r0, r3
 800309a:	f004 f8ee 	bl	800727a <USB_GetCurrentFrame>
 800309e:	4603      	mov	r3, r0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f004 f8c9 	bl	800724c <USB_GetHostSpeed>
 80030ba:	4603      	mov	r3, r0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	460b      	mov	r3, r1
 80030ce:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80030d0:	78fa      	ldrb	r2, [r7, #3]
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	1a9b      	subs	r3, r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	331a      	adds	r3, #26
 80030e0:	2200      	movs	r2, #0
 80030e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80030e4:	78fa      	ldrb	r2, [r7, #3]
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	1a9b      	subs	r3, r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	331b      	adds	r3, #27
 80030f4:	2200      	movs	r2, #0
 80030f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80030f8:	78fa      	ldrb	r2, [r7, #3]
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	011b      	lsls	r3, r3, #4
 8003100:	1a9b      	subs	r3, r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	3325      	adds	r3, #37	@ 0x25
 8003108:	2200      	movs	r2, #0
 800310a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 800310c:	78fa      	ldrb	r2, [r7, #3]
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	3324      	adds	r3, #36	@ 0x24
 800311c:	2200      	movs	r2, #0
 800311e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b086      	sub	sp, #24
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
 8003136:	460b      	mov	r3, r1
 8003138:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	78fa      	ldrb	r2, [r7, #3]
 800314a:	4611      	mov	r1, r2
 800314c:	4618      	mov	r0, r3
 800314e:	f003 feb8 	bl	8006ec2 <USB_ReadChInterrupts>
 8003152:	4603      	mov	r3, r0
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b04      	cmp	r3, #4
 800315a:	d11a      	bne.n	8003192 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800315c:	78fb      	ldrb	r3, [r7, #3]
 800315e:	015a      	lsls	r2, r3, #5
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	4413      	add	r3, r2
 8003164:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003168:	461a      	mov	r2, r3
 800316a:	2304      	movs	r3, #4
 800316c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800316e:	78fa      	ldrb	r2, [r7, #3]
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	1a9b      	subs	r3, r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	334d      	adds	r3, #77	@ 0x4d
 800317e:	2207      	movs	r2, #7
 8003180:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	4611      	mov	r1, r2
 800318a:	4618      	mov	r0, r3
 800318c:	f004 fc3d 	bl	8007a0a <USB_HC_Halt>
 8003190:	e09e      	b.n	80032d0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	78fa      	ldrb	r2, [r7, #3]
 8003198:	4611      	mov	r1, r2
 800319a:	4618      	mov	r0, r3
 800319c:	f003 fe91 	bl	8006ec2 <USB_ReadChInterrupts>
 80031a0:	4603      	mov	r3, r0
 80031a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031aa:	d11b      	bne.n	80031e4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	015a      	lsls	r2, r3, #5
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	4413      	add	r3, r2
 80031b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031b8:	461a      	mov	r2, r3
 80031ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031be:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80031c0:	78fa      	ldrb	r2, [r7, #3]
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	4613      	mov	r3, r2
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	1a9b      	subs	r3, r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	334d      	adds	r3, #77	@ 0x4d
 80031d0:	2208      	movs	r2, #8
 80031d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	78fa      	ldrb	r2, [r7, #3]
 80031da:	4611      	mov	r1, r2
 80031dc:	4618      	mov	r0, r3
 80031de:	f004 fc14 	bl	8007a0a <USB_HC_Halt>
 80031e2:	e075      	b.n	80032d0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	78fa      	ldrb	r2, [r7, #3]
 80031ea:	4611      	mov	r1, r2
 80031ec:	4618      	mov	r0, r3
 80031ee:	f003 fe68 	bl	8006ec2 <USB_ReadChInterrupts>
 80031f2:	4603      	mov	r3, r0
 80031f4:	f003 0308 	and.w	r3, r3, #8
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	d11a      	bne.n	8003232 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80031fc:	78fb      	ldrb	r3, [r7, #3]
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	4413      	add	r3, r2
 8003204:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003208:	461a      	mov	r2, r3
 800320a:	2308      	movs	r3, #8
 800320c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800320e:	78fa      	ldrb	r2, [r7, #3]
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	1a9b      	subs	r3, r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	440b      	add	r3, r1
 800321c:	334d      	adds	r3, #77	@ 0x4d
 800321e:	2206      	movs	r2, #6
 8003220:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	78fa      	ldrb	r2, [r7, #3]
 8003228:	4611      	mov	r1, r2
 800322a:	4618      	mov	r0, r3
 800322c:	f004 fbed 	bl	8007a0a <USB_HC_Halt>
 8003230:	e04e      	b.n	80032d0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	78fa      	ldrb	r2, [r7, #3]
 8003238:	4611      	mov	r1, r2
 800323a:	4618      	mov	r0, r3
 800323c:	f003 fe41 	bl	8006ec2 <USB_ReadChInterrupts>
 8003240:	4603      	mov	r3, r0
 8003242:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003246:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800324a:	d11b      	bne.n	8003284 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800324c:	78fb      	ldrb	r3, [r7, #3]
 800324e:	015a      	lsls	r2, r3, #5
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	4413      	add	r3, r2
 8003254:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003258:	461a      	mov	r2, r3
 800325a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800325e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003260:	78fa      	ldrb	r2, [r7, #3]
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	4613      	mov	r3, r2
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	1a9b      	subs	r3, r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	334d      	adds	r3, #77	@ 0x4d
 8003270:	2209      	movs	r2, #9
 8003272:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	78fa      	ldrb	r2, [r7, #3]
 800327a:	4611      	mov	r1, r2
 800327c:	4618      	mov	r0, r3
 800327e:	f004 fbc4 	bl	8007a0a <USB_HC_Halt>
 8003282:	e025      	b.n	80032d0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	78fa      	ldrb	r2, [r7, #3]
 800328a:	4611      	mov	r1, r2
 800328c:	4618      	mov	r0, r3
 800328e:	f003 fe18 	bl	8006ec2 <USB_ReadChInterrupts>
 8003292:	4603      	mov	r3, r0
 8003294:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003298:	2b80      	cmp	r3, #128	@ 0x80
 800329a:	d119      	bne.n	80032d0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800329c:	78fb      	ldrb	r3, [r7, #3]
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032a8:	461a      	mov	r2, r3
 80032aa:	2380      	movs	r3, #128	@ 0x80
 80032ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80032ae:	78fa      	ldrb	r2, [r7, #3]
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	1a9b      	subs	r3, r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	334d      	adds	r3, #77	@ 0x4d
 80032be:	2207      	movs	r2, #7
 80032c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	78fa      	ldrb	r2, [r7, #3]
 80032c8:	4611      	mov	r1, r2
 80032ca:	4618      	mov	r0, r3
 80032cc:	f004 fb9d 	bl	8007a0a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	78fa      	ldrb	r2, [r7, #3]
 80032d6:	4611      	mov	r1, r2
 80032d8:	4618      	mov	r0, r3
 80032da:	f003 fdf2 	bl	8006ec2 <USB_ReadChInterrupts>
 80032de:	4603      	mov	r3, r0
 80032e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032e8:	d112      	bne.n	8003310 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	78fa      	ldrb	r2, [r7, #3]
 80032f0:	4611      	mov	r1, r2
 80032f2:	4618      	mov	r0, r3
 80032f4:	f004 fb89 	bl	8007a0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80032f8:	78fb      	ldrb	r3, [r7, #3]
 80032fa:	015a      	lsls	r2, r3, #5
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	4413      	add	r3, r2
 8003300:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003304:	461a      	mov	r2, r3
 8003306:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800330a:	6093      	str	r3, [r2, #8]
 800330c:	f000 bd75 	b.w	8003dfa <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	78fa      	ldrb	r2, [r7, #3]
 8003316:	4611      	mov	r1, r2
 8003318:	4618      	mov	r0, r3
 800331a:	f003 fdd2 	bl	8006ec2 <USB_ReadChInterrupts>
 800331e:	4603      	mov	r3, r0
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	2b01      	cmp	r3, #1
 8003326:	f040 8128 	bne.w	800357a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800332a:	78fb      	ldrb	r3, [r7, #3]
 800332c:	015a      	lsls	r2, r3, #5
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	4413      	add	r3, r2
 8003332:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003336:	461a      	mov	r2, r3
 8003338:	2320      	movs	r3, #32
 800333a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800333c:	78fa      	ldrb	r2, [r7, #3]
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	1a9b      	subs	r3, r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	331b      	adds	r3, #27
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d119      	bne.n	8003386 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003352:	78fa      	ldrb	r2, [r7, #3]
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	4613      	mov	r3, r2
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	1a9b      	subs	r3, r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	331b      	adds	r3, #27
 8003362:	2200      	movs	r2, #0
 8003364:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003366:	78fb      	ldrb	r3, [r7, #3]
 8003368:	015a      	lsls	r2, r3, #5
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	4413      	add	r3, r2
 800336e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	0151      	lsls	r1, r2, #5
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	440a      	add	r2, r1
 800337c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003380:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003384:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	799b      	ldrb	r3, [r3, #6]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d01b      	beq.n	80033c6 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800338e:	78fa      	ldrb	r2, [r7, #3]
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	3330      	adds	r3, #48	@ 0x30
 800339e:	6819      	ldr	r1, [r3, #0]
 80033a0:	78fb      	ldrb	r3, [r7, #3]
 80033a2:	015a      	lsls	r2, r3, #5
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	4413      	add	r3, r2
 80033a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033b2:	78fa      	ldrb	r2, [r7, #3]
 80033b4:	1ac9      	subs	r1, r1, r3
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4403      	add	r3, r0
 80033c2:	3338      	adds	r3, #56	@ 0x38
 80033c4:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80033c6:	78fa      	ldrb	r2, [r7, #3]
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	1a9b      	subs	r3, r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	440b      	add	r3, r1
 80033d4:	334d      	adds	r3, #77	@ 0x4d
 80033d6:	2201      	movs	r2, #1
 80033d8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80033da:	78fa      	ldrb	r2, [r7, #3]
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	1a9b      	subs	r3, r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	3344      	adds	r3, #68	@ 0x44
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80033ee:	78fb      	ldrb	r3, [r7, #3]
 80033f0:	015a      	lsls	r2, r3, #5
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	4413      	add	r3, r2
 80033f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033fa:	461a      	mov	r2, r3
 80033fc:	2301      	movs	r3, #1
 80033fe:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003400:	78fa      	ldrb	r2, [r7, #3]
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	3326      	adds	r3, #38	@ 0x26
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003416:	78fa      	ldrb	r2, [r7, #3]
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	1a9b      	subs	r3, r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	3326      	adds	r3, #38	@ 0x26
 8003426:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003428:	2b02      	cmp	r3, #2
 800342a:	d110      	bne.n	800344e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	78fa      	ldrb	r2, [r7, #3]
 8003432:	4611      	mov	r1, r2
 8003434:	4618      	mov	r0, r3
 8003436:	f004 fae8 	bl	8007a0a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800343a:	78fb      	ldrb	r3, [r7, #3]
 800343c:	015a      	lsls	r2, r3, #5
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	4413      	add	r3, r2
 8003442:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003446:	461a      	mov	r2, r3
 8003448:	2310      	movs	r3, #16
 800344a:	6093      	str	r3, [r2, #8]
 800344c:	e03d      	b.n	80034ca <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800344e:	78fa      	ldrb	r2, [r7, #3]
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	4613      	mov	r3, r2
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	1a9b      	subs	r3, r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	440b      	add	r3, r1
 800345c:	3326      	adds	r3, #38	@ 0x26
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b03      	cmp	r3, #3
 8003462:	d00a      	beq.n	800347a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003464:	78fa      	ldrb	r2, [r7, #3]
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	4613      	mov	r3, r2
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	1a9b      	subs	r3, r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	3326      	adds	r3, #38	@ 0x26
 8003474:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003476:	2b01      	cmp	r3, #1
 8003478:	d127      	bne.n	80034ca <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800347a:	78fb      	ldrb	r3, [r7, #3]
 800347c:	015a      	lsls	r2, r3, #5
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	4413      	add	r3, r2
 8003482:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	78fa      	ldrb	r2, [r7, #3]
 800348a:	0151      	lsls	r1, r2, #5
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	440a      	add	r2, r1
 8003490:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003494:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003498:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800349a:	78fa      	ldrb	r2, [r7, #3]
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	1a9b      	subs	r3, r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	334c      	adds	r3, #76	@ 0x4c
 80034aa:	2201      	movs	r2, #1
 80034ac:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80034ae:	78fa      	ldrb	r2, [r7, #3]
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	1a9b      	subs	r3, r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	334c      	adds	r3, #76	@ 0x4c
 80034be:	781a      	ldrb	r2, [r3, #0]
 80034c0:	78fb      	ldrb	r3, [r7, #3]
 80034c2:	4619      	mov	r1, r3
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f006 fdf5 	bl	800a0b4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	799b      	ldrb	r3, [r3, #6]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d13b      	bne.n	800354a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80034d2:	78fa      	ldrb	r2, [r7, #3]
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	1a9b      	subs	r3, r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	3338      	adds	r3, #56	@ 0x38
 80034e2:	6819      	ldr	r1, [r3, #0]
 80034e4:	78fa      	ldrb	r2, [r7, #3]
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	4613      	mov	r3, r2
 80034ea:	011b      	lsls	r3, r3, #4
 80034ec:	1a9b      	subs	r3, r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4403      	add	r3, r0
 80034f2:	3328      	adds	r3, #40	@ 0x28
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	440b      	add	r3, r1
 80034f8:	1e59      	subs	r1, r3, #1
 80034fa:	78fa      	ldrb	r2, [r7, #3]
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	1a9b      	subs	r3, r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4403      	add	r3, r0
 8003508:	3328      	adds	r3, #40	@ 0x28
 800350a:	881b      	ldrh	r3, [r3, #0]
 800350c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 8470 	beq.w	8003dfa <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800351a:	78fa      	ldrb	r2, [r7, #3]
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	1a9b      	subs	r3, r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	440b      	add	r3, r1
 8003528:	333c      	adds	r3, #60	@ 0x3c
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	78fa      	ldrb	r2, [r7, #3]
 800352e:	f083 0301 	eor.w	r3, r3, #1
 8003532:	b2d8      	uxtb	r0, r3
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	1a9b      	subs	r3, r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	333c      	adds	r3, #60	@ 0x3c
 8003542:	4602      	mov	r2, r0
 8003544:	701a      	strb	r2, [r3, #0]
 8003546:	f000 bc58 	b.w	8003dfa <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800354a:	78fa      	ldrb	r2, [r7, #3]
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	4613      	mov	r3, r2
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	1a9b      	subs	r3, r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	440b      	add	r3, r1
 8003558:	333c      	adds	r3, #60	@ 0x3c
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	78fa      	ldrb	r2, [r7, #3]
 800355e:	f083 0301 	eor.w	r3, r3, #1
 8003562:	b2d8      	uxtb	r0, r3
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	4613      	mov	r3, r2
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	333c      	adds	r3, #60	@ 0x3c
 8003572:	4602      	mov	r2, r0
 8003574:	701a      	strb	r2, [r3, #0]
 8003576:	f000 bc40 	b.w	8003dfa <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	78fa      	ldrb	r2, [r7, #3]
 8003580:	4611      	mov	r1, r2
 8003582:	4618      	mov	r0, r3
 8003584:	f003 fc9d 	bl	8006ec2 <USB_ReadChInterrupts>
 8003588:	4603      	mov	r3, r0
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	2b20      	cmp	r3, #32
 8003590:	d131      	bne.n	80035f6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003592:	78fb      	ldrb	r3, [r7, #3]
 8003594:	015a      	lsls	r2, r3, #5
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	4413      	add	r3, r2
 800359a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800359e:	461a      	mov	r2, r3
 80035a0:	2320      	movs	r3, #32
 80035a2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80035a4:	78fa      	ldrb	r2, [r7, #3]
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	1a9b      	subs	r3, r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	331a      	adds	r3, #26
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	f040 841f 	bne.w	8003dfa <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80035bc:	78fa      	ldrb	r2, [r7, #3]
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	011b      	lsls	r3, r3, #4
 80035c4:	1a9b      	subs	r3, r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	331b      	adds	r3, #27
 80035cc:	2201      	movs	r2, #1
 80035ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80035d0:	78fa      	ldrb	r2, [r7, #3]
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	011b      	lsls	r3, r3, #4
 80035d8:	1a9b      	subs	r3, r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	334d      	adds	r3, #77	@ 0x4d
 80035e0:	2203      	movs	r2, #3
 80035e2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	78fa      	ldrb	r2, [r7, #3]
 80035ea:	4611      	mov	r1, r2
 80035ec:	4618      	mov	r0, r3
 80035ee:	f004 fa0c 	bl	8007a0a <USB_HC_Halt>
 80035f2:	f000 bc02 	b.w	8003dfa <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	78fa      	ldrb	r2, [r7, #3]
 80035fc:	4611      	mov	r1, r2
 80035fe:	4618      	mov	r0, r3
 8003600:	f003 fc5f 	bl	8006ec2 <USB_ReadChInterrupts>
 8003604:	4603      	mov	r3, r0
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b02      	cmp	r3, #2
 800360c:	f040 8305 	bne.w	8003c1a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003610:	78fb      	ldrb	r3, [r7, #3]
 8003612:	015a      	lsls	r2, r3, #5
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	4413      	add	r3, r2
 8003618:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800361c:	461a      	mov	r2, r3
 800361e:	2302      	movs	r3, #2
 8003620:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003622:	78fa      	ldrb	r2, [r7, #3]
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	4613      	mov	r3, r2
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	1a9b      	subs	r3, r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	440b      	add	r3, r1
 8003630:	334d      	adds	r3, #77	@ 0x4d
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d114      	bne.n	8003662 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003638:	78fa      	ldrb	r2, [r7, #3]
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	4613      	mov	r3, r2
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	1a9b      	subs	r3, r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	334d      	adds	r3, #77	@ 0x4d
 8003648:	2202      	movs	r2, #2
 800364a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800364c:	78fa      	ldrb	r2, [r7, #3]
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	4613      	mov	r3, r2
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	1a9b      	subs	r3, r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	334c      	adds	r3, #76	@ 0x4c
 800365c:	2201      	movs	r2, #1
 800365e:	701a      	strb	r2, [r3, #0]
 8003660:	e2cc      	b.n	8003bfc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003662:	78fa      	ldrb	r2, [r7, #3]
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	4613      	mov	r3, r2
 8003668:	011b      	lsls	r3, r3, #4
 800366a:	1a9b      	subs	r3, r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	440b      	add	r3, r1
 8003670:	334d      	adds	r3, #77	@ 0x4d
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	2b06      	cmp	r3, #6
 8003676:	d114      	bne.n	80036a2 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003678:	78fa      	ldrb	r2, [r7, #3]
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	4613      	mov	r3, r2
 800367e:	011b      	lsls	r3, r3, #4
 8003680:	1a9b      	subs	r3, r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	334d      	adds	r3, #77	@ 0x4d
 8003688:	2202      	movs	r2, #2
 800368a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800368c:	78fa      	ldrb	r2, [r7, #3]
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	4613      	mov	r3, r2
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	1a9b      	subs	r3, r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	334c      	adds	r3, #76	@ 0x4c
 800369c:	2205      	movs	r2, #5
 800369e:	701a      	strb	r2, [r3, #0]
 80036a0:	e2ac      	b.n	8003bfc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80036a2:	78fa      	ldrb	r2, [r7, #3]
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	4613      	mov	r3, r2
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	1a9b      	subs	r3, r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	440b      	add	r3, r1
 80036b0:	334d      	adds	r3, #77	@ 0x4d
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	2b07      	cmp	r3, #7
 80036b6:	d00b      	beq.n	80036d0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80036b8:	78fa      	ldrb	r2, [r7, #3]
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	4613      	mov	r3, r2
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	1a9b      	subs	r3, r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	334d      	adds	r3, #77	@ 0x4d
 80036c8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80036ca:	2b09      	cmp	r3, #9
 80036cc:	f040 80a6 	bne.w	800381c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036d0:	78fa      	ldrb	r2, [r7, #3]
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	4613      	mov	r3, r2
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	1a9b      	subs	r3, r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	334d      	adds	r3, #77	@ 0x4d
 80036e0:	2202      	movs	r2, #2
 80036e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80036e4:	78fa      	ldrb	r2, [r7, #3]
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	4613      	mov	r3, r2
 80036ea:	011b      	lsls	r3, r3, #4
 80036ec:	1a9b      	subs	r3, r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	3344      	adds	r3, #68	@ 0x44
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	1c59      	adds	r1, r3, #1
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	4613      	mov	r3, r2
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	1a9b      	subs	r3, r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4403      	add	r3, r0
 8003704:	3344      	adds	r3, #68	@ 0x44
 8003706:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003708:	78fa      	ldrb	r2, [r7, #3]
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	4613      	mov	r3, r2
 800370e:	011b      	lsls	r3, r3, #4
 8003710:	1a9b      	subs	r3, r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	3344      	adds	r3, #68	@ 0x44
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2b02      	cmp	r3, #2
 800371c:	d943      	bls.n	80037a6 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800371e:	78fa      	ldrb	r2, [r7, #3]
 8003720:	6879      	ldr	r1, [r7, #4]
 8003722:	4613      	mov	r3, r2
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	1a9b      	subs	r3, r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	440b      	add	r3, r1
 800372c:	3344      	adds	r3, #68	@ 0x44
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003732:	78fa      	ldrb	r2, [r7, #3]
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	4613      	mov	r3, r2
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	1a9b      	subs	r3, r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	440b      	add	r3, r1
 8003740:	331a      	adds	r3, #26
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d123      	bne.n	8003790 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003748:	78fa      	ldrb	r2, [r7, #3]
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	4613      	mov	r3, r2
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	1a9b      	subs	r3, r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	331b      	adds	r3, #27
 8003758:	2200      	movs	r2, #0
 800375a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800375c:	78fa      	ldrb	r2, [r7, #3]
 800375e:	6879      	ldr	r1, [r7, #4]
 8003760:	4613      	mov	r3, r2
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	1a9b      	subs	r3, r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	331c      	adds	r3, #28
 800376c:	2200      	movs	r2, #0
 800376e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003770:	78fb      	ldrb	r3, [r7, #3]
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	4413      	add	r3, r2
 8003778:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	78fa      	ldrb	r2, [r7, #3]
 8003780:	0151      	lsls	r1, r2, #5
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	440a      	add	r2, r1
 8003786:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800378a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800378e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003790:	78fa      	ldrb	r2, [r7, #3]
 8003792:	6879      	ldr	r1, [r7, #4]
 8003794:	4613      	mov	r3, r2
 8003796:	011b      	lsls	r3, r3, #4
 8003798:	1a9b      	subs	r3, r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	334c      	adds	r3, #76	@ 0x4c
 80037a0:	2204      	movs	r2, #4
 80037a2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80037a4:	e229      	b.n	8003bfa <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037a6:	78fa      	ldrb	r2, [r7, #3]
 80037a8:	6879      	ldr	r1, [r7, #4]
 80037aa:	4613      	mov	r3, r2
 80037ac:	011b      	lsls	r3, r3, #4
 80037ae:	1a9b      	subs	r3, r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	440b      	add	r3, r1
 80037b4:	334c      	adds	r3, #76	@ 0x4c
 80037b6:	2202      	movs	r2, #2
 80037b8:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80037ba:	78fa      	ldrb	r2, [r7, #3]
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	4613      	mov	r3, r2
 80037c0:	011b      	lsls	r3, r3, #4
 80037c2:	1a9b      	subs	r3, r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	440b      	add	r3, r1
 80037c8:	3326      	adds	r3, #38	@ 0x26
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00b      	beq.n	80037e8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80037d0:	78fa      	ldrb	r2, [r7, #3]
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	4613      	mov	r3, r2
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	1a9b      	subs	r3, r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	440b      	add	r3, r1
 80037de:	3326      	adds	r3, #38	@ 0x26
 80037e0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	f040 8209 	bne.w	8003bfa <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80037e8:	78fb      	ldrb	r3, [r7, #3]
 80037ea:	015a      	lsls	r2, r3, #5
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	4413      	add	r3, r2
 80037f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80037fe:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003806:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003808:	78fb      	ldrb	r3, [r7, #3]
 800380a:	015a      	lsls	r2, r3, #5
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	4413      	add	r3, r2
 8003810:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003814:	461a      	mov	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800381a:	e1ee      	b.n	8003bfa <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800381c:	78fa      	ldrb	r2, [r7, #3]
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	4613      	mov	r3, r2
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	1a9b      	subs	r3, r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	334d      	adds	r3, #77	@ 0x4d
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	2b05      	cmp	r3, #5
 8003830:	f040 80c8 	bne.w	80039c4 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003834:	78fa      	ldrb	r2, [r7, #3]
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	4613      	mov	r3, r2
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	1a9b      	subs	r3, r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	334d      	adds	r3, #77	@ 0x4d
 8003844:	2202      	movs	r2, #2
 8003846:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003848:	78fa      	ldrb	r2, [r7, #3]
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	4613      	mov	r3, r2
 800384e:	011b      	lsls	r3, r3, #4
 8003850:	1a9b      	subs	r3, r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	331b      	adds	r3, #27
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2b01      	cmp	r3, #1
 800385c:	f040 81ce 	bne.w	8003bfc <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003860:	78fa      	ldrb	r2, [r7, #3]
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	4613      	mov	r3, r2
 8003866:	011b      	lsls	r3, r3, #4
 8003868:	1a9b      	subs	r3, r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	3326      	adds	r3, #38	@ 0x26
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	2b03      	cmp	r3, #3
 8003874:	d16b      	bne.n	800394e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003876:	78fa      	ldrb	r2, [r7, #3]
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	4613      	mov	r3, r2
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	1a9b      	subs	r3, r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	440b      	add	r3, r1
 8003884:	3348      	adds	r3, #72	@ 0x48
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	1c59      	adds	r1, r3, #1
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	4613      	mov	r3, r2
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	1a9b      	subs	r3, r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4403      	add	r3, r0
 8003896:	3348      	adds	r3, #72	@ 0x48
 8003898:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800389a:	78fa      	ldrb	r2, [r7, #3]
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	1a9b      	subs	r3, r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	440b      	add	r3, r1
 80038a8:	3348      	adds	r3, #72	@ 0x48
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d943      	bls.n	8003938 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80038b0:	78fa      	ldrb	r2, [r7, #3]
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	4613      	mov	r3, r2
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	1a9b      	subs	r3, r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	3348      	adds	r3, #72	@ 0x48
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80038c4:	78fa      	ldrb	r2, [r7, #3]
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	1a9b      	subs	r3, r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	331b      	adds	r3, #27
 80038d4:	2200      	movs	r2, #0
 80038d6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80038d8:	78fa      	ldrb	r2, [r7, #3]
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	4613      	mov	r3, r2
 80038de:	011b      	lsls	r3, r3, #4
 80038e0:	1a9b      	subs	r3, r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	3344      	adds	r3, #68	@ 0x44
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d809      	bhi.n	8003902 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80038ee:	78fa      	ldrb	r2, [r7, #3]
 80038f0:	6879      	ldr	r1, [r7, #4]
 80038f2:	4613      	mov	r3, r2
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	1a9b      	subs	r3, r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	440b      	add	r3, r1
 80038fc:	331c      	adds	r3, #28
 80038fe:	2201      	movs	r2, #1
 8003900:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003902:	78fb      	ldrb	r3, [r7, #3]
 8003904:	015a      	lsls	r2, r3, #5
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	4413      	add	r3, r2
 800390a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	78fa      	ldrb	r2, [r7, #3]
 8003912:	0151      	lsls	r1, r2, #5
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	440a      	add	r2, r1
 8003918:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800391c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003920:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003922:	78fa      	ldrb	r2, [r7, #3]
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	4613      	mov	r3, r2
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	1a9b      	subs	r3, r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	440b      	add	r3, r1
 8003930:	334c      	adds	r3, #76	@ 0x4c
 8003932:	2204      	movs	r2, #4
 8003934:	701a      	strb	r2, [r3, #0]
 8003936:	e014      	b.n	8003962 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003938:	78fa      	ldrb	r2, [r7, #3]
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	4613      	mov	r3, r2
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	1a9b      	subs	r3, r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	334c      	adds	r3, #76	@ 0x4c
 8003948:	2202      	movs	r2, #2
 800394a:	701a      	strb	r2, [r3, #0]
 800394c:	e009      	b.n	8003962 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800394e:	78fa      	ldrb	r2, [r7, #3]
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	4613      	mov	r3, r2
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	1a9b      	subs	r3, r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	440b      	add	r3, r1
 800395c:	334c      	adds	r3, #76	@ 0x4c
 800395e:	2202      	movs	r2, #2
 8003960:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003962:	78fa      	ldrb	r2, [r7, #3]
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	4613      	mov	r3, r2
 8003968:	011b      	lsls	r3, r3, #4
 800396a:	1a9b      	subs	r3, r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	440b      	add	r3, r1
 8003970:	3326      	adds	r3, #38	@ 0x26
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00b      	beq.n	8003990 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003978:	78fa      	ldrb	r2, [r7, #3]
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	4613      	mov	r3, r2
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	1a9b      	subs	r3, r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	3326      	adds	r3, #38	@ 0x26
 8003988:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800398a:	2b02      	cmp	r3, #2
 800398c:	f040 8136 	bne.w	8003bfc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003990:	78fb      	ldrb	r3, [r7, #3]
 8003992:	015a      	lsls	r2, r3, #5
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	4413      	add	r3, r2
 8003998:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80039a6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80039ae:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80039b0:	78fb      	ldrb	r3, [r7, #3]
 80039b2:	015a      	lsls	r2, r3, #5
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	4413      	add	r3, r2
 80039b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039bc:	461a      	mov	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6013      	str	r3, [r2, #0]
 80039c2:	e11b      	b.n	8003bfc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80039c4:	78fa      	ldrb	r2, [r7, #3]
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	4613      	mov	r3, r2
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	334d      	adds	r3, #77	@ 0x4d
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	2b03      	cmp	r3, #3
 80039d8:	f040 8081 	bne.w	8003ade <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80039dc:	78fa      	ldrb	r2, [r7, #3]
 80039de:	6879      	ldr	r1, [r7, #4]
 80039e0:	4613      	mov	r3, r2
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	1a9b      	subs	r3, r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	440b      	add	r3, r1
 80039ea:	334d      	adds	r3, #77	@ 0x4d
 80039ec:	2202      	movs	r2, #2
 80039ee:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80039f0:	78fa      	ldrb	r2, [r7, #3]
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	4613      	mov	r3, r2
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	1a9b      	subs	r3, r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	440b      	add	r3, r1
 80039fe:	331b      	adds	r3, #27
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	f040 80fa 	bne.w	8003bfc <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a08:	78fa      	ldrb	r2, [r7, #3]
 8003a0a:	6879      	ldr	r1, [r7, #4]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	1a9b      	subs	r3, r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	334c      	adds	r3, #76	@ 0x4c
 8003a18:	2202      	movs	r2, #2
 8003a1a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003a1c:	78fb      	ldrb	r3, [r7, #3]
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	78fa      	ldrb	r2, [r7, #3]
 8003a2c:	0151      	lsls	r1, r2, #5
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	440a      	add	r2, r1
 8003a32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a3a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003a3c:	78fb      	ldrb	r3, [r7, #3]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	78fa      	ldrb	r2, [r7, #3]
 8003a4c:	0151      	lsls	r1, r2, #5
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	440a      	add	r2, r1
 8003a52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a5a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003a5c:	78fb      	ldrb	r3, [r7, #3]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	78fa      	ldrb	r2, [r7, #3]
 8003a6c:	0151      	lsls	r1, r2, #5
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	440a      	add	r2, r1
 8003a72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a76:	f023 0320 	bic.w	r3, r3, #32
 8003a7a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a7c:	78fa      	ldrb	r2, [r7, #3]
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	4613      	mov	r3, r2
 8003a82:	011b      	lsls	r3, r3, #4
 8003a84:	1a9b      	subs	r3, r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	3326      	adds	r3, #38	@ 0x26
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00b      	beq.n	8003aaa <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003a92:	78fa      	ldrb	r2, [r7, #3]
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	4613      	mov	r3, r2
 8003a98:	011b      	lsls	r3, r3, #4
 8003a9a:	1a9b      	subs	r3, r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	3326      	adds	r3, #38	@ 0x26
 8003aa2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	f040 80a9 	bne.w	8003bfc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003aaa:	78fb      	ldrb	r3, [r7, #3]
 8003aac:	015a      	lsls	r2, r3, #5
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003ac0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ac8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003aca:	78fb      	ldrb	r3, [r7, #3]
 8003acc:	015a      	lsls	r2, r3, #5
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6013      	str	r3, [r2, #0]
 8003adc:	e08e      	b.n	8003bfc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003ade:	78fa      	ldrb	r2, [r7, #3]
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	1a9b      	subs	r3, r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	334d      	adds	r3, #77	@ 0x4d
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d143      	bne.n	8003b7c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003af4:	78fa      	ldrb	r2, [r7, #3]
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	4613      	mov	r3, r2
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	1a9b      	subs	r3, r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	334d      	adds	r3, #77	@ 0x4d
 8003b04:	2202      	movs	r2, #2
 8003b06:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b08:	78fa      	ldrb	r2, [r7, #3]
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	1a9b      	subs	r3, r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	440b      	add	r3, r1
 8003b16:	334c      	adds	r3, #76	@ 0x4c
 8003b18:	2202      	movs	r2, #2
 8003b1a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b1c:	78fa      	ldrb	r2, [r7, #3]
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	1a9b      	subs	r3, r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	3326      	adds	r3, #38	@ 0x26
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00a      	beq.n	8003b48 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003b32:	78fa      	ldrb	r2, [r7, #3]
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	1a9b      	subs	r3, r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	3326      	adds	r3, #38	@ 0x26
 8003b42:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d159      	bne.n	8003bfc <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003b48:	78fb      	ldrb	r3, [r7, #3]
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003b5e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003b66:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003b68:	78fb      	ldrb	r3, [r7, #3]
 8003b6a:	015a      	lsls	r2, r3, #5
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	4413      	add	r3, r2
 8003b70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b74:	461a      	mov	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6013      	str	r3, [r2, #0]
 8003b7a:	e03f      	b.n	8003bfc <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003b7c:	78fa      	ldrb	r2, [r7, #3]
 8003b7e:	6879      	ldr	r1, [r7, #4]
 8003b80:	4613      	mov	r3, r2
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	1a9b      	subs	r3, r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	334d      	adds	r3, #77	@ 0x4d
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	2b08      	cmp	r3, #8
 8003b90:	d126      	bne.n	8003be0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b92:	78fa      	ldrb	r2, [r7, #3]
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	4613      	mov	r3, r2
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	1a9b      	subs	r3, r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	440b      	add	r3, r1
 8003ba0:	334d      	adds	r3, #77	@ 0x4d
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003ba6:	78fa      	ldrb	r2, [r7, #3]
 8003ba8:	6879      	ldr	r1, [r7, #4]
 8003baa:	4613      	mov	r3, r2
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	1a9b      	subs	r3, r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	440b      	add	r3, r1
 8003bb4:	3344      	adds	r3, #68	@ 0x44
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	1c59      	adds	r1, r3, #1
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	1a9b      	subs	r3, r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4403      	add	r3, r0
 8003bc6:	3344      	adds	r3, #68	@ 0x44
 8003bc8:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003bca:	78fa      	ldrb	r2, [r7, #3]
 8003bcc:	6879      	ldr	r1, [r7, #4]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	011b      	lsls	r3, r3, #4
 8003bd2:	1a9b      	subs	r3, r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	440b      	add	r3, r1
 8003bd8:	334c      	adds	r3, #76	@ 0x4c
 8003bda:	2204      	movs	r2, #4
 8003bdc:	701a      	strb	r2, [r3, #0]
 8003bde:	e00d      	b.n	8003bfc <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003be0:	78fa      	ldrb	r2, [r7, #3]
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	4613      	mov	r3, r2
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	1a9b      	subs	r3, r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	334d      	adds	r3, #77	@ 0x4d
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	f000 8100 	beq.w	8003df8 <HCD_HC_IN_IRQHandler+0xcca>
 8003bf8:	e000      	b.n	8003bfc <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003bfa:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003bfc:	78fa      	ldrb	r2, [r7, #3]
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	4613      	mov	r3, r2
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	1a9b      	subs	r3, r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	334c      	adds	r3, #76	@ 0x4c
 8003c0c:	781a      	ldrb	r2, [r3, #0]
 8003c0e:	78fb      	ldrb	r3, [r7, #3]
 8003c10:	4619      	mov	r1, r3
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f006 fa4e 	bl	800a0b4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003c18:	e0ef      	b.n	8003dfa <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	78fa      	ldrb	r2, [r7, #3]
 8003c20:	4611      	mov	r1, r2
 8003c22:	4618      	mov	r0, r3
 8003c24:	f003 f94d 	bl	8006ec2 <USB_ReadChInterrupts>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c2e:	2b40      	cmp	r3, #64	@ 0x40
 8003c30:	d12f      	bne.n	8003c92 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003c32:	78fb      	ldrb	r3, [r7, #3]
 8003c34:	015a      	lsls	r2, r3, #5
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	4413      	add	r3, r2
 8003c3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c3e:	461a      	mov	r2, r3
 8003c40:	2340      	movs	r3, #64	@ 0x40
 8003c42:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003c44:	78fa      	ldrb	r2, [r7, #3]
 8003c46:	6879      	ldr	r1, [r7, #4]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	011b      	lsls	r3, r3, #4
 8003c4c:	1a9b      	subs	r3, r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	440b      	add	r3, r1
 8003c52:	334d      	adds	r3, #77	@ 0x4d
 8003c54:	2205      	movs	r2, #5
 8003c56:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003c58:	78fa      	ldrb	r2, [r7, #3]
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	011b      	lsls	r3, r3, #4
 8003c60:	1a9b      	subs	r3, r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	331a      	adds	r3, #26
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d109      	bne.n	8003c82 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003c6e:	78fa      	ldrb	r2, [r7, #3]
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	4613      	mov	r3, r2
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	1a9b      	subs	r3, r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	440b      	add	r3, r1
 8003c7c:	3344      	adds	r3, #68	@ 0x44
 8003c7e:	2200      	movs	r2, #0
 8003c80:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	78fa      	ldrb	r2, [r7, #3]
 8003c88:	4611      	mov	r1, r2
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f003 febd 	bl	8007a0a <USB_HC_Halt>
 8003c90:	e0b3      	b.n	8003dfa <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	78fa      	ldrb	r2, [r7, #3]
 8003c98:	4611      	mov	r1, r2
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f003 f911 	bl	8006ec2 <USB_ReadChInterrupts>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	f003 0310 	and.w	r3, r3, #16
 8003ca6:	2b10      	cmp	r3, #16
 8003ca8:	f040 80a7 	bne.w	8003dfa <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003cac:	78fa      	ldrb	r2, [r7, #3]
 8003cae:	6879      	ldr	r1, [r7, #4]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	1a9b      	subs	r3, r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	3326      	adds	r3, #38	@ 0x26
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	2b03      	cmp	r3, #3
 8003cc0:	d11b      	bne.n	8003cfa <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003cc2:	78fa      	ldrb	r2, [r7, #3]
 8003cc4:	6879      	ldr	r1, [r7, #4]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	011b      	lsls	r3, r3, #4
 8003cca:	1a9b      	subs	r3, r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	440b      	add	r3, r1
 8003cd0:	3344      	adds	r3, #68	@ 0x44
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003cd6:	78fa      	ldrb	r2, [r7, #3]
 8003cd8:	6879      	ldr	r1, [r7, #4]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	011b      	lsls	r3, r3, #4
 8003cde:	1a9b      	subs	r3, r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	440b      	add	r3, r1
 8003ce4:	334d      	adds	r3, #77	@ 0x4d
 8003ce6:	2204      	movs	r2, #4
 8003ce8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	78fa      	ldrb	r2, [r7, #3]
 8003cf0:	4611      	mov	r1, r2
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f003 fe89 	bl	8007a0a <USB_HC_Halt>
 8003cf8:	e03f      	b.n	8003d7a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003cfa:	78fa      	ldrb	r2, [r7, #3]
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	1a9b      	subs	r3, r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	3326      	adds	r3, #38	@ 0x26
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00a      	beq.n	8003d26 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003d10:	78fa      	ldrb	r2, [r7, #3]
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	4613      	mov	r3, r2
 8003d16:	011b      	lsls	r3, r3, #4
 8003d18:	1a9b      	subs	r3, r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	3326      	adds	r3, #38	@ 0x26
 8003d20:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d129      	bne.n	8003d7a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003d26:	78fa      	ldrb	r2, [r7, #3]
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	1a9b      	subs	r3, r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	440b      	add	r3, r1
 8003d34:	3344      	adds	r3, #68	@ 0x44
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	799b      	ldrb	r3, [r3, #6]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <HCD_HC_IN_IRQHandler+0xc2a>
 8003d42:	78fa      	ldrb	r2, [r7, #3]
 8003d44:	6879      	ldr	r1, [r7, #4]
 8003d46:	4613      	mov	r3, r2
 8003d48:	011b      	lsls	r3, r3, #4
 8003d4a:	1a9b      	subs	r3, r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	440b      	add	r3, r1
 8003d50:	331b      	adds	r3, #27
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d110      	bne.n	8003d7a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003d58:	78fa      	ldrb	r2, [r7, #3]
 8003d5a:	6879      	ldr	r1, [r7, #4]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	011b      	lsls	r3, r3, #4
 8003d60:	1a9b      	subs	r3, r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	440b      	add	r3, r1
 8003d66:	334d      	adds	r3, #77	@ 0x4d
 8003d68:	2204      	movs	r2, #4
 8003d6a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	78fa      	ldrb	r2, [r7, #3]
 8003d72:	4611      	mov	r1, r2
 8003d74:	4618      	mov	r0, r3
 8003d76:	f003 fe48 	bl	8007a0a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003d7a:	78fa      	ldrb	r2, [r7, #3]
 8003d7c:	6879      	ldr	r1, [r7, #4]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	011b      	lsls	r3, r3, #4
 8003d82:	1a9b      	subs	r3, r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	440b      	add	r3, r1
 8003d88:	331b      	adds	r3, #27
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d129      	bne.n	8003de4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003d90:	78fa      	ldrb	r2, [r7, #3]
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	4613      	mov	r3, r2
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	1a9b      	subs	r3, r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	331b      	adds	r3, #27
 8003da0:	2200      	movs	r2, #0
 8003da2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003da4:	78fb      	ldrb	r3, [r7, #3]
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	78fa      	ldrb	r2, [r7, #3]
 8003db4:	0151      	lsls	r1, r2, #5
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	440a      	add	r2, r1
 8003dba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003dbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dc2:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003dc4:	78fb      	ldrb	r3, [r7, #3]
 8003dc6:	015a      	lsls	r2, r3, #5
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	78fa      	ldrb	r2, [r7, #3]
 8003dd4:	0151      	lsls	r1, r2, #5
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	440a      	add	r2, r1
 8003dda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003dde:	f043 0320 	orr.w	r3, r3, #32
 8003de2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003de4:	78fb      	ldrb	r3, [r7, #3]
 8003de6:	015a      	lsls	r2, r3, #5
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	4413      	add	r3, r2
 8003dec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003df0:	461a      	mov	r2, r3
 8003df2:	2310      	movs	r3, #16
 8003df4:	6093      	str	r3, [r2, #8]
 8003df6:	e000      	b.n	8003dfa <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003df8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	460b      	mov	r3, r1
 8003e0a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	78fa      	ldrb	r2, [r7, #3]
 8003e1c:	4611      	mov	r1, r2
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f003 f84f 	bl	8006ec2 <USB_ReadChInterrupts>
 8003e24:	4603      	mov	r3, r0
 8003e26:	f003 0304 	and.w	r3, r3, #4
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	d11b      	bne.n	8003e66 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003e2e:	78fb      	ldrb	r3, [r7, #3]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	2304      	movs	r3, #4
 8003e3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003e40:	78fa      	ldrb	r2, [r7, #3]
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	4613      	mov	r3, r2
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	1a9b      	subs	r3, r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	440b      	add	r3, r1
 8003e4e:	334d      	adds	r3, #77	@ 0x4d
 8003e50:	2207      	movs	r2, #7
 8003e52:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	78fa      	ldrb	r2, [r7, #3]
 8003e5a:	4611      	mov	r1, r2
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f003 fdd4 	bl	8007a0a <USB_HC_Halt>
 8003e62:	f000 bc6f 	b.w	8004744 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	78fa      	ldrb	r2, [r7, #3]
 8003e6c:	4611      	mov	r1, r2
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f003 f827 	bl	8006ec2 <USB_ReadChInterrupts>
 8003e74:	4603      	mov	r3, r0
 8003e76:	f003 0320 	and.w	r3, r3, #32
 8003e7a:	2b20      	cmp	r3, #32
 8003e7c:	f040 8082 	bne.w	8003f84 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003e80:	78fb      	ldrb	r3, [r7, #3]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	2320      	movs	r3, #32
 8003e90:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003e92:	78fa      	ldrb	r2, [r7, #3]
 8003e94:	6879      	ldr	r1, [r7, #4]
 8003e96:	4613      	mov	r3, r2
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	1a9b      	subs	r3, r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	440b      	add	r3, r1
 8003ea0:	3319      	adds	r3, #25
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d124      	bne.n	8003ef2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003ea8:	78fa      	ldrb	r2, [r7, #3]
 8003eaa:	6879      	ldr	r1, [r7, #4]
 8003eac:	4613      	mov	r3, r2
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	1a9b      	subs	r3, r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	3319      	adds	r3, #25
 8003eb8:	2200      	movs	r2, #0
 8003eba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ebc:	78fa      	ldrb	r2, [r7, #3]
 8003ebe:	6879      	ldr	r1, [r7, #4]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	011b      	lsls	r3, r3, #4
 8003ec4:	1a9b      	subs	r3, r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	440b      	add	r3, r1
 8003eca:	334c      	adds	r3, #76	@ 0x4c
 8003ecc:	2202      	movs	r2, #2
 8003ece:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003ed0:	78fa      	ldrb	r2, [r7, #3]
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	1a9b      	subs	r3, r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	334d      	adds	r3, #77	@ 0x4d
 8003ee0:	2203      	movs	r2, #3
 8003ee2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	78fa      	ldrb	r2, [r7, #3]
 8003eea:	4611      	mov	r1, r2
 8003eec:	4618      	mov	r0, r3
 8003eee:	f003 fd8c 	bl	8007a0a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003ef2:	78fa      	ldrb	r2, [r7, #3]
 8003ef4:	6879      	ldr	r1, [r7, #4]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	011b      	lsls	r3, r3, #4
 8003efa:	1a9b      	subs	r3, r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	440b      	add	r3, r1
 8003f00:	331a      	adds	r3, #26
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	f040 841d 	bne.w	8004744 <HCD_HC_OUT_IRQHandler+0x944>
 8003f0a:	78fa      	ldrb	r2, [r7, #3]
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	011b      	lsls	r3, r3, #4
 8003f12:	1a9b      	subs	r3, r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	440b      	add	r3, r1
 8003f18:	331b      	adds	r3, #27
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f040 8411 	bne.w	8004744 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003f22:	78fa      	ldrb	r2, [r7, #3]
 8003f24:	6879      	ldr	r1, [r7, #4]
 8003f26:	4613      	mov	r3, r2
 8003f28:	011b      	lsls	r3, r3, #4
 8003f2a:	1a9b      	subs	r3, r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	440b      	add	r3, r1
 8003f30:	3326      	adds	r3, #38	@ 0x26
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d009      	beq.n	8003f4c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003f38:	78fa      	ldrb	r2, [r7, #3]
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	1a9b      	subs	r3, r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	331b      	adds	r3, #27
 8003f48:	2201      	movs	r2, #1
 8003f4a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003f4c:	78fa      	ldrb	r2, [r7, #3]
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	4613      	mov	r3, r2
 8003f52:	011b      	lsls	r3, r3, #4
 8003f54:	1a9b      	subs	r3, r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	440b      	add	r3, r1
 8003f5a:	334d      	adds	r3, #77	@ 0x4d
 8003f5c:	2203      	movs	r2, #3
 8003f5e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	78fa      	ldrb	r2, [r7, #3]
 8003f66:	4611      	mov	r1, r2
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f003 fd4e 	bl	8007a0a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003f6e:	78fa      	ldrb	r2, [r7, #3]
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	4613      	mov	r3, r2
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	1a9b      	subs	r3, r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	440b      	add	r3, r1
 8003f7c:	3344      	adds	r3, #68	@ 0x44
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	e3df      	b.n	8004744 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	78fa      	ldrb	r2, [r7, #3]
 8003f8a:	4611      	mov	r1, r2
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f002 ff98 	bl	8006ec2 <USB_ReadChInterrupts>
 8003f92:	4603      	mov	r3, r0
 8003f94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f9c:	d111      	bne.n	8003fc2 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003f9e:	78fb      	ldrb	r3, [r7, #3]
 8003fa0:	015a      	lsls	r2, r3, #5
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003faa:	461a      	mov	r2, r3
 8003fac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003fb0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	78fa      	ldrb	r2, [r7, #3]
 8003fb8:	4611      	mov	r1, r2
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f003 fd25 	bl	8007a0a <USB_HC_Halt>
 8003fc0:	e3c0      	b.n	8004744 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	78fa      	ldrb	r2, [r7, #3]
 8003fc8:	4611      	mov	r1, r2
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f002 ff79 	bl	8006ec2 <USB_ReadChInterrupts>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d168      	bne.n	80040ac <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003fda:	78fa      	ldrb	r2, [r7, #3]
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	011b      	lsls	r3, r3, #4
 8003fe2:	1a9b      	subs	r3, r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	440b      	add	r3, r1
 8003fe8:	3344      	adds	r3, #68	@ 0x44
 8003fea:	2200      	movs	r2, #0
 8003fec:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	78fa      	ldrb	r2, [r7, #3]
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f002 ff63 	bl	8006ec2 <USB_ReadChInterrupts>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004002:	2b40      	cmp	r3, #64	@ 0x40
 8004004:	d112      	bne.n	800402c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004006:	78fa      	ldrb	r2, [r7, #3]
 8004008:	6879      	ldr	r1, [r7, #4]
 800400a:	4613      	mov	r3, r2
 800400c:	011b      	lsls	r3, r3, #4
 800400e:	1a9b      	subs	r3, r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	440b      	add	r3, r1
 8004014:	3319      	adds	r3, #25
 8004016:	2201      	movs	r2, #1
 8004018:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800401a:	78fb      	ldrb	r3, [r7, #3]
 800401c:	015a      	lsls	r2, r3, #5
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	4413      	add	r3, r2
 8004022:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004026:	461a      	mov	r2, r3
 8004028:	2340      	movs	r3, #64	@ 0x40
 800402a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800402c:	78fa      	ldrb	r2, [r7, #3]
 800402e:	6879      	ldr	r1, [r7, #4]
 8004030:	4613      	mov	r3, r2
 8004032:	011b      	lsls	r3, r3, #4
 8004034:	1a9b      	subs	r3, r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	440b      	add	r3, r1
 800403a:	331b      	adds	r3, #27
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d019      	beq.n	8004076 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004042:	78fa      	ldrb	r2, [r7, #3]
 8004044:	6879      	ldr	r1, [r7, #4]
 8004046:	4613      	mov	r3, r2
 8004048:	011b      	lsls	r3, r3, #4
 800404a:	1a9b      	subs	r3, r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	440b      	add	r3, r1
 8004050:	331b      	adds	r3, #27
 8004052:	2200      	movs	r2, #0
 8004054:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004056:	78fb      	ldrb	r3, [r7, #3]
 8004058:	015a      	lsls	r2, r3, #5
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	4413      	add	r3, r2
 800405e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	78fa      	ldrb	r2, [r7, #3]
 8004066:	0151      	lsls	r1, r2, #5
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	440a      	add	r2, r1
 800406c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004070:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004074:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004076:	78fb      	ldrb	r3, [r7, #3]
 8004078:	015a      	lsls	r2, r3, #5
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	4413      	add	r3, r2
 800407e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004082:	461a      	mov	r2, r3
 8004084:	2301      	movs	r3, #1
 8004086:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004088:	78fa      	ldrb	r2, [r7, #3]
 800408a:	6879      	ldr	r1, [r7, #4]
 800408c:	4613      	mov	r3, r2
 800408e:	011b      	lsls	r3, r3, #4
 8004090:	1a9b      	subs	r3, r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	440b      	add	r3, r1
 8004096:	334d      	adds	r3, #77	@ 0x4d
 8004098:	2201      	movs	r2, #1
 800409a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	78fa      	ldrb	r2, [r7, #3]
 80040a2:	4611      	mov	r1, r2
 80040a4:	4618      	mov	r0, r3
 80040a6:	f003 fcb0 	bl	8007a0a <USB_HC_Halt>
 80040aa:	e34b      	b.n	8004744 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	78fa      	ldrb	r2, [r7, #3]
 80040b2:	4611      	mov	r1, r2
 80040b4:	4618      	mov	r0, r3
 80040b6:	f002 ff04 	bl	8006ec2 <USB_ReadChInterrupts>
 80040ba:	4603      	mov	r3, r0
 80040bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c0:	2b40      	cmp	r3, #64	@ 0x40
 80040c2:	d139      	bne.n	8004138 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80040c4:	78fa      	ldrb	r2, [r7, #3]
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	4613      	mov	r3, r2
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	1a9b      	subs	r3, r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	334d      	adds	r3, #77	@ 0x4d
 80040d4:	2205      	movs	r2, #5
 80040d6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80040d8:	78fa      	ldrb	r2, [r7, #3]
 80040da:	6879      	ldr	r1, [r7, #4]
 80040dc:	4613      	mov	r3, r2
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	1a9b      	subs	r3, r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	440b      	add	r3, r1
 80040e6:	331a      	adds	r3, #26
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d109      	bne.n	8004102 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80040ee:	78fa      	ldrb	r2, [r7, #3]
 80040f0:	6879      	ldr	r1, [r7, #4]
 80040f2:	4613      	mov	r3, r2
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	1a9b      	subs	r3, r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	440b      	add	r3, r1
 80040fc:	3319      	adds	r3, #25
 80040fe:	2201      	movs	r2, #1
 8004100:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004102:	78fa      	ldrb	r2, [r7, #3]
 8004104:	6879      	ldr	r1, [r7, #4]
 8004106:	4613      	mov	r3, r2
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	1a9b      	subs	r3, r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	440b      	add	r3, r1
 8004110:	3344      	adds	r3, #68	@ 0x44
 8004112:	2200      	movs	r2, #0
 8004114:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	78fa      	ldrb	r2, [r7, #3]
 800411c:	4611      	mov	r1, r2
 800411e:	4618      	mov	r0, r3
 8004120:	f003 fc73 	bl	8007a0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004124:	78fb      	ldrb	r3, [r7, #3]
 8004126:	015a      	lsls	r2, r3, #5
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	4413      	add	r3, r2
 800412c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004130:	461a      	mov	r2, r3
 8004132:	2340      	movs	r3, #64	@ 0x40
 8004134:	6093      	str	r3, [r2, #8]
 8004136:	e305      	b.n	8004744 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	78fa      	ldrb	r2, [r7, #3]
 800413e:	4611      	mov	r1, r2
 8004140:	4618      	mov	r0, r3
 8004142:	f002 febe 	bl	8006ec2 <USB_ReadChInterrupts>
 8004146:	4603      	mov	r3, r0
 8004148:	f003 0308 	and.w	r3, r3, #8
 800414c:	2b08      	cmp	r3, #8
 800414e:	d11a      	bne.n	8004186 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004150:	78fb      	ldrb	r3, [r7, #3]
 8004152:	015a      	lsls	r2, r3, #5
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	4413      	add	r3, r2
 8004158:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800415c:	461a      	mov	r2, r3
 800415e:	2308      	movs	r3, #8
 8004160:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004162:	78fa      	ldrb	r2, [r7, #3]
 8004164:	6879      	ldr	r1, [r7, #4]
 8004166:	4613      	mov	r3, r2
 8004168:	011b      	lsls	r3, r3, #4
 800416a:	1a9b      	subs	r3, r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	440b      	add	r3, r1
 8004170:	334d      	adds	r3, #77	@ 0x4d
 8004172:	2206      	movs	r2, #6
 8004174:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	78fa      	ldrb	r2, [r7, #3]
 800417c:	4611      	mov	r1, r2
 800417e:	4618      	mov	r0, r3
 8004180:	f003 fc43 	bl	8007a0a <USB_HC_Halt>
 8004184:	e2de      	b.n	8004744 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	78fa      	ldrb	r2, [r7, #3]
 800418c:	4611      	mov	r1, r2
 800418e:	4618      	mov	r0, r3
 8004190:	f002 fe97 	bl	8006ec2 <USB_ReadChInterrupts>
 8004194:	4603      	mov	r3, r0
 8004196:	f003 0310 	and.w	r3, r3, #16
 800419a:	2b10      	cmp	r3, #16
 800419c:	d144      	bne.n	8004228 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800419e:	78fa      	ldrb	r2, [r7, #3]
 80041a0:	6879      	ldr	r1, [r7, #4]
 80041a2:	4613      	mov	r3, r2
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	1a9b      	subs	r3, r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	440b      	add	r3, r1
 80041ac:	3344      	adds	r3, #68	@ 0x44
 80041ae:	2200      	movs	r2, #0
 80041b0:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80041b2:	78fa      	ldrb	r2, [r7, #3]
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	4613      	mov	r3, r2
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	1a9b      	subs	r3, r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	440b      	add	r3, r1
 80041c0:	334d      	adds	r3, #77	@ 0x4d
 80041c2:	2204      	movs	r2, #4
 80041c4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80041c6:	78fa      	ldrb	r2, [r7, #3]
 80041c8:	6879      	ldr	r1, [r7, #4]
 80041ca:	4613      	mov	r3, r2
 80041cc:	011b      	lsls	r3, r3, #4
 80041ce:	1a9b      	subs	r3, r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	440b      	add	r3, r1
 80041d4:	3319      	adds	r3, #25
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d114      	bne.n	8004206 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80041dc:	78fa      	ldrb	r2, [r7, #3]
 80041de:	6879      	ldr	r1, [r7, #4]
 80041e0:	4613      	mov	r3, r2
 80041e2:	011b      	lsls	r3, r3, #4
 80041e4:	1a9b      	subs	r3, r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	440b      	add	r3, r1
 80041ea:	3318      	adds	r3, #24
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d109      	bne.n	8004206 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80041f2:	78fa      	ldrb	r2, [r7, #3]
 80041f4:	6879      	ldr	r1, [r7, #4]
 80041f6:	4613      	mov	r3, r2
 80041f8:	011b      	lsls	r3, r3, #4
 80041fa:	1a9b      	subs	r3, r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	440b      	add	r3, r1
 8004200:	3319      	adds	r3, #25
 8004202:	2201      	movs	r2, #1
 8004204:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	78fa      	ldrb	r2, [r7, #3]
 800420c:	4611      	mov	r1, r2
 800420e:	4618      	mov	r0, r3
 8004210:	f003 fbfb 	bl	8007a0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004214:	78fb      	ldrb	r3, [r7, #3]
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	4413      	add	r3, r2
 800421c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004220:	461a      	mov	r2, r3
 8004222:	2310      	movs	r3, #16
 8004224:	6093      	str	r3, [r2, #8]
 8004226:	e28d      	b.n	8004744 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	78fa      	ldrb	r2, [r7, #3]
 800422e:	4611      	mov	r1, r2
 8004230:	4618      	mov	r0, r3
 8004232:	f002 fe46 	bl	8006ec2 <USB_ReadChInterrupts>
 8004236:	4603      	mov	r3, r0
 8004238:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800423c:	2b80      	cmp	r3, #128	@ 0x80
 800423e:	d169      	bne.n	8004314 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	799b      	ldrb	r3, [r3, #6]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d111      	bne.n	800426c <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004248:	78fa      	ldrb	r2, [r7, #3]
 800424a:	6879      	ldr	r1, [r7, #4]
 800424c:	4613      	mov	r3, r2
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	1a9b      	subs	r3, r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	440b      	add	r3, r1
 8004256:	334d      	adds	r3, #77	@ 0x4d
 8004258:	2207      	movs	r2, #7
 800425a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	78fa      	ldrb	r2, [r7, #3]
 8004262:	4611      	mov	r1, r2
 8004264:	4618      	mov	r0, r3
 8004266:	f003 fbd0 	bl	8007a0a <USB_HC_Halt>
 800426a:	e049      	b.n	8004300 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800426c:	78fa      	ldrb	r2, [r7, #3]
 800426e:	6879      	ldr	r1, [r7, #4]
 8004270:	4613      	mov	r3, r2
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	1a9b      	subs	r3, r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	440b      	add	r3, r1
 800427a:	3344      	adds	r3, #68	@ 0x44
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	1c59      	adds	r1, r3, #1
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	4613      	mov	r3, r2
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	1a9b      	subs	r3, r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4403      	add	r3, r0
 800428c:	3344      	adds	r3, #68	@ 0x44
 800428e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004290:	78fa      	ldrb	r2, [r7, #3]
 8004292:	6879      	ldr	r1, [r7, #4]
 8004294:	4613      	mov	r3, r2
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	1a9b      	subs	r3, r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	440b      	add	r3, r1
 800429e:	3344      	adds	r3, #68	@ 0x44
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d922      	bls.n	80042ec <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80042a6:	78fa      	ldrb	r2, [r7, #3]
 80042a8:	6879      	ldr	r1, [r7, #4]
 80042aa:	4613      	mov	r3, r2
 80042ac:	011b      	lsls	r3, r3, #4
 80042ae:	1a9b      	subs	r3, r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	440b      	add	r3, r1
 80042b4:	3344      	adds	r3, #68	@ 0x44
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80042ba:	78fa      	ldrb	r2, [r7, #3]
 80042bc:	6879      	ldr	r1, [r7, #4]
 80042be:	4613      	mov	r3, r2
 80042c0:	011b      	lsls	r3, r3, #4
 80042c2:	1a9b      	subs	r3, r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	440b      	add	r3, r1
 80042c8:	334c      	adds	r3, #76	@ 0x4c
 80042ca:	2204      	movs	r2, #4
 80042cc:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80042ce:	78fa      	ldrb	r2, [r7, #3]
 80042d0:	6879      	ldr	r1, [r7, #4]
 80042d2:	4613      	mov	r3, r2
 80042d4:	011b      	lsls	r3, r3, #4
 80042d6:	1a9b      	subs	r3, r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	440b      	add	r3, r1
 80042dc:	334c      	adds	r3, #76	@ 0x4c
 80042de:	781a      	ldrb	r2, [r3, #0]
 80042e0:	78fb      	ldrb	r3, [r7, #3]
 80042e2:	4619      	mov	r1, r3
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f005 fee5 	bl	800a0b4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80042ea:	e009      	b.n	8004300 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80042ec:	78fa      	ldrb	r2, [r7, #3]
 80042ee:	6879      	ldr	r1, [r7, #4]
 80042f0:	4613      	mov	r3, r2
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	1a9b      	subs	r3, r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	440b      	add	r3, r1
 80042fa:	334c      	adds	r3, #76	@ 0x4c
 80042fc:	2202      	movs	r2, #2
 80042fe:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004300:	78fb      	ldrb	r3, [r7, #3]
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	4413      	add	r3, r2
 8004308:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800430c:	461a      	mov	r2, r3
 800430e:	2380      	movs	r3, #128	@ 0x80
 8004310:	6093      	str	r3, [r2, #8]
 8004312:	e217      	b.n	8004744 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	78fa      	ldrb	r2, [r7, #3]
 800431a:	4611      	mov	r1, r2
 800431c:	4618      	mov	r0, r3
 800431e:	f002 fdd0 	bl	8006ec2 <USB_ReadChInterrupts>
 8004322:	4603      	mov	r3, r0
 8004324:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004328:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800432c:	d11b      	bne.n	8004366 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800432e:	78fa      	ldrb	r2, [r7, #3]
 8004330:	6879      	ldr	r1, [r7, #4]
 8004332:	4613      	mov	r3, r2
 8004334:	011b      	lsls	r3, r3, #4
 8004336:	1a9b      	subs	r3, r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	440b      	add	r3, r1
 800433c:	334d      	adds	r3, #77	@ 0x4d
 800433e:	2209      	movs	r2, #9
 8004340:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	78fa      	ldrb	r2, [r7, #3]
 8004348:	4611      	mov	r1, r2
 800434a:	4618      	mov	r0, r3
 800434c:	f003 fb5d 	bl	8007a0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004350:	78fb      	ldrb	r3, [r7, #3]
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	4413      	add	r3, r2
 8004358:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800435c:	461a      	mov	r2, r3
 800435e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004362:	6093      	str	r3, [r2, #8]
 8004364:	e1ee      	b.n	8004744 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	78fa      	ldrb	r2, [r7, #3]
 800436c:	4611      	mov	r1, r2
 800436e:	4618      	mov	r0, r3
 8004370:	f002 fda7 	bl	8006ec2 <USB_ReadChInterrupts>
 8004374:	4603      	mov	r3, r0
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b02      	cmp	r3, #2
 800437c:	f040 81df 	bne.w	800473e <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004380:	78fb      	ldrb	r3, [r7, #3]
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	4413      	add	r3, r2
 8004388:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800438c:	461a      	mov	r2, r3
 800438e:	2302      	movs	r3, #2
 8004390:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004392:	78fa      	ldrb	r2, [r7, #3]
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	4613      	mov	r3, r2
 8004398:	011b      	lsls	r3, r3, #4
 800439a:	1a9b      	subs	r3, r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	440b      	add	r3, r1
 80043a0:	334d      	adds	r3, #77	@ 0x4d
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	f040 8093 	bne.w	80044d0 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043aa:	78fa      	ldrb	r2, [r7, #3]
 80043ac:	6879      	ldr	r1, [r7, #4]
 80043ae:	4613      	mov	r3, r2
 80043b0:	011b      	lsls	r3, r3, #4
 80043b2:	1a9b      	subs	r3, r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	440b      	add	r3, r1
 80043b8:	334d      	adds	r3, #77	@ 0x4d
 80043ba:	2202      	movs	r2, #2
 80043bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80043be:	78fa      	ldrb	r2, [r7, #3]
 80043c0:	6879      	ldr	r1, [r7, #4]
 80043c2:	4613      	mov	r3, r2
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	1a9b      	subs	r3, r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	440b      	add	r3, r1
 80043cc:	334c      	adds	r3, #76	@ 0x4c
 80043ce:	2201      	movs	r2, #1
 80043d0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80043d2:	78fa      	ldrb	r2, [r7, #3]
 80043d4:	6879      	ldr	r1, [r7, #4]
 80043d6:	4613      	mov	r3, r2
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	1a9b      	subs	r3, r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	440b      	add	r3, r1
 80043e0:	3326      	adds	r3, #38	@ 0x26
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d00b      	beq.n	8004400 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80043e8:	78fa      	ldrb	r2, [r7, #3]
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	4613      	mov	r3, r2
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	1a9b      	subs	r3, r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	3326      	adds	r3, #38	@ 0x26
 80043f8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80043fa:	2b03      	cmp	r3, #3
 80043fc:	f040 8190 	bne.w	8004720 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	799b      	ldrb	r3, [r3, #6]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d115      	bne.n	8004434 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004408:	78fa      	ldrb	r2, [r7, #3]
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	4613      	mov	r3, r2
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	1a9b      	subs	r3, r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	440b      	add	r3, r1
 8004416:	333d      	adds	r3, #61	@ 0x3d
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	78fa      	ldrb	r2, [r7, #3]
 800441c:	f083 0301 	eor.w	r3, r3, #1
 8004420:	b2d8      	uxtb	r0, r3
 8004422:	6879      	ldr	r1, [r7, #4]
 8004424:	4613      	mov	r3, r2
 8004426:	011b      	lsls	r3, r3, #4
 8004428:	1a9b      	subs	r3, r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	333d      	adds	r3, #61	@ 0x3d
 8004430:	4602      	mov	r2, r0
 8004432:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	799b      	ldrb	r3, [r3, #6]
 8004438:	2b01      	cmp	r3, #1
 800443a:	f040 8171 	bne.w	8004720 <HCD_HC_OUT_IRQHandler+0x920>
 800443e:	78fa      	ldrb	r2, [r7, #3]
 8004440:	6879      	ldr	r1, [r7, #4]
 8004442:	4613      	mov	r3, r2
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	1a9b      	subs	r3, r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	440b      	add	r3, r1
 800444c:	3334      	adds	r3, #52	@ 0x34
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 8165 	beq.w	8004720 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004456:	78fa      	ldrb	r2, [r7, #3]
 8004458:	6879      	ldr	r1, [r7, #4]
 800445a:	4613      	mov	r3, r2
 800445c:	011b      	lsls	r3, r3, #4
 800445e:	1a9b      	subs	r3, r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	440b      	add	r3, r1
 8004464:	3334      	adds	r3, #52	@ 0x34
 8004466:	6819      	ldr	r1, [r3, #0]
 8004468:	78fa      	ldrb	r2, [r7, #3]
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	4613      	mov	r3, r2
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	1a9b      	subs	r3, r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4403      	add	r3, r0
 8004476:	3328      	adds	r3, #40	@ 0x28
 8004478:	881b      	ldrh	r3, [r3, #0]
 800447a:	440b      	add	r3, r1
 800447c:	1e59      	subs	r1, r3, #1
 800447e:	78fa      	ldrb	r2, [r7, #3]
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	4613      	mov	r3, r2
 8004484:	011b      	lsls	r3, r3, #4
 8004486:	1a9b      	subs	r3, r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4403      	add	r3, r0
 800448c:	3328      	adds	r3, #40	@ 0x28
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	fbb1 f3f3 	udiv	r3, r1, r3
 8004494:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 813f 	beq.w	8004720 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80044a2:	78fa      	ldrb	r2, [r7, #3]
 80044a4:	6879      	ldr	r1, [r7, #4]
 80044a6:	4613      	mov	r3, r2
 80044a8:	011b      	lsls	r3, r3, #4
 80044aa:	1a9b      	subs	r3, r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	440b      	add	r3, r1
 80044b0:	333d      	adds	r3, #61	@ 0x3d
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	78fa      	ldrb	r2, [r7, #3]
 80044b6:	f083 0301 	eor.w	r3, r3, #1
 80044ba:	b2d8      	uxtb	r0, r3
 80044bc:	6879      	ldr	r1, [r7, #4]
 80044be:	4613      	mov	r3, r2
 80044c0:	011b      	lsls	r3, r3, #4
 80044c2:	1a9b      	subs	r3, r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	440b      	add	r3, r1
 80044c8:	333d      	adds	r3, #61	@ 0x3d
 80044ca:	4602      	mov	r2, r0
 80044cc:	701a      	strb	r2, [r3, #0]
 80044ce:	e127      	b.n	8004720 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80044d0:	78fa      	ldrb	r2, [r7, #3]
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	4613      	mov	r3, r2
 80044d6:	011b      	lsls	r3, r3, #4
 80044d8:	1a9b      	subs	r3, r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	440b      	add	r3, r1
 80044de:	334d      	adds	r3, #77	@ 0x4d
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	2b03      	cmp	r3, #3
 80044e4:	d120      	bne.n	8004528 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80044e6:	78fa      	ldrb	r2, [r7, #3]
 80044e8:	6879      	ldr	r1, [r7, #4]
 80044ea:	4613      	mov	r3, r2
 80044ec:	011b      	lsls	r3, r3, #4
 80044ee:	1a9b      	subs	r3, r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	440b      	add	r3, r1
 80044f4:	334d      	adds	r3, #77	@ 0x4d
 80044f6:	2202      	movs	r2, #2
 80044f8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80044fa:	78fa      	ldrb	r2, [r7, #3]
 80044fc:	6879      	ldr	r1, [r7, #4]
 80044fe:	4613      	mov	r3, r2
 8004500:	011b      	lsls	r3, r3, #4
 8004502:	1a9b      	subs	r3, r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	440b      	add	r3, r1
 8004508:	331b      	adds	r3, #27
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	2b01      	cmp	r3, #1
 800450e:	f040 8107 	bne.w	8004720 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004512:	78fa      	ldrb	r2, [r7, #3]
 8004514:	6879      	ldr	r1, [r7, #4]
 8004516:	4613      	mov	r3, r2
 8004518:	011b      	lsls	r3, r3, #4
 800451a:	1a9b      	subs	r3, r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	440b      	add	r3, r1
 8004520:	334c      	adds	r3, #76	@ 0x4c
 8004522:	2202      	movs	r2, #2
 8004524:	701a      	strb	r2, [r3, #0]
 8004526:	e0fb      	b.n	8004720 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004528:	78fa      	ldrb	r2, [r7, #3]
 800452a:	6879      	ldr	r1, [r7, #4]
 800452c:	4613      	mov	r3, r2
 800452e:	011b      	lsls	r3, r3, #4
 8004530:	1a9b      	subs	r3, r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	440b      	add	r3, r1
 8004536:	334d      	adds	r3, #77	@ 0x4d
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	2b04      	cmp	r3, #4
 800453c:	d13a      	bne.n	80045b4 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800453e:	78fa      	ldrb	r2, [r7, #3]
 8004540:	6879      	ldr	r1, [r7, #4]
 8004542:	4613      	mov	r3, r2
 8004544:	011b      	lsls	r3, r3, #4
 8004546:	1a9b      	subs	r3, r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	440b      	add	r3, r1
 800454c:	334d      	adds	r3, #77	@ 0x4d
 800454e:	2202      	movs	r2, #2
 8004550:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004552:	78fa      	ldrb	r2, [r7, #3]
 8004554:	6879      	ldr	r1, [r7, #4]
 8004556:	4613      	mov	r3, r2
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	1a9b      	subs	r3, r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	440b      	add	r3, r1
 8004560:	334c      	adds	r3, #76	@ 0x4c
 8004562:	2202      	movs	r2, #2
 8004564:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004566:	78fa      	ldrb	r2, [r7, #3]
 8004568:	6879      	ldr	r1, [r7, #4]
 800456a:	4613      	mov	r3, r2
 800456c:	011b      	lsls	r3, r3, #4
 800456e:	1a9b      	subs	r3, r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	440b      	add	r3, r1
 8004574:	331b      	adds	r3, #27
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	2b01      	cmp	r3, #1
 800457a:	f040 80d1 	bne.w	8004720 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800457e:	78fa      	ldrb	r2, [r7, #3]
 8004580:	6879      	ldr	r1, [r7, #4]
 8004582:	4613      	mov	r3, r2
 8004584:	011b      	lsls	r3, r3, #4
 8004586:	1a9b      	subs	r3, r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	440b      	add	r3, r1
 800458c:	331b      	adds	r3, #27
 800458e:	2200      	movs	r2, #0
 8004590:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004592:	78fb      	ldrb	r3, [r7, #3]
 8004594:	015a      	lsls	r2, r3, #5
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	4413      	add	r3, r2
 800459a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	78fa      	ldrb	r2, [r7, #3]
 80045a2:	0151      	lsls	r1, r2, #5
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	440a      	add	r2, r1
 80045a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80045ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045b0:	6053      	str	r3, [r2, #4]
 80045b2:	e0b5      	b.n	8004720 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80045b4:	78fa      	ldrb	r2, [r7, #3]
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	4613      	mov	r3, r2
 80045ba:	011b      	lsls	r3, r3, #4
 80045bc:	1a9b      	subs	r3, r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	440b      	add	r3, r1
 80045c2:	334d      	adds	r3, #77	@ 0x4d
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	2b05      	cmp	r3, #5
 80045c8:	d114      	bne.n	80045f4 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045ca:	78fa      	ldrb	r2, [r7, #3]
 80045cc:	6879      	ldr	r1, [r7, #4]
 80045ce:	4613      	mov	r3, r2
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	1a9b      	subs	r3, r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	440b      	add	r3, r1
 80045d8:	334d      	adds	r3, #77	@ 0x4d
 80045da:	2202      	movs	r2, #2
 80045dc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80045de:	78fa      	ldrb	r2, [r7, #3]
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	4613      	mov	r3, r2
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	1a9b      	subs	r3, r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	440b      	add	r3, r1
 80045ec:	334c      	adds	r3, #76	@ 0x4c
 80045ee:	2202      	movs	r2, #2
 80045f0:	701a      	strb	r2, [r3, #0]
 80045f2:	e095      	b.n	8004720 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80045f4:	78fa      	ldrb	r2, [r7, #3]
 80045f6:	6879      	ldr	r1, [r7, #4]
 80045f8:	4613      	mov	r3, r2
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	1a9b      	subs	r3, r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	440b      	add	r3, r1
 8004602:	334d      	adds	r3, #77	@ 0x4d
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	2b06      	cmp	r3, #6
 8004608:	d114      	bne.n	8004634 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800460a:	78fa      	ldrb	r2, [r7, #3]
 800460c:	6879      	ldr	r1, [r7, #4]
 800460e:	4613      	mov	r3, r2
 8004610:	011b      	lsls	r3, r3, #4
 8004612:	1a9b      	subs	r3, r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	440b      	add	r3, r1
 8004618:	334d      	adds	r3, #77	@ 0x4d
 800461a:	2202      	movs	r2, #2
 800461c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800461e:	78fa      	ldrb	r2, [r7, #3]
 8004620:	6879      	ldr	r1, [r7, #4]
 8004622:	4613      	mov	r3, r2
 8004624:	011b      	lsls	r3, r3, #4
 8004626:	1a9b      	subs	r3, r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	440b      	add	r3, r1
 800462c:	334c      	adds	r3, #76	@ 0x4c
 800462e:	2205      	movs	r2, #5
 8004630:	701a      	strb	r2, [r3, #0]
 8004632:	e075      	b.n	8004720 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004634:	78fa      	ldrb	r2, [r7, #3]
 8004636:	6879      	ldr	r1, [r7, #4]
 8004638:	4613      	mov	r3, r2
 800463a:	011b      	lsls	r3, r3, #4
 800463c:	1a9b      	subs	r3, r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	440b      	add	r3, r1
 8004642:	334d      	adds	r3, #77	@ 0x4d
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	2b07      	cmp	r3, #7
 8004648:	d00a      	beq.n	8004660 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800464a:	78fa      	ldrb	r2, [r7, #3]
 800464c:	6879      	ldr	r1, [r7, #4]
 800464e:	4613      	mov	r3, r2
 8004650:	011b      	lsls	r3, r3, #4
 8004652:	1a9b      	subs	r3, r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	440b      	add	r3, r1
 8004658:	334d      	adds	r3, #77	@ 0x4d
 800465a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800465c:	2b09      	cmp	r3, #9
 800465e:	d170      	bne.n	8004742 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004660:	78fa      	ldrb	r2, [r7, #3]
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	4613      	mov	r3, r2
 8004666:	011b      	lsls	r3, r3, #4
 8004668:	1a9b      	subs	r3, r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	440b      	add	r3, r1
 800466e:	334d      	adds	r3, #77	@ 0x4d
 8004670:	2202      	movs	r2, #2
 8004672:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004674:	78fa      	ldrb	r2, [r7, #3]
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	4613      	mov	r3, r2
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	1a9b      	subs	r3, r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	440b      	add	r3, r1
 8004682:	3344      	adds	r3, #68	@ 0x44
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	1c59      	adds	r1, r3, #1
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	4613      	mov	r3, r2
 800468c:	011b      	lsls	r3, r3, #4
 800468e:	1a9b      	subs	r3, r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4403      	add	r3, r0
 8004694:	3344      	adds	r3, #68	@ 0x44
 8004696:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004698:	78fa      	ldrb	r2, [r7, #3]
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	4613      	mov	r3, r2
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	1a9b      	subs	r3, r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	3344      	adds	r3, #68	@ 0x44
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d914      	bls.n	80046d8 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80046ae:	78fa      	ldrb	r2, [r7, #3]
 80046b0:	6879      	ldr	r1, [r7, #4]
 80046b2:	4613      	mov	r3, r2
 80046b4:	011b      	lsls	r3, r3, #4
 80046b6:	1a9b      	subs	r3, r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	440b      	add	r3, r1
 80046bc:	3344      	adds	r3, #68	@ 0x44
 80046be:	2200      	movs	r2, #0
 80046c0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80046c2:	78fa      	ldrb	r2, [r7, #3]
 80046c4:	6879      	ldr	r1, [r7, #4]
 80046c6:	4613      	mov	r3, r2
 80046c8:	011b      	lsls	r3, r3, #4
 80046ca:	1a9b      	subs	r3, r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	440b      	add	r3, r1
 80046d0:	334c      	adds	r3, #76	@ 0x4c
 80046d2:	2204      	movs	r2, #4
 80046d4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80046d6:	e022      	b.n	800471e <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80046d8:	78fa      	ldrb	r2, [r7, #3]
 80046da:	6879      	ldr	r1, [r7, #4]
 80046dc:	4613      	mov	r3, r2
 80046de:	011b      	lsls	r3, r3, #4
 80046e0:	1a9b      	subs	r3, r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	440b      	add	r3, r1
 80046e6:	334c      	adds	r3, #76	@ 0x4c
 80046e8:	2202      	movs	r2, #2
 80046ea:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80046ec:	78fb      	ldrb	r3, [r7, #3]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004702:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800470a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800470c:	78fb      	ldrb	r3, [r7, #3]
 800470e:	015a      	lsls	r2, r3, #5
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	4413      	add	r3, r2
 8004714:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004718:	461a      	mov	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800471e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004720:	78fa      	ldrb	r2, [r7, #3]
 8004722:	6879      	ldr	r1, [r7, #4]
 8004724:	4613      	mov	r3, r2
 8004726:	011b      	lsls	r3, r3, #4
 8004728:	1a9b      	subs	r3, r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	440b      	add	r3, r1
 800472e:	334c      	adds	r3, #76	@ 0x4c
 8004730:	781a      	ldrb	r2, [r3, #0]
 8004732:	78fb      	ldrb	r3, [r7, #3]
 8004734:	4619      	mov	r1, r3
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f005 fcbc 	bl	800a0b4 <HAL_HCD_HC_NotifyURBChange_Callback>
 800473c:	e002      	b.n	8004744 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800473e:	bf00      	nop
 8004740:	e000      	b.n	8004744 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8004742:	bf00      	nop
  }
}
 8004744:	3718      	adds	r7, #24
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b08a      	sub	sp, #40	@ 0x28
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	f003 030f 	and.w	r3, r3, #15
 800476a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	0c5b      	lsrs	r3, r3, #17
 8004770:	f003 030f 	and.w	r3, r3, #15
 8004774:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	091b      	lsrs	r3, r3, #4
 800477a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800477e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	2b02      	cmp	r3, #2
 8004784:	d004      	beq.n	8004790 <HCD_RXQLVL_IRQHandler+0x46>
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2b05      	cmp	r3, #5
 800478a:	f000 80b6 	beq.w	80048fa <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800478e:	e0b7      	b.n	8004900 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	2b00      	cmp	r3, #0
 8004794:	f000 80b3 	beq.w	80048fe <HCD_RXQLVL_IRQHandler+0x1b4>
 8004798:	6879      	ldr	r1, [r7, #4]
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	4613      	mov	r3, r2
 800479e:	011b      	lsls	r3, r3, #4
 80047a0:	1a9b      	subs	r3, r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	440b      	add	r3, r1
 80047a6:	332c      	adds	r3, #44	@ 0x2c
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 80a7 	beq.w	80048fe <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80047b0:	6879      	ldr	r1, [r7, #4]
 80047b2:	69ba      	ldr	r2, [r7, #24]
 80047b4:	4613      	mov	r3, r2
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	1a9b      	subs	r3, r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	440b      	add	r3, r1
 80047be:	3338      	adds	r3, #56	@ 0x38
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	18d1      	adds	r1, r2, r3
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	4613      	mov	r3, r2
 80047cc:	011b      	lsls	r3, r3, #4
 80047ce:	1a9b      	subs	r3, r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4403      	add	r3, r0
 80047d4:	3334      	adds	r3, #52	@ 0x34
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4299      	cmp	r1, r3
 80047da:	f200 8083 	bhi.w	80048e4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6818      	ldr	r0, [r3, #0]
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	4613      	mov	r3, r2
 80047e8:	011b      	lsls	r3, r3, #4
 80047ea:	1a9b      	subs	r3, r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	440b      	add	r3, r1
 80047f0:	332c      	adds	r3, #44	@ 0x2c
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	b292      	uxth	r2, r2
 80047f8:	4619      	mov	r1, r3
 80047fa:	f002 faf7 	bl	8006dec <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80047fe:	6879      	ldr	r1, [r7, #4]
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	4613      	mov	r3, r2
 8004804:	011b      	lsls	r3, r3, #4
 8004806:	1a9b      	subs	r3, r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	440b      	add	r3, r1
 800480c:	332c      	adds	r3, #44	@ 0x2c
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	18d1      	adds	r1, r2, r3
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	4613      	mov	r3, r2
 800481a:	011b      	lsls	r3, r3, #4
 800481c:	1a9b      	subs	r3, r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4403      	add	r3, r0
 8004822:	332c      	adds	r3, #44	@ 0x2c
 8004824:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004826:	6879      	ldr	r1, [r7, #4]
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	4613      	mov	r3, r2
 800482c:	011b      	lsls	r3, r3, #4
 800482e:	1a9b      	subs	r3, r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	440b      	add	r3, r1
 8004834:	3338      	adds	r3, #56	@ 0x38
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	18d1      	adds	r1, r2, r3
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	4613      	mov	r3, r2
 8004842:	011b      	lsls	r3, r3, #4
 8004844:	1a9b      	subs	r3, r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4403      	add	r3, r0
 800484a:	3338      	adds	r3, #56	@ 0x38
 800484c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	015a      	lsls	r2, r3, #5
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	4413      	add	r3, r2
 8004856:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	0cdb      	lsrs	r3, r3, #19
 800485e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004862:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004864:	6879      	ldr	r1, [r7, #4]
 8004866:	69ba      	ldr	r2, [r7, #24]
 8004868:	4613      	mov	r3, r2
 800486a:	011b      	lsls	r3, r3, #4
 800486c:	1a9b      	subs	r3, r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	440b      	add	r3, r1
 8004872:	3328      	adds	r3, #40	@ 0x28
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	461a      	mov	r2, r3
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	4293      	cmp	r3, r2
 800487c:	d13f      	bne.n	80048fe <HCD_RXQLVL_IRQHandler+0x1b4>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d03c      	beq.n	80048fe <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	015a      	lsls	r2, r3, #5
 8004888:	6a3b      	ldr	r3, [r7, #32]
 800488a:	4413      	add	r3, r2
 800488c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800489a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80048a2:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	015a      	lsls	r2, r3, #5
 80048a8:	6a3b      	ldr	r3, [r7, #32]
 80048aa:	4413      	add	r3, r2
 80048ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048b0:	461a      	mov	r2, r3
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80048b6:	6879      	ldr	r1, [r7, #4]
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	4613      	mov	r3, r2
 80048bc:	011b      	lsls	r3, r3, #4
 80048be:	1a9b      	subs	r3, r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	440b      	add	r3, r1
 80048c4:	333c      	adds	r3, #60	@ 0x3c
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	f083 0301 	eor.w	r3, r3, #1
 80048cc:	b2d8      	uxtb	r0, r3
 80048ce:	6879      	ldr	r1, [r7, #4]
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	4613      	mov	r3, r2
 80048d4:	011b      	lsls	r3, r3, #4
 80048d6:	1a9b      	subs	r3, r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	440b      	add	r3, r1
 80048dc:	333c      	adds	r3, #60	@ 0x3c
 80048de:	4602      	mov	r2, r0
 80048e0:	701a      	strb	r2, [r3, #0]
      break;
 80048e2:	e00c      	b.n	80048fe <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80048e4:	6879      	ldr	r1, [r7, #4]
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	4613      	mov	r3, r2
 80048ea:	011b      	lsls	r3, r3, #4
 80048ec:	1a9b      	subs	r3, r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	440b      	add	r3, r1
 80048f2:	334c      	adds	r3, #76	@ 0x4c
 80048f4:	2204      	movs	r2, #4
 80048f6:	701a      	strb	r2, [r3, #0]
      break;
 80048f8:	e001      	b.n	80048fe <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80048fa:	bf00      	nop
 80048fc:	e000      	b.n	8004900 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80048fe:	bf00      	nop
  }
}
 8004900:	bf00      	nop
 8004902:	3728      	adds	r7, #40	@ 0x28
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004934:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b02      	cmp	r3, #2
 800493e:	d10b      	bne.n	8004958 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b01      	cmp	r3, #1
 8004948:	d102      	bne.n	8004950 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f005 fb96 	bl	800a07c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	f043 0302 	orr.w	r3, r3, #2
 8004956:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f003 0308 	and.w	r3, r3, #8
 800495e:	2b08      	cmp	r3, #8
 8004960:	d132      	bne.n	80049c8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	f043 0308 	orr.w	r3, r3, #8
 8004968:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f003 0304 	and.w	r3, r3, #4
 8004970:	2b04      	cmp	r3, #4
 8004972:	d126      	bne.n	80049c2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	7a5b      	ldrb	r3, [r3, #9]
 8004978:	2b02      	cmp	r3, #2
 800497a:	d113      	bne.n	80049a4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004982:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004986:	d106      	bne.n	8004996 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2102      	movs	r1, #2
 800498e:	4618      	mov	r0, r3
 8004990:	f002 fbbc 	bl	800710c <USB_InitFSLSPClkSel>
 8004994:	e011      	b.n	80049ba <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2101      	movs	r1, #1
 800499c:	4618      	mov	r0, r3
 800499e:	f002 fbb5 	bl	800710c <USB_InitFSLSPClkSel>
 80049a2:	e00a      	b.n	80049ba <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	79db      	ldrb	r3, [r3, #7]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d106      	bne.n	80049ba <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80049b2:	461a      	mov	r2, r3
 80049b4:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80049b8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f005 fb88 	bl	800a0d0 <HAL_HCD_PortEnabled_Callback>
 80049c0:	e002      	b.n	80049c8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f005 fb92 	bl	800a0ec <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f003 0320 	and.w	r3, r3, #32
 80049ce:	2b20      	cmp	r3, #32
 80049d0:	d103      	bne.n	80049da <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	f043 0320 	orr.w	r3, r3, #32
 80049d8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80049e0:	461a      	mov	r2, r3
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	6013      	str	r3, [r2, #0]
}
 80049e6:	bf00      	nop
 80049e8:	3718      	adds	r7, #24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
	...

080049f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e12b      	b.n	8004c5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d106      	bne.n	8004a1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7fc fb08 	bl	800102c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2224      	movs	r2, #36	@ 0x24
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0201 	bic.w	r2, r2, #1
 8004a32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a54:	f000 fdfc 	bl	8005650 <HAL_RCC_GetPCLK1Freq>
 8004a58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	4a81      	ldr	r2, [pc, #516]	@ (8004c64 <HAL_I2C_Init+0x274>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d807      	bhi.n	8004a74 <HAL_I2C_Init+0x84>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4a80      	ldr	r2, [pc, #512]	@ (8004c68 <HAL_I2C_Init+0x278>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	bf94      	ite	ls
 8004a6c:	2301      	movls	r3, #1
 8004a6e:	2300      	movhi	r3, #0
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	e006      	b.n	8004a82 <HAL_I2C_Init+0x92>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4a7d      	ldr	r2, [pc, #500]	@ (8004c6c <HAL_I2C_Init+0x27c>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	bf94      	ite	ls
 8004a7c:	2301      	movls	r3, #1
 8004a7e:	2300      	movhi	r3, #0
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e0e7      	b.n	8004c5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	4a78      	ldr	r2, [pc, #480]	@ (8004c70 <HAL_I2C_Init+0x280>)
 8004a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a92:	0c9b      	lsrs	r3, r3, #18
 8004a94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	4a6a      	ldr	r2, [pc, #424]	@ (8004c64 <HAL_I2C_Init+0x274>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d802      	bhi.n	8004ac4 <HAL_I2C_Init+0xd4>
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	e009      	b.n	8004ad8 <HAL_I2C_Init+0xe8>
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004aca:	fb02 f303 	mul.w	r3, r2, r3
 8004ace:	4a69      	ldr	r2, [pc, #420]	@ (8004c74 <HAL_I2C_Init+0x284>)
 8004ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad4:	099b      	lsrs	r3, r3, #6
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6812      	ldr	r2, [r2, #0]
 8004adc:	430b      	orrs	r3, r1
 8004ade:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004aea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	495c      	ldr	r1, [pc, #368]	@ (8004c64 <HAL_I2C_Init+0x274>)
 8004af4:	428b      	cmp	r3, r1
 8004af6:	d819      	bhi.n	8004b2c <HAL_I2C_Init+0x13c>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	1e59      	subs	r1, r3, #1
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b06:	1c59      	adds	r1, r3, #1
 8004b08:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004b0c:	400b      	ands	r3, r1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <HAL_I2C_Init+0x138>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	1e59      	subs	r1, r3, #1
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b20:	3301      	adds	r3, #1
 8004b22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b26:	e051      	b.n	8004bcc <HAL_I2C_Init+0x1dc>
 8004b28:	2304      	movs	r3, #4
 8004b2a:	e04f      	b.n	8004bcc <HAL_I2C_Init+0x1dc>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d111      	bne.n	8004b58 <HAL_I2C_Init+0x168>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	1e58      	subs	r0, r3, #1
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6859      	ldr	r1, [r3, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	005b      	lsls	r3, r3, #1
 8004b40:	440b      	add	r3, r1
 8004b42:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b46:	3301      	adds	r3, #1
 8004b48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	bf0c      	ite	eq
 8004b50:	2301      	moveq	r3, #1
 8004b52:	2300      	movne	r3, #0
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	e012      	b.n	8004b7e <HAL_I2C_Init+0x18e>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	1e58      	subs	r0, r3, #1
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6859      	ldr	r1, [r3, #4]
 8004b60:	460b      	mov	r3, r1
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	440b      	add	r3, r1
 8004b66:	0099      	lsls	r1, r3, #2
 8004b68:	440b      	add	r3, r1
 8004b6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b6e:	3301      	adds	r3, #1
 8004b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	bf0c      	ite	eq
 8004b78:	2301      	moveq	r3, #1
 8004b7a:	2300      	movne	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <HAL_I2C_Init+0x196>
 8004b82:	2301      	movs	r3, #1
 8004b84:	e022      	b.n	8004bcc <HAL_I2C_Init+0x1dc>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10e      	bne.n	8004bac <HAL_I2C_Init+0x1bc>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	1e58      	subs	r0, r3, #1
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6859      	ldr	r1, [r3, #4]
 8004b96:	460b      	mov	r3, r1
 8004b98:	005b      	lsls	r3, r3, #1
 8004b9a:	440b      	add	r3, r1
 8004b9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ba6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004baa:	e00f      	b.n	8004bcc <HAL_I2C_Init+0x1dc>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	1e58      	subs	r0, r3, #1
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6859      	ldr	r1, [r3, #4]
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	440b      	add	r3, r1
 8004bba:	0099      	lsls	r1, r3, #2
 8004bbc:	440b      	add	r3, r1
 8004bbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bc8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004bcc:	6879      	ldr	r1, [r7, #4]
 8004bce:	6809      	ldr	r1, [r1, #0]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	69da      	ldr	r2, [r3, #28]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004bfa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6911      	ldr	r1, [r2, #16]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	68d2      	ldr	r2, [r2, #12]
 8004c06:	4311      	orrs	r1, r2
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6812      	ldr	r2, [r2, #0]
 8004c0c:	430b      	orrs	r3, r1
 8004c0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	695a      	ldr	r2, [r3, #20]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	431a      	orrs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0201 	orr.w	r2, r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2220      	movs	r2, #32
 8004c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	000186a0 	.word	0x000186a0
 8004c68:	001e847f 	.word	0x001e847f
 8004c6c:	003d08ff 	.word	0x003d08ff
 8004c70:	431bde83 	.word	0x431bde83
 8004c74:	10624dd3 	.word	0x10624dd3

08004c78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b20      	cmp	r3, #32
 8004c8c:	d129      	bne.n	8004ce2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2224      	movs	r2, #36	@ 0x24
 8004c92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f022 0201 	bic.w	r2, r2, #1
 8004ca4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 0210 	bic.w	r2, r2, #16
 8004cb4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f042 0201 	orr.w	r2, r2, #1
 8004cd4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	e000      	b.n	8004ce4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004ce2:	2302      	movs	r3, #2
  }
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b20      	cmp	r3, #32
 8004d08:	d12a      	bne.n	8004d60 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2224      	movs	r2, #36	@ 0x24
 8004d0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f022 0201 	bic.w	r2, r2, #1
 8004d20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d28:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004d2a:	89fb      	ldrh	r3, [r7, #14]
 8004d2c:	f023 030f 	bic.w	r3, r3, #15
 8004d30:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	89fb      	ldrh	r3, [r7, #14]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	89fa      	ldrh	r2, [r7, #14]
 8004d42:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 0201 	orr.w	r2, r2, #1
 8004d52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2220      	movs	r2, #32
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	e000      	b.n	8004d62 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004d60:	2302      	movs	r3, #2
  }
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
	...

08004d70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e267      	b.n	8005252 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d075      	beq.n	8004e7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d8e:	4b88      	ldr	r3, [pc, #544]	@ (8004fb0 <HAL_RCC_OscConfig+0x240>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f003 030c 	and.w	r3, r3, #12
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	d00c      	beq.n	8004db4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d9a:	4b85      	ldr	r3, [pc, #532]	@ (8004fb0 <HAL_RCC_OscConfig+0x240>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004da2:	2b08      	cmp	r3, #8
 8004da4:	d112      	bne.n	8004dcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004da6:	4b82      	ldr	r3, [pc, #520]	@ (8004fb0 <HAL_RCC_OscConfig+0x240>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004db2:	d10b      	bne.n	8004dcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004db4:	4b7e      	ldr	r3, [pc, #504]	@ (8004fb0 <HAL_RCC_OscConfig+0x240>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d05b      	beq.n	8004e78 <HAL_RCC_OscConfig+0x108>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d157      	bne.n	8004e78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e242      	b.n	8005252 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dd4:	d106      	bne.n	8004de4 <HAL_RCC_OscConfig+0x74>
 8004dd6:	4b76      	ldr	r3, [pc, #472]	@ (8004fb0 <HAL_RCC_OscConfig+0x240>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a75      	ldr	r2, [pc, #468]	@ (8004fb0 <HAL_RCC_OscConfig+0x240>)
 8004ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004de0:	6013      	str	r3, [r2, #0]
 8004de2:	e01d      	b.n	8004e20 <HAL_RCC_OscConfig+0xb0>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004dec:	d10c      	bne.n	8004e08 <HAL_RCC_OscConfig+0x98>
 8004dee:	4b70      	ldr	r3, [pc, #448]	@ (8004fb0 <HAL_RCC_OscConfig+0x240>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a6f      	ldr	r2, [pc, #444]	@ (8004fb0 <HAL_RCC_OscConfig+0x240>)
 8004df4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004df8:	6013      	str	r3, [r2, #0]
 8004dfa:	4b6d      	ldr	r3, [pc, #436]	@ (8004fb0 <HAL_RCC_OscConfig+0x240>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a6c      	ldr	r2, [pc, #432]	@ (8004fb0 <HAL_RCC_OscConfig+0x240>)
 8004e00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e04:	6013      	str	r3, [r2, #0]
 8004e06:	e00b      	b.n	8004e20 <HAL_RCC_OscConfig+0xb0>
 8004e08:	4b69      	ldr	r3, [pc, #420]	@ (8004fb0 <HAL_RCC_OscConfig+0x240>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a68      	ldr	r2, [pc, #416]	@ (8004fb0 <HAL_RCC_OscConfig+0x240>)
 8004e0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e12:	6013      	str	r3, [r2, #0]
 8004e14:	4b66      	ldr	r3, [pc, #408]	@ (8004fb0 <HAL_RCC_OscConfig+0x240>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a65      	ldr	r2, [pc, #404]	@ (8004fb0 <HAL_RCC_OscConfig+0x240>)
 8004e1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d013      	beq.n	8004e50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e28:	f7fc fc72 	bl	8001710 <HAL_GetTick>
 8004e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e30:	f7fc fc6e 	bl	8001710 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b64      	cmp	r3, #100	@ 0x64
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e207      	b.n	8005252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e42:	4b5b      	ldr	r3, [pc, #364]	@ (8004fb0 <HAL_RCC_OscConfig+0x240>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d0f0      	beq.n	8004e30 <HAL_RCC_OscConfig+0xc0>
 8004e4e:	e014      	b.n	8004e7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e50:	f7fc fc5e 	bl	8001710 <HAL_GetTick>
 8004e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e56:	e008      	b.n	8004e6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e58:	f7fc fc5a 	bl	8001710 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b64      	cmp	r3, #100	@ 0x64
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e1f3      	b.n	8005252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e6a:	4b51      	ldr	r3, [pc, #324]	@ (8004fb0 <HAL_RCC_OscConfig+0x240>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1f0      	bne.n	8004e58 <HAL_RCC_OscConfig+0xe8>
 8004e76:	e000      	b.n	8004e7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d063      	beq.n	8004f4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e86:	4b4a      	ldr	r3, [pc, #296]	@ (8004fb0 <HAL_RCC_OscConfig+0x240>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f003 030c 	and.w	r3, r3, #12
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00b      	beq.n	8004eaa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e92:	4b47      	ldr	r3, [pc, #284]	@ (8004fb0 <HAL_RCC_OscConfig+0x240>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e9a:	2b08      	cmp	r3, #8
 8004e9c:	d11c      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e9e:	4b44      	ldr	r3, [pc, #272]	@ (8004fb0 <HAL_RCC_OscConfig+0x240>)
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d116      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eaa:	4b41      	ldr	r3, [pc, #260]	@ (8004fb0 <HAL_RCC_OscConfig+0x240>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d005      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x152>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d001      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e1c7      	b.n	8005252 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ec2:	4b3b      	ldr	r3, [pc, #236]	@ (8004fb0 <HAL_RCC_OscConfig+0x240>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	4937      	ldr	r1, [pc, #220]	@ (8004fb0 <HAL_RCC_OscConfig+0x240>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ed6:	e03a      	b.n	8004f4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d020      	beq.n	8004f22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ee0:	4b34      	ldr	r3, [pc, #208]	@ (8004fb4 <HAL_RCC_OscConfig+0x244>)
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee6:	f7fc fc13 	bl	8001710 <HAL_GetTick>
 8004eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eec:	e008      	b.n	8004f00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004eee:	f7fc fc0f 	bl	8001710 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d901      	bls.n	8004f00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e1a8      	b.n	8005252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f00:	4b2b      	ldr	r3, [pc, #172]	@ (8004fb0 <HAL_RCC_OscConfig+0x240>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d0f0      	beq.n	8004eee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f0c:	4b28      	ldr	r3, [pc, #160]	@ (8004fb0 <HAL_RCC_OscConfig+0x240>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	00db      	lsls	r3, r3, #3
 8004f1a:	4925      	ldr	r1, [pc, #148]	@ (8004fb0 <HAL_RCC_OscConfig+0x240>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	600b      	str	r3, [r1, #0]
 8004f20:	e015      	b.n	8004f4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f22:	4b24      	ldr	r3, [pc, #144]	@ (8004fb4 <HAL_RCC_OscConfig+0x244>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f28:	f7fc fbf2 	bl	8001710 <HAL_GetTick>
 8004f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f2e:	e008      	b.n	8004f42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f30:	f7fc fbee 	bl	8001710 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e187      	b.n	8005252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f42:	4b1b      	ldr	r3, [pc, #108]	@ (8004fb0 <HAL_RCC_OscConfig+0x240>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1f0      	bne.n	8004f30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0308 	and.w	r3, r3, #8
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d036      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d016      	beq.n	8004f90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f62:	4b15      	ldr	r3, [pc, #84]	@ (8004fb8 <HAL_RCC_OscConfig+0x248>)
 8004f64:	2201      	movs	r2, #1
 8004f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f68:	f7fc fbd2 	bl	8001710 <HAL_GetTick>
 8004f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f6e:	e008      	b.n	8004f82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f70:	f7fc fbce 	bl	8001710 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e167      	b.n	8005252 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f82:	4b0b      	ldr	r3, [pc, #44]	@ (8004fb0 <HAL_RCC_OscConfig+0x240>)
 8004f84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d0f0      	beq.n	8004f70 <HAL_RCC_OscConfig+0x200>
 8004f8e:	e01b      	b.n	8004fc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f90:	4b09      	ldr	r3, [pc, #36]	@ (8004fb8 <HAL_RCC_OscConfig+0x248>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f96:	f7fc fbbb 	bl	8001710 <HAL_GetTick>
 8004f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f9c:	e00e      	b.n	8004fbc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f9e:	f7fc fbb7 	bl	8001710 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d907      	bls.n	8004fbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e150      	b.n	8005252 <HAL_RCC_OscConfig+0x4e2>
 8004fb0:	40023800 	.word	0x40023800
 8004fb4:	42470000 	.word	0x42470000
 8004fb8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fbc:	4b88      	ldr	r3, [pc, #544]	@ (80051e0 <HAL_RCC_OscConfig+0x470>)
 8004fbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1ea      	bne.n	8004f9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f000 8097 	beq.w	8005104 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fda:	4b81      	ldr	r3, [pc, #516]	@ (80051e0 <HAL_RCC_OscConfig+0x470>)
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10f      	bne.n	8005006 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60bb      	str	r3, [r7, #8]
 8004fea:	4b7d      	ldr	r3, [pc, #500]	@ (80051e0 <HAL_RCC_OscConfig+0x470>)
 8004fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fee:	4a7c      	ldr	r2, [pc, #496]	@ (80051e0 <HAL_RCC_OscConfig+0x470>)
 8004ff0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ff4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ff6:	4b7a      	ldr	r3, [pc, #488]	@ (80051e0 <HAL_RCC_OscConfig+0x470>)
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ffe:	60bb      	str	r3, [r7, #8]
 8005000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005002:	2301      	movs	r3, #1
 8005004:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005006:	4b77      	ldr	r3, [pc, #476]	@ (80051e4 <HAL_RCC_OscConfig+0x474>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800500e:	2b00      	cmp	r3, #0
 8005010:	d118      	bne.n	8005044 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005012:	4b74      	ldr	r3, [pc, #464]	@ (80051e4 <HAL_RCC_OscConfig+0x474>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a73      	ldr	r2, [pc, #460]	@ (80051e4 <HAL_RCC_OscConfig+0x474>)
 8005018:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800501c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800501e:	f7fc fb77 	bl	8001710 <HAL_GetTick>
 8005022:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005024:	e008      	b.n	8005038 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005026:	f7fc fb73 	bl	8001710 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b02      	cmp	r3, #2
 8005032:	d901      	bls.n	8005038 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e10c      	b.n	8005252 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005038:	4b6a      	ldr	r3, [pc, #424]	@ (80051e4 <HAL_RCC_OscConfig+0x474>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005040:	2b00      	cmp	r3, #0
 8005042:	d0f0      	beq.n	8005026 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d106      	bne.n	800505a <HAL_RCC_OscConfig+0x2ea>
 800504c:	4b64      	ldr	r3, [pc, #400]	@ (80051e0 <HAL_RCC_OscConfig+0x470>)
 800504e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005050:	4a63      	ldr	r2, [pc, #396]	@ (80051e0 <HAL_RCC_OscConfig+0x470>)
 8005052:	f043 0301 	orr.w	r3, r3, #1
 8005056:	6713      	str	r3, [r2, #112]	@ 0x70
 8005058:	e01c      	b.n	8005094 <HAL_RCC_OscConfig+0x324>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	2b05      	cmp	r3, #5
 8005060:	d10c      	bne.n	800507c <HAL_RCC_OscConfig+0x30c>
 8005062:	4b5f      	ldr	r3, [pc, #380]	@ (80051e0 <HAL_RCC_OscConfig+0x470>)
 8005064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005066:	4a5e      	ldr	r2, [pc, #376]	@ (80051e0 <HAL_RCC_OscConfig+0x470>)
 8005068:	f043 0304 	orr.w	r3, r3, #4
 800506c:	6713      	str	r3, [r2, #112]	@ 0x70
 800506e:	4b5c      	ldr	r3, [pc, #368]	@ (80051e0 <HAL_RCC_OscConfig+0x470>)
 8005070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005072:	4a5b      	ldr	r2, [pc, #364]	@ (80051e0 <HAL_RCC_OscConfig+0x470>)
 8005074:	f043 0301 	orr.w	r3, r3, #1
 8005078:	6713      	str	r3, [r2, #112]	@ 0x70
 800507a:	e00b      	b.n	8005094 <HAL_RCC_OscConfig+0x324>
 800507c:	4b58      	ldr	r3, [pc, #352]	@ (80051e0 <HAL_RCC_OscConfig+0x470>)
 800507e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005080:	4a57      	ldr	r2, [pc, #348]	@ (80051e0 <HAL_RCC_OscConfig+0x470>)
 8005082:	f023 0301 	bic.w	r3, r3, #1
 8005086:	6713      	str	r3, [r2, #112]	@ 0x70
 8005088:	4b55      	ldr	r3, [pc, #340]	@ (80051e0 <HAL_RCC_OscConfig+0x470>)
 800508a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800508c:	4a54      	ldr	r2, [pc, #336]	@ (80051e0 <HAL_RCC_OscConfig+0x470>)
 800508e:	f023 0304 	bic.w	r3, r3, #4
 8005092:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d015      	beq.n	80050c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800509c:	f7fc fb38 	bl	8001710 <HAL_GetTick>
 80050a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050a2:	e00a      	b.n	80050ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050a4:	f7fc fb34 	bl	8001710 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e0cb      	b.n	8005252 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ba:	4b49      	ldr	r3, [pc, #292]	@ (80051e0 <HAL_RCC_OscConfig+0x470>)
 80050bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0ee      	beq.n	80050a4 <HAL_RCC_OscConfig+0x334>
 80050c6:	e014      	b.n	80050f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050c8:	f7fc fb22 	bl	8001710 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050ce:	e00a      	b.n	80050e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050d0:	f7fc fb1e 	bl	8001710 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050de:	4293      	cmp	r3, r2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e0b5      	b.n	8005252 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050e6:	4b3e      	ldr	r3, [pc, #248]	@ (80051e0 <HAL_RCC_OscConfig+0x470>)
 80050e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1ee      	bne.n	80050d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050f2:	7dfb      	ldrb	r3, [r7, #23]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d105      	bne.n	8005104 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050f8:	4b39      	ldr	r3, [pc, #228]	@ (80051e0 <HAL_RCC_OscConfig+0x470>)
 80050fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fc:	4a38      	ldr	r2, [pc, #224]	@ (80051e0 <HAL_RCC_OscConfig+0x470>)
 80050fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005102:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	2b00      	cmp	r3, #0
 800510a:	f000 80a1 	beq.w	8005250 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800510e:	4b34      	ldr	r3, [pc, #208]	@ (80051e0 <HAL_RCC_OscConfig+0x470>)
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f003 030c 	and.w	r3, r3, #12
 8005116:	2b08      	cmp	r3, #8
 8005118:	d05c      	beq.n	80051d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	2b02      	cmp	r3, #2
 8005120:	d141      	bne.n	80051a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005122:	4b31      	ldr	r3, [pc, #196]	@ (80051e8 <HAL_RCC_OscConfig+0x478>)
 8005124:	2200      	movs	r2, #0
 8005126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005128:	f7fc faf2 	bl	8001710 <HAL_GetTick>
 800512c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800512e:	e008      	b.n	8005142 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005130:	f7fc faee 	bl	8001710 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b02      	cmp	r3, #2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e087      	b.n	8005252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005142:	4b27      	ldr	r3, [pc, #156]	@ (80051e0 <HAL_RCC_OscConfig+0x470>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1f0      	bne.n	8005130 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	69da      	ldr	r2, [r3, #28]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	431a      	orrs	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515c:	019b      	lsls	r3, r3, #6
 800515e:	431a      	orrs	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005164:	085b      	lsrs	r3, r3, #1
 8005166:	3b01      	subs	r3, #1
 8005168:	041b      	lsls	r3, r3, #16
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005170:	061b      	lsls	r3, r3, #24
 8005172:	491b      	ldr	r1, [pc, #108]	@ (80051e0 <HAL_RCC_OscConfig+0x470>)
 8005174:	4313      	orrs	r3, r2
 8005176:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005178:	4b1b      	ldr	r3, [pc, #108]	@ (80051e8 <HAL_RCC_OscConfig+0x478>)
 800517a:	2201      	movs	r2, #1
 800517c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800517e:	f7fc fac7 	bl	8001710 <HAL_GetTick>
 8005182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005184:	e008      	b.n	8005198 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005186:	f7fc fac3 	bl	8001710 <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	2b02      	cmp	r3, #2
 8005192:	d901      	bls.n	8005198 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e05c      	b.n	8005252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005198:	4b11      	ldr	r3, [pc, #68]	@ (80051e0 <HAL_RCC_OscConfig+0x470>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d0f0      	beq.n	8005186 <HAL_RCC_OscConfig+0x416>
 80051a4:	e054      	b.n	8005250 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051a6:	4b10      	ldr	r3, [pc, #64]	@ (80051e8 <HAL_RCC_OscConfig+0x478>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ac:	f7fc fab0 	bl	8001710 <HAL_GetTick>
 80051b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051b2:	e008      	b.n	80051c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051b4:	f7fc faac 	bl	8001710 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e045      	b.n	8005252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051c6:	4b06      	ldr	r3, [pc, #24]	@ (80051e0 <HAL_RCC_OscConfig+0x470>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1f0      	bne.n	80051b4 <HAL_RCC_OscConfig+0x444>
 80051d2:	e03d      	b.n	8005250 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d107      	bne.n	80051ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e038      	b.n	8005252 <HAL_RCC_OscConfig+0x4e2>
 80051e0:	40023800 	.word	0x40023800
 80051e4:	40007000 	.word	0x40007000
 80051e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051ec:	4b1b      	ldr	r3, [pc, #108]	@ (800525c <HAL_RCC_OscConfig+0x4ec>)
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d028      	beq.n	800524c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005204:	429a      	cmp	r2, r3
 8005206:	d121      	bne.n	800524c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005212:	429a      	cmp	r2, r3
 8005214:	d11a      	bne.n	800524c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800521c:	4013      	ands	r3, r2
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005222:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005224:	4293      	cmp	r3, r2
 8005226:	d111      	bne.n	800524c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005232:	085b      	lsrs	r3, r3, #1
 8005234:	3b01      	subs	r3, #1
 8005236:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005238:	429a      	cmp	r2, r3
 800523a:	d107      	bne.n	800524c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005246:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005248:	429a      	cmp	r2, r3
 800524a:	d001      	beq.n	8005250 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e000      	b.n	8005252 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3718      	adds	r7, #24
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	40023800 	.word	0x40023800

08005260 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d101      	bne.n	8005274 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e0cc      	b.n	800540e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005274:	4b68      	ldr	r3, [pc, #416]	@ (8005418 <HAL_RCC_ClockConfig+0x1b8>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 030f 	and.w	r3, r3, #15
 800527c:	683a      	ldr	r2, [r7, #0]
 800527e:	429a      	cmp	r2, r3
 8005280:	d90c      	bls.n	800529c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005282:	4b65      	ldr	r3, [pc, #404]	@ (8005418 <HAL_RCC_ClockConfig+0x1b8>)
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800528a:	4b63      	ldr	r3, [pc, #396]	@ (8005418 <HAL_RCC_ClockConfig+0x1b8>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 030f 	and.w	r3, r3, #15
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	429a      	cmp	r2, r3
 8005296:	d001      	beq.n	800529c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e0b8      	b.n	800540e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0302 	and.w	r3, r3, #2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d020      	beq.n	80052ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0304 	and.w	r3, r3, #4
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d005      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052b4:	4b59      	ldr	r3, [pc, #356]	@ (800541c <HAL_RCC_ClockConfig+0x1bc>)
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	4a58      	ldr	r2, [pc, #352]	@ (800541c <HAL_RCC_ClockConfig+0x1bc>)
 80052ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80052be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0308 	and.w	r3, r3, #8
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d005      	beq.n	80052d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052cc:	4b53      	ldr	r3, [pc, #332]	@ (800541c <HAL_RCC_ClockConfig+0x1bc>)
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	4a52      	ldr	r2, [pc, #328]	@ (800541c <HAL_RCC_ClockConfig+0x1bc>)
 80052d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80052d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052d8:	4b50      	ldr	r3, [pc, #320]	@ (800541c <HAL_RCC_ClockConfig+0x1bc>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	494d      	ldr	r1, [pc, #308]	@ (800541c <HAL_RCC_ClockConfig+0x1bc>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d044      	beq.n	8005380 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d107      	bne.n	800530e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052fe:	4b47      	ldr	r3, [pc, #284]	@ (800541c <HAL_RCC_ClockConfig+0x1bc>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d119      	bne.n	800533e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e07f      	b.n	800540e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	2b02      	cmp	r3, #2
 8005314:	d003      	beq.n	800531e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800531a:	2b03      	cmp	r3, #3
 800531c:	d107      	bne.n	800532e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800531e:	4b3f      	ldr	r3, [pc, #252]	@ (800541c <HAL_RCC_ClockConfig+0x1bc>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d109      	bne.n	800533e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e06f      	b.n	800540e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800532e:	4b3b      	ldr	r3, [pc, #236]	@ (800541c <HAL_RCC_ClockConfig+0x1bc>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e067      	b.n	800540e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800533e:	4b37      	ldr	r3, [pc, #220]	@ (800541c <HAL_RCC_ClockConfig+0x1bc>)
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f023 0203 	bic.w	r2, r3, #3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	4934      	ldr	r1, [pc, #208]	@ (800541c <HAL_RCC_ClockConfig+0x1bc>)
 800534c:	4313      	orrs	r3, r2
 800534e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005350:	f7fc f9de 	bl	8001710 <HAL_GetTick>
 8005354:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005356:	e00a      	b.n	800536e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005358:	f7fc f9da 	bl	8001710 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005366:	4293      	cmp	r3, r2
 8005368:	d901      	bls.n	800536e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e04f      	b.n	800540e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800536e:	4b2b      	ldr	r3, [pc, #172]	@ (800541c <HAL_RCC_ClockConfig+0x1bc>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f003 020c 	and.w	r2, r3, #12
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	429a      	cmp	r2, r3
 800537e:	d1eb      	bne.n	8005358 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005380:	4b25      	ldr	r3, [pc, #148]	@ (8005418 <HAL_RCC_ClockConfig+0x1b8>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 030f 	and.w	r3, r3, #15
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	429a      	cmp	r2, r3
 800538c:	d20c      	bcs.n	80053a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800538e:	4b22      	ldr	r3, [pc, #136]	@ (8005418 <HAL_RCC_ClockConfig+0x1b8>)
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	b2d2      	uxtb	r2, r2
 8005394:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005396:	4b20      	ldr	r3, [pc, #128]	@ (8005418 <HAL_RCC_ClockConfig+0x1b8>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 030f 	and.w	r3, r3, #15
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d001      	beq.n	80053a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e032      	b.n	800540e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0304 	and.w	r3, r3, #4
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d008      	beq.n	80053c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053b4:	4b19      	ldr	r3, [pc, #100]	@ (800541c <HAL_RCC_ClockConfig+0x1bc>)
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	4916      	ldr	r1, [pc, #88]	@ (800541c <HAL_RCC_ClockConfig+0x1bc>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0308 	and.w	r3, r3, #8
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d009      	beq.n	80053e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053d2:	4b12      	ldr	r3, [pc, #72]	@ (800541c <HAL_RCC_ClockConfig+0x1bc>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	490e      	ldr	r1, [pc, #56]	@ (800541c <HAL_RCC_ClockConfig+0x1bc>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053e6:	f000 f821 	bl	800542c <HAL_RCC_GetSysClockFreq>
 80053ea:	4602      	mov	r2, r0
 80053ec:	4b0b      	ldr	r3, [pc, #44]	@ (800541c <HAL_RCC_ClockConfig+0x1bc>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	091b      	lsrs	r3, r3, #4
 80053f2:	f003 030f 	and.w	r3, r3, #15
 80053f6:	490a      	ldr	r1, [pc, #40]	@ (8005420 <HAL_RCC_ClockConfig+0x1c0>)
 80053f8:	5ccb      	ldrb	r3, [r1, r3]
 80053fa:	fa22 f303 	lsr.w	r3, r2, r3
 80053fe:	4a09      	ldr	r2, [pc, #36]	@ (8005424 <HAL_RCC_ClockConfig+0x1c4>)
 8005400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005402:	4b09      	ldr	r3, [pc, #36]	@ (8005428 <HAL_RCC_ClockConfig+0x1c8>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4618      	mov	r0, r3
 8005408:	f7fb ffc8 	bl	800139c <HAL_InitTick>

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	40023c00 	.word	0x40023c00
 800541c:	40023800 	.word	0x40023800
 8005420:	0800b3e0 	.word	0x0800b3e0
 8005424:	20000000 	.word	0x20000000
 8005428:	20000004 	.word	0x20000004

0800542c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800542c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005430:	b094      	sub	sp, #80	@ 0x50
 8005432:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005434:	2300      	movs	r3, #0
 8005436:	647b      	str	r3, [r7, #68]	@ 0x44
 8005438:	2300      	movs	r3, #0
 800543a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800543c:	2300      	movs	r3, #0
 800543e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005440:	2300      	movs	r3, #0
 8005442:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005444:	4b79      	ldr	r3, [pc, #484]	@ (800562c <HAL_RCC_GetSysClockFreq+0x200>)
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f003 030c 	and.w	r3, r3, #12
 800544c:	2b08      	cmp	r3, #8
 800544e:	d00d      	beq.n	800546c <HAL_RCC_GetSysClockFreq+0x40>
 8005450:	2b08      	cmp	r3, #8
 8005452:	f200 80e1 	bhi.w	8005618 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005456:	2b00      	cmp	r3, #0
 8005458:	d002      	beq.n	8005460 <HAL_RCC_GetSysClockFreq+0x34>
 800545a:	2b04      	cmp	r3, #4
 800545c:	d003      	beq.n	8005466 <HAL_RCC_GetSysClockFreq+0x3a>
 800545e:	e0db      	b.n	8005618 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005460:	4b73      	ldr	r3, [pc, #460]	@ (8005630 <HAL_RCC_GetSysClockFreq+0x204>)
 8005462:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005464:	e0db      	b.n	800561e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005466:	4b73      	ldr	r3, [pc, #460]	@ (8005634 <HAL_RCC_GetSysClockFreq+0x208>)
 8005468:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800546a:	e0d8      	b.n	800561e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800546c:	4b6f      	ldr	r3, [pc, #444]	@ (800562c <HAL_RCC_GetSysClockFreq+0x200>)
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005474:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005476:	4b6d      	ldr	r3, [pc, #436]	@ (800562c <HAL_RCC_GetSysClockFreq+0x200>)
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d063      	beq.n	800554a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005482:	4b6a      	ldr	r3, [pc, #424]	@ (800562c <HAL_RCC_GetSysClockFreq+0x200>)
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	099b      	lsrs	r3, r3, #6
 8005488:	2200      	movs	r2, #0
 800548a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800548c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800548e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005494:	633b      	str	r3, [r7, #48]	@ 0x30
 8005496:	2300      	movs	r3, #0
 8005498:	637b      	str	r3, [r7, #52]	@ 0x34
 800549a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800549e:	4622      	mov	r2, r4
 80054a0:	462b      	mov	r3, r5
 80054a2:	f04f 0000 	mov.w	r0, #0
 80054a6:	f04f 0100 	mov.w	r1, #0
 80054aa:	0159      	lsls	r1, r3, #5
 80054ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054b0:	0150      	lsls	r0, r2, #5
 80054b2:	4602      	mov	r2, r0
 80054b4:	460b      	mov	r3, r1
 80054b6:	4621      	mov	r1, r4
 80054b8:	1a51      	subs	r1, r2, r1
 80054ba:	6139      	str	r1, [r7, #16]
 80054bc:	4629      	mov	r1, r5
 80054be:	eb63 0301 	sbc.w	r3, r3, r1
 80054c2:	617b      	str	r3, [r7, #20]
 80054c4:	f04f 0200 	mov.w	r2, #0
 80054c8:	f04f 0300 	mov.w	r3, #0
 80054cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054d0:	4659      	mov	r1, fp
 80054d2:	018b      	lsls	r3, r1, #6
 80054d4:	4651      	mov	r1, sl
 80054d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054da:	4651      	mov	r1, sl
 80054dc:	018a      	lsls	r2, r1, #6
 80054de:	4651      	mov	r1, sl
 80054e0:	ebb2 0801 	subs.w	r8, r2, r1
 80054e4:	4659      	mov	r1, fp
 80054e6:	eb63 0901 	sbc.w	r9, r3, r1
 80054ea:	f04f 0200 	mov.w	r2, #0
 80054ee:	f04f 0300 	mov.w	r3, #0
 80054f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054fe:	4690      	mov	r8, r2
 8005500:	4699      	mov	r9, r3
 8005502:	4623      	mov	r3, r4
 8005504:	eb18 0303 	adds.w	r3, r8, r3
 8005508:	60bb      	str	r3, [r7, #8]
 800550a:	462b      	mov	r3, r5
 800550c:	eb49 0303 	adc.w	r3, r9, r3
 8005510:	60fb      	str	r3, [r7, #12]
 8005512:	f04f 0200 	mov.w	r2, #0
 8005516:	f04f 0300 	mov.w	r3, #0
 800551a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800551e:	4629      	mov	r1, r5
 8005520:	024b      	lsls	r3, r1, #9
 8005522:	4621      	mov	r1, r4
 8005524:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005528:	4621      	mov	r1, r4
 800552a:	024a      	lsls	r2, r1, #9
 800552c:	4610      	mov	r0, r2
 800552e:	4619      	mov	r1, r3
 8005530:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005532:	2200      	movs	r2, #0
 8005534:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005536:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005538:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800553c:	f7fa fea8 	bl	8000290 <__aeabi_uldivmod>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	4613      	mov	r3, r2
 8005546:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005548:	e058      	b.n	80055fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800554a:	4b38      	ldr	r3, [pc, #224]	@ (800562c <HAL_RCC_GetSysClockFreq+0x200>)
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	099b      	lsrs	r3, r3, #6
 8005550:	2200      	movs	r2, #0
 8005552:	4618      	mov	r0, r3
 8005554:	4611      	mov	r1, r2
 8005556:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800555a:	623b      	str	r3, [r7, #32]
 800555c:	2300      	movs	r3, #0
 800555e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005560:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005564:	4642      	mov	r2, r8
 8005566:	464b      	mov	r3, r9
 8005568:	f04f 0000 	mov.w	r0, #0
 800556c:	f04f 0100 	mov.w	r1, #0
 8005570:	0159      	lsls	r1, r3, #5
 8005572:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005576:	0150      	lsls	r0, r2, #5
 8005578:	4602      	mov	r2, r0
 800557a:	460b      	mov	r3, r1
 800557c:	4641      	mov	r1, r8
 800557e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005582:	4649      	mov	r1, r9
 8005584:	eb63 0b01 	sbc.w	fp, r3, r1
 8005588:	f04f 0200 	mov.w	r2, #0
 800558c:	f04f 0300 	mov.w	r3, #0
 8005590:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005594:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005598:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800559c:	ebb2 040a 	subs.w	r4, r2, sl
 80055a0:	eb63 050b 	sbc.w	r5, r3, fp
 80055a4:	f04f 0200 	mov.w	r2, #0
 80055a8:	f04f 0300 	mov.w	r3, #0
 80055ac:	00eb      	lsls	r3, r5, #3
 80055ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055b2:	00e2      	lsls	r2, r4, #3
 80055b4:	4614      	mov	r4, r2
 80055b6:	461d      	mov	r5, r3
 80055b8:	4643      	mov	r3, r8
 80055ba:	18e3      	adds	r3, r4, r3
 80055bc:	603b      	str	r3, [r7, #0]
 80055be:	464b      	mov	r3, r9
 80055c0:	eb45 0303 	adc.w	r3, r5, r3
 80055c4:	607b      	str	r3, [r7, #4]
 80055c6:	f04f 0200 	mov.w	r2, #0
 80055ca:	f04f 0300 	mov.w	r3, #0
 80055ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055d2:	4629      	mov	r1, r5
 80055d4:	028b      	lsls	r3, r1, #10
 80055d6:	4621      	mov	r1, r4
 80055d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055dc:	4621      	mov	r1, r4
 80055de:	028a      	lsls	r2, r1, #10
 80055e0:	4610      	mov	r0, r2
 80055e2:	4619      	mov	r1, r3
 80055e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055e6:	2200      	movs	r2, #0
 80055e8:	61bb      	str	r3, [r7, #24]
 80055ea:	61fa      	str	r2, [r7, #28]
 80055ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055f0:	f7fa fe4e 	bl	8000290 <__aeabi_uldivmod>
 80055f4:	4602      	mov	r2, r0
 80055f6:	460b      	mov	r3, r1
 80055f8:	4613      	mov	r3, r2
 80055fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055fc:	4b0b      	ldr	r3, [pc, #44]	@ (800562c <HAL_RCC_GetSysClockFreq+0x200>)
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	0c1b      	lsrs	r3, r3, #16
 8005602:	f003 0303 	and.w	r3, r3, #3
 8005606:	3301      	adds	r3, #1
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800560c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800560e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005610:	fbb2 f3f3 	udiv	r3, r2, r3
 8005614:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005616:	e002      	b.n	800561e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005618:	4b05      	ldr	r3, [pc, #20]	@ (8005630 <HAL_RCC_GetSysClockFreq+0x204>)
 800561a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800561c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800561e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005620:	4618      	mov	r0, r3
 8005622:	3750      	adds	r7, #80	@ 0x50
 8005624:	46bd      	mov	sp, r7
 8005626:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800562a:	bf00      	nop
 800562c:	40023800 	.word	0x40023800
 8005630:	00f42400 	.word	0x00f42400
 8005634:	007a1200 	.word	0x007a1200

08005638 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005638:	b480      	push	{r7}
 800563a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800563c:	4b03      	ldr	r3, [pc, #12]	@ (800564c <HAL_RCC_GetHCLKFreq+0x14>)
 800563e:	681b      	ldr	r3, [r3, #0]
}
 8005640:	4618      	mov	r0, r3
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	20000000 	.word	0x20000000

08005650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005654:	f7ff fff0 	bl	8005638 <HAL_RCC_GetHCLKFreq>
 8005658:	4602      	mov	r2, r0
 800565a:	4b05      	ldr	r3, [pc, #20]	@ (8005670 <HAL_RCC_GetPCLK1Freq+0x20>)
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	0a9b      	lsrs	r3, r3, #10
 8005660:	f003 0307 	and.w	r3, r3, #7
 8005664:	4903      	ldr	r1, [pc, #12]	@ (8005674 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005666:	5ccb      	ldrb	r3, [r1, r3]
 8005668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800566c:	4618      	mov	r0, r3
 800566e:	bd80      	pop	{r7, pc}
 8005670:	40023800 	.word	0x40023800
 8005674:	0800b3f0 	.word	0x0800b3f0

08005678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800567c:	f7ff ffdc 	bl	8005638 <HAL_RCC_GetHCLKFreq>
 8005680:	4602      	mov	r2, r0
 8005682:	4b05      	ldr	r3, [pc, #20]	@ (8005698 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	0b5b      	lsrs	r3, r3, #13
 8005688:	f003 0307 	and.w	r3, r3, #7
 800568c:	4903      	ldr	r1, [pc, #12]	@ (800569c <HAL_RCC_GetPCLK2Freq+0x24>)
 800568e:	5ccb      	ldrb	r3, [r1, r3]
 8005690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005694:	4618      	mov	r0, r3
 8005696:	bd80      	pop	{r7, pc}
 8005698:	40023800 	.word	0x40023800
 800569c:	0800b3f0 	.word	0x0800b3f0

080056a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	220f      	movs	r2, #15
 80056ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80056b0:	4b12      	ldr	r3, [pc, #72]	@ (80056fc <HAL_RCC_GetClockConfig+0x5c>)
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f003 0203 	and.w	r2, r3, #3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80056bc:	4b0f      	ldr	r3, [pc, #60]	@ (80056fc <HAL_RCC_GetClockConfig+0x5c>)
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80056c8:	4b0c      	ldr	r3, [pc, #48]	@ (80056fc <HAL_RCC_GetClockConfig+0x5c>)
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80056d4:	4b09      	ldr	r3, [pc, #36]	@ (80056fc <HAL_RCC_GetClockConfig+0x5c>)
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	08db      	lsrs	r3, r3, #3
 80056da:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80056e2:	4b07      	ldr	r3, [pc, #28]	@ (8005700 <HAL_RCC_GetClockConfig+0x60>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 020f 	and.w	r2, r3, #15
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	601a      	str	r2, [r3, #0]
}
 80056ee:	bf00      	nop
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	40023800 	.word	0x40023800
 8005700:	40023c00 	.word	0x40023c00

08005704 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e025      	b.n	8005764 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b00      	cmp	r3, #0
 8005722:	d106      	bne.n	8005732 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f7fb fe2b 	bl	8001388 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2202      	movs	r2, #2
 8005736:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	3304      	adds	r3, #4
 8005742:	4619      	mov	r1, r3
 8005744:	4610      	mov	r0, r2
 8005746:	f001 f91b 	bl	8006980 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6818      	ldr	r0, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	461a      	mov	r2, r3
 8005754:	6839      	ldr	r1, [r7, #0]
 8005756:	f001 f970 	bl	8006a3a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3708      	adds	r7, #8
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e07b      	b.n	8005876 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005782:	2b00      	cmp	r3, #0
 8005784:	d108      	bne.n	8005798 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800578e:	d009      	beq.n	80057a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	61da      	str	r2, [r3, #28]
 8005796:	e005      	b.n	80057a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d106      	bne.n	80057c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f7fb fc9e 	bl	8001100 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2202      	movs	r2, #2
 80057c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80057ec:	431a      	orrs	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057f6:	431a      	orrs	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	f003 0302 	and.w	r3, r3, #2
 8005800:	431a      	orrs	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	431a      	orrs	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005814:	431a      	orrs	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800581e:	431a      	orrs	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a1b      	ldr	r3, [r3, #32]
 8005824:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005828:	ea42 0103 	orr.w	r1, r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005830:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	430a      	orrs	r2, r1
 800583a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	0c1b      	lsrs	r3, r3, #16
 8005842:	f003 0104 	and.w	r1, r3, #4
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584a:	f003 0210 	and.w	r2, r3, #16
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	430a      	orrs	r2, r1
 8005854:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	69da      	ldr	r2, [r3, #28]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005864:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b082      	sub	sp, #8
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d101      	bne.n	8005890 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e041      	b.n	8005914 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b00      	cmp	r3, #0
 800589a:	d106      	bne.n	80058aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f7fb fc73 	bl	8001190 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2202      	movs	r2, #2
 80058ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	3304      	adds	r3, #4
 80058ba:	4619      	mov	r1, r3
 80058bc:	4610      	mov	r0, r2
 80058be:	f000 fa7d 	bl	8005dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3708      	adds	r7, #8
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b01      	cmp	r3, #1
 800592e:	d001      	beq.n	8005934 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e04e      	b.n	80059d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68da      	ldr	r2, [r3, #12]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f042 0201 	orr.w	r2, r2, #1
 800594a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a23      	ldr	r2, [pc, #140]	@ (80059e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d022      	beq.n	800599c <HAL_TIM_Base_Start_IT+0x80>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800595e:	d01d      	beq.n	800599c <HAL_TIM_Base_Start_IT+0x80>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a1f      	ldr	r2, [pc, #124]	@ (80059e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d018      	beq.n	800599c <HAL_TIM_Base_Start_IT+0x80>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a1e      	ldr	r2, [pc, #120]	@ (80059e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d013      	beq.n	800599c <HAL_TIM_Base_Start_IT+0x80>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a1c      	ldr	r2, [pc, #112]	@ (80059ec <HAL_TIM_Base_Start_IT+0xd0>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d00e      	beq.n	800599c <HAL_TIM_Base_Start_IT+0x80>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a1b      	ldr	r2, [pc, #108]	@ (80059f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d009      	beq.n	800599c <HAL_TIM_Base_Start_IT+0x80>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a19      	ldr	r2, [pc, #100]	@ (80059f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d004      	beq.n	800599c <HAL_TIM_Base_Start_IT+0x80>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a18      	ldr	r2, [pc, #96]	@ (80059f8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d111      	bne.n	80059c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f003 0307 	and.w	r3, r3, #7
 80059a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2b06      	cmp	r3, #6
 80059ac:	d010      	beq.n	80059d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f042 0201 	orr.w	r2, r2, #1
 80059bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059be:	e007      	b.n	80059d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f042 0201 	orr.w	r2, r2, #1
 80059ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	40010000 	.word	0x40010000
 80059e4:	40000400 	.word	0x40000400
 80059e8:	40000800 	.word	0x40000800
 80059ec:	40000c00 	.word	0x40000c00
 80059f0:	40010400 	.word	0x40010400
 80059f4:	40014000 	.word	0x40014000
 80059f8:	40001800 	.word	0x40001800

080059fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d020      	beq.n	8005a60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f003 0302 	and.w	r3, r3, #2
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d01b      	beq.n	8005a60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f06f 0202 	mvn.w	r2, #2
 8005a30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	f003 0303 	and.w	r3, r3, #3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d003      	beq.n	8005a4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f999 	bl	8005d7e <HAL_TIM_IC_CaptureCallback>
 8005a4c:	e005      	b.n	8005a5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 f98b 	bl	8005d6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 f99c 	bl	8005d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	f003 0304 	and.w	r3, r3, #4
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d020      	beq.n	8005aac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d01b      	beq.n	8005aac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f06f 0204 	mvn.w	r2, #4
 8005a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2202      	movs	r2, #2
 8005a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f973 	bl	8005d7e <HAL_TIM_IC_CaptureCallback>
 8005a98:	e005      	b.n	8005aa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f965 	bl	8005d6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 f976 	bl	8005d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	f003 0308 	and.w	r3, r3, #8
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d020      	beq.n	8005af8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f003 0308 	and.w	r3, r3, #8
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d01b      	beq.n	8005af8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f06f 0208 	mvn.w	r2, #8
 8005ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2204      	movs	r2, #4
 8005ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	f003 0303 	and.w	r3, r3, #3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f94d 	bl	8005d7e <HAL_TIM_IC_CaptureCallback>
 8005ae4:	e005      	b.n	8005af2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f93f 	bl	8005d6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 f950 	bl	8005d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f003 0310 	and.w	r3, r3, #16
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d020      	beq.n	8005b44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f003 0310 	and.w	r3, r3, #16
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d01b      	beq.n	8005b44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f06f 0210 	mvn.w	r2, #16
 8005b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2208      	movs	r2, #8
 8005b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 f927 	bl	8005d7e <HAL_TIM_IC_CaptureCallback>
 8005b30:	e005      	b.n	8005b3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f919 	bl	8005d6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 f92a 	bl	8005d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00c      	beq.n	8005b68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d007      	beq.n	8005b68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f06f 0201 	mvn.w	r2, #1
 8005b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7fb f988 	bl	8000e78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00c      	beq.n	8005b8c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d007      	beq.n	8005b8c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 fae4 	bl	8006154 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00c      	beq.n	8005bb0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d007      	beq.n	8005bb0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f8fb 	bl	8005da6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	f003 0320 	and.w	r3, r3, #32
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00c      	beq.n	8005bd4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f003 0320 	and.w	r3, r3, #32
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d007      	beq.n	8005bd4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f06f 0220 	mvn.w	r2, #32
 8005bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 fab6 	bl	8006140 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bd4:	bf00      	nop
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005be6:	2300      	movs	r3, #0
 8005be8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d101      	bne.n	8005bf8 <HAL_TIM_ConfigClockSource+0x1c>
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e0b4      	b.n	8005d62 <HAL_TIM_ConfigClockSource+0x186>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005c16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c30:	d03e      	beq.n	8005cb0 <HAL_TIM_ConfigClockSource+0xd4>
 8005c32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c36:	f200 8087 	bhi.w	8005d48 <HAL_TIM_ConfigClockSource+0x16c>
 8005c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c3e:	f000 8086 	beq.w	8005d4e <HAL_TIM_ConfigClockSource+0x172>
 8005c42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c46:	d87f      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x16c>
 8005c48:	2b70      	cmp	r3, #112	@ 0x70
 8005c4a:	d01a      	beq.n	8005c82 <HAL_TIM_ConfigClockSource+0xa6>
 8005c4c:	2b70      	cmp	r3, #112	@ 0x70
 8005c4e:	d87b      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x16c>
 8005c50:	2b60      	cmp	r3, #96	@ 0x60
 8005c52:	d050      	beq.n	8005cf6 <HAL_TIM_ConfigClockSource+0x11a>
 8005c54:	2b60      	cmp	r3, #96	@ 0x60
 8005c56:	d877      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x16c>
 8005c58:	2b50      	cmp	r3, #80	@ 0x50
 8005c5a:	d03c      	beq.n	8005cd6 <HAL_TIM_ConfigClockSource+0xfa>
 8005c5c:	2b50      	cmp	r3, #80	@ 0x50
 8005c5e:	d873      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x16c>
 8005c60:	2b40      	cmp	r3, #64	@ 0x40
 8005c62:	d058      	beq.n	8005d16 <HAL_TIM_ConfigClockSource+0x13a>
 8005c64:	2b40      	cmp	r3, #64	@ 0x40
 8005c66:	d86f      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x16c>
 8005c68:	2b30      	cmp	r3, #48	@ 0x30
 8005c6a:	d064      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x15a>
 8005c6c:	2b30      	cmp	r3, #48	@ 0x30
 8005c6e:	d86b      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x16c>
 8005c70:	2b20      	cmp	r3, #32
 8005c72:	d060      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x15a>
 8005c74:	2b20      	cmp	r3, #32
 8005c76:	d867      	bhi.n	8005d48 <HAL_TIM_ConfigClockSource+0x16c>
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d05c      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x15a>
 8005c7c:	2b10      	cmp	r3, #16
 8005c7e:	d05a      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x15a>
 8005c80:	e062      	b.n	8005d48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c92:	f000 f9b9 	bl	8006008 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005ca4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	609a      	str	r2, [r3, #8]
      break;
 8005cae:	e04f      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cc0:	f000 f9a2 	bl	8006008 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689a      	ldr	r2, [r3, #8]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005cd2:	609a      	str	r2, [r3, #8]
      break;
 8005cd4:	e03c      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	f000 f916 	bl	8005f14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2150      	movs	r1, #80	@ 0x50
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f000 f96f 	bl	8005fd2 <TIM_ITRx_SetConfig>
      break;
 8005cf4:	e02c      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d02:	461a      	mov	r2, r3
 8005d04:	f000 f935 	bl	8005f72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2160      	movs	r1, #96	@ 0x60
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 f95f 	bl	8005fd2 <TIM_ITRx_SetConfig>
      break;
 8005d14:	e01c      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d22:	461a      	mov	r2, r3
 8005d24:	f000 f8f6 	bl	8005f14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2140      	movs	r1, #64	@ 0x40
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 f94f 	bl	8005fd2 <TIM_ITRx_SetConfig>
      break;
 8005d34:	e00c      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4619      	mov	r1, r3
 8005d40:	4610      	mov	r0, r2
 8005d42:	f000 f946 	bl	8005fd2 <TIM_ITRx_SetConfig>
      break;
 8005d46:	e003      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d4c:	e000      	b.n	8005d50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b083      	sub	sp, #12
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d72:	bf00      	nop
 8005d74:	370c      	adds	r7, #12
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b083      	sub	sp, #12
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d86:	bf00      	nop
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr

08005d92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d92:	b480      	push	{r7}
 8005d94:	b083      	sub	sp, #12
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d9a:	bf00      	nop
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b083      	sub	sp, #12
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dae:	bf00      	nop
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
	...

08005dbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a46      	ldr	r2, [pc, #280]	@ (8005ee8 <TIM_Base_SetConfig+0x12c>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d013      	beq.n	8005dfc <TIM_Base_SetConfig+0x40>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dda:	d00f      	beq.n	8005dfc <TIM_Base_SetConfig+0x40>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a43      	ldr	r2, [pc, #268]	@ (8005eec <TIM_Base_SetConfig+0x130>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d00b      	beq.n	8005dfc <TIM_Base_SetConfig+0x40>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a42      	ldr	r2, [pc, #264]	@ (8005ef0 <TIM_Base_SetConfig+0x134>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d007      	beq.n	8005dfc <TIM_Base_SetConfig+0x40>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a41      	ldr	r2, [pc, #260]	@ (8005ef4 <TIM_Base_SetConfig+0x138>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d003      	beq.n	8005dfc <TIM_Base_SetConfig+0x40>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a40      	ldr	r2, [pc, #256]	@ (8005ef8 <TIM_Base_SetConfig+0x13c>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d108      	bne.n	8005e0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a35      	ldr	r2, [pc, #212]	@ (8005ee8 <TIM_Base_SetConfig+0x12c>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d02b      	beq.n	8005e6e <TIM_Base_SetConfig+0xb2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e1c:	d027      	beq.n	8005e6e <TIM_Base_SetConfig+0xb2>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a32      	ldr	r2, [pc, #200]	@ (8005eec <TIM_Base_SetConfig+0x130>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d023      	beq.n	8005e6e <TIM_Base_SetConfig+0xb2>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a31      	ldr	r2, [pc, #196]	@ (8005ef0 <TIM_Base_SetConfig+0x134>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d01f      	beq.n	8005e6e <TIM_Base_SetConfig+0xb2>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a30      	ldr	r2, [pc, #192]	@ (8005ef4 <TIM_Base_SetConfig+0x138>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d01b      	beq.n	8005e6e <TIM_Base_SetConfig+0xb2>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a2f      	ldr	r2, [pc, #188]	@ (8005ef8 <TIM_Base_SetConfig+0x13c>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d017      	beq.n	8005e6e <TIM_Base_SetConfig+0xb2>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a2e      	ldr	r2, [pc, #184]	@ (8005efc <TIM_Base_SetConfig+0x140>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d013      	beq.n	8005e6e <TIM_Base_SetConfig+0xb2>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a2d      	ldr	r2, [pc, #180]	@ (8005f00 <TIM_Base_SetConfig+0x144>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d00f      	beq.n	8005e6e <TIM_Base_SetConfig+0xb2>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a2c      	ldr	r2, [pc, #176]	@ (8005f04 <TIM_Base_SetConfig+0x148>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d00b      	beq.n	8005e6e <TIM_Base_SetConfig+0xb2>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a2b      	ldr	r2, [pc, #172]	@ (8005f08 <TIM_Base_SetConfig+0x14c>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d007      	beq.n	8005e6e <TIM_Base_SetConfig+0xb2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a2a      	ldr	r2, [pc, #168]	@ (8005f0c <TIM_Base_SetConfig+0x150>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d003      	beq.n	8005e6e <TIM_Base_SetConfig+0xb2>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a29      	ldr	r2, [pc, #164]	@ (8005f10 <TIM_Base_SetConfig+0x154>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d108      	bne.n	8005e80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	689a      	ldr	r2, [r3, #8]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a10      	ldr	r2, [pc, #64]	@ (8005ee8 <TIM_Base_SetConfig+0x12c>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d003      	beq.n	8005eb4 <TIM_Base_SetConfig+0xf8>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a12      	ldr	r2, [pc, #72]	@ (8005ef8 <TIM_Base_SetConfig+0x13c>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d103      	bne.n	8005ebc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	691a      	ldr	r2, [r3, #16]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d105      	bne.n	8005eda <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	f023 0201 	bic.w	r2, r3, #1
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	611a      	str	r2, [r3, #16]
  }
}
 8005eda:	bf00      	nop
 8005edc:	3714      	adds	r7, #20
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	40010000 	.word	0x40010000
 8005eec:	40000400 	.word	0x40000400
 8005ef0:	40000800 	.word	0x40000800
 8005ef4:	40000c00 	.word	0x40000c00
 8005ef8:	40010400 	.word	0x40010400
 8005efc:	40014000 	.word	0x40014000
 8005f00:	40014400 	.word	0x40014400
 8005f04:	40014800 	.word	0x40014800
 8005f08:	40001800 	.word	0x40001800
 8005f0c:	40001c00 	.word	0x40001c00
 8005f10:	40002000 	.word	0x40002000

08005f14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6a1b      	ldr	r3, [r3, #32]
 8005f24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	f023 0201 	bic.w	r2, r3, #1
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	011b      	lsls	r3, r3, #4
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f023 030a 	bic.w	r3, r3, #10
 8005f50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	621a      	str	r2, [r3, #32]
}
 8005f66:	bf00      	nop
 8005f68:	371c      	adds	r7, #28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b087      	sub	sp, #28
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	60f8      	str	r0, [r7, #12]
 8005f7a:	60b9      	str	r1, [r7, #8]
 8005f7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6a1b      	ldr	r3, [r3, #32]
 8005f88:	f023 0210 	bic.w	r2, r3, #16
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	031b      	lsls	r3, r3, #12
 8005fa2:	693a      	ldr	r2, [r7, #16]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005fae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	011b      	lsls	r3, r3, #4
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	621a      	str	r2, [r3, #32]
}
 8005fc6:	bf00      	nop
 8005fc8:	371c      	adds	r7, #28
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b085      	sub	sp, #20
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fe8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	f043 0307 	orr.w	r3, r3, #7
 8005ff4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	609a      	str	r2, [r3, #8]
}
 8005ffc:	bf00      	nop
 8005ffe:	3714      	adds	r7, #20
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006008:	b480      	push	{r7}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006022:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	021a      	lsls	r2, r3, #8
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	431a      	orrs	r2, r3
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	4313      	orrs	r3, r2
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	4313      	orrs	r3, r2
 8006034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	609a      	str	r2, [r3, #8]
}
 800603c:	bf00      	nop
 800603e:	371c      	adds	r7, #28
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006058:	2b01      	cmp	r3, #1
 800605a:	d101      	bne.n	8006060 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800605c:	2302      	movs	r3, #2
 800605e:	e05a      	b.n	8006116 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2202      	movs	r2, #2
 800606c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006086:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	4313      	orrs	r3, r2
 8006090:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a21      	ldr	r2, [pc, #132]	@ (8006124 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d022      	beq.n	80060ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060ac:	d01d      	beq.n	80060ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a1d      	ldr	r2, [pc, #116]	@ (8006128 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d018      	beq.n	80060ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a1b      	ldr	r2, [pc, #108]	@ (800612c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d013      	beq.n	80060ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a1a      	ldr	r2, [pc, #104]	@ (8006130 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d00e      	beq.n	80060ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a18      	ldr	r2, [pc, #96]	@ (8006134 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d009      	beq.n	80060ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a17      	ldr	r2, [pc, #92]	@ (8006138 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d004      	beq.n	80060ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a15      	ldr	r2, [pc, #84]	@ (800613c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d10c      	bne.n	8006104 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	68ba      	ldr	r2, [r7, #8]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68ba      	ldr	r2, [r7, #8]
 8006102:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3714      	adds	r7, #20
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	40010000 	.word	0x40010000
 8006128:	40000400 	.word	0x40000400
 800612c:	40000800 	.word	0x40000800
 8006130:	40000c00 	.word	0x40000c00
 8006134:	40010400 	.word	0x40010400
 8006138:	40014000 	.word	0x40014000
 800613c:	40001800 	.word	0x40001800

08006140 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006148:	bf00      	nop
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800615c:	bf00      	nop
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d101      	bne.n	800617a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e042      	b.n	8006200 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006180:	b2db      	uxtb	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	d106      	bne.n	8006194 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f7fb f820 	bl	80011d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2224      	movs	r2, #36	@ 0x24
 8006198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68da      	ldr	r2, [r3, #12]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80061aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 f973 	bl	8006498 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	691a      	ldr	r2, [r3, #16]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80061c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	695a      	ldr	r2, [r3, #20]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80061d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68da      	ldr	r2, [r3, #12]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80061e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2220      	movs	r2, #32
 80061ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2220      	movs	r2, #32
 80061f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3708      	adds	r7, #8
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b08a      	sub	sp, #40	@ 0x28
 800620c:	af02      	add	r7, sp, #8
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	603b      	str	r3, [r7, #0]
 8006214:	4613      	mov	r3, r2
 8006216:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006218:	2300      	movs	r3, #0
 800621a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006222:	b2db      	uxtb	r3, r3
 8006224:	2b20      	cmp	r3, #32
 8006226:	d175      	bne.n	8006314 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d002      	beq.n	8006234 <HAL_UART_Transmit+0x2c>
 800622e:	88fb      	ldrh	r3, [r7, #6]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d101      	bne.n	8006238 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e06e      	b.n	8006316 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2200      	movs	r2, #0
 800623c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2221      	movs	r2, #33	@ 0x21
 8006242:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006246:	f7fb fa63 	bl	8001710 <HAL_GetTick>
 800624a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	88fa      	ldrh	r2, [r7, #6]
 8006250:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	88fa      	ldrh	r2, [r7, #6]
 8006256:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006260:	d108      	bne.n	8006274 <HAL_UART_Transmit+0x6c>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d104      	bne.n	8006274 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800626a:	2300      	movs	r3, #0
 800626c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	61bb      	str	r3, [r7, #24]
 8006272:	e003      	b.n	800627c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006278:	2300      	movs	r3, #0
 800627a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800627c:	e02e      	b.n	80062dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	2200      	movs	r2, #0
 8006286:	2180      	movs	r1, #128	@ 0x80
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f000 f848 	bl	800631e <UART_WaitOnFlagUntilTimeout>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d005      	beq.n	80062a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2220      	movs	r2, #32
 8006298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800629c:	2303      	movs	r3, #3
 800629e:	e03a      	b.n	8006316 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10b      	bne.n	80062be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	881b      	ldrh	r3, [r3, #0]
 80062aa:	461a      	mov	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	3302      	adds	r3, #2
 80062ba:	61bb      	str	r3, [r7, #24]
 80062bc:	e007      	b.n	80062ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	781a      	ldrb	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	3301      	adds	r3, #1
 80062cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	3b01      	subs	r3, #1
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1cb      	bne.n	800627e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	9300      	str	r3, [sp, #0]
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	2200      	movs	r2, #0
 80062ee:	2140      	movs	r1, #64	@ 0x40
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f000 f814 	bl	800631e <UART_WaitOnFlagUntilTimeout>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d005      	beq.n	8006308 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2220      	movs	r2, #32
 8006300:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e006      	b.n	8006316 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2220      	movs	r2, #32
 800630c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006310:	2300      	movs	r3, #0
 8006312:	e000      	b.n	8006316 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006314:	2302      	movs	r3, #2
  }
}
 8006316:	4618      	mov	r0, r3
 8006318:	3720      	adds	r7, #32
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b086      	sub	sp, #24
 8006322:	af00      	add	r7, sp, #0
 8006324:	60f8      	str	r0, [r7, #12]
 8006326:	60b9      	str	r1, [r7, #8]
 8006328:	603b      	str	r3, [r7, #0]
 800632a:	4613      	mov	r3, r2
 800632c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800632e:	e03b      	b.n	80063a8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006330:	6a3b      	ldr	r3, [r7, #32]
 8006332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006336:	d037      	beq.n	80063a8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006338:	f7fb f9ea 	bl	8001710 <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	6a3a      	ldr	r2, [r7, #32]
 8006344:	429a      	cmp	r2, r3
 8006346:	d302      	bcc.n	800634e <UART_WaitOnFlagUntilTimeout+0x30>
 8006348:	6a3b      	ldr	r3, [r7, #32]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d101      	bne.n	8006352 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e03a      	b.n	80063c8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	f003 0304 	and.w	r3, r3, #4
 800635c:	2b00      	cmp	r3, #0
 800635e:	d023      	beq.n	80063a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	2b80      	cmp	r3, #128	@ 0x80
 8006364:	d020      	beq.n	80063a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	2b40      	cmp	r3, #64	@ 0x40
 800636a:	d01d      	beq.n	80063a8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0308 	and.w	r3, r3, #8
 8006376:	2b08      	cmp	r3, #8
 8006378:	d116      	bne.n	80063a8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800637a:	2300      	movs	r3, #0
 800637c:	617b      	str	r3, [r7, #20]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	617b      	str	r3, [r7, #20]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	617b      	str	r3, [r7, #20]
 800638e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f000 f81d 	bl	80063d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2208      	movs	r2, #8
 800639a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e00f      	b.n	80063c8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	4013      	ands	r3, r2
 80063b2:	68ba      	ldr	r2, [r7, #8]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	bf0c      	ite	eq
 80063b8:	2301      	moveq	r3, #1
 80063ba:	2300      	movne	r3, #0
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	461a      	mov	r2, r3
 80063c0:	79fb      	ldrb	r3, [r7, #7]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d0b4      	beq.n	8006330 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3718      	adds	r7, #24
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b095      	sub	sp, #84	@ 0x54
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	330c      	adds	r3, #12
 80063de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063e2:	e853 3f00 	ldrex	r3, [r3]
 80063e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80063e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	330c      	adds	r3, #12
 80063f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80063f8:	643a      	str	r2, [r7, #64]	@ 0x40
 80063fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80063fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006400:	e841 2300 	strex	r3, r2, [r1]
 8006404:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1e5      	bne.n	80063d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3314      	adds	r3, #20
 8006412:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006414:	6a3b      	ldr	r3, [r7, #32]
 8006416:	e853 3f00 	ldrex	r3, [r3]
 800641a:	61fb      	str	r3, [r7, #28]
   return(result);
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	f023 0301 	bic.w	r3, r3, #1
 8006422:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	3314      	adds	r3, #20
 800642a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800642c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800642e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006430:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006432:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006434:	e841 2300 	strex	r3, r2, [r1]
 8006438:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800643a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1e5      	bne.n	800640c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006444:	2b01      	cmp	r3, #1
 8006446:	d119      	bne.n	800647c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	330c      	adds	r3, #12
 800644e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	e853 3f00 	ldrex	r3, [r3]
 8006456:	60bb      	str	r3, [r7, #8]
   return(result);
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	f023 0310 	bic.w	r3, r3, #16
 800645e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	330c      	adds	r3, #12
 8006466:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006468:	61ba      	str	r2, [r7, #24]
 800646a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646c:	6979      	ldr	r1, [r7, #20]
 800646e:	69ba      	ldr	r2, [r7, #24]
 8006470:	e841 2300 	strex	r3, r2, [r1]
 8006474:	613b      	str	r3, [r7, #16]
   return(result);
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d1e5      	bne.n	8006448 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2220      	movs	r2, #32
 8006480:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800648a:	bf00      	nop
 800648c:	3754      	adds	r7, #84	@ 0x54
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
	...

08006498 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800649c:	b0c0      	sub	sp, #256	@ 0x100
 800649e:	af00      	add	r7, sp, #0
 80064a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80064b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064b4:	68d9      	ldr	r1, [r3, #12]
 80064b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	ea40 0301 	orr.w	r3, r0, r1
 80064c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80064c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064c6:	689a      	ldr	r2, [r3, #8]
 80064c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	431a      	orrs	r2, r3
 80064d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	431a      	orrs	r2, r3
 80064d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064dc:	69db      	ldr	r3, [r3, #28]
 80064de:	4313      	orrs	r3, r2
 80064e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80064e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80064f0:	f021 010c 	bic.w	r1, r1, #12
 80064f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80064fe:	430b      	orrs	r3, r1
 8006500:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800650e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006512:	6999      	ldr	r1, [r3, #24]
 8006514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	ea40 0301 	orr.w	r3, r0, r1
 800651e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	4b8f      	ldr	r3, [pc, #572]	@ (8006764 <UART_SetConfig+0x2cc>)
 8006528:	429a      	cmp	r2, r3
 800652a:	d005      	beq.n	8006538 <UART_SetConfig+0xa0>
 800652c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	4b8d      	ldr	r3, [pc, #564]	@ (8006768 <UART_SetConfig+0x2d0>)
 8006534:	429a      	cmp	r2, r3
 8006536:	d104      	bne.n	8006542 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006538:	f7ff f89e 	bl	8005678 <HAL_RCC_GetPCLK2Freq>
 800653c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006540:	e003      	b.n	800654a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006542:	f7ff f885 	bl	8005650 <HAL_RCC_GetPCLK1Freq>
 8006546:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800654a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800654e:	69db      	ldr	r3, [r3, #28]
 8006550:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006554:	f040 810c 	bne.w	8006770 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006558:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800655c:	2200      	movs	r2, #0
 800655e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006562:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006566:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800656a:	4622      	mov	r2, r4
 800656c:	462b      	mov	r3, r5
 800656e:	1891      	adds	r1, r2, r2
 8006570:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006572:	415b      	adcs	r3, r3
 8006574:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006576:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800657a:	4621      	mov	r1, r4
 800657c:	eb12 0801 	adds.w	r8, r2, r1
 8006580:	4629      	mov	r1, r5
 8006582:	eb43 0901 	adc.w	r9, r3, r1
 8006586:	f04f 0200 	mov.w	r2, #0
 800658a:	f04f 0300 	mov.w	r3, #0
 800658e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006592:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006596:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800659a:	4690      	mov	r8, r2
 800659c:	4699      	mov	r9, r3
 800659e:	4623      	mov	r3, r4
 80065a0:	eb18 0303 	adds.w	r3, r8, r3
 80065a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80065a8:	462b      	mov	r3, r5
 80065aa:	eb49 0303 	adc.w	r3, r9, r3
 80065ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80065b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80065be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80065c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80065c6:	460b      	mov	r3, r1
 80065c8:	18db      	adds	r3, r3, r3
 80065ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80065cc:	4613      	mov	r3, r2
 80065ce:	eb42 0303 	adc.w	r3, r2, r3
 80065d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80065d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80065d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80065dc:	f7f9 fe58 	bl	8000290 <__aeabi_uldivmod>
 80065e0:	4602      	mov	r2, r0
 80065e2:	460b      	mov	r3, r1
 80065e4:	4b61      	ldr	r3, [pc, #388]	@ (800676c <UART_SetConfig+0x2d4>)
 80065e6:	fba3 2302 	umull	r2, r3, r3, r2
 80065ea:	095b      	lsrs	r3, r3, #5
 80065ec:	011c      	lsls	r4, r3, #4
 80065ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065f2:	2200      	movs	r2, #0
 80065f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80065f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80065fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006600:	4642      	mov	r2, r8
 8006602:	464b      	mov	r3, r9
 8006604:	1891      	adds	r1, r2, r2
 8006606:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006608:	415b      	adcs	r3, r3
 800660a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800660c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006610:	4641      	mov	r1, r8
 8006612:	eb12 0a01 	adds.w	sl, r2, r1
 8006616:	4649      	mov	r1, r9
 8006618:	eb43 0b01 	adc.w	fp, r3, r1
 800661c:	f04f 0200 	mov.w	r2, #0
 8006620:	f04f 0300 	mov.w	r3, #0
 8006624:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006628:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800662c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006630:	4692      	mov	sl, r2
 8006632:	469b      	mov	fp, r3
 8006634:	4643      	mov	r3, r8
 8006636:	eb1a 0303 	adds.w	r3, sl, r3
 800663a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800663e:	464b      	mov	r3, r9
 8006640:	eb4b 0303 	adc.w	r3, fp, r3
 8006644:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006654:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006658:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800665c:	460b      	mov	r3, r1
 800665e:	18db      	adds	r3, r3, r3
 8006660:	643b      	str	r3, [r7, #64]	@ 0x40
 8006662:	4613      	mov	r3, r2
 8006664:	eb42 0303 	adc.w	r3, r2, r3
 8006668:	647b      	str	r3, [r7, #68]	@ 0x44
 800666a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800666e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006672:	f7f9 fe0d 	bl	8000290 <__aeabi_uldivmod>
 8006676:	4602      	mov	r2, r0
 8006678:	460b      	mov	r3, r1
 800667a:	4611      	mov	r1, r2
 800667c:	4b3b      	ldr	r3, [pc, #236]	@ (800676c <UART_SetConfig+0x2d4>)
 800667e:	fba3 2301 	umull	r2, r3, r3, r1
 8006682:	095b      	lsrs	r3, r3, #5
 8006684:	2264      	movs	r2, #100	@ 0x64
 8006686:	fb02 f303 	mul.w	r3, r2, r3
 800668a:	1acb      	subs	r3, r1, r3
 800668c:	00db      	lsls	r3, r3, #3
 800668e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006692:	4b36      	ldr	r3, [pc, #216]	@ (800676c <UART_SetConfig+0x2d4>)
 8006694:	fba3 2302 	umull	r2, r3, r3, r2
 8006698:	095b      	lsrs	r3, r3, #5
 800669a:	005b      	lsls	r3, r3, #1
 800669c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80066a0:	441c      	add	r4, r3
 80066a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066a6:	2200      	movs	r2, #0
 80066a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80066ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80066b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80066b4:	4642      	mov	r2, r8
 80066b6:	464b      	mov	r3, r9
 80066b8:	1891      	adds	r1, r2, r2
 80066ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80066bc:	415b      	adcs	r3, r3
 80066be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80066c4:	4641      	mov	r1, r8
 80066c6:	1851      	adds	r1, r2, r1
 80066c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80066ca:	4649      	mov	r1, r9
 80066cc:	414b      	adcs	r3, r1
 80066ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80066d0:	f04f 0200 	mov.w	r2, #0
 80066d4:	f04f 0300 	mov.w	r3, #0
 80066d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80066dc:	4659      	mov	r1, fp
 80066de:	00cb      	lsls	r3, r1, #3
 80066e0:	4651      	mov	r1, sl
 80066e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066e6:	4651      	mov	r1, sl
 80066e8:	00ca      	lsls	r2, r1, #3
 80066ea:	4610      	mov	r0, r2
 80066ec:	4619      	mov	r1, r3
 80066ee:	4603      	mov	r3, r0
 80066f0:	4642      	mov	r2, r8
 80066f2:	189b      	adds	r3, r3, r2
 80066f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80066f8:	464b      	mov	r3, r9
 80066fa:	460a      	mov	r2, r1
 80066fc:	eb42 0303 	adc.w	r3, r2, r3
 8006700:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006710:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006714:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006718:	460b      	mov	r3, r1
 800671a:	18db      	adds	r3, r3, r3
 800671c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800671e:	4613      	mov	r3, r2
 8006720:	eb42 0303 	adc.w	r3, r2, r3
 8006724:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006726:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800672a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800672e:	f7f9 fdaf 	bl	8000290 <__aeabi_uldivmod>
 8006732:	4602      	mov	r2, r0
 8006734:	460b      	mov	r3, r1
 8006736:	4b0d      	ldr	r3, [pc, #52]	@ (800676c <UART_SetConfig+0x2d4>)
 8006738:	fba3 1302 	umull	r1, r3, r3, r2
 800673c:	095b      	lsrs	r3, r3, #5
 800673e:	2164      	movs	r1, #100	@ 0x64
 8006740:	fb01 f303 	mul.w	r3, r1, r3
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	00db      	lsls	r3, r3, #3
 8006748:	3332      	adds	r3, #50	@ 0x32
 800674a:	4a08      	ldr	r2, [pc, #32]	@ (800676c <UART_SetConfig+0x2d4>)
 800674c:	fba2 2303 	umull	r2, r3, r2, r3
 8006750:	095b      	lsrs	r3, r3, #5
 8006752:	f003 0207 	and.w	r2, r3, #7
 8006756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4422      	add	r2, r4
 800675e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006760:	e106      	b.n	8006970 <UART_SetConfig+0x4d8>
 8006762:	bf00      	nop
 8006764:	40011000 	.word	0x40011000
 8006768:	40011400 	.word	0x40011400
 800676c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006770:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006774:	2200      	movs	r2, #0
 8006776:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800677a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800677e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006782:	4642      	mov	r2, r8
 8006784:	464b      	mov	r3, r9
 8006786:	1891      	adds	r1, r2, r2
 8006788:	6239      	str	r1, [r7, #32]
 800678a:	415b      	adcs	r3, r3
 800678c:	627b      	str	r3, [r7, #36]	@ 0x24
 800678e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006792:	4641      	mov	r1, r8
 8006794:	1854      	adds	r4, r2, r1
 8006796:	4649      	mov	r1, r9
 8006798:	eb43 0501 	adc.w	r5, r3, r1
 800679c:	f04f 0200 	mov.w	r2, #0
 80067a0:	f04f 0300 	mov.w	r3, #0
 80067a4:	00eb      	lsls	r3, r5, #3
 80067a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067aa:	00e2      	lsls	r2, r4, #3
 80067ac:	4614      	mov	r4, r2
 80067ae:	461d      	mov	r5, r3
 80067b0:	4643      	mov	r3, r8
 80067b2:	18e3      	adds	r3, r4, r3
 80067b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80067b8:	464b      	mov	r3, r9
 80067ba:	eb45 0303 	adc.w	r3, r5, r3
 80067be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80067c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80067ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80067d2:	f04f 0200 	mov.w	r2, #0
 80067d6:	f04f 0300 	mov.w	r3, #0
 80067da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80067de:	4629      	mov	r1, r5
 80067e0:	008b      	lsls	r3, r1, #2
 80067e2:	4621      	mov	r1, r4
 80067e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067e8:	4621      	mov	r1, r4
 80067ea:	008a      	lsls	r2, r1, #2
 80067ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80067f0:	f7f9 fd4e 	bl	8000290 <__aeabi_uldivmod>
 80067f4:	4602      	mov	r2, r0
 80067f6:	460b      	mov	r3, r1
 80067f8:	4b60      	ldr	r3, [pc, #384]	@ (800697c <UART_SetConfig+0x4e4>)
 80067fa:	fba3 2302 	umull	r2, r3, r3, r2
 80067fe:	095b      	lsrs	r3, r3, #5
 8006800:	011c      	lsls	r4, r3, #4
 8006802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006806:	2200      	movs	r2, #0
 8006808:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800680c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006810:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006814:	4642      	mov	r2, r8
 8006816:	464b      	mov	r3, r9
 8006818:	1891      	adds	r1, r2, r2
 800681a:	61b9      	str	r1, [r7, #24]
 800681c:	415b      	adcs	r3, r3
 800681e:	61fb      	str	r3, [r7, #28]
 8006820:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006824:	4641      	mov	r1, r8
 8006826:	1851      	adds	r1, r2, r1
 8006828:	6139      	str	r1, [r7, #16]
 800682a:	4649      	mov	r1, r9
 800682c:	414b      	adcs	r3, r1
 800682e:	617b      	str	r3, [r7, #20]
 8006830:	f04f 0200 	mov.w	r2, #0
 8006834:	f04f 0300 	mov.w	r3, #0
 8006838:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800683c:	4659      	mov	r1, fp
 800683e:	00cb      	lsls	r3, r1, #3
 8006840:	4651      	mov	r1, sl
 8006842:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006846:	4651      	mov	r1, sl
 8006848:	00ca      	lsls	r2, r1, #3
 800684a:	4610      	mov	r0, r2
 800684c:	4619      	mov	r1, r3
 800684e:	4603      	mov	r3, r0
 8006850:	4642      	mov	r2, r8
 8006852:	189b      	adds	r3, r3, r2
 8006854:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006858:	464b      	mov	r3, r9
 800685a:	460a      	mov	r2, r1
 800685c:	eb42 0303 	adc.w	r3, r2, r3
 8006860:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800686e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006870:	f04f 0200 	mov.w	r2, #0
 8006874:	f04f 0300 	mov.w	r3, #0
 8006878:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800687c:	4649      	mov	r1, r9
 800687e:	008b      	lsls	r3, r1, #2
 8006880:	4641      	mov	r1, r8
 8006882:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006886:	4641      	mov	r1, r8
 8006888:	008a      	lsls	r2, r1, #2
 800688a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800688e:	f7f9 fcff 	bl	8000290 <__aeabi_uldivmod>
 8006892:	4602      	mov	r2, r0
 8006894:	460b      	mov	r3, r1
 8006896:	4611      	mov	r1, r2
 8006898:	4b38      	ldr	r3, [pc, #224]	@ (800697c <UART_SetConfig+0x4e4>)
 800689a:	fba3 2301 	umull	r2, r3, r3, r1
 800689e:	095b      	lsrs	r3, r3, #5
 80068a0:	2264      	movs	r2, #100	@ 0x64
 80068a2:	fb02 f303 	mul.w	r3, r2, r3
 80068a6:	1acb      	subs	r3, r1, r3
 80068a8:	011b      	lsls	r3, r3, #4
 80068aa:	3332      	adds	r3, #50	@ 0x32
 80068ac:	4a33      	ldr	r2, [pc, #204]	@ (800697c <UART_SetConfig+0x4e4>)
 80068ae:	fba2 2303 	umull	r2, r3, r2, r3
 80068b2:	095b      	lsrs	r3, r3, #5
 80068b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80068b8:	441c      	add	r4, r3
 80068ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068be:	2200      	movs	r2, #0
 80068c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80068c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80068c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80068c8:	4642      	mov	r2, r8
 80068ca:	464b      	mov	r3, r9
 80068cc:	1891      	adds	r1, r2, r2
 80068ce:	60b9      	str	r1, [r7, #8]
 80068d0:	415b      	adcs	r3, r3
 80068d2:	60fb      	str	r3, [r7, #12]
 80068d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068d8:	4641      	mov	r1, r8
 80068da:	1851      	adds	r1, r2, r1
 80068dc:	6039      	str	r1, [r7, #0]
 80068de:	4649      	mov	r1, r9
 80068e0:	414b      	adcs	r3, r1
 80068e2:	607b      	str	r3, [r7, #4]
 80068e4:	f04f 0200 	mov.w	r2, #0
 80068e8:	f04f 0300 	mov.w	r3, #0
 80068ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80068f0:	4659      	mov	r1, fp
 80068f2:	00cb      	lsls	r3, r1, #3
 80068f4:	4651      	mov	r1, sl
 80068f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068fa:	4651      	mov	r1, sl
 80068fc:	00ca      	lsls	r2, r1, #3
 80068fe:	4610      	mov	r0, r2
 8006900:	4619      	mov	r1, r3
 8006902:	4603      	mov	r3, r0
 8006904:	4642      	mov	r2, r8
 8006906:	189b      	adds	r3, r3, r2
 8006908:	66bb      	str	r3, [r7, #104]	@ 0x68
 800690a:	464b      	mov	r3, r9
 800690c:	460a      	mov	r2, r1
 800690e:	eb42 0303 	adc.w	r3, r2, r3
 8006912:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	663b      	str	r3, [r7, #96]	@ 0x60
 800691e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006920:	f04f 0200 	mov.w	r2, #0
 8006924:	f04f 0300 	mov.w	r3, #0
 8006928:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800692c:	4649      	mov	r1, r9
 800692e:	008b      	lsls	r3, r1, #2
 8006930:	4641      	mov	r1, r8
 8006932:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006936:	4641      	mov	r1, r8
 8006938:	008a      	lsls	r2, r1, #2
 800693a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800693e:	f7f9 fca7 	bl	8000290 <__aeabi_uldivmod>
 8006942:	4602      	mov	r2, r0
 8006944:	460b      	mov	r3, r1
 8006946:	4b0d      	ldr	r3, [pc, #52]	@ (800697c <UART_SetConfig+0x4e4>)
 8006948:	fba3 1302 	umull	r1, r3, r3, r2
 800694c:	095b      	lsrs	r3, r3, #5
 800694e:	2164      	movs	r1, #100	@ 0x64
 8006950:	fb01 f303 	mul.w	r3, r1, r3
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	011b      	lsls	r3, r3, #4
 8006958:	3332      	adds	r3, #50	@ 0x32
 800695a:	4a08      	ldr	r2, [pc, #32]	@ (800697c <UART_SetConfig+0x4e4>)
 800695c:	fba2 2303 	umull	r2, r3, r2, r3
 8006960:	095b      	lsrs	r3, r3, #5
 8006962:	f003 020f 	and.w	r2, r3, #15
 8006966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4422      	add	r2, r4
 800696e:	609a      	str	r2, [r3, #8]
}
 8006970:	bf00      	nop
 8006972:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006976:	46bd      	mov	sp, r7
 8006978:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800697c:	51eb851f 	.word	0x51eb851f

08006980 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d123      	bne.n	80069da <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800699a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800699e:	683a      	ldr	r2, [r7, #0]
 80069a0:	6851      	ldr	r1, [r2, #4]
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	6892      	ldr	r2, [r2, #8]
 80069a6:	4311      	orrs	r1, r2
 80069a8:	683a      	ldr	r2, [r7, #0]
 80069aa:	68d2      	ldr	r2, [r2, #12]
 80069ac:	4311      	orrs	r1, r2
 80069ae:	683a      	ldr	r2, [r7, #0]
 80069b0:	6912      	ldr	r2, [r2, #16]
 80069b2:	4311      	orrs	r1, r2
 80069b4:	683a      	ldr	r2, [r7, #0]
 80069b6:	6952      	ldr	r2, [r2, #20]
 80069b8:	4311      	orrs	r1, r2
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	6992      	ldr	r2, [r2, #24]
 80069be:	4311      	orrs	r1, r2
 80069c0:	683a      	ldr	r2, [r7, #0]
 80069c2:	69d2      	ldr	r2, [r2, #28]
 80069c4:	4311      	orrs	r1, r2
 80069c6:	683a      	ldr	r2, [r7, #0]
 80069c8:	6a12      	ldr	r2, [r2, #32]
 80069ca:	4311      	orrs	r1, r2
 80069cc:	683a      	ldr	r2, [r7, #0]
 80069ce:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80069d0:	430a      	orrs	r2, r1
 80069d2:	431a      	orrs	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	601a      	str	r2, [r3, #0]
 80069d8:	e028      	b.n	8006a2c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	69d9      	ldr	r1, [r3, #28]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	4319      	orrs	r1, r3
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f0:	430b      	orrs	r3, r1
 80069f2:	431a      	orrs	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006a00:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006a04:	683a      	ldr	r2, [r7, #0]
 8006a06:	6851      	ldr	r1, [r2, #4]
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	6892      	ldr	r2, [r2, #8]
 8006a0c:	4311      	orrs	r1, r2
 8006a0e:	683a      	ldr	r2, [r7, #0]
 8006a10:	68d2      	ldr	r2, [r2, #12]
 8006a12:	4311      	orrs	r1, r2
 8006a14:	683a      	ldr	r2, [r7, #0]
 8006a16:	6912      	ldr	r2, [r2, #16]
 8006a18:	4311      	orrs	r1, r2
 8006a1a:	683a      	ldr	r2, [r7, #0]
 8006a1c:	6952      	ldr	r2, [r2, #20]
 8006a1e:	4311      	orrs	r1, r2
 8006a20:	683a      	ldr	r2, [r7, #0]
 8006a22:	6992      	ldr	r2, [r2, #24]
 8006a24:	430a      	orrs	r2, r1
 8006a26:	431a      	orrs	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	370c      	adds	r7, #12
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr

08006a3a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b085      	sub	sp, #20
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	60f8      	str	r0, [r7, #12]
 8006a42:	60b9      	str	r1, [r7, #8]
 8006a44:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d128      	bne.n	8006a9e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	1e59      	subs	r1, r3, #1
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	011b      	lsls	r3, r3, #4
 8006a62:	4319      	orrs	r1, r3
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	021b      	lsls	r3, r3, #8
 8006a6c:	4319      	orrs	r1, r3
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	3b01      	subs	r3, #1
 8006a74:	031b      	lsls	r3, r3, #12
 8006a76:	4319      	orrs	r1, r3
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	041b      	lsls	r3, r3, #16
 8006a80:	4319      	orrs	r1, r3
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	3b01      	subs	r3, #1
 8006a88:	051b      	lsls	r3, r3, #20
 8006a8a:	4319      	orrs	r1, r3
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	3b01      	subs	r3, #1
 8006a92:	061b      	lsls	r3, r3, #24
 8006a94:	430b      	orrs	r3, r1
 8006a96:	431a      	orrs	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	609a      	str	r2, [r3, #8]
 8006a9c:	e02f      	b.n	8006afe <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006aa6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006aaa:	68ba      	ldr	r2, [r7, #8]
 8006aac:	68d2      	ldr	r2, [r2, #12]
 8006aae:	3a01      	subs	r2, #1
 8006ab0:	0311      	lsls	r1, r2, #12
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	6952      	ldr	r2, [r2, #20]
 8006ab6:	3a01      	subs	r2, #1
 8006ab8:	0512      	lsls	r2, r2, #20
 8006aba:	430a      	orrs	r2, r1
 8006abc:	431a      	orrs	r2, r3
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	1e59      	subs	r1, r3, #1
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	3b01      	subs	r3, #1
 8006ad6:	011b      	lsls	r3, r3, #4
 8006ad8:	4319      	orrs	r1, r3
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	021b      	lsls	r3, r3, #8
 8006ae2:	4319      	orrs	r1, r3
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	041b      	lsls	r3, r3, #16
 8006aec:	4319      	orrs	r1, r3
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	3b01      	subs	r3, #1
 8006af4:	061b      	lsls	r3, r3, #24
 8006af6:	430b      	orrs	r3, r1
 8006af8:	431a      	orrs	r2, r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3714      	adds	r7, #20
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b0c:	b084      	sub	sp, #16
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b084      	sub	sp, #16
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
 8006b16:	f107 001c 	add.w	r0, r7, #28
 8006b1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b1e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d123      	bne.n	8006b6e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b2a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006b3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006b4e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d105      	bne.n	8006b62 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 f9dc 	bl	8006f20 <USB_CoreReset>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	73fb      	strb	r3, [r7, #15]
 8006b6c:	e01b      	b.n	8006ba6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f9d0 	bl	8006f20 <USB_CoreReset>
 8006b80:	4603      	mov	r3, r0
 8006b82:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006b84:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d106      	bne.n	8006b9a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b90:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	639a      	str	r2, [r3, #56]	@ 0x38
 8006b98:	e005      	b.n	8006ba6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b9e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006ba6:	7fbb      	ldrb	r3, [r7, #30]
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d10b      	bne.n	8006bc4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	f043 0206 	orr.w	r2, r3, #6
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	f043 0220 	orr.w	r2, r3, #32
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006bd0:	b004      	add	sp, #16
 8006bd2:	4770      	bx	lr

08006bd4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	f043 0201 	orr.w	r2, r3, #1
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	370c      	adds	r7, #12
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr

08006bf6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b083      	sub	sp, #12
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f023 0201 	bic.w	r2, r3, #1
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	460b      	mov	r3, r1
 8006c22:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006c24:	2300      	movs	r3, #0
 8006c26:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c34:	78fb      	ldrb	r3, [r7, #3]
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d115      	bne.n	8006c66 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006c46:	200a      	movs	r0, #10
 8006c48:	f7fa fd6e 	bl	8001728 <HAL_Delay>
      ms += 10U;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	330a      	adds	r3, #10
 8006c50:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 f956 	bl	8006f04 <USB_GetMode>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d01e      	beq.n	8006c9c <USB_SetCurrentMode+0x84>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2bc7      	cmp	r3, #199	@ 0xc7
 8006c62:	d9f0      	bls.n	8006c46 <USB_SetCurrentMode+0x2e>
 8006c64:	e01a      	b.n	8006c9c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c66:	78fb      	ldrb	r3, [r7, #3]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d115      	bne.n	8006c98 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006c78:	200a      	movs	r0, #10
 8006c7a:	f7fa fd55 	bl	8001728 <HAL_Delay>
      ms += 10U;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	330a      	adds	r3, #10
 8006c82:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 f93d 	bl	8006f04 <USB_GetMode>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d005      	beq.n	8006c9c <USB_SetCurrentMode+0x84>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2bc7      	cmp	r3, #199	@ 0xc7
 8006c94:	d9f0      	bls.n	8006c78 <USB_SetCurrentMode+0x60>
 8006c96:	e001      	b.n	8006c9c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e005      	b.n	8006ca8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2bc8      	cmp	r3, #200	@ 0xc8
 8006ca0:	d101      	bne.n	8006ca6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e000      	b.n	8006ca8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006cca:	d901      	bls.n	8006cd0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e01b      	b.n	8006d08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	daf2      	bge.n	8006cbe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	019b      	lsls	r3, r3, #6
 8006ce0:	f043 0220 	orr.w	r2, r3, #32
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	3301      	adds	r3, #1
 8006cec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006cf4:	d901      	bls.n	8006cfa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e006      	b.n	8006d08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	f003 0320 	and.w	r3, r3, #32
 8006d02:	2b20      	cmp	r3, #32
 8006d04:	d0f0      	beq.n	8006ce8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3714      	adds	r7, #20
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	3301      	adds	r3, #1
 8006d24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d2c:	d901      	bls.n	8006d32 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e018      	b.n	8006d64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	daf2      	bge.n	8006d20 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2210      	movs	r2, #16
 8006d42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	3301      	adds	r3, #1
 8006d48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d50:	d901      	bls.n	8006d56 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e006      	b.n	8006d64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	f003 0310 	and.w	r3, r3, #16
 8006d5e:	2b10      	cmp	r3, #16
 8006d60:	d0f0      	beq.n	8006d44 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3714      	adds	r7, #20
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b089      	sub	sp, #36	@ 0x24
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	4611      	mov	r1, r2
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	460b      	mov	r3, r1
 8006d80:	71fb      	strb	r3, [r7, #7]
 8006d82:	4613      	mov	r3, r2
 8006d84:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006d8e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d123      	bne.n	8006dde <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006d96:	88bb      	ldrh	r3, [r7, #4]
 8006d98:	3303      	adds	r3, #3
 8006d9a:	089b      	lsrs	r3, r3, #2
 8006d9c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006d9e:	2300      	movs	r3, #0
 8006da0:	61bb      	str	r3, [r7, #24]
 8006da2:	e018      	b.n	8006dd6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006da4:	79fb      	ldrb	r3, [r7, #7]
 8006da6:	031a      	lsls	r2, r3, #12
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	4413      	add	r3, r2
 8006dac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006db0:	461a      	mov	r2, r3
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	61bb      	str	r3, [r7, #24]
 8006dd6:	69ba      	ldr	r2, [r7, #24]
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d3e2      	bcc.n	8006da4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3724      	adds	r7, #36	@ 0x24
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b08b      	sub	sp, #44	@ 0x2c
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	4613      	mov	r3, r2
 8006df8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006e02:	88fb      	ldrh	r3, [r7, #6]
 8006e04:	089b      	lsrs	r3, r3, #2
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006e0a:	88fb      	ldrh	r3, [r7, #6]
 8006e0c:	f003 0303 	and.w	r3, r3, #3
 8006e10:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006e12:	2300      	movs	r3, #0
 8006e14:	623b      	str	r3, [r7, #32]
 8006e16:	e014      	b.n	8006e42 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e22:	601a      	str	r2, [r3, #0]
    pDest++;
 8006e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e26:	3301      	adds	r3, #1
 8006e28:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e32:	3301      	adds	r3, #1
 8006e34:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e38:	3301      	adds	r3, #1
 8006e3a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006e3c:	6a3b      	ldr	r3, [r7, #32]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	623b      	str	r3, [r7, #32]
 8006e42:	6a3a      	ldr	r2, [r7, #32]
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d3e6      	bcc.n	8006e18 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006e4a:	8bfb      	ldrh	r3, [r7, #30]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d01e      	beq.n	8006e8e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006e50:	2300      	movs	r3, #0
 8006e52:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	f107 0310 	add.w	r3, r7, #16
 8006e60:	6812      	ldr	r2, [r2, #0]
 8006e62:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006e64:	693a      	ldr	r2, [r7, #16]
 8006e66:	6a3b      	ldr	r3, [r7, #32]
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	00db      	lsls	r3, r3, #3
 8006e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e70:	b2da      	uxtb	r2, r3
 8006e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e74:	701a      	strb	r2, [r3, #0]
      i++;
 8006e76:	6a3b      	ldr	r3, [r7, #32]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	623b      	str	r3, [r7, #32]
      pDest++;
 8006e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7e:	3301      	adds	r3, #1
 8006e80:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006e82:	8bfb      	ldrh	r3, [r7, #30]
 8006e84:	3b01      	subs	r3, #1
 8006e86:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006e88:	8bfb      	ldrh	r3, [r7, #30]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1ea      	bne.n	8006e64 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	372c      	adds	r7, #44	@ 0x2c
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	695b      	ldr	r3, [r3, #20]
 8006ea8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr

08006ec2 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006ec2:	b480      	push	{r7}
 8006ec4:	b085      	sub	sp, #20
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
 8006eca:	460b      	mov	r3, r1
 8006ecc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006ed2:	78fb      	ldrb	r3, [r7, #3]
 8006ed4:	015a      	lsls	r2, r3, #5
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006ee2:	78fb      	ldrb	r3, [r7, #3]
 8006ee4:	015a      	lsls	r2, r3, #5
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	4413      	add	r3, r2
 8006eea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	68ba      	ldr	r2, [r7, #8]
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006ef6:	68bb      	ldr	r3, [r7, #8]
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3714      	adds	r7, #20
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	695b      	ldr	r3, [r3, #20]
 8006f10:	f003 0301 	and.w	r3, r3, #1
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f38:	d901      	bls.n	8006f3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	e01b      	b.n	8006f76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	daf2      	bge.n	8006f2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f46:	2300      	movs	r3, #0
 8006f48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	f043 0201 	orr.w	r2, r3, #1
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f62:	d901      	bls.n	8006f68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e006      	b.n	8006f76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	f003 0301 	and.w	r3, r3, #1
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d0f0      	beq.n	8006f56 <USB_CoreReset+0x36>

  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3714      	adds	r7, #20
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
	...

08006f84 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f84:	b084      	sub	sp, #16
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b086      	sub	sp, #24
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
 8006f8e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006f92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f96:	2300      	movs	r3, #0
 8006f98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fae:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fba:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fc6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d119      	bne.n	800700e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006fda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d10a      	bne.n	8006ff8 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006ff0:	f043 0304 	orr.w	r3, r3, #4
 8006ff4:	6013      	str	r3, [r2, #0]
 8006ff6:	e014      	b.n	8007022 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007006:	f023 0304 	bic.w	r3, r3, #4
 800700a:	6013      	str	r3, [r2, #0]
 800700c:	e009      	b.n	8007022 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800701c:	f023 0304 	bic.w	r3, r3, #4
 8007020:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007022:	2110      	movs	r1, #16
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f7ff fe43 	bl	8006cb0 <USB_FlushTxFifo>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d001      	beq.n	8007034 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f7ff fe6d 	bl	8006d14 <USB_FlushRxFifo>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d001      	beq.n	8007044 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007044:	2300      	movs	r3, #0
 8007046:	613b      	str	r3, [r7, #16]
 8007048:	e015      	b.n	8007076 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	015a      	lsls	r2, r3, #5
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	4413      	add	r3, r2
 8007052:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007056:	461a      	mov	r2, r3
 8007058:	f04f 33ff 	mov.w	r3, #4294967295
 800705c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	015a      	lsls	r2, r3, #5
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	4413      	add	r3, r2
 8007066:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800706a:	461a      	mov	r2, r3
 800706c:	2300      	movs	r3, #0
 800706e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	3301      	adds	r3, #1
 8007074:	613b      	str	r3, [r7, #16]
 8007076:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800707a:	461a      	mov	r2, r3
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	4293      	cmp	r3, r2
 8007080:	d3e3      	bcc.n	800704a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f04f 32ff 	mov.w	r2, #4294967295
 800708e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a18      	ldr	r2, [pc, #96]	@ (80070f4 <USB_HostInit+0x170>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d10b      	bne.n	80070b0 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800709e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a15      	ldr	r2, [pc, #84]	@ (80070f8 <USB_HostInit+0x174>)
 80070a4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a14      	ldr	r2, [pc, #80]	@ (80070fc <USB_HostInit+0x178>)
 80070aa:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80070ae:	e009      	b.n	80070c4 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2280      	movs	r2, #128	@ 0x80
 80070b4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a11      	ldr	r2, [pc, #68]	@ (8007100 <USB_HostInit+0x17c>)
 80070ba:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a11      	ldr	r2, [pc, #68]	@ (8007104 <USB_HostInit+0x180>)
 80070c0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80070c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d105      	bne.n	80070d8 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	f043 0210 	orr.w	r2, r3, #16
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	699a      	ldr	r2, [r3, #24]
 80070dc:	4b0a      	ldr	r3, [pc, #40]	@ (8007108 <USB_HostInit+0x184>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80070e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3718      	adds	r7, #24
 80070ea:	46bd      	mov	sp, r7
 80070ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070f0:	b004      	add	sp, #16
 80070f2:	4770      	bx	lr
 80070f4:	40040000 	.word	0x40040000
 80070f8:	01000200 	.word	0x01000200
 80070fc:	00e00300 	.word	0x00e00300
 8007100:	00600080 	.word	0x00600080
 8007104:	004000e0 	.word	0x004000e0
 8007108:	a3200008 	.word	0xa3200008

0800710c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	460b      	mov	r3, r1
 8007116:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800712a:	f023 0303 	bic.w	r3, r3, #3
 800712e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	78fb      	ldrb	r3, [r7, #3]
 800713a:	f003 0303 	and.w	r3, r3, #3
 800713e:	68f9      	ldr	r1, [r7, #12]
 8007140:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007144:	4313      	orrs	r3, r2
 8007146:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007148:	78fb      	ldrb	r3, [r7, #3]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d107      	bne.n	800715e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007154:	461a      	mov	r2, r3
 8007156:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800715a:	6053      	str	r3, [r2, #4]
 800715c:	e00c      	b.n	8007178 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800715e:	78fb      	ldrb	r3, [r7, #3]
 8007160:	2b02      	cmp	r3, #2
 8007162:	d107      	bne.n	8007174 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800716a:	461a      	mov	r2, r3
 800716c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007170:	6053      	str	r3, [r2, #4]
 8007172:	e001      	b.n	8007178 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	e000      	b.n	800717a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3714      	adds	r7, #20
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b084      	sub	sp, #16
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007192:	2300      	movs	r3, #0
 8007194:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80071a6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80071b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071b4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80071b6:	2064      	movs	r0, #100	@ 0x64
 80071b8:	f7fa fab6 	bl	8001728 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80071c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071c8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80071ca:	200a      	movs	r0, #10
 80071cc:	f7fa faac 	bl	8001728 <HAL_Delay>

  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80071da:	b480      	push	{r7}
 80071dc:	b085      	sub	sp, #20
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	460b      	mov	r3, r1
 80071e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80071ea:	2300      	movs	r3, #0
 80071ec:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80071fe:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007206:	2b00      	cmp	r3, #0
 8007208:	d109      	bne.n	800721e <USB_DriveVbus+0x44>
 800720a:	78fb      	ldrb	r3, [r7, #3]
 800720c:	2b01      	cmp	r3, #1
 800720e:	d106      	bne.n	800721e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007218:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800721c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007224:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007228:	d109      	bne.n	800723e <USB_DriveVbus+0x64>
 800722a:	78fb      	ldrb	r3, [r7, #3]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d106      	bne.n	800723e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007238:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800723c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3714      	adds	r7, #20
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800724c:	b480      	push	{r7}
 800724e:	b085      	sub	sp, #20
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007258:	2300      	movs	r3, #0
 800725a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	0c5b      	lsrs	r3, r3, #17
 800726a:	f003 0303 	and.w	r3, r3, #3
}
 800726e:	4618      	mov	r0, r3
 8007270:	3714      	adds	r7, #20
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr

0800727a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800727a:	b480      	push	{r7}
 800727c:	b085      	sub	sp, #20
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	b29b      	uxth	r3, r3
}
 8007290:	4618      	mov	r0, r3
 8007292:	3714      	adds	r7, #20
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b088      	sub	sp, #32
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	4608      	mov	r0, r1
 80072a6:	4611      	mov	r1, r2
 80072a8:	461a      	mov	r2, r3
 80072aa:	4603      	mov	r3, r0
 80072ac:	70fb      	strb	r3, [r7, #3]
 80072ae:	460b      	mov	r3, r1
 80072b0:	70bb      	strb	r3, [r7, #2]
 80072b2:	4613      	mov	r3, r2
 80072b4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80072b6:	2300      	movs	r3, #0
 80072b8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80072be:	78fb      	ldrb	r3, [r7, #3]
 80072c0:	015a      	lsls	r2, r3, #5
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	4413      	add	r3, r2
 80072c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072ca:	461a      	mov	r2, r3
 80072cc:	f04f 33ff 	mov.w	r3, #4294967295
 80072d0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80072d2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80072d6:	2b03      	cmp	r3, #3
 80072d8:	d87c      	bhi.n	80073d4 <USB_HC_Init+0x138>
 80072da:	a201      	add	r2, pc, #4	@ (adr r2, 80072e0 <USB_HC_Init+0x44>)
 80072dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e0:	080072f1 	.word	0x080072f1
 80072e4:	08007397 	.word	0x08007397
 80072e8:	080072f1 	.word	0x080072f1
 80072ec:	08007359 	.word	0x08007359
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80072f0:	78fb      	ldrb	r3, [r7, #3]
 80072f2:	015a      	lsls	r2, r3, #5
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	4413      	add	r3, r2
 80072f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072fc:	461a      	mov	r2, r3
 80072fe:	f240 439d 	movw	r3, #1181	@ 0x49d
 8007302:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007304:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007308:	2b00      	cmp	r3, #0
 800730a:	da10      	bge.n	800732e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800730c:	78fb      	ldrb	r3, [r7, #3]
 800730e:	015a      	lsls	r2, r3, #5
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	4413      	add	r3, r2
 8007314:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	78fa      	ldrb	r2, [r7, #3]
 800731c:	0151      	lsls	r1, r2, #5
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	440a      	add	r2, r1
 8007322:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007326:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800732a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800732c:	e055      	b.n	80073da <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a6f      	ldr	r2, [pc, #444]	@ (80074f0 <USB_HC_Init+0x254>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d151      	bne.n	80073da <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007336:	78fb      	ldrb	r3, [r7, #3]
 8007338:	015a      	lsls	r2, r3, #5
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	4413      	add	r3, r2
 800733e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	78fa      	ldrb	r2, [r7, #3]
 8007346:	0151      	lsls	r1, r2, #5
 8007348:	693a      	ldr	r2, [r7, #16]
 800734a:	440a      	add	r2, r1
 800734c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007350:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007354:	60d3      	str	r3, [r2, #12]
      break;
 8007356:	e040      	b.n	80073da <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007358:	78fb      	ldrb	r3, [r7, #3]
 800735a:	015a      	lsls	r2, r3, #5
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	4413      	add	r3, r2
 8007360:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007364:	461a      	mov	r2, r3
 8007366:	f240 639d 	movw	r3, #1693	@ 0x69d
 800736a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800736c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007370:	2b00      	cmp	r3, #0
 8007372:	da34      	bge.n	80073de <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007374:	78fb      	ldrb	r3, [r7, #3]
 8007376:	015a      	lsls	r2, r3, #5
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	4413      	add	r3, r2
 800737c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	78fa      	ldrb	r2, [r7, #3]
 8007384:	0151      	lsls	r1, r2, #5
 8007386:	693a      	ldr	r2, [r7, #16]
 8007388:	440a      	add	r2, r1
 800738a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800738e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007392:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007394:	e023      	b.n	80073de <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007396:	78fb      	ldrb	r3, [r7, #3]
 8007398:	015a      	lsls	r2, r3, #5
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	4413      	add	r3, r2
 800739e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073a2:	461a      	mov	r2, r3
 80073a4:	f240 2325 	movw	r3, #549	@ 0x225
 80073a8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80073aa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	da17      	bge.n	80073e2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80073b2:	78fb      	ldrb	r3, [r7, #3]
 80073b4:	015a      	lsls	r2, r3, #5
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	4413      	add	r3, r2
 80073ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	78fa      	ldrb	r2, [r7, #3]
 80073c2:	0151      	lsls	r1, r2, #5
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	440a      	add	r2, r1
 80073c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073cc:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80073d0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80073d2:	e006      	b.n	80073e2 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	77fb      	strb	r3, [r7, #31]
      break;
 80073d8:	e004      	b.n	80073e4 <USB_HC_Init+0x148>
      break;
 80073da:	bf00      	nop
 80073dc:	e002      	b.n	80073e4 <USB_HC_Init+0x148>
      break;
 80073de:	bf00      	nop
 80073e0:	e000      	b.n	80073e4 <USB_HC_Init+0x148>
      break;
 80073e2:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80073e4:	78fb      	ldrb	r3, [r7, #3]
 80073e6:	015a      	lsls	r2, r3, #5
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	4413      	add	r3, r2
 80073ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073f0:	461a      	mov	r2, r3
 80073f2:	2300      	movs	r3, #0
 80073f4:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80073f6:	78fb      	ldrb	r3, [r7, #3]
 80073f8:	015a      	lsls	r2, r3, #5
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	4413      	add	r3, r2
 80073fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	78fa      	ldrb	r2, [r7, #3]
 8007406:	0151      	lsls	r1, r2, #5
 8007408:	693a      	ldr	r2, [r7, #16]
 800740a:	440a      	add	r2, r1
 800740c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007410:	f043 0302 	orr.w	r3, r3, #2
 8007414:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800741c:	699a      	ldr	r2, [r3, #24]
 800741e:	78fb      	ldrb	r3, [r7, #3]
 8007420:	f003 030f 	and.w	r3, r3, #15
 8007424:	2101      	movs	r1, #1
 8007426:	fa01 f303 	lsl.w	r3, r1, r3
 800742a:	6939      	ldr	r1, [r7, #16]
 800742c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007430:	4313      	orrs	r3, r2
 8007432:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	699b      	ldr	r3, [r3, #24]
 8007438:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007440:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007444:	2b00      	cmp	r3, #0
 8007446:	da03      	bge.n	8007450 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007448:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800744c:	61bb      	str	r3, [r7, #24]
 800744e:	e001      	b.n	8007454 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8007450:	2300      	movs	r3, #0
 8007452:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f7ff fef9 	bl	800724c <USB_GetHostSpeed>
 800745a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800745c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007460:	2b02      	cmp	r3, #2
 8007462:	d106      	bne.n	8007472 <USB_HC_Init+0x1d6>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2b02      	cmp	r3, #2
 8007468:	d003      	beq.n	8007472 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800746a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800746e:	617b      	str	r3, [r7, #20]
 8007470:	e001      	b.n	8007476 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007472:	2300      	movs	r3, #0
 8007474:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007476:	787b      	ldrb	r3, [r7, #1]
 8007478:	059b      	lsls	r3, r3, #22
 800747a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800747e:	78bb      	ldrb	r3, [r7, #2]
 8007480:	02db      	lsls	r3, r3, #11
 8007482:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007486:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007488:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800748c:	049b      	lsls	r3, r3, #18
 800748e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007492:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007494:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007496:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800749a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	431a      	orrs	r2, r3
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80074a4:	78fa      	ldrb	r2, [r7, #3]
 80074a6:	0151      	lsls	r1, r2, #5
 80074a8:	693a      	ldr	r2, [r7, #16]
 80074aa:	440a      	add	r2, r1
 80074ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80074b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80074b4:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80074b6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80074ba:	2b03      	cmp	r3, #3
 80074bc:	d003      	beq.n	80074c6 <USB_HC_Init+0x22a>
 80074be:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d10f      	bne.n	80074e6 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80074c6:	78fb      	ldrb	r3, [r7, #3]
 80074c8:	015a      	lsls	r2, r3, #5
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	4413      	add	r3, r2
 80074ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	78fa      	ldrb	r2, [r7, #3]
 80074d6:	0151      	lsls	r1, r2, #5
 80074d8:	693a      	ldr	r2, [r7, #16]
 80074da:	440a      	add	r2, r1
 80074dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80074e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80074e4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80074e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3720      	adds	r7, #32
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	40040000 	.word	0x40040000

080074f4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b08c      	sub	sp, #48	@ 0x30
 80074f8:	af02      	add	r7, sp, #8
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	4613      	mov	r3, r2
 8007500:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	785b      	ldrb	r3, [r3, #1]
 800750a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800750c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007510:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	4a5d      	ldr	r2, [pc, #372]	@ (800768c <USB_HC_StartXfer+0x198>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d12f      	bne.n	800757a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800751a:	79fb      	ldrb	r3, [r7, #7]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d11c      	bne.n	800755a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	7c9b      	ldrb	r3, [r3, #18]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d003      	beq.n	8007530 <USB_HC_StartXfer+0x3c>
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	7c9b      	ldrb	r3, [r3, #18]
 800752c:	2b02      	cmp	r3, #2
 800752e:	d124      	bne.n	800757a <USB_HC_StartXfer+0x86>
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	799b      	ldrb	r3, [r3, #6]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d120      	bne.n	800757a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	015a      	lsls	r2, r3, #5
 800753c:	6a3b      	ldr	r3, [r7, #32]
 800753e:	4413      	add	r3, r2
 8007540:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	69fa      	ldr	r2, [r7, #28]
 8007548:	0151      	lsls	r1, r2, #5
 800754a:	6a3a      	ldr	r2, [r7, #32]
 800754c:	440a      	add	r2, r1
 800754e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007556:	60d3      	str	r3, [r2, #12]
 8007558:	e00f      	b.n	800757a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	791b      	ldrb	r3, [r3, #4]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10b      	bne.n	800757a <USB_HC_StartXfer+0x86>
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	795b      	ldrb	r3, [r3, #5]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d107      	bne.n	800757a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	785b      	ldrb	r3, [r3, #1]
 800756e:	4619      	mov	r1, r3
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f000 fb6b 	bl	8007c4c <USB_DoPing>
        return HAL_OK;
 8007576:	2300      	movs	r3, #0
 8007578:	e232      	b.n	80079e0 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	799b      	ldrb	r3, [r3, #6]
 800757e:	2b01      	cmp	r3, #1
 8007580:	d158      	bne.n	8007634 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007582:	2301      	movs	r3, #1
 8007584:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	78db      	ldrb	r3, [r3, #3]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d007      	beq.n	800759e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800758e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007590:	68ba      	ldr	r2, [r7, #8]
 8007592:	8a92      	ldrh	r2, [r2, #20]
 8007594:	fb03 f202 	mul.w	r2, r3, r2
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	61da      	str	r2, [r3, #28]
 800759c:	e07c      	b.n	8007698 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	7c9b      	ldrb	r3, [r3, #18]
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d130      	bne.n	8007608 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	6a1b      	ldr	r3, [r3, #32]
 80075aa:	2bbc      	cmp	r3, #188	@ 0xbc
 80075ac:	d918      	bls.n	80075e0 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	8a9b      	ldrh	r3, [r3, #20]
 80075b2:	461a      	mov	r2, r3
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	69da      	ldr	r2, [r3, #28]
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d003      	beq.n	80075d0 <USB_HC_StartXfer+0xdc>
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	d103      	bne.n	80075d8 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	2202      	movs	r2, #2
 80075d4:	60da      	str	r2, [r3, #12]
 80075d6:	e05f      	b.n	8007698 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	2201      	movs	r2, #1
 80075dc:	60da      	str	r2, [r3, #12]
 80075de:	e05b      	b.n	8007698 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	6a1a      	ldr	r2, [r3, #32]
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d007      	beq.n	8007600 <USB_HC_StartXfer+0x10c>
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d003      	beq.n	8007600 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	2204      	movs	r2, #4
 80075fc:	60da      	str	r2, [r3, #12]
 80075fe:	e04b      	b.n	8007698 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	2203      	movs	r2, #3
 8007604:	60da      	str	r2, [r3, #12]
 8007606:	e047      	b.n	8007698 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007608:	79fb      	ldrb	r3, [r7, #7]
 800760a:	2b01      	cmp	r3, #1
 800760c:	d10d      	bne.n	800762a <USB_HC_StartXfer+0x136>
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	6a1b      	ldr	r3, [r3, #32]
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	8a92      	ldrh	r2, [r2, #20]
 8007616:	4293      	cmp	r3, r2
 8007618:	d907      	bls.n	800762a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800761a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800761c:	68ba      	ldr	r2, [r7, #8]
 800761e:	8a92      	ldrh	r2, [r2, #20]
 8007620:	fb03 f202 	mul.w	r2, r3, r2
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	61da      	str	r2, [r3, #28]
 8007628:	e036      	b.n	8007698 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	6a1a      	ldr	r2, [r3, #32]
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	61da      	str	r2, [r3, #28]
 8007632:	e031      	b.n	8007698 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	6a1b      	ldr	r3, [r3, #32]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d018      	beq.n	800766e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	6a1b      	ldr	r3, [r3, #32]
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	8a92      	ldrh	r2, [r2, #20]
 8007644:	4413      	add	r3, r2
 8007646:	3b01      	subs	r3, #1
 8007648:	68ba      	ldr	r2, [r7, #8]
 800764a:	8a92      	ldrh	r2, [r2, #20]
 800764c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007650:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8007652:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007654:	8b7b      	ldrh	r3, [r7, #26]
 8007656:	429a      	cmp	r2, r3
 8007658:	d90b      	bls.n	8007672 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800765a:	8b7b      	ldrh	r3, [r7, #26]
 800765c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800765e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	8a92      	ldrh	r2, [r2, #20]
 8007664:	fb03 f202 	mul.w	r2, r3, r2
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	61da      	str	r2, [r3, #28]
 800766c:	e001      	b.n	8007672 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800766e:	2301      	movs	r3, #1
 8007670:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	78db      	ldrb	r3, [r3, #3]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00a      	beq.n	8007690 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800767a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800767c:	68ba      	ldr	r2, [r7, #8]
 800767e:	8a92      	ldrh	r2, [r2, #20]
 8007680:	fb03 f202 	mul.w	r2, r3, r2
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	61da      	str	r2, [r3, #28]
 8007688:	e006      	b.n	8007698 <USB_HC_StartXfer+0x1a4>
 800768a:	bf00      	nop
 800768c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	6a1a      	ldr	r2, [r3, #32]
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	69db      	ldr	r3, [r3, #28]
 800769c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80076a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80076a2:	04d9      	lsls	r1, r3, #19
 80076a4:	4ba3      	ldr	r3, [pc, #652]	@ (8007934 <USB_HC_StartXfer+0x440>)
 80076a6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80076a8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	7d9b      	ldrb	r3, [r3, #22]
 80076ae:	075b      	lsls	r3, r3, #29
 80076b0:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80076b4:	69f9      	ldr	r1, [r7, #28]
 80076b6:	0148      	lsls	r0, r1, #5
 80076b8:	6a39      	ldr	r1, [r7, #32]
 80076ba:	4401      	add	r1, r0
 80076bc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80076c0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80076c2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80076c4:	79fb      	ldrb	r3, [r7, #7]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d009      	beq.n	80076de <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	6999      	ldr	r1, [r3, #24]
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	015a      	lsls	r2, r3, #5
 80076d2:	6a3b      	ldr	r3, [r7, #32]
 80076d4:	4413      	add	r3, r2
 80076d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076da:	460a      	mov	r2, r1
 80076dc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80076de:	6a3b      	ldr	r3, [r7, #32]
 80076e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	f003 0301 	and.w	r3, r3, #1
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	bf0c      	ite	eq
 80076ee:	2301      	moveq	r3, #1
 80076f0:	2300      	movne	r3, #0
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	015a      	lsls	r2, r3, #5
 80076fa:	6a3b      	ldr	r3, [r7, #32]
 80076fc:	4413      	add	r3, r2
 80076fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	69fa      	ldr	r2, [r7, #28]
 8007706:	0151      	lsls	r1, r2, #5
 8007708:	6a3a      	ldr	r2, [r7, #32]
 800770a:	440a      	add	r2, r1
 800770c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007710:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007714:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	015a      	lsls	r2, r3, #5
 800771a:	6a3b      	ldr	r3, [r7, #32]
 800771c:	4413      	add	r3, r2
 800771e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	7e7b      	ldrb	r3, [r7, #25]
 8007726:	075b      	lsls	r3, r3, #29
 8007728:	69f9      	ldr	r1, [r7, #28]
 800772a:	0148      	lsls	r0, r1, #5
 800772c:	6a39      	ldr	r1, [r7, #32]
 800772e:	4401      	add	r1, r0
 8007730:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007734:	4313      	orrs	r3, r2
 8007736:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	799b      	ldrb	r3, [r3, #6]
 800773c:	2b01      	cmp	r3, #1
 800773e:	f040 80c3 	bne.w	80078c8 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	7c5b      	ldrb	r3, [r3, #17]
 8007746:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007748:	68ba      	ldr	r2, [r7, #8]
 800774a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800774c:	4313      	orrs	r3, r2
 800774e:	69fa      	ldr	r2, [r7, #28]
 8007750:	0151      	lsls	r1, r2, #5
 8007752:	6a3a      	ldr	r2, [r7, #32]
 8007754:	440a      	add	r2, r1
 8007756:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800775a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800775e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	015a      	lsls	r2, r3, #5
 8007764:	6a3b      	ldr	r3, [r7, #32]
 8007766:	4413      	add	r3, r2
 8007768:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	69fa      	ldr	r2, [r7, #28]
 8007770:	0151      	lsls	r1, r2, #5
 8007772:	6a3a      	ldr	r2, [r7, #32]
 8007774:	440a      	add	r2, r1
 8007776:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800777a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800777e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	79db      	ldrb	r3, [r3, #7]
 8007784:	2b01      	cmp	r3, #1
 8007786:	d123      	bne.n	80077d0 <USB_HC_StartXfer+0x2dc>
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	78db      	ldrb	r3, [r3, #3]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d11f      	bne.n	80077d0 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	015a      	lsls	r2, r3, #5
 8007794:	6a3b      	ldr	r3, [r7, #32]
 8007796:	4413      	add	r3, r2
 8007798:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	69fa      	ldr	r2, [r7, #28]
 80077a0:	0151      	lsls	r1, r2, #5
 80077a2:	6a3a      	ldr	r2, [r7, #32]
 80077a4:	440a      	add	r2, r1
 80077a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077ae:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	015a      	lsls	r2, r3, #5
 80077b4:	6a3b      	ldr	r3, [r7, #32]
 80077b6:	4413      	add	r3, r2
 80077b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	69fa      	ldr	r2, [r7, #28]
 80077c0:	0151      	lsls	r1, r2, #5
 80077c2:	6a3a      	ldr	r2, [r7, #32]
 80077c4:	440a      	add	r2, r1
 80077c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077ce:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	7c9b      	ldrb	r3, [r3, #18]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d003      	beq.n	80077e0 <USB_HC_StartXfer+0x2ec>
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	7c9b      	ldrb	r3, [r3, #18]
 80077dc:	2b03      	cmp	r3, #3
 80077de:	d117      	bne.n	8007810 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d113      	bne.n	8007810 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	78db      	ldrb	r3, [r3, #3]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d10f      	bne.n	8007810 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	015a      	lsls	r2, r3, #5
 80077f4:	6a3b      	ldr	r3, [r7, #32]
 80077f6:	4413      	add	r3, r2
 80077f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	69fa      	ldr	r2, [r7, #28]
 8007800:	0151      	lsls	r1, r2, #5
 8007802:	6a3a      	ldr	r2, [r7, #32]
 8007804:	440a      	add	r2, r1
 8007806:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800780a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800780e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	7c9b      	ldrb	r3, [r3, #18]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d162      	bne.n	80078de <USB_HC_StartXfer+0x3ea>
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	78db      	ldrb	r3, [r3, #3]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d15e      	bne.n	80078de <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	3b01      	subs	r3, #1
 8007826:	2b03      	cmp	r3, #3
 8007828:	d858      	bhi.n	80078dc <USB_HC_StartXfer+0x3e8>
 800782a:	a201      	add	r2, pc, #4	@ (adr r2, 8007830 <USB_HC_StartXfer+0x33c>)
 800782c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007830:	08007841 	.word	0x08007841
 8007834:	08007863 	.word	0x08007863
 8007838:	08007885 	.word	0x08007885
 800783c:	080078a7 	.word	0x080078a7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	015a      	lsls	r2, r3, #5
 8007844:	6a3b      	ldr	r3, [r7, #32]
 8007846:	4413      	add	r3, r2
 8007848:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	69fa      	ldr	r2, [r7, #28]
 8007850:	0151      	lsls	r1, r2, #5
 8007852:	6a3a      	ldr	r2, [r7, #32]
 8007854:	440a      	add	r2, r1
 8007856:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800785a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800785e:	6053      	str	r3, [r2, #4]
          break;
 8007860:	e03d      	b.n	80078de <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	015a      	lsls	r2, r3, #5
 8007866:	6a3b      	ldr	r3, [r7, #32]
 8007868:	4413      	add	r3, r2
 800786a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	69fa      	ldr	r2, [r7, #28]
 8007872:	0151      	lsls	r1, r2, #5
 8007874:	6a3a      	ldr	r2, [r7, #32]
 8007876:	440a      	add	r2, r1
 8007878:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800787c:	f043 030e 	orr.w	r3, r3, #14
 8007880:	6053      	str	r3, [r2, #4]
          break;
 8007882:	e02c      	b.n	80078de <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	015a      	lsls	r2, r3, #5
 8007888:	6a3b      	ldr	r3, [r7, #32]
 800788a:	4413      	add	r3, r2
 800788c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	69fa      	ldr	r2, [r7, #28]
 8007894:	0151      	lsls	r1, r2, #5
 8007896:	6a3a      	ldr	r2, [r7, #32]
 8007898:	440a      	add	r2, r1
 800789a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800789e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80078a2:	6053      	str	r3, [r2, #4]
          break;
 80078a4:	e01b      	b.n	80078de <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	015a      	lsls	r2, r3, #5
 80078aa:	6a3b      	ldr	r3, [r7, #32]
 80078ac:	4413      	add	r3, r2
 80078ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	69fa      	ldr	r2, [r7, #28]
 80078b6:	0151      	lsls	r1, r2, #5
 80078b8:	6a3a      	ldr	r2, [r7, #32]
 80078ba:	440a      	add	r2, r1
 80078bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80078c4:	6053      	str	r3, [r2, #4]
          break;
 80078c6:	e00a      	b.n	80078de <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	015a      	lsls	r2, r3, #5
 80078cc:	6a3b      	ldr	r3, [r7, #32]
 80078ce:	4413      	add	r3, r2
 80078d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078d4:	461a      	mov	r2, r3
 80078d6:	2300      	movs	r3, #0
 80078d8:	6053      	str	r3, [r2, #4]
 80078da:	e000      	b.n	80078de <USB_HC_StartXfer+0x3ea>
          break;
 80078dc:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	015a      	lsls	r2, r3, #5
 80078e2:	6a3b      	ldr	r3, [r7, #32]
 80078e4:	4413      	add	r3, r2
 80078e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80078f4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	78db      	ldrb	r3, [r3, #3]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d004      	beq.n	8007908 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007904:	613b      	str	r3, [r7, #16]
 8007906:	e003      	b.n	8007910 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800790e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007916:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	015a      	lsls	r2, r3, #5
 800791c:	6a3b      	ldr	r3, [r7, #32]
 800791e:	4413      	add	r3, r2
 8007920:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007924:	461a      	mov	r2, r3
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800792a:	79fb      	ldrb	r3, [r7, #7]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d003      	beq.n	8007938 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007930:	2300      	movs	r3, #0
 8007932:	e055      	b.n	80079e0 <USB_HC_StartXfer+0x4ec>
 8007934:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	78db      	ldrb	r3, [r3, #3]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d14e      	bne.n	80079de <USB_HC_StartXfer+0x4ea>
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	6a1b      	ldr	r3, [r3, #32]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d04a      	beq.n	80079de <USB_HC_StartXfer+0x4ea>
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	79db      	ldrb	r3, [r3, #7]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d146      	bne.n	80079de <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	7c9b      	ldrb	r3, [r3, #18]
 8007954:	2b03      	cmp	r3, #3
 8007956:	d831      	bhi.n	80079bc <USB_HC_StartXfer+0x4c8>
 8007958:	a201      	add	r2, pc, #4	@ (adr r2, 8007960 <USB_HC_StartXfer+0x46c>)
 800795a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795e:	bf00      	nop
 8007960:	08007971 	.word	0x08007971
 8007964:	08007995 	.word	0x08007995
 8007968:	08007971 	.word	0x08007971
 800796c:	08007995 	.word	0x08007995
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	6a1b      	ldr	r3, [r3, #32]
 8007974:	3303      	adds	r3, #3
 8007976:	089b      	lsrs	r3, r3, #2
 8007978:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800797a:	8afa      	ldrh	r2, [r7, #22]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007980:	b29b      	uxth	r3, r3
 8007982:	429a      	cmp	r2, r3
 8007984:	d91c      	bls.n	80079c0 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	f043 0220 	orr.w	r2, r3, #32
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	619a      	str	r2, [r3, #24]
        }
        break;
 8007992:	e015      	b.n	80079c0 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	6a1b      	ldr	r3, [r3, #32]
 8007998:	3303      	adds	r3, #3
 800799a:	089b      	lsrs	r3, r3, #2
 800799c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800799e:	8afa      	ldrh	r2, [r7, #22]
 80079a0:	6a3b      	ldr	r3, [r7, #32]
 80079a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d90a      	bls.n	80079c4 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	619a      	str	r2, [r3, #24]
        }
        break;
 80079ba:	e003      	b.n	80079c4 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80079bc:	bf00      	nop
 80079be:	e002      	b.n	80079c6 <USB_HC_StartXfer+0x4d2>
        break;
 80079c0:	bf00      	nop
 80079c2:	e000      	b.n	80079c6 <USB_HC_StartXfer+0x4d2>
        break;
 80079c4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	6999      	ldr	r1, [r3, #24]
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	785a      	ldrb	r2, [r3, #1]
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	6a1b      	ldr	r3, [r3, #32]
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	2000      	movs	r0, #0
 80079d6:	9000      	str	r0, [sp, #0]
 80079d8:	68f8      	ldr	r0, [r7, #12]
 80079da:	f7ff f9c9 	bl	8006d70 <USB_WritePacket>
  }

  return HAL_OK;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3728      	adds	r7, #40	@ 0x28
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079fa:	695b      	ldr	r3, [r3, #20]
 80079fc:	b29b      	uxth	r3, r3
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3714      	adds	r7, #20
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b089      	sub	sp, #36	@ 0x24
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	460b      	mov	r3, r1
 8007a14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007a1a:	78fb      	ldrb	r3, [r7, #3]
 8007a1c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	015a      	lsls	r2, r3, #5
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	4413      	add	r3, r2
 8007a2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	0c9b      	lsrs	r3, r3, #18
 8007a32:	f003 0303 	and.w	r3, r3, #3
 8007a36:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	015a      	lsls	r2, r3, #5
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	4413      	add	r3, r2
 8007a40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	0fdb      	lsrs	r3, r3, #31
 8007a48:	f003 0301 	and.w	r3, r3, #1
 8007a4c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	015a      	lsls	r2, r3, #5
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	4413      	add	r3, r2
 8007a56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	0fdb      	lsrs	r3, r3, #31
 8007a5e:	f003 0301 	and.w	r3, r3, #1
 8007a62:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	f003 0320 	and.w	r3, r3, #32
 8007a6c:	2b20      	cmp	r3, #32
 8007a6e:	d10d      	bne.n	8007a8c <USB_HC_Halt+0x82>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d10a      	bne.n	8007a8c <USB_HC_Halt+0x82>
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d005      	beq.n	8007a88 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d002      	beq.n	8007a88 <USB_HC_Halt+0x7e>
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	2b03      	cmp	r3, #3
 8007a86:	d101      	bne.n	8007a8c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	e0d8      	b.n	8007c3e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d002      	beq.n	8007a98 <USB_HC_Halt+0x8e>
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d173      	bne.n	8007b80 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	015a      	lsls	r2, r3, #5
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	69ba      	ldr	r2, [r7, #24]
 8007aa8:	0151      	lsls	r1, r2, #5
 8007aaa:	69fa      	ldr	r2, [r7, #28]
 8007aac:	440a      	add	r2, r1
 8007aae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ab2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ab6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	f003 0320 	and.w	r3, r3, #32
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d14a      	bne.n	8007b5a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d133      	bne.n	8007b38 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	015a      	lsls	r2, r3, #5
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	69ba      	ldr	r2, [r7, #24]
 8007ae0:	0151      	lsls	r1, r2, #5
 8007ae2:	69fa      	ldr	r2, [r7, #28]
 8007ae4:	440a      	add	r2, r1
 8007ae6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007aea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007aee:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	015a      	lsls	r2, r3, #5
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	4413      	add	r3, r2
 8007af8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	69ba      	ldr	r2, [r7, #24]
 8007b00:	0151      	lsls	r1, r2, #5
 8007b02:	69fa      	ldr	r2, [r7, #28]
 8007b04:	440a      	add	r2, r1
 8007b06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b0e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	3301      	adds	r3, #1
 8007b14:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007b1c:	d82e      	bhi.n	8007b7c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	015a      	lsls	r2, r3, #5
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	4413      	add	r3, r2
 8007b26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b34:	d0ec      	beq.n	8007b10 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b36:	e081      	b.n	8007c3c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	015a      	lsls	r2, r3, #5
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	4413      	add	r3, r2
 8007b40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	69ba      	ldr	r2, [r7, #24]
 8007b48:	0151      	lsls	r1, r2, #5
 8007b4a:	69fa      	ldr	r2, [r7, #28]
 8007b4c:	440a      	add	r2, r1
 8007b4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b56:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b58:	e070      	b.n	8007c3c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b5a:	69bb      	ldr	r3, [r7, #24]
 8007b5c:	015a      	lsls	r2, r3, #5
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	4413      	add	r3, r2
 8007b62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	69ba      	ldr	r2, [r7, #24]
 8007b6a:	0151      	lsls	r1, r2, #5
 8007b6c:	69fa      	ldr	r2, [r7, #28]
 8007b6e:	440a      	add	r2, r1
 8007b70:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b74:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b78:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b7a:	e05f      	b.n	8007c3c <USB_HC_Halt+0x232>
            break;
 8007b7c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b7e:	e05d      	b.n	8007c3c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	015a      	lsls	r2, r3, #5
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	4413      	add	r3, r2
 8007b88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	69ba      	ldr	r2, [r7, #24]
 8007b90:	0151      	lsls	r1, r2, #5
 8007b92:	69fa      	ldr	r2, [r7, #28]
 8007b94:	440a      	add	r2, r1
 8007b96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b9a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007b9e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d133      	bne.n	8007c18 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	015a      	lsls	r2, r3, #5
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	69ba      	ldr	r2, [r7, #24]
 8007bc0:	0151      	lsls	r1, r2, #5
 8007bc2:	69fa      	ldr	r2, [r7, #28]
 8007bc4:	440a      	add	r2, r1
 8007bc6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007bce:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	015a      	lsls	r2, r3, #5
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	69ba      	ldr	r2, [r7, #24]
 8007be0:	0151      	lsls	r1, r2, #5
 8007be2:	69fa      	ldr	r2, [r7, #28]
 8007be4:	440a      	add	r2, r1
 8007be6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007bee:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007bfc:	d81d      	bhi.n	8007c3a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	015a      	lsls	r2, r3, #5
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	4413      	add	r3, r2
 8007c06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c14:	d0ec      	beq.n	8007bf0 <USB_HC_Halt+0x1e6>
 8007c16:	e011      	b.n	8007c3c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	015a      	lsls	r2, r3, #5
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	4413      	add	r3, r2
 8007c20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	69ba      	ldr	r2, [r7, #24]
 8007c28:	0151      	lsls	r1, r2, #5
 8007c2a:	69fa      	ldr	r2, [r7, #28]
 8007c2c:	440a      	add	r2, r1
 8007c2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007c36:	6013      	str	r3, [r2, #0]
 8007c38:	e000      	b.n	8007c3c <USB_HC_Halt+0x232>
          break;
 8007c3a:	bf00      	nop
    }
  }

  return HAL_OK;
 8007c3c:	2300      	movs	r3, #0
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3724      	adds	r7, #36	@ 0x24
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
	...

08007c4c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b087      	sub	sp, #28
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	460b      	mov	r3, r1
 8007c56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007c5c:	78fb      	ldrb	r3, [r7, #3]
 8007c5e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007c60:	2301      	movs	r3, #1
 8007c62:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	04da      	lsls	r2, r3, #19
 8007c68:	4b15      	ldr	r3, [pc, #84]	@ (8007cc0 <USB_DoPing+0x74>)
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	693a      	ldr	r2, [r7, #16]
 8007c6e:	0151      	lsls	r1, r2, #5
 8007c70:	697a      	ldr	r2, [r7, #20]
 8007c72:	440a      	add	r2, r1
 8007c74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c78:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007c7c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	015a      	lsls	r2, r3, #5
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	4413      	add	r3, r2
 8007c86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007c94:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007c9c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	015a      	lsls	r2, r3, #5
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007caa:	461a      	mov	r2, r3
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	371c      	adds	r7, #28
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	1ff80000 	.word	0x1ff80000

08007cc4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b088      	sub	sp, #32
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f7fe ff8c 	bl	8006bf6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007cde:	2110      	movs	r1, #16
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f7fe ffe5 	bl	8006cb0 <USB_FlushTxFifo>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d001      	beq.n	8007cf0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f7ff f80f 	bl	8006d14 <USB_FlushRxFifo>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d001      	beq.n	8007d00 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007d00:	2300      	movs	r3, #0
 8007d02:	61bb      	str	r3, [r7, #24]
 8007d04:	e01f      	b.n	8007d46 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	015a      	lsls	r2, r3, #5
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007d1c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007d24:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007d2c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	015a      	lsls	r2, r3, #5
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	4413      	add	r3, r2
 8007d36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	3301      	adds	r3, #1
 8007d44:	61bb      	str	r3, [r7, #24]
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	2b0f      	cmp	r3, #15
 8007d4a:	d9dc      	bls.n	8007d06 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	61bb      	str	r3, [r7, #24]
 8007d50:	e034      	b.n	8007dbc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007d52:	69bb      	ldr	r3, [r7, #24]
 8007d54:	015a      	lsls	r2, r3, #5
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	4413      	add	r3, r2
 8007d5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007d68:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007d70:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007d78:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	015a      	lsls	r2, r3, #5
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	4413      	add	r3, r2
 8007d82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d86:	461a      	mov	r2, r3
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d98:	d80c      	bhi.n	8007db4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	015a      	lsls	r2, r3, #5
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	4413      	add	r3, r2
 8007da2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007dac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007db0:	d0ec      	beq.n	8007d8c <USB_StopHost+0xc8>
 8007db2:	e000      	b.n	8007db6 <USB_StopHost+0xf2>
        break;
 8007db4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	3301      	adds	r3, #1
 8007dba:	61bb      	str	r3, [r7, #24]
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	2b0f      	cmp	r3, #15
 8007dc0:	d9c7      	bls.n	8007d52 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007dc8:	461a      	mov	r2, r3
 8007dca:	f04f 33ff 	mov.w	r3, #4294967295
 8007dce:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8007dd6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f7fe fefb 	bl	8006bd4 <USB_EnableGlobalInt>

  return ret;
 8007dde:	7ffb      	ldrb	r3, [r7, #31]
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3720      	adds	r7, #32
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007de8:	b590      	push	{r4, r7, lr}
 8007dea:	b089      	sub	sp, #36	@ 0x24
 8007dec:	af04      	add	r7, sp, #16
 8007dee:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007df0:	2301      	movs	r3, #1
 8007df2:	2202      	movs	r2, #2
 8007df4:	2102      	movs	r1, #2
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 fc85 	bl	8008706 <USBH_FindInterface>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
 8007e02:	2bff      	cmp	r3, #255	@ 0xff
 8007e04:	d002      	beq.n	8007e0c <USBH_CDC_InterfaceInit+0x24>
 8007e06:	7bfb      	ldrb	r3, [r7, #15]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d901      	bls.n	8007e10 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007e0c:	2302      	movs	r3, #2
 8007e0e:	e13d      	b.n	800808c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007e10:	7bfb      	ldrb	r3, [r7, #15]
 8007e12:	4619      	mov	r1, r3
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 fc5a 	bl	80086ce <USBH_SelectInterface>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007e1e:	7bbb      	ldrb	r3, [r7, #14]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d001      	beq.n	8007e28 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007e24:	2302      	movs	r3, #2
 8007e26:	e131      	b.n	800808c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007e2e:	2050      	movs	r0, #80	@ 0x50
 8007e30:	f002 fb6a 	bl	800a508 <malloc>
 8007e34:	4603      	mov	r3, r0
 8007e36:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e3e:	69db      	ldr	r3, [r3, #28]
 8007e40:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d101      	bne.n	8007e4c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007e48:	2302      	movs	r3, #2
 8007e4a:	e11f      	b.n	800808c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007e4c:	2250      	movs	r2, #80	@ 0x50
 8007e4e:	2100      	movs	r1, #0
 8007e50:	68b8      	ldr	r0, [r7, #8]
 8007e52:	f002 fd2e 	bl	800a8b2 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007e56:	7bfb      	ldrb	r3, [r7, #15]
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	211a      	movs	r1, #26
 8007e5c:	fb01 f303 	mul.w	r3, r1, r3
 8007e60:	4413      	add	r3, r2
 8007e62:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	b25b      	sxtb	r3, r3
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	da15      	bge.n	8007e9a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007e6e:	7bfb      	ldrb	r3, [r7, #15]
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	211a      	movs	r1, #26
 8007e74:	fb01 f303 	mul.w	r3, r1, r3
 8007e78:	4413      	add	r3, r2
 8007e7a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007e7e:	781a      	ldrb	r2, [r3, #0]
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007e84:	7bfb      	ldrb	r3, [r7, #15]
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	211a      	movs	r1, #26
 8007e8a:	fb01 f303 	mul.w	r3, r1, r3
 8007e8e:	4413      	add	r3, r2
 8007e90:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007e94:	881a      	ldrh	r2, [r3, #0]
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	785b      	ldrb	r3, [r3, #1]
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f001 ffbe 	bl	8009e22 <USBH_AllocPipe>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	7819      	ldrb	r1, [r3, #0]
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	7858      	ldrb	r0, [r3, #1]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007ec2:	68ba      	ldr	r2, [r7, #8]
 8007ec4:	8952      	ldrh	r2, [r2, #10]
 8007ec6:	9202      	str	r2, [sp, #8]
 8007ec8:	2203      	movs	r2, #3
 8007eca:	9201      	str	r2, [sp, #4]
 8007ecc:	9300      	str	r3, [sp, #0]
 8007ece:	4623      	mov	r3, r4
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f001 ff76 	bl	8009dc4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	2200      	movs	r2, #0
 8007ede:	4619      	mov	r1, r3
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f002 fa8b 	bl	800a3fc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	2200      	movs	r2, #0
 8007eea:	210a      	movs	r1, #10
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fc0a 	bl	8008706 <USBH_FindInterface>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007ef6:	7bfb      	ldrb	r3, [r7, #15]
 8007ef8:	2bff      	cmp	r3, #255	@ 0xff
 8007efa:	d002      	beq.n	8007f02 <USBH_CDC_InterfaceInit+0x11a>
 8007efc:	7bfb      	ldrb	r3, [r7, #15]
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d901      	bls.n	8007f06 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007f02:	2302      	movs	r3, #2
 8007f04:	e0c2      	b.n	800808c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007f06:	7bfb      	ldrb	r3, [r7, #15]
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	211a      	movs	r1, #26
 8007f0c:	fb01 f303 	mul.w	r3, r1, r3
 8007f10:	4413      	add	r3, r2
 8007f12:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	b25b      	sxtb	r3, r3
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	da16      	bge.n	8007f4c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	211a      	movs	r1, #26
 8007f24:	fb01 f303 	mul.w	r3, r1, r3
 8007f28:	4413      	add	r3, r2
 8007f2a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007f2e:	781a      	ldrb	r2, [r3, #0]
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007f34:	7bfb      	ldrb	r3, [r7, #15]
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	211a      	movs	r1, #26
 8007f3a:	fb01 f303 	mul.w	r3, r1, r3
 8007f3e:	4413      	add	r3, r2
 8007f40:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007f44:	881a      	ldrh	r2, [r3, #0]
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	835a      	strh	r2, [r3, #26]
 8007f4a:	e015      	b.n	8007f78 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007f4c:	7bfb      	ldrb	r3, [r7, #15]
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	211a      	movs	r1, #26
 8007f52:	fb01 f303 	mul.w	r3, r1, r3
 8007f56:	4413      	add	r3, r2
 8007f58:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007f5c:	781a      	ldrb	r2, [r3, #0]
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007f62:	7bfb      	ldrb	r3, [r7, #15]
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	211a      	movs	r1, #26
 8007f68:	fb01 f303 	mul.w	r3, r1, r3
 8007f6c:	4413      	add	r3, r2
 8007f6e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007f72:	881a      	ldrh	r2, [r3, #0]
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007f78:	7bfb      	ldrb	r3, [r7, #15]
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	211a      	movs	r1, #26
 8007f7e:	fb01 f303 	mul.w	r3, r1, r3
 8007f82:	4413      	add	r3, r2
 8007f84:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	b25b      	sxtb	r3, r3
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	da16      	bge.n	8007fbe <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007f90:	7bfb      	ldrb	r3, [r7, #15]
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	211a      	movs	r1, #26
 8007f96:	fb01 f303 	mul.w	r3, r1, r3
 8007f9a:	4413      	add	r3, r2
 8007f9c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007fa0:	781a      	ldrb	r2, [r3, #0]
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007fa6:	7bfb      	ldrb	r3, [r7, #15]
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	211a      	movs	r1, #26
 8007fac:	fb01 f303 	mul.w	r3, r1, r3
 8007fb0:	4413      	add	r3, r2
 8007fb2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007fb6:	881a      	ldrh	r2, [r3, #0]
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	835a      	strh	r2, [r3, #26]
 8007fbc:	e015      	b.n	8007fea <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007fbe:	7bfb      	ldrb	r3, [r7, #15]
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	211a      	movs	r1, #26
 8007fc4:	fb01 f303 	mul.w	r3, r1, r3
 8007fc8:	4413      	add	r3, r2
 8007fca:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007fce:	781a      	ldrb	r2, [r3, #0]
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007fd4:	7bfb      	ldrb	r3, [r7, #15]
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	211a      	movs	r1, #26
 8007fda:	fb01 f303 	mul.w	r3, r1, r3
 8007fde:	4413      	add	r3, r2
 8007fe0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007fe4:	881a      	ldrh	r2, [r3, #0]
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	7b9b      	ldrb	r3, [r3, #14]
 8007fee:	4619      	mov	r1, r3
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f001 ff16 	bl	8009e22 <USBH_AllocPipe>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	7bdb      	ldrb	r3, [r3, #15]
 8008002:	4619      	mov	r1, r3
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f001 ff0c 	bl	8009e22 <USBH_AllocPipe>
 800800a:	4603      	mov	r3, r0
 800800c:	461a      	mov	r2, r3
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	7b59      	ldrb	r1, [r3, #13]
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	7b98      	ldrb	r0, [r3, #14]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008026:	68ba      	ldr	r2, [r7, #8]
 8008028:	8b12      	ldrh	r2, [r2, #24]
 800802a:	9202      	str	r2, [sp, #8]
 800802c:	2202      	movs	r2, #2
 800802e:	9201      	str	r2, [sp, #4]
 8008030:	9300      	str	r3, [sp, #0]
 8008032:	4623      	mov	r3, r4
 8008034:	4602      	mov	r2, r0
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f001 fec4 	bl	8009dc4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	7b19      	ldrb	r1, [r3, #12]
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	7bd8      	ldrb	r0, [r3, #15]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008050:	68ba      	ldr	r2, [r7, #8]
 8008052:	8b52      	ldrh	r2, [r2, #26]
 8008054:	9202      	str	r2, [sp, #8]
 8008056:	2202      	movs	r2, #2
 8008058:	9201      	str	r2, [sp, #4]
 800805a:	9300      	str	r3, [sp, #0]
 800805c:	4623      	mov	r3, r4
 800805e:	4602      	mov	r2, r0
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f001 feaf 	bl	8009dc4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	2200      	movs	r2, #0
 800806a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	7b5b      	ldrb	r3, [r3, #13]
 8008072:	2200      	movs	r2, #0
 8008074:	4619      	mov	r1, r3
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f002 f9c0 	bl	800a3fc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	7b1b      	ldrb	r3, [r3, #12]
 8008080:	2200      	movs	r2, #0
 8008082:	4619      	mov	r1, r3
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f002 f9b9 	bl	800a3fc <USBH_LL_SetToggle>

  return USBH_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3714      	adds	r7, #20
 8008090:	46bd      	mov	sp, r7
 8008092:	bd90      	pop	{r4, r7, pc}

08008094 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80080a2:	69db      	ldr	r3, [r3, #28]
 80080a4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00e      	beq.n	80080cc <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	4619      	mov	r1, r3
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f001 fea4 	bl	8009e02 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	4619      	mov	r1, r3
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f001 fecf 	bl	8009e64 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2200      	movs	r2, #0
 80080ca:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	7b1b      	ldrb	r3, [r3, #12]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d00e      	beq.n	80080f2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	7b1b      	ldrb	r3, [r3, #12]
 80080d8:	4619      	mov	r1, r3
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f001 fe91 	bl	8009e02 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	7b1b      	ldrb	r3, [r3, #12]
 80080e4:	4619      	mov	r1, r3
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f001 febc 	bl	8009e64 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2200      	movs	r2, #0
 80080f0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	7b5b      	ldrb	r3, [r3, #13]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00e      	beq.n	8008118 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	7b5b      	ldrb	r3, [r3, #13]
 80080fe:	4619      	mov	r1, r3
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f001 fe7e 	bl	8009e02 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	7b5b      	ldrb	r3, [r3, #13]
 800810a:	4619      	mov	r1, r3
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f001 fea9 	bl	8009e64 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800811e:	69db      	ldr	r3, [r3, #28]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00b      	beq.n	800813c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800812a:	69db      	ldr	r3, [r3, #28]
 800812c:	4618      	mov	r0, r3
 800812e:	f002 f9f3 	bl	800a518 <free>
    phost->pActiveClass->pData = 0U;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008138:	2200      	movs	r2, #0
 800813a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b084      	sub	sp, #16
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008154:	69db      	ldr	r3, [r3, #28]
 8008156:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	3340      	adds	r3, #64	@ 0x40
 800815c:	4619      	mov	r1, r3
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 f8b1 	bl	80082c6 <GetLineCoding>
 8008164:	4603      	mov	r3, r0
 8008166:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008168:	7afb      	ldrb	r3, [r7, #11]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d105      	bne.n	800817a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008174:	2102      	movs	r1, #2
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800817a:	7afb      	ldrb	r3, [r7, #11]
}
 800817c:	4618      	mov	r0, r3
 800817e:	3710      	adds	r7, #16
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800818c:	2301      	movs	r3, #1
 800818e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008190:	2300      	movs	r3, #0
 8008192:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800819a:	69db      	ldr	r3, [r3, #28]
 800819c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80081a4:	2b04      	cmp	r3, #4
 80081a6:	d877      	bhi.n	8008298 <USBH_CDC_Process+0x114>
 80081a8:	a201      	add	r2, pc, #4	@ (adr r2, 80081b0 <USBH_CDC_Process+0x2c>)
 80081aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ae:	bf00      	nop
 80081b0:	080081c5 	.word	0x080081c5
 80081b4:	080081cb 	.word	0x080081cb
 80081b8:	080081fb 	.word	0x080081fb
 80081bc:	0800826f 	.word	0x0800826f
 80081c0:	0800827d 	.word	0x0800827d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80081c4:	2300      	movs	r3, #0
 80081c6:	73fb      	strb	r3, [r7, #15]
      break;
 80081c8:	e06d      	b.n	80082a6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081ce:	4619      	mov	r1, r3
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 f897 	bl	8008304 <SetLineCoding>
 80081d6:	4603      	mov	r3, r0
 80081d8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80081da:	7bbb      	ldrb	r3, [r7, #14]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d104      	bne.n	80081ea <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	2202      	movs	r2, #2
 80081e4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80081e8:	e058      	b.n	800829c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80081ea:	7bbb      	ldrb	r3, [r7, #14]
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d055      	beq.n	800829c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	2204      	movs	r2, #4
 80081f4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80081f8:	e050      	b.n	800829c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	3340      	adds	r3, #64	@ 0x40
 80081fe:	4619      	mov	r1, r3
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 f860 	bl	80082c6 <GetLineCoding>
 8008206:	4603      	mov	r3, r0
 8008208:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800820a:	7bbb      	ldrb	r3, [r7, #14]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d126      	bne.n	800825e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	2200      	movs	r2, #0
 8008214:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008222:	791b      	ldrb	r3, [r3, #4]
 8008224:	429a      	cmp	r2, r3
 8008226:	d13b      	bne.n	80082a0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008232:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008234:	429a      	cmp	r2, r3
 8008236:	d133      	bne.n	80082a0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008242:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008244:	429a      	cmp	r2, r3
 8008246:	d12b      	bne.n	80082a0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008250:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008252:	429a      	cmp	r2, r3
 8008254:	d124      	bne.n	80082a0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 f958 	bl	800850c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800825c:	e020      	b.n	80082a0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800825e:	7bbb      	ldrb	r3, [r7, #14]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d01d      	beq.n	80082a0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	2204      	movs	r2, #4
 8008268:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800826c:	e018      	b.n	80082a0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 f867 	bl	8008342 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 f8da 	bl	800842e <CDC_ProcessReception>
      break;
 800827a:	e014      	b.n	80082a6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800827c:	2100      	movs	r1, #0
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f001 f81a 	bl	80092b8 <USBH_ClrFeature>
 8008284:	4603      	mov	r3, r0
 8008286:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008288:	7bbb      	ldrb	r3, [r7, #14]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d10a      	bne.n	80082a4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8008296:	e005      	b.n	80082a4 <USBH_CDC_Process+0x120>

    default:
      break;
 8008298:	bf00      	nop
 800829a:	e004      	b.n	80082a6 <USBH_CDC_Process+0x122>
      break;
 800829c:	bf00      	nop
 800829e:	e002      	b.n	80082a6 <USBH_CDC_Process+0x122>
      break;
 80082a0:	bf00      	nop
 80082a2:	e000      	b.n	80082a6 <USBH_CDC_Process+0x122>
      break;
 80082a4:	bf00      	nop

  }

  return status;
 80082a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3710      	adds	r7, #16
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	370c      	adds	r7, #12
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr

080082c6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b082      	sub	sp, #8
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
 80082ce:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	22a1      	movs	r2, #161	@ 0xa1
 80082d4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2221      	movs	r2, #33	@ 0x21
 80082da:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2200      	movs	r2, #0
 80082e6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2207      	movs	r2, #7
 80082ec:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	2207      	movs	r2, #7
 80082f2:	4619      	mov	r1, r3
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f001 fb14 	bl	8009922 <USBH_CtlReq>
 80082fa:	4603      	mov	r3, r0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3708      	adds	r7, #8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2221      	movs	r2, #33	@ 0x21
 8008312:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2220      	movs	r2, #32
 8008318:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2207      	movs	r2, #7
 800832a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	2207      	movs	r2, #7
 8008330:	4619      	mov	r1, r3
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f001 faf5 	bl	8009922 <USBH_CtlReq>
 8008338:	4603      	mov	r3, r0
}
 800833a:	4618      	mov	r0, r3
 800833c:	3708      	adds	r7, #8
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}

08008342 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008342:	b580      	push	{r7, lr}
 8008344:	b086      	sub	sp, #24
 8008346:	af02      	add	r7, sp, #8
 8008348:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008350:	69db      	ldr	r3, [r3, #28]
 8008352:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008354:	2300      	movs	r3, #0
 8008356:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800835e:	2b01      	cmp	r3, #1
 8008360:	d002      	beq.n	8008368 <CDC_ProcessTransmission+0x26>
 8008362:	2b02      	cmp	r3, #2
 8008364:	d023      	beq.n	80083ae <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008366:	e05e      	b.n	8008426 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800836c:	68fa      	ldr	r2, [r7, #12]
 800836e:	8b12      	ldrh	r2, [r2, #24]
 8008370:	4293      	cmp	r3, r2
 8008372:	d90b      	bls.n	800838c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	69d9      	ldr	r1, [r3, #28]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	8b1a      	ldrh	r2, [r3, #24]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	7b5b      	ldrb	r3, [r3, #13]
 8008380:	2001      	movs	r0, #1
 8008382:	9000      	str	r0, [sp, #0]
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f001 fcda 	bl	8009d3e <USBH_BulkSendData>
 800838a:	e00b      	b.n	80083a4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8008394:	b29a      	uxth	r2, r3
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	7b5b      	ldrb	r3, [r3, #13]
 800839a:	2001      	movs	r0, #1
 800839c:	9000      	str	r0, [sp, #0]
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f001 fccd 	bl	8009d3e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2202      	movs	r2, #2
 80083a8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80083ac:	e03b      	b.n	8008426 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	7b5b      	ldrb	r3, [r3, #13]
 80083b2:	4619      	mov	r1, r3
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f001 fff7 	bl	800a3a8 <USBH_LL_GetURBState>
 80083ba:	4603      	mov	r3, r0
 80083bc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80083be:	7afb      	ldrb	r3, [r7, #11]
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d128      	bne.n	8008416 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	8b12      	ldrh	r2, [r2, #24]
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d90e      	bls.n	80083ee <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	8b12      	ldrh	r2, [r2, #24]
 80083d8:	1a9a      	subs	r2, r3, r2
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	69db      	ldr	r3, [r3, #28]
 80083e2:	68fa      	ldr	r2, [r7, #12]
 80083e4:	8b12      	ldrh	r2, [r2, #24]
 80083e6:	441a      	add	r2, r3
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	61da      	str	r2, [r3, #28]
 80083ec:	e002      	b.n	80083f4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2200      	movs	r2, #0
 80083f2:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d004      	beq.n	8008406 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008404:	e00e      	b.n	8008424 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2200      	movs	r2, #0
 800840a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 f868 	bl	80084e4 <USBH_CDC_TransmitCallback>
      break;
 8008414:	e006      	b.n	8008424 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008416:	7afb      	ldrb	r3, [r7, #11]
 8008418:	2b02      	cmp	r3, #2
 800841a:	d103      	bne.n	8008424 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008424:	bf00      	nop
  }
}
 8008426:	bf00      	nop
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}

0800842e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800842e:	b580      	push	{r7, lr}
 8008430:	b086      	sub	sp, #24
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800843c:	69db      	ldr	r3, [r3, #28]
 800843e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008440:	2300      	movs	r3, #0
 8008442:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800844a:	2b03      	cmp	r3, #3
 800844c:	d002      	beq.n	8008454 <CDC_ProcessReception+0x26>
 800844e:	2b04      	cmp	r3, #4
 8008450:	d00e      	beq.n	8008470 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008452:	e043      	b.n	80084dc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	6a19      	ldr	r1, [r3, #32]
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	8b5a      	ldrh	r2, [r3, #26]
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	7b1b      	ldrb	r3, [r3, #12]
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f001 fc91 	bl	8009d88 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	2204      	movs	r2, #4
 800846a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800846e:	e035      	b.n	80084dc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	7b1b      	ldrb	r3, [r3, #12]
 8008474:	4619      	mov	r1, r3
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f001 ff96 	bl	800a3a8 <USBH_LL_GetURBState>
 800847c:	4603      	mov	r3, r0
 800847e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008480:	7cfb      	ldrb	r3, [r7, #19]
 8008482:	2b01      	cmp	r3, #1
 8008484:	d129      	bne.n	80084da <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	7b1b      	ldrb	r3, [r3, #12]
 800848a:	4619      	mov	r1, r3
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f001 fef9 	bl	800a284 <USBH_LL_GetLastXferSize>
 8008492:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	429a      	cmp	r2, r3
 800849c:	d016      	beq.n	80084cc <CDC_ProcessReception+0x9e>
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	8b5b      	ldrh	r3, [r3, #26]
 80084a2:	461a      	mov	r2, r3
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d910      	bls.n	80084cc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	1ad2      	subs	r2, r2, r3
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	6a1a      	ldr	r2, [r3, #32]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	441a      	add	r2, r3
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	2203      	movs	r2, #3
 80084c6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80084ca:	e006      	b.n	80084da <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 f80f 	bl	80084f8 <USBH_CDC_ReceiveCallback>
      break;
 80084da:	bf00      	nop
  }
}
 80084dc:	bf00      	nop
 80084de:	3718      	adds	r7, #24
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80084ec:	bf00      	nop
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008500:	bf00      	nop
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008514:	bf00      	nop
 8008516:	370c      	adds	r7, #12
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	60b9      	str	r1, [r7, #8]
 800852a:	4613      	mov	r3, r2
 800852c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d101      	bne.n	8008538 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008534:	2302      	movs	r3, #2
 8008536:	e029      	b.n	800858c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	79fa      	ldrb	r2, [r7, #7]
 800853c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2200      	movs	r2, #0
 8008544:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2200      	movs	r2, #0
 800854c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008550:	68f8      	ldr	r0, [r7, #12]
 8008552:	f000 f81f 	bl	8008594 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2200      	movs	r2, #0
 800855a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2200      	movs	r2, #0
 800856a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2200      	movs	r2, #0
 8008572:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d003      	beq.n	8008584 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	68ba      	ldr	r2, [r7, #8]
 8008580:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	f001 fdbf 	bl	800a108 <USBH_LL_Init>

  return USBH_OK;
 800858a:	2300      	movs	r3, #0
}
 800858c:	4618      	mov	r0, r3
 800858e:	3710      	adds	r7, #16
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800859c:	2300      	movs	r3, #0
 800859e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80085a0:	2300      	movs	r3, #0
 80085a2:	60fb      	str	r3, [r7, #12]
 80085a4:	e009      	b.n	80085ba <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	33e0      	adds	r3, #224	@ 0xe0
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	4413      	add	r3, r2
 80085b0:	2200      	movs	r2, #0
 80085b2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	3301      	adds	r3, #1
 80085b8:	60fb      	str	r3, [r7, #12]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2b0f      	cmp	r3, #15
 80085be:	d9f2      	bls.n	80085a6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80085c0:	2300      	movs	r3, #0
 80085c2:	60fb      	str	r3, [r7, #12]
 80085c4:	e009      	b.n	80085da <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	4413      	add	r3, r2
 80085cc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80085d0:	2200      	movs	r2, #0
 80085d2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	3301      	adds	r3, #1
 80085d8:	60fb      	str	r3, [r7, #12]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085e0:	d3f1      	bcc.n	80085c6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2201      	movs	r2, #1
 80085f2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2240      	movs	r2, #64	@ 0x40
 8008606:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2201      	movs	r2, #1
 800861a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	331c      	adds	r3, #28
 8008632:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008636:	2100      	movs	r1, #0
 8008638:	4618      	mov	r0, r3
 800863a:	f002 f93a 	bl	800a8b2 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008644:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008648:	2100      	movs	r1, #0
 800864a:	4618      	mov	r0, r3
 800864c:	f002 f931 	bl	800a8b2 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008656:	2212      	movs	r2, #18
 8008658:	2100      	movs	r1, #0
 800865a:	4618      	mov	r0, r3
 800865c:	f002 f929 	bl	800a8b2 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008666:	223e      	movs	r2, #62	@ 0x3e
 8008668:	2100      	movs	r1, #0
 800866a:	4618      	mov	r0, r3
 800866c:	f002 f921 	bl	800a8b2 <memset>

  return USBH_OK;
 8008670:	2300      	movs	r3, #0
}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800867a:	b480      	push	{r7}
 800867c:	b085      	sub	sp, #20
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
 8008682:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008684:	2300      	movs	r3, #0
 8008686:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d016      	beq.n	80086bc <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008694:	2b00      	cmp	r3, #0
 8008696:	d10e      	bne.n	80086b6 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800869e:	1c59      	adds	r1, r3, #1
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	33de      	adds	r3, #222	@ 0xde
 80086aa:	6839      	ldr	r1, [r7, #0]
 80086ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80086b0:	2300      	movs	r3, #0
 80086b2:	73fb      	strb	r3, [r7, #15]
 80086b4:	e004      	b.n	80086c0 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80086b6:	2302      	movs	r3, #2
 80086b8:	73fb      	strb	r3, [r7, #15]
 80086ba:	e001      	b.n	80086c0 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80086bc:	2302      	movs	r3, #2
 80086be:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80086c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3714      	adds	r7, #20
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr

080086ce <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b085      	sub	sp, #20
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
 80086d6:	460b      	mov	r3, r1
 80086d8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80086da:	2300      	movs	r3, #0
 80086dc:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80086e4:	78fa      	ldrb	r2, [r7, #3]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d204      	bcs.n	80086f4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	78fa      	ldrb	r2, [r7, #3]
 80086ee:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80086f2:	e001      	b.n	80086f8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80086f4:	2302      	movs	r3, #2
 80086f6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80086f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3714      	adds	r7, #20
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr

08008706 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008706:	b480      	push	{r7}
 8008708:	b087      	sub	sp, #28
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	4608      	mov	r0, r1
 8008710:	4611      	mov	r1, r2
 8008712:	461a      	mov	r2, r3
 8008714:	4603      	mov	r3, r0
 8008716:	70fb      	strb	r3, [r7, #3]
 8008718:	460b      	mov	r3, r1
 800871a:	70bb      	strb	r3, [r7, #2]
 800871c:	4613      	mov	r3, r2
 800871e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008720:	2300      	movs	r3, #0
 8008722:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008724:	2300      	movs	r3, #0
 8008726:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800872e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008730:	e025      	b.n	800877e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008732:	7dfb      	ldrb	r3, [r7, #23]
 8008734:	221a      	movs	r2, #26
 8008736:	fb02 f303 	mul.w	r3, r2, r3
 800873a:	3308      	adds	r3, #8
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	4413      	add	r3, r2
 8008740:	3302      	adds	r3, #2
 8008742:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	795b      	ldrb	r3, [r3, #5]
 8008748:	78fa      	ldrb	r2, [r7, #3]
 800874a:	429a      	cmp	r2, r3
 800874c:	d002      	beq.n	8008754 <USBH_FindInterface+0x4e>
 800874e:	78fb      	ldrb	r3, [r7, #3]
 8008750:	2bff      	cmp	r3, #255	@ 0xff
 8008752:	d111      	bne.n	8008778 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008758:	78ba      	ldrb	r2, [r7, #2]
 800875a:	429a      	cmp	r2, r3
 800875c:	d002      	beq.n	8008764 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800875e:	78bb      	ldrb	r3, [r7, #2]
 8008760:	2bff      	cmp	r3, #255	@ 0xff
 8008762:	d109      	bne.n	8008778 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008768:	787a      	ldrb	r2, [r7, #1]
 800876a:	429a      	cmp	r2, r3
 800876c:	d002      	beq.n	8008774 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800876e:	787b      	ldrb	r3, [r7, #1]
 8008770:	2bff      	cmp	r3, #255	@ 0xff
 8008772:	d101      	bne.n	8008778 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008774:	7dfb      	ldrb	r3, [r7, #23]
 8008776:	e006      	b.n	8008786 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008778:	7dfb      	ldrb	r3, [r7, #23]
 800877a:	3301      	adds	r3, #1
 800877c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800877e:	7dfb      	ldrb	r3, [r7, #23]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d9d6      	bls.n	8008732 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008784:	23ff      	movs	r3, #255	@ 0xff
}
 8008786:	4618      	mov	r0, r3
 8008788:	371c      	adds	r7, #28
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr

08008792 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b082      	sub	sp, #8
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f001 fcfa 	bl	800a194 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80087a0:	2101      	movs	r1, #1
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f001 fe13 	bl	800a3ce <USBH_LL_DriverVBUS>

  return USBH_OK;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3708      	adds	r7, #8
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
	...

080087b4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b088      	sub	sp, #32
 80087b8:	af04      	add	r7, sp, #16
 80087ba:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80087bc:	2302      	movs	r3, #2
 80087be:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80087c0:	2300      	movs	r3, #0
 80087c2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d102      	bne.n	80087d6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2203      	movs	r2, #3
 80087d4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	2b0b      	cmp	r3, #11
 80087de:	f200 81bb 	bhi.w	8008b58 <USBH_Process+0x3a4>
 80087e2:	a201      	add	r2, pc, #4	@ (adr r2, 80087e8 <USBH_Process+0x34>)
 80087e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e8:	08008819 	.word	0x08008819
 80087ec:	0800884b 	.word	0x0800884b
 80087f0:	080088b3 	.word	0x080088b3
 80087f4:	08008af3 	.word	0x08008af3
 80087f8:	08008b59 	.word	0x08008b59
 80087fc:	08008953 	.word	0x08008953
 8008800:	08008a99 	.word	0x08008a99
 8008804:	08008989 	.word	0x08008989
 8008808:	080089a9 	.word	0x080089a9
 800880c:	080089c7 	.word	0x080089c7
 8008810:	08008a0b 	.word	0x08008a0b
 8008814:	08008adb 	.word	0x08008adb
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800881e:	b2db      	uxtb	r3, r3
 8008820:	2b00      	cmp	r3, #0
 8008822:	f000 819b 	beq.w	8008b5c <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2201      	movs	r2, #1
 800882a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800882c:	20c8      	movs	r0, #200	@ 0xc8
 800882e:	f001 fe18 	bl	800a462 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f001 fd0b 	bl	800a24e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008848:	e188      	b.n	8008b5c <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008850:	2b01      	cmp	r3, #1
 8008852:	d107      	bne.n	8008864 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2202      	movs	r2, #2
 8008860:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008862:	e18a      	b.n	8008b7a <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800886a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800886e:	d914      	bls.n	800889a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008876:	3301      	adds	r3, #1
 8008878:	b2da      	uxtb	r2, r3
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008886:	2b03      	cmp	r3, #3
 8008888:	d903      	bls.n	8008892 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	220d      	movs	r2, #13
 800888e:	701a      	strb	r2, [r3, #0]
      break;
 8008890:	e173      	b.n	8008b7a <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2200      	movs	r2, #0
 8008896:	701a      	strb	r2, [r3, #0]
      break;
 8008898:	e16f      	b.n	8008b7a <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80088a0:	f103 020a 	add.w	r2, r3, #10
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80088aa:	200a      	movs	r0, #10
 80088ac:	f001 fdd9 	bl	800a462 <USBH_Delay>
      break;
 80088b0:	e163      	b.n	8008b7a <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d005      	beq.n	80088c8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80088c2:	2104      	movs	r1, #4
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80088c8:	2064      	movs	r0, #100	@ 0x64
 80088ca:	f001 fdca 	bl	800a462 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f001 fc96 	bl	800a200 <USBH_LL_GetSpeed>
 80088d4:	4603      	mov	r3, r0
 80088d6:	461a      	mov	r2, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2205      	movs	r2, #5
 80088e2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80088e4:	2100      	movs	r1, #0
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f001 fa9b 	bl	8009e22 <USBH_AllocPipe>
 80088ec:	4603      	mov	r3, r0
 80088ee:	461a      	mov	r2, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80088f4:	2180      	movs	r1, #128	@ 0x80
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f001 fa93 	bl	8009e22 <USBH_AllocPipe>
 80088fc:	4603      	mov	r3, r0
 80088fe:	461a      	mov	r2, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	7919      	ldrb	r1, [r3, #4]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008918:	9202      	str	r2, [sp, #8]
 800891a:	2200      	movs	r2, #0
 800891c:	9201      	str	r2, [sp, #4]
 800891e:	9300      	str	r3, [sp, #0]
 8008920:	4603      	mov	r3, r0
 8008922:	2280      	movs	r2, #128	@ 0x80
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f001 fa4d 	bl	8009dc4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	7959      	ldrb	r1, [r3, #5]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800893e:	9202      	str	r2, [sp, #8]
 8008940:	2200      	movs	r2, #0
 8008942:	9201      	str	r2, [sp, #4]
 8008944:	9300      	str	r3, [sp, #0]
 8008946:	4603      	mov	r3, r0
 8008948:	2200      	movs	r2, #0
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f001 fa3a 	bl	8009dc4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008950:	e113      	b.n	8008b7a <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 f916 	bl	8008b84 <USBH_HandleEnum>
 8008958:	4603      	mov	r3, r0
 800895a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800895c:	7bbb      	ldrb	r3, [r7, #14]
 800895e:	b2db      	uxtb	r3, r3
 8008960:	2b00      	cmp	r3, #0
 8008962:	f040 80fd 	bne.w	8008b60 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008974:	2b01      	cmp	r3, #1
 8008976:	d103      	bne.n	8008980 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2208      	movs	r2, #8
 800897c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800897e:	e0ef      	b.n	8008b60 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2207      	movs	r2, #7
 8008984:	701a      	strb	r2, [r3, #0]
      break;
 8008986:	e0eb      	b.n	8008b60 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800898e:	2b00      	cmp	r3, #0
 8008990:	f000 80e8 	beq.w	8008b64 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800899a:	2101      	movs	r1, #1
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2208      	movs	r2, #8
 80089a4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80089a6:	e0dd      	b.n	8008b64 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80089ae:	4619      	mov	r1, r3
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 fc3a 	bl	800922a <USBH_SetCfg>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f040 80d5 	bne.w	8008b68 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2209      	movs	r2, #9
 80089c2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80089c4:	e0d0      	b.n	8008b68 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80089cc:	f003 0320 	and.w	r3, r3, #32
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d016      	beq.n	8008a02 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80089d4:	2101      	movs	r1, #1
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 fc4a 	bl	8009270 <USBH_SetFeature>
 80089dc:	4603      	mov	r3, r0
 80089de:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80089e0:	7bbb      	ldrb	r3, [r7, #14]
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d103      	bne.n	80089f0 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	220a      	movs	r2, #10
 80089ec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80089ee:	e0bd      	b.n	8008b6c <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 80089f0:	7bbb      	ldrb	r3, [r7, #14]
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	2b03      	cmp	r3, #3
 80089f6:	f040 80b9 	bne.w	8008b6c <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	220a      	movs	r2, #10
 80089fe:	701a      	strb	r2, [r3, #0]
      break;
 8008a00:	e0b4      	b.n	8008b6c <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	220a      	movs	r2, #10
 8008a06:	701a      	strb	r2, [r3, #0]
      break;
 8008a08:	e0b0      	b.n	8008b6c <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	f000 80ad 	beq.w	8008b70 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008a1e:	2300      	movs	r3, #0
 8008a20:	73fb      	strb	r3, [r7, #15]
 8008a22:	e016      	b.n	8008a52 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008a24:	7bfa      	ldrb	r2, [r7, #15]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	32de      	adds	r2, #222	@ 0xde
 8008a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a2e:	791a      	ldrb	r2, [r3, #4]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d108      	bne.n	8008a4c <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008a3a:	7bfa      	ldrb	r2, [r7, #15]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	32de      	adds	r2, #222	@ 0xde
 8008a40:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008a4a:	e005      	b.n	8008a58 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008a4c:	7bfb      	ldrb	r3, [r7, #15]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	73fb      	strb	r3, [r7, #15]
 8008a52:	7bfb      	ldrb	r3, [r7, #15]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d0e5      	beq.n	8008a24 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d016      	beq.n	8008a90 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	4798      	blx	r3
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d109      	bne.n	8008a88 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2206      	movs	r2, #6
 8008a78:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008a80:	2103      	movs	r1, #3
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008a86:	e073      	b.n	8008b70 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	220d      	movs	r2, #13
 8008a8c:	701a      	strb	r2, [r3, #0]
      break;
 8008a8e:	e06f      	b.n	8008b70 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	220d      	movs	r2, #13
 8008a94:	701a      	strb	r2, [r3, #0]
      break;
 8008a96:	e06b      	b.n	8008b70 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d017      	beq.n	8008ad2 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008aa8:	691b      	ldr	r3, [r3, #16]
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	4798      	blx	r3
 8008aae:	4603      	mov	r3, r0
 8008ab0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008ab2:	7bbb      	ldrb	r3, [r7, #14]
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d103      	bne.n	8008ac2 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	220b      	movs	r2, #11
 8008abe:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008ac0:	e058      	b.n	8008b74 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8008ac2:	7bbb      	ldrb	r3, [r7, #14]
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	2b02      	cmp	r3, #2
 8008ac8:	d154      	bne.n	8008b74 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	220d      	movs	r2, #13
 8008ace:	701a      	strb	r2, [r3, #0]
      break;
 8008ad0:	e050      	b.n	8008b74 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	220d      	movs	r2, #13
 8008ad6:	701a      	strb	r2, [r3, #0]
      break;
 8008ad8:	e04c      	b.n	8008b74 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d049      	beq.n	8008b78 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008aea:	695b      	ldr	r3, [r3, #20]
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	4798      	blx	r3
      }
      break;
 8008af0:	e042      	b.n	8008b78 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f7ff fd4a 	bl	8008594 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d009      	beq.n	8008b1e <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d005      	beq.n	8008b34 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008b2e:	2105      	movs	r1, #5
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d107      	bne.n	8008b50 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f7ff fe22 	bl	8008792 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008b4e:	e014      	b.n	8008b7a <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f001 fb1f 	bl	800a194 <USBH_LL_Start>
      break;
 8008b56:	e010      	b.n	8008b7a <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008b58:	bf00      	nop
 8008b5a:	e00e      	b.n	8008b7a <USBH_Process+0x3c6>
      break;
 8008b5c:	bf00      	nop
 8008b5e:	e00c      	b.n	8008b7a <USBH_Process+0x3c6>
      break;
 8008b60:	bf00      	nop
 8008b62:	e00a      	b.n	8008b7a <USBH_Process+0x3c6>
    break;
 8008b64:	bf00      	nop
 8008b66:	e008      	b.n	8008b7a <USBH_Process+0x3c6>
      break;
 8008b68:	bf00      	nop
 8008b6a:	e006      	b.n	8008b7a <USBH_Process+0x3c6>
      break;
 8008b6c:	bf00      	nop
 8008b6e:	e004      	b.n	8008b7a <USBH_Process+0x3c6>
      break;
 8008b70:	bf00      	nop
 8008b72:	e002      	b.n	8008b7a <USBH_Process+0x3c6>
      break;
 8008b74:	bf00      	nop
 8008b76:	e000      	b.n	8008b7a <USBH_Process+0x3c6>
      break;
 8008b78:	bf00      	nop
  }
  return USBH_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3710      	adds	r7, #16
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b088      	sub	sp, #32
 8008b88:	af04      	add	r7, sp, #16
 8008b8a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008b90:	2301      	movs	r3, #1
 8008b92:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	785b      	ldrb	r3, [r3, #1]
 8008b98:	2b07      	cmp	r3, #7
 8008b9a:	f200 81bd 	bhi.w	8008f18 <USBH_HandleEnum+0x394>
 8008b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8008ba4 <USBH_HandleEnum+0x20>)
 8008ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba4:	08008bc5 	.word	0x08008bc5
 8008ba8:	08008c7f 	.word	0x08008c7f
 8008bac:	08008ce9 	.word	0x08008ce9
 8008bb0:	08008d73 	.word	0x08008d73
 8008bb4:	08008ddd 	.word	0x08008ddd
 8008bb8:	08008e4d 	.word	0x08008e4d
 8008bbc:	08008e93 	.word	0x08008e93
 8008bc0:	08008ed9 	.word	0x08008ed9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008bc4:	2108      	movs	r1, #8
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 fa4c 	bl	8009064 <USBH_Get_DevDesc>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008bd0:	7bbb      	ldrb	r3, [r7, #14]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d12e      	bne.n	8008c34 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	7919      	ldrb	r1, [r3, #4]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008bfa:	9202      	str	r2, [sp, #8]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	9201      	str	r2, [sp, #4]
 8008c00:	9300      	str	r3, [sp, #0]
 8008c02:	4603      	mov	r3, r0
 8008c04:	2280      	movs	r2, #128	@ 0x80
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f001 f8dc 	bl	8009dc4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	7959      	ldrb	r1, [r3, #5]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008c1c:	687a      	ldr	r2, [r7, #4]
 8008c1e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008c20:	9202      	str	r2, [sp, #8]
 8008c22:	2200      	movs	r2, #0
 8008c24:	9201      	str	r2, [sp, #4]
 8008c26:	9300      	str	r3, [sp, #0]
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f001 f8c9 	bl	8009dc4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008c32:	e173      	b.n	8008f1c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c34:	7bbb      	ldrb	r3, [r7, #14]
 8008c36:	2b03      	cmp	r3, #3
 8008c38:	f040 8170 	bne.w	8008f1c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008c42:	3301      	adds	r3, #1
 8008c44:	b2da      	uxtb	r2, r3
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008c52:	2b03      	cmp	r3, #3
 8008c54:	d903      	bls.n	8008c5e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	220d      	movs	r2, #13
 8008c5a:	701a      	strb	r2, [r3, #0]
      break;
 8008c5c:	e15e      	b.n	8008f1c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	795b      	ldrb	r3, [r3, #5]
 8008c62:	4619      	mov	r1, r3
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f001 f8fd 	bl	8009e64 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	791b      	ldrb	r3, [r3, #4]
 8008c6e:	4619      	mov	r1, r3
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f001 f8f7 	bl	8009e64 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	701a      	strb	r2, [r3, #0]
      break;
 8008c7c:	e14e      	b.n	8008f1c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008c7e:	2112      	movs	r1, #18
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 f9ef 	bl	8009064 <USBH_Get_DevDesc>
 8008c86:	4603      	mov	r3, r0
 8008c88:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008c8a:	7bbb      	ldrb	r3, [r7, #14]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d103      	bne.n	8008c98 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2202      	movs	r2, #2
 8008c94:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008c96:	e143      	b.n	8008f20 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c98:	7bbb      	ldrb	r3, [r7, #14]
 8008c9a:	2b03      	cmp	r3, #3
 8008c9c:	f040 8140 	bne.w	8008f20 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	b2da      	uxtb	r2, r3
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008cb6:	2b03      	cmp	r3, #3
 8008cb8:	d903      	bls.n	8008cc2 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	220d      	movs	r2, #13
 8008cbe:	701a      	strb	r2, [r3, #0]
      break;
 8008cc0:	e12e      	b.n	8008f20 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	795b      	ldrb	r3, [r3, #5]
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f001 f8cb 	bl	8009e64 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	791b      	ldrb	r3, [r3, #4]
 8008cd2:	4619      	mov	r1, r3
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f001 f8c5 	bl	8009e64 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	701a      	strb	r2, [r3, #0]
      break;
 8008ce6:	e11b      	b.n	8008f20 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008ce8:	2101      	movs	r1, #1
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 fa79 	bl	80091e2 <USBH_SetAddress>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008cf4:	7bbb      	ldrb	r3, [r7, #14]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d130      	bne.n	8008d5c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008cfa:	2002      	movs	r0, #2
 8008cfc:	f001 fbb1 	bl	800a462 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2201      	movs	r2, #1
 8008d04:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2203      	movs	r2, #3
 8008d0c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	7919      	ldrb	r1, [r3, #4]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008d22:	9202      	str	r2, [sp, #8]
 8008d24:	2200      	movs	r2, #0
 8008d26:	9201      	str	r2, [sp, #4]
 8008d28:	9300      	str	r3, [sp, #0]
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2280      	movs	r2, #128	@ 0x80
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f001 f848 	bl	8009dc4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	7959      	ldrb	r1, [r3, #5]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008d48:	9202      	str	r2, [sp, #8]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	9201      	str	r2, [sp, #4]
 8008d4e:	9300      	str	r3, [sp, #0]
 8008d50:	4603      	mov	r3, r0
 8008d52:	2200      	movs	r2, #0
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f001 f835 	bl	8009dc4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008d5a:	e0e3      	b.n	8008f24 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d5c:	7bbb      	ldrb	r3, [r7, #14]
 8008d5e:	2b03      	cmp	r3, #3
 8008d60:	f040 80e0 	bne.w	8008f24 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	220d      	movs	r2, #13
 8008d68:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	705a      	strb	r2, [r3, #1]
      break;
 8008d70:	e0d8      	b.n	8008f24 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008d72:	2109      	movs	r1, #9
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 f9a1 	bl	80090bc <USBH_Get_CfgDesc>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008d7e:	7bbb      	ldrb	r3, [r7, #14]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d103      	bne.n	8008d8c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2204      	movs	r2, #4
 8008d88:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008d8a:	e0cd      	b.n	8008f28 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d8c:	7bbb      	ldrb	r3, [r7, #14]
 8008d8e:	2b03      	cmp	r3, #3
 8008d90:	f040 80ca 	bne.w	8008f28 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	b2da      	uxtb	r2, r3
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008daa:	2b03      	cmp	r3, #3
 8008dac:	d903      	bls.n	8008db6 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	220d      	movs	r2, #13
 8008db2:	701a      	strb	r2, [r3, #0]
      break;
 8008db4:	e0b8      	b.n	8008f28 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	795b      	ldrb	r3, [r3, #5]
 8008dba:	4619      	mov	r1, r3
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f001 f851 	bl	8009e64 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	791b      	ldrb	r3, [r3, #4]
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f001 f84b 	bl	8009e64 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	701a      	strb	r2, [r3, #0]
      break;
 8008dda:	e0a5      	b.n	8008f28 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8008de2:	4619      	mov	r1, r3
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 f969 	bl	80090bc <USBH_Get_CfgDesc>
 8008dea:	4603      	mov	r3, r0
 8008dec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008dee:	7bbb      	ldrb	r3, [r7, #14]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d103      	bne.n	8008dfc <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2205      	movs	r2, #5
 8008df8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008dfa:	e097      	b.n	8008f2c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008dfc:	7bbb      	ldrb	r3, [r7, #14]
 8008dfe:	2b03      	cmp	r3, #3
 8008e00:	f040 8094 	bne.w	8008f2c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	b2da      	uxtb	r2, r3
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008e1a:	2b03      	cmp	r3, #3
 8008e1c:	d903      	bls.n	8008e26 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	220d      	movs	r2, #13
 8008e22:	701a      	strb	r2, [r3, #0]
      break;
 8008e24:	e082      	b.n	8008f2c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	795b      	ldrb	r3, [r3, #5]
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f001 f819 	bl	8009e64 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	791b      	ldrb	r3, [r3, #4]
 8008e36:	4619      	mov	r1, r3
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f001 f813 	bl	8009e64 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2200      	movs	r2, #0
 8008e48:	701a      	strb	r2, [r3, #0]
      break;
 8008e4a:	e06f      	b.n	8008f2c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d019      	beq.n	8008e8a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008e62:	23ff      	movs	r3, #255	@ 0xff
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 f953 	bl	8009110 <USBH_Get_StringDesc>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008e6e:	7bbb      	ldrb	r3, [r7, #14]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d103      	bne.n	8008e7c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2206      	movs	r2, #6
 8008e78:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008e7a:	e059      	b.n	8008f30 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e7c:	7bbb      	ldrb	r3, [r7, #14]
 8008e7e:	2b03      	cmp	r3, #3
 8008e80:	d156      	bne.n	8008f30 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2206      	movs	r2, #6
 8008e86:	705a      	strb	r2, [r3, #1]
      break;
 8008e88:	e052      	b.n	8008f30 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2206      	movs	r2, #6
 8008e8e:	705a      	strb	r2, [r3, #1]
      break;
 8008e90:	e04e      	b.n	8008f30 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d019      	beq.n	8008ed0 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008ea8:	23ff      	movs	r3, #255	@ 0xff
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 f930 	bl	8009110 <USBH_Get_StringDesc>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008eb4:	7bbb      	ldrb	r3, [r7, #14]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d103      	bne.n	8008ec2 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2207      	movs	r2, #7
 8008ebe:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008ec0:	e038      	b.n	8008f34 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ec2:	7bbb      	ldrb	r3, [r7, #14]
 8008ec4:	2b03      	cmp	r3, #3
 8008ec6:	d135      	bne.n	8008f34 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2207      	movs	r2, #7
 8008ecc:	705a      	strb	r2, [r3, #1]
      break;
 8008ece:	e031      	b.n	8008f34 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2207      	movs	r2, #7
 8008ed4:	705a      	strb	r2, [r3, #1]
      break;
 8008ed6:	e02d      	b.n	8008f34 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d017      	beq.n	8008f12 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008eee:	23ff      	movs	r3, #255	@ 0xff
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 f90d 	bl	8009110 <USBH_Get_StringDesc>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008efa:	7bbb      	ldrb	r3, [r7, #14]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d102      	bne.n	8008f06 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008f00:	2300      	movs	r3, #0
 8008f02:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008f04:	e018      	b.n	8008f38 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f06:	7bbb      	ldrb	r3, [r7, #14]
 8008f08:	2b03      	cmp	r3, #3
 8008f0a:	d115      	bne.n	8008f38 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8008f10:	e012      	b.n	8008f38 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8008f12:	2300      	movs	r3, #0
 8008f14:	73fb      	strb	r3, [r7, #15]
      break;
 8008f16:	e00f      	b.n	8008f38 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008f18:	bf00      	nop
 8008f1a:	e00e      	b.n	8008f3a <USBH_HandleEnum+0x3b6>
      break;
 8008f1c:	bf00      	nop
 8008f1e:	e00c      	b.n	8008f3a <USBH_HandleEnum+0x3b6>
      break;
 8008f20:	bf00      	nop
 8008f22:	e00a      	b.n	8008f3a <USBH_HandleEnum+0x3b6>
      break;
 8008f24:	bf00      	nop
 8008f26:	e008      	b.n	8008f3a <USBH_HandleEnum+0x3b6>
      break;
 8008f28:	bf00      	nop
 8008f2a:	e006      	b.n	8008f3a <USBH_HandleEnum+0x3b6>
      break;
 8008f2c:	bf00      	nop
 8008f2e:	e004      	b.n	8008f3a <USBH_HandleEnum+0x3b6>
      break;
 8008f30:	bf00      	nop
 8008f32:	e002      	b.n	8008f3a <USBH_HandleEnum+0x3b6>
      break;
 8008f34:	bf00      	nop
 8008f36:	e000      	b.n	8008f3a <USBH_HandleEnum+0x3b6>
      break;
 8008f38:	bf00      	nop
  }
  return Status;
 8008f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3710      	adds	r7, #16
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	683a      	ldr	r2, [r7, #0]
 8008f52:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8008f56:	bf00      	nop
 8008f58:	370c      	adds	r7, #12
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr

08008f62 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b082      	sub	sp, #8
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008f70:	1c5a      	adds	r2, r3, #1
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 f804 	bl	8008f86 <USBH_HandleSof>
}
 8008f7e:	bf00      	nop
 8008f80:	3708      	adds	r7, #8
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b082      	sub	sp, #8
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	2b0b      	cmp	r3, #11
 8008f96:	d10a      	bne.n	8008fae <USBH_HandleSof+0x28>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d005      	beq.n	8008fae <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008fa8:	699b      	ldr	r3, [r3, #24]
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	4798      	blx	r3
  }
}
 8008fae:	bf00      	nop
 8008fb0:	3708      	adds	r7, #8
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008fb6:	b480      	push	{r7}
 8008fb8:	b083      	sub	sp, #12
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008fc6:	bf00      	nop
}
 8008fc8:	370c      	adds	r7, #12
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr

08008fd2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008fd2:	b480      	push	{r7}
 8008fd4:	b083      	sub	sp, #12
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008fe2:	bf00      	nop
}
 8008fe4:	370c      	adds	r7, #12
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr

08008fee <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008fee:	b480      	push	{r7}
 8008ff0:	b083      	sub	sp, #12
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800900e:	2300      	movs	r3, #0
}
 8009010:	4618      	mov	r0, r3
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2201      	movs	r2, #1
 8009028:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f001 f8c4 	bl	800a1ca <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	791b      	ldrb	r3, [r3, #4]
 8009046:	4619      	mov	r1, r3
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 ff0b 	bl	8009e64 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	795b      	ldrb	r3, [r3, #5]
 8009052:	4619      	mov	r1, r3
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 ff05 	bl	8009e64 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3708      	adds	r7, #8
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b086      	sub	sp, #24
 8009068:	af02      	add	r7, sp, #8
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	460b      	mov	r3, r1
 800906e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009070:	887b      	ldrh	r3, [r7, #2]
 8009072:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009076:	d901      	bls.n	800907c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009078:	2303      	movs	r3, #3
 800907a:	e01b      	b.n	80090b4 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009082:	887b      	ldrh	r3, [r7, #2]
 8009084:	9300      	str	r3, [sp, #0]
 8009086:	4613      	mov	r3, r2
 8009088:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800908c:	2100      	movs	r1, #0
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 f872 	bl	8009178 <USBH_GetDescriptor>
 8009094:	4603      	mov	r3, r0
 8009096:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009098:	7bfb      	ldrb	r3, [r7, #15]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d109      	bne.n	80090b2 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80090a4:	887a      	ldrh	r2, [r7, #2]
 80090a6:	4619      	mov	r1, r3
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 f929 	bl	8009300 <USBH_ParseDevDesc>
 80090ae:	4603      	mov	r3, r0
 80090b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80090b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3710      	adds	r7, #16
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b086      	sub	sp, #24
 80090c0:	af02      	add	r7, sp, #8
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	460b      	mov	r3, r1
 80090c6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	331c      	adds	r3, #28
 80090cc:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80090ce:	887b      	ldrh	r3, [r7, #2]
 80090d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090d4:	d901      	bls.n	80090da <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80090d6:	2303      	movs	r3, #3
 80090d8:	e016      	b.n	8009108 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80090da:	887b      	ldrh	r3, [r7, #2]
 80090dc:	9300      	str	r3, [sp, #0]
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80090e4:	2100      	movs	r1, #0
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 f846 	bl	8009178 <USBH_GetDescriptor>
 80090ec:	4603      	mov	r3, r0
 80090ee:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80090f0:	7bfb      	ldrb	r3, [r7, #15]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d107      	bne.n	8009106 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80090f6:	887b      	ldrh	r3, [r7, #2]
 80090f8:	461a      	mov	r2, r3
 80090fa:	68b9      	ldr	r1, [r7, #8]
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 f9af 	bl	8009460 <USBH_ParseCfgDesc>
 8009102:	4603      	mov	r3, r0
 8009104:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009106:	7bfb      	ldrb	r3, [r7, #15]
}
 8009108:	4618      	mov	r0, r3
 800910a:	3710      	adds	r7, #16
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b088      	sub	sp, #32
 8009114:	af02      	add	r7, sp, #8
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	607a      	str	r2, [r7, #4]
 800911a:	461a      	mov	r2, r3
 800911c:	460b      	mov	r3, r1
 800911e:	72fb      	strb	r3, [r7, #11]
 8009120:	4613      	mov	r3, r2
 8009122:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009124:	893b      	ldrh	r3, [r7, #8]
 8009126:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800912a:	d802      	bhi.n	8009132 <USBH_Get_StringDesc+0x22>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d101      	bne.n	8009136 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009132:	2303      	movs	r3, #3
 8009134:	e01c      	b.n	8009170 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009136:	7afb      	ldrb	r3, [r7, #11]
 8009138:	b29b      	uxth	r3, r3
 800913a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800913e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009146:	893b      	ldrh	r3, [r7, #8]
 8009148:	9300      	str	r3, [sp, #0]
 800914a:	460b      	mov	r3, r1
 800914c:	2100      	movs	r1, #0
 800914e:	68f8      	ldr	r0, [r7, #12]
 8009150:	f000 f812 	bl	8009178 <USBH_GetDescriptor>
 8009154:	4603      	mov	r3, r0
 8009156:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009158:	7dfb      	ldrb	r3, [r7, #23]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d107      	bne.n	800916e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009164:	893a      	ldrh	r2, [r7, #8]
 8009166:	6879      	ldr	r1, [r7, #4]
 8009168:	4618      	mov	r0, r3
 800916a:	f000 fb8d 	bl	8009888 <USBH_ParseStringDesc>
  }

  return status;
 800916e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009170:	4618      	mov	r0, r3
 8009172:	3718      	adds	r7, #24
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	607b      	str	r3, [r7, #4]
 8009182:	460b      	mov	r3, r1
 8009184:	72fb      	strb	r3, [r7, #11]
 8009186:	4613      	mov	r3, r2
 8009188:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	789b      	ldrb	r3, [r3, #2]
 800918e:	2b01      	cmp	r3, #1
 8009190:	d11c      	bne.n	80091cc <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009192:	7afb      	ldrb	r3, [r7, #11]
 8009194:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009198:	b2da      	uxtb	r2, r3
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2206      	movs	r2, #6
 80091a2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	893a      	ldrh	r2, [r7, #8]
 80091a8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80091aa:	893b      	ldrh	r3, [r7, #8]
 80091ac:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80091b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80091b4:	d104      	bne.n	80091c0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f240 4209 	movw	r2, #1033	@ 0x409
 80091bc:	829a      	strh	r2, [r3, #20]
 80091be:	e002      	b.n	80091c6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2200      	movs	r2, #0
 80091c4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	8b3a      	ldrh	r2, [r7, #24]
 80091ca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80091cc:	8b3b      	ldrh	r3, [r7, #24]
 80091ce:	461a      	mov	r2, r3
 80091d0:	6879      	ldr	r1, [r7, #4]
 80091d2:	68f8      	ldr	r0, [r7, #12]
 80091d4:	f000 fba5 	bl	8009922 <USBH_CtlReq>
 80091d8:	4603      	mov	r3, r0
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b082      	sub	sp, #8
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
 80091ea:	460b      	mov	r3, r1
 80091ec:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	789b      	ldrb	r3, [r3, #2]
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d10f      	bne.n	8009216 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2205      	movs	r2, #5
 8009200:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009202:	78fb      	ldrb	r3, [r7, #3]
 8009204:	b29a      	uxth	r2, r3
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009216:	2200      	movs	r2, #0
 8009218:	2100      	movs	r1, #0
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 fb81 	bl	8009922 <USBH_CtlReq>
 8009220:	4603      	mov	r3, r0
}
 8009222:	4618      	mov	r0, r3
 8009224:	3708      	adds	r7, #8
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800922a:	b580      	push	{r7, lr}
 800922c:	b082      	sub	sp, #8
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
 8009232:	460b      	mov	r3, r1
 8009234:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	789b      	ldrb	r3, [r3, #2]
 800923a:	2b01      	cmp	r3, #1
 800923c:	d10e      	bne.n	800925c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2200      	movs	r2, #0
 8009242:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2209      	movs	r2, #9
 8009248:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	887a      	ldrh	r2, [r7, #2]
 800924e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800925c:	2200      	movs	r2, #0
 800925e:	2100      	movs	r1, #0
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 fb5e 	bl	8009922 <USBH_CtlReq>
 8009266:	4603      	mov	r3, r0
}
 8009268:	4618      	mov	r0, r3
 800926a:	3708      	adds	r7, #8
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	460b      	mov	r3, r1
 800927a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	789b      	ldrb	r3, [r3, #2]
 8009280:	2b01      	cmp	r3, #1
 8009282:	d10f      	bne.n	80092a4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2203      	movs	r2, #3
 800928e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009290:	78fb      	ldrb	r3, [r7, #3]
 8009292:	b29a      	uxth	r2, r3
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2200      	movs	r2, #0
 80092a2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80092a4:	2200      	movs	r2, #0
 80092a6:	2100      	movs	r1, #0
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 fb3a 	bl	8009922 <USBH_CtlReq>
 80092ae:	4603      	mov	r3, r0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3708      	adds	r7, #8
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	460b      	mov	r3, r1
 80092c2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	789b      	ldrb	r3, [r3, #2]
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d10f      	bne.n	80092ec <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2202      	movs	r2, #2
 80092d0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2201      	movs	r2, #1
 80092d6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80092de:	78fb      	ldrb	r3, [r7, #3]
 80092e0:	b29a      	uxth	r2, r3
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80092ec:	2200      	movs	r2, #0
 80092ee:	2100      	movs	r1, #0
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 fb16 	bl	8009922 <USBH_CtlReq>
 80092f6:	4603      	mov	r3, r0
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3708      	adds	r7, #8
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009300:	b480      	push	{r7}
 8009302:	b087      	sub	sp, #28
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	4613      	mov	r3, r2
 800930c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009314:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009316:	2300      	movs	r3, #0
 8009318:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d101      	bne.n	8009324 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009320:	2302      	movs	r3, #2
 8009322:	e094      	b.n	800944e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	781a      	ldrb	r2, [r3, #0]
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	785a      	ldrb	r2, [r3, #1]
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	3302      	adds	r3, #2
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	461a      	mov	r2, r3
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	3303      	adds	r3, #3
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	021b      	lsls	r3, r3, #8
 8009344:	b29b      	uxth	r3, r3
 8009346:	4313      	orrs	r3, r2
 8009348:	b29a      	uxth	r2, r3
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	791a      	ldrb	r2, [r3, #4]
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	795a      	ldrb	r2, [r3, #5]
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	799a      	ldrb	r2, [r3, #6]
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	79da      	ldrb	r2, [r3, #7]
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009374:	2b00      	cmp	r3, #0
 8009376:	d004      	beq.n	8009382 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800937e:	2b01      	cmp	r3, #1
 8009380:	d11b      	bne.n	80093ba <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	79db      	ldrb	r3, [r3, #7]
 8009386:	2b20      	cmp	r3, #32
 8009388:	dc0f      	bgt.n	80093aa <USBH_ParseDevDesc+0xaa>
 800938a:	2b08      	cmp	r3, #8
 800938c:	db0f      	blt.n	80093ae <USBH_ParseDevDesc+0xae>
 800938e:	3b08      	subs	r3, #8
 8009390:	4a32      	ldr	r2, [pc, #200]	@ (800945c <USBH_ParseDevDesc+0x15c>)
 8009392:	fa22 f303 	lsr.w	r3, r2, r3
 8009396:	f003 0301 	and.w	r3, r3, #1
 800939a:	2b00      	cmp	r3, #0
 800939c:	bf14      	ite	ne
 800939e:	2301      	movne	r3, #1
 80093a0:	2300      	moveq	r3, #0
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d106      	bne.n	80093b6 <USBH_ParseDevDesc+0xb6>
 80093a8:	e001      	b.n	80093ae <USBH_ParseDevDesc+0xae>
 80093aa:	2b40      	cmp	r3, #64	@ 0x40
 80093ac:	d003      	beq.n	80093b6 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	2208      	movs	r2, #8
 80093b2:	71da      	strb	r2, [r3, #7]
        break;
 80093b4:	e000      	b.n	80093b8 <USBH_ParseDevDesc+0xb8>
        break;
 80093b6:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80093b8:	e00e      	b.n	80093d8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80093c0:	2b02      	cmp	r3, #2
 80093c2:	d107      	bne.n	80093d4 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	79db      	ldrb	r3, [r3, #7]
 80093c8:	2b08      	cmp	r3, #8
 80093ca:	d005      	beq.n	80093d8 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	2208      	movs	r2, #8
 80093d0:	71da      	strb	r2, [r3, #7]
 80093d2:	e001      	b.n	80093d8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80093d4:	2303      	movs	r3, #3
 80093d6:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80093d8:	88fb      	ldrh	r3, [r7, #6]
 80093da:	2b08      	cmp	r3, #8
 80093dc:	d936      	bls.n	800944c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	3308      	adds	r3, #8
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	461a      	mov	r2, r3
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	3309      	adds	r3, #9
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	021b      	lsls	r3, r3, #8
 80093ee:	b29b      	uxth	r3, r3
 80093f0:	4313      	orrs	r3, r2
 80093f2:	b29a      	uxth	r2, r3
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	330a      	adds	r3, #10
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	461a      	mov	r2, r3
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	330b      	adds	r3, #11
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	021b      	lsls	r3, r3, #8
 8009408:	b29b      	uxth	r3, r3
 800940a:	4313      	orrs	r3, r2
 800940c:	b29a      	uxth	r2, r3
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	330c      	adds	r3, #12
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	461a      	mov	r2, r3
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	330d      	adds	r3, #13
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	021b      	lsls	r3, r3, #8
 8009422:	b29b      	uxth	r3, r3
 8009424:	4313      	orrs	r3, r2
 8009426:	b29a      	uxth	r2, r3
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	7b9a      	ldrb	r2, [r3, #14]
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	7bda      	ldrb	r2, [r3, #15]
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	7c1a      	ldrb	r2, [r3, #16]
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	7c5a      	ldrb	r2, [r3, #17]
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800944c:	7dfb      	ldrb	r3, [r7, #23]
}
 800944e:	4618      	mov	r0, r3
 8009450:	371c      	adds	r7, #28
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr
 800945a:	bf00      	nop
 800945c:	01000101 	.word	0x01000101

08009460 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b08c      	sub	sp, #48	@ 0x30
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	4613      	mov	r3, r2
 800946c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009474:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009476:	2300      	movs	r3, #0
 8009478:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800947c:	2300      	movs	r3, #0
 800947e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8009482:	2300      	movs	r3, #0
 8009484:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d101      	bne.n	8009492 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800948e:	2302      	movs	r3, #2
 8009490:	e0da      	b.n	8009648 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	781a      	ldrb	r2, [r3, #0]
 800949a:	6a3b      	ldr	r3, [r7, #32]
 800949c:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	785a      	ldrb	r2, [r3, #1]
 80094a2:	6a3b      	ldr	r3, [r7, #32]
 80094a4:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	3302      	adds	r3, #2
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	461a      	mov	r2, r3
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	3303      	adds	r3, #3
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	021b      	lsls	r3, r3, #8
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	4313      	orrs	r3, r2
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094c0:	bf28      	it	cs
 80094c2:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80094c6:	b29a      	uxth	r2, r3
 80094c8:	6a3b      	ldr	r3, [r7, #32]
 80094ca:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	791a      	ldrb	r2, [r3, #4]
 80094d0:	6a3b      	ldr	r3, [r7, #32]
 80094d2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	795a      	ldrb	r2, [r3, #5]
 80094d8:	6a3b      	ldr	r3, [r7, #32]
 80094da:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	799a      	ldrb	r2, [r3, #6]
 80094e0:	6a3b      	ldr	r3, [r7, #32]
 80094e2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	79da      	ldrb	r2, [r3, #7]
 80094e8:	6a3b      	ldr	r3, [r7, #32]
 80094ea:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	7a1a      	ldrb	r2, [r3, #8]
 80094f0:	6a3b      	ldr	r3, [r7, #32]
 80094f2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80094f4:	6a3b      	ldr	r3, [r7, #32]
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	2b09      	cmp	r3, #9
 80094fa:	d002      	beq.n	8009502 <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80094fc:	6a3b      	ldr	r3, [r7, #32]
 80094fe:	2209      	movs	r2, #9
 8009500:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009502:	88fb      	ldrh	r3, [r7, #6]
 8009504:	2b09      	cmp	r3, #9
 8009506:	f240 809d 	bls.w	8009644 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800950a:	2309      	movs	r3, #9
 800950c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800950e:	2300      	movs	r3, #0
 8009510:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009512:	e081      	b.n	8009618 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009514:	f107 0316 	add.w	r3, r7, #22
 8009518:	4619      	mov	r1, r3
 800951a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800951c:	f000 f9e7 	bl	80098ee <USBH_GetNextDesc>
 8009520:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009524:	785b      	ldrb	r3, [r3, #1]
 8009526:	2b04      	cmp	r3, #4
 8009528:	d176      	bne.n	8009618 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800952a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	2b09      	cmp	r3, #9
 8009530:	d002      	beq.n	8009538 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009534:	2209      	movs	r2, #9
 8009536:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009538:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800953c:	221a      	movs	r2, #26
 800953e:	fb02 f303 	mul.w	r3, r2, r3
 8009542:	3308      	adds	r3, #8
 8009544:	6a3a      	ldr	r2, [r7, #32]
 8009546:	4413      	add	r3, r2
 8009548:	3302      	adds	r3, #2
 800954a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800954c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800954e:	69f8      	ldr	r0, [r7, #28]
 8009550:	f000 f87e 	bl	8009650 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009554:	2300      	movs	r3, #0
 8009556:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800955a:	2300      	movs	r3, #0
 800955c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800955e:	e043      	b.n	80095e8 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009560:	f107 0316 	add.w	r3, r7, #22
 8009564:	4619      	mov	r1, r3
 8009566:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009568:	f000 f9c1 	bl	80098ee <USBH_GetNextDesc>
 800956c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800956e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009570:	785b      	ldrb	r3, [r3, #1]
 8009572:	2b05      	cmp	r3, #5
 8009574:	d138      	bne.n	80095e8 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009576:	69fb      	ldr	r3, [r7, #28]
 8009578:	795b      	ldrb	r3, [r3, #5]
 800957a:	2b01      	cmp	r3, #1
 800957c:	d113      	bne.n	80095a6 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800957e:	69fb      	ldr	r3, [r7, #28]
 8009580:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009582:	2b02      	cmp	r3, #2
 8009584:	d003      	beq.n	800958e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009586:	69fb      	ldr	r3, [r7, #28]
 8009588:	799b      	ldrb	r3, [r3, #6]
 800958a:	2b03      	cmp	r3, #3
 800958c:	d10b      	bne.n	80095a6 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	79db      	ldrb	r3, [r3, #7]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d10b      	bne.n	80095ae <USBH_ParseCfgDesc+0x14e>
 8009596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	2b09      	cmp	r3, #9
 800959c:	d007      	beq.n	80095ae <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800959e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a0:	2209      	movs	r2, #9
 80095a2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80095a4:	e003      	b.n	80095ae <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80095a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a8:	2207      	movs	r2, #7
 80095aa:	701a      	strb	r2, [r3, #0]
 80095ac:	e000      	b.n	80095b0 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80095ae:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80095b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80095b4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80095b8:	3201      	adds	r2, #1
 80095ba:	00d2      	lsls	r2, r2, #3
 80095bc:	211a      	movs	r1, #26
 80095be:	fb01 f303 	mul.w	r3, r1, r3
 80095c2:	4413      	add	r3, r2
 80095c4:	3308      	adds	r3, #8
 80095c6:	6a3a      	ldr	r2, [r7, #32]
 80095c8:	4413      	add	r3, r2
 80095ca:	3304      	adds	r3, #4
 80095cc:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80095ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80095d0:	69b9      	ldr	r1, [r7, #24]
 80095d2:	68f8      	ldr	r0, [r7, #12]
 80095d4:	f000 f870 	bl	80096b8 <USBH_ParseEPDesc>
 80095d8:	4603      	mov	r3, r0
 80095da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80095de:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80095e2:	3301      	adds	r3, #1
 80095e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80095e8:	69fb      	ldr	r3, [r7, #28]
 80095ea:	791b      	ldrb	r3, [r3, #4]
 80095ec:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d204      	bcs.n	80095fe <USBH_ParseCfgDesc+0x19e>
 80095f4:	6a3b      	ldr	r3, [r7, #32]
 80095f6:	885a      	ldrh	r2, [r3, #2]
 80095f8:	8afb      	ldrh	r3, [r7, #22]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d8b0      	bhi.n	8009560 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80095fe:	69fb      	ldr	r3, [r7, #28]
 8009600:	791b      	ldrb	r3, [r3, #4]
 8009602:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009606:	429a      	cmp	r2, r3
 8009608:	d201      	bcs.n	800960e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800960a:	2303      	movs	r3, #3
 800960c:	e01c      	b.n	8009648 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800960e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009612:	3301      	adds	r3, #1
 8009614:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009618:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800961c:	2b01      	cmp	r3, #1
 800961e:	d805      	bhi.n	800962c <USBH_ParseCfgDesc+0x1cc>
 8009620:	6a3b      	ldr	r3, [r7, #32]
 8009622:	885a      	ldrh	r2, [r3, #2]
 8009624:	8afb      	ldrh	r3, [r7, #22]
 8009626:	429a      	cmp	r2, r3
 8009628:	f63f af74 	bhi.w	8009514 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800962c:	6a3b      	ldr	r3, [r7, #32]
 800962e:	791b      	ldrb	r3, [r3, #4]
 8009630:	2b02      	cmp	r3, #2
 8009632:	bf28      	it	cs
 8009634:	2302      	movcs	r3, #2
 8009636:	b2db      	uxtb	r3, r3
 8009638:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800963c:	429a      	cmp	r2, r3
 800963e:	d201      	bcs.n	8009644 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009640:	2303      	movs	r3, #3
 8009642:	e001      	b.n	8009648 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009644:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009648:	4618      	mov	r0, r3
 800964a:	3730      	adds	r7, #48	@ 0x30
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009650:	b480      	push	{r7}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	781a      	ldrb	r2, [r3, #0]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	785a      	ldrb	r2, [r3, #1]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	789a      	ldrb	r2, [r3, #2]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	78da      	ldrb	r2, [r3, #3]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	3304      	adds	r3, #4
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	2b02      	cmp	r3, #2
 8009682:	bf28      	it	cs
 8009684:	2302      	movcs	r3, #2
 8009686:	b2da      	uxtb	r2, r3
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	795a      	ldrb	r2, [r3, #5]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	799a      	ldrb	r2, [r3, #6]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	79da      	ldrb	r2, [r3, #7]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	7a1a      	ldrb	r2, [r3, #8]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	721a      	strb	r2, [r3, #8]
}
 80096ac:	bf00      	nop
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b087      	sub	sp, #28
 80096bc:	af00      	add	r7, sp, #0
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	60b9      	str	r1, [r7, #8]
 80096c2:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80096c4:	2300      	movs	r3, #0
 80096c6:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	781a      	ldrb	r2, [r3, #0]
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	785a      	ldrb	r2, [r3, #1]
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	789a      	ldrb	r2, [r3, #2]
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	78da      	ldrb	r2, [r3, #3]
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	3304      	adds	r3, #4
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	461a      	mov	r2, r3
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	3305      	adds	r3, #5
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	021b      	lsls	r3, r3, #8
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	4313      	orrs	r3, r2
 80096fc:	b29a      	uxth	r2, r3
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	799a      	ldrb	r2, [r3, #6]
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	889b      	ldrh	r3, [r3, #4]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d009      	beq.n	8009726 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009716:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800971a:	d804      	bhi.n	8009726 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009720:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009724:	d901      	bls.n	800972a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009726:	2303      	movs	r3, #3
 8009728:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009730:	2b00      	cmp	r3, #0
 8009732:	d136      	bne.n	80097a2 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	78db      	ldrb	r3, [r3, #3]
 8009738:	f003 0303 	and.w	r3, r3, #3
 800973c:	2b02      	cmp	r3, #2
 800973e:	d108      	bne.n	8009752 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	889b      	ldrh	r3, [r3, #4]
 8009744:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009748:	f240 8097 	bls.w	800987a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800974c:	2303      	movs	r3, #3
 800974e:	75fb      	strb	r3, [r7, #23]
 8009750:	e093      	b.n	800987a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	78db      	ldrb	r3, [r3, #3]
 8009756:	f003 0303 	and.w	r3, r3, #3
 800975a:	2b00      	cmp	r3, #0
 800975c:	d107      	bne.n	800976e <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	889b      	ldrh	r3, [r3, #4]
 8009762:	2b40      	cmp	r3, #64	@ 0x40
 8009764:	f240 8089 	bls.w	800987a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009768:	2303      	movs	r3, #3
 800976a:	75fb      	strb	r3, [r7, #23]
 800976c:	e085      	b.n	800987a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	78db      	ldrb	r3, [r3, #3]
 8009772:	f003 0303 	and.w	r3, r3, #3
 8009776:	2b01      	cmp	r3, #1
 8009778:	d005      	beq.n	8009786 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	78db      	ldrb	r3, [r3, #3]
 800977e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009782:	2b03      	cmp	r3, #3
 8009784:	d10a      	bne.n	800979c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	799b      	ldrb	r3, [r3, #6]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d003      	beq.n	8009796 <USBH_ParseEPDesc+0xde>
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	799b      	ldrb	r3, [r3, #6]
 8009792:	2b10      	cmp	r3, #16
 8009794:	d970      	bls.n	8009878 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009796:	2303      	movs	r3, #3
 8009798:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800979a:	e06d      	b.n	8009878 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800979c:	2303      	movs	r3, #3
 800979e:	75fb      	strb	r3, [r7, #23]
 80097a0:	e06b      	b.n	800987a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d13c      	bne.n	8009826 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	78db      	ldrb	r3, [r3, #3]
 80097b0:	f003 0303 	and.w	r3, r3, #3
 80097b4:	2b02      	cmp	r3, #2
 80097b6:	d005      	beq.n	80097c4 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	78db      	ldrb	r3, [r3, #3]
 80097bc:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d106      	bne.n	80097d2 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	889b      	ldrh	r3, [r3, #4]
 80097c8:	2b40      	cmp	r3, #64	@ 0x40
 80097ca:	d956      	bls.n	800987a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80097cc:	2303      	movs	r3, #3
 80097ce:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80097d0:	e053      	b.n	800987a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	78db      	ldrb	r3, [r3, #3]
 80097d6:	f003 0303 	and.w	r3, r3, #3
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d10e      	bne.n	80097fc <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	799b      	ldrb	r3, [r3, #6]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d007      	beq.n	80097f6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80097ea:	2b10      	cmp	r3, #16
 80097ec:	d803      	bhi.n	80097f6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80097f2:	2b40      	cmp	r3, #64	@ 0x40
 80097f4:	d941      	bls.n	800987a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80097f6:	2303      	movs	r3, #3
 80097f8:	75fb      	strb	r3, [r7, #23]
 80097fa:	e03e      	b.n	800987a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	78db      	ldrb	r3, [r3, #3]
 8009800:	f003 0303 	and.w	r3, r3, #3
 8009804:	2b03      	cmp	r3, #3
 8009806:	d10b      	bne.n	8009820 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	799b      	ldrb	r3, [r3, #6]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d004      	beq.n	800981a <USBH_ParseEPDesc+0x162>
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	889b      	ldrh	r3, [r3, #4]
 8009814:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009818:	d32f      	bcc.n	800987a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800981a:	2303      	movs	r3, #3
 800981c:	75fb      	strb	r3, [r7, #23]
 800981e:	e02c      	b.n	800987a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009820:	2303      	movs	r3, #3
 8009822:	75fb      	strb	r3, [r7, #23]
 8009824:	e029      	b.n	800987a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800982c:	2b02      	cmp	r3, #2
 800982e:	d120      	bne.n	8009872 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	78db      	ldrb	r3, [r3, #3]
 8009834:	f003 0303 	and.w	r3, r3, #3
 8009838:	2b00      	cmp	r3, #0
 800983a:	d106      	bne.n	800984a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	889b      	ldrh	r3, [r3, #4]
 8009840:	2b08      	cmp	r3, #8
 8009842:	d01a      	beq.n	800987a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009844:	2303      	movs	r3, #3
 8009846:	75fb      	strb	r3, [r7, #23]
 8009848:	e017      	b.n	800987a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	78db      	ldrb	r3, [r3, #3]
 800984e:	f003 0303 	and.w	r3, r3, #3
 8009852:	2b03      	cmp	r3, #3
 8009854:	d10a      	bne.n	800986c <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	799b      	ldrb	r3, [r3, #6]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d003      	beq.n	8009866 <USBH_ParseEPDesc+0x1ae>
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	889b      	ldrh	r3, [r3, #4]
 8009862:	2b08      	cmp	r3, #8
 8009864:	d909      	bls.n	800987a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009866:	2303      	movs	r3, #3
 8009868:	75fb      	strb	r3, [r7, #23]
 800986a:	e006      	b.n	800987a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800986c:	2303      	movs	r3, #3
 800986e:	75fb      	strb	r3, [r7, #23]
 8009870:	e003      	b.n	800987a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009872:	2303      	movs	r3, #3
 8009874:	75fb      	strb	r3, [r7, #23]
 8009876:	e000      	b.n	800987a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009878:	bf00      	nop
  }

  return status;
 800987a:	7dfb      	ldrb	r3, [r7, #23]
}
 800987c:	4618      	mov	r0, r3
 800987e:	371c      	adds	r7, #28
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009888:	b480      	push	{r7}
 800988a:	b087      	sub	sp, #28
 800988c:	af00      	add	r7, sp, #0
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	60b9      	str	r1, [r7, #8]
 8009892:	4613      	mov	r3, r2
 8009894:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	3301      	adds	r3, #1
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	2b03      	cmp	r3, #3
 800989e:	d120      	bne.n	80098e2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	1e9a      	subs	r2, r3, #2
 80098a6:	88fb      	ldrh	r3, [r7, #6]
 80098a8:	4293      	cmp	r3, r2
 80098aa:	bf28      	it	cs
 80098ac:	4613      	movcs	r3, r2
 80098ae:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	3302      	adds	r3, #2
 80098b4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80098b6:	2300      	movs	r3, #0
 80098b8:	82fb      	strh	r3, [r7, #22]
 80098ba:	e00b      	b.n	80098d4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80098bc:	8afb      	ldrh	r3, [r7, #22]
 80098be:	68fa      	ldr	r2, [r7, #12]
 80098c0:	4413      	add	r3, r2
 80098c2:	781a      	ldrb	r2, [r3, #0]
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	701a      	strb	r2, [r3, #0]
      pdest++;
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	3301      	adds	r3, #1
 80098cc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80098ce:	8afb      	ldrh	r3, [r7, #22]
 80098d0:	3302      	adds	r3, #2
 80098d2:	82fb      	strh	r3, [r7, #22]
 80098d4:	8afa      	ldrh	r2, [r7, #22]
 80098d6:	8abb      	ldrh	r3, [r7, #20]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d3ef      	bcc.n	80098bc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	2200      	movs	r2, #0
 80098e0:	701a      	strb	r2, [r3, #0]
  }
}
 80098e2:	bf00      	nop
 80098e4:	371c      	adds	r7, #28
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr

080098ee <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80098ee:	b480      	push	{r7}
 80098f0:	b085      	sub	sp, #20
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
 80098f6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	881b      	ldrh	r3, [r3, #0]
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	7812      	ldrb	r2, [r2, #0]
 8009900:	4413      	add	r3, r2
 8009902:	b29a      	uxth	r2, r3
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	4413      	add	r3, r2
 8009912:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009914:	68fb      	ldr	r3, [r7, #12]
}
 8009916:	4618      	mov	r0, r3
 8009918:	3714      	adds	r7, #20
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr

08009922 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009922:	b580      	push	{r7, lr}
 8009924:	b086      	sub	sp, #24
 8009926:	af00      	add	r7, sp, #0
 8009928:	60f8      	str	r0, [r7, #12]
 800992a:	60b9      	str	r1, [r7, #8]
 800992c:	4613      	mov	r3, r2
 800992e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009930:	2301      	movs	r3, #1
 8009932:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	789b      	ldrb	r3, [r3, #2]
 8009938:	2b01      	cmp	r3, #1
 800993a:	d002      	beq.n	8009942 <USBH_CtlReq+0x20>
 800993c:	2b02      	cmp	r3, #2
 800993e:	d00f      	beq.n	8009960 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009940:	e027      	b.n	8009992 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	68ba      	ldr	r2, [r7, #8]
 8009946:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	88fa      	ldrh	r2, [r7, #6]
 800994c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2201      	movs	r2, #1
 8009952:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2202      	movs	r2, #2
 8009958:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800995a:	2301      	movs	r3, #1
 800995c:	75fb      	strb	r3, [r7, #23]
      break;
 800995e:	e018      	b.n	8009992 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009960:	68f8      	ldr	r0, [r7, #12]
 8009962:	f000 f81b 	bl	800999c <USBH_HandleControl>
 8009966:	4603      	mov	r3, r0
 8009968:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800996a:	7dfb      	ldrb	r3, [r7, #23]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d002      	beq.n	8009976 <USBH_CtlReq+0x54>
 8009970:	7dfb      	ldrb	r3, [r7, #23]
 8009972:	2b03      	cmp	r3, #3
 8009974:	d106      	bne.n	8009984 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2201      	movs	r2, #1
 800997a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2200      	movs	r2, #0
 8009980:	761a      	strb	r2, [r3, #24]
      break;
 8009982:	e005      	b.n	8009990 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009984:	7dfb      	ldrb	r3, [r7, #23]
 8009986:	2b02      	cmp	r3, #2
 8009988:	d102      	bne.n	8009990 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2201      	movs	r2, #1
 800998e:	709a      	strb	r2, [r3, #2]
      break;
 8009990:	bf00      	nop
  }
  return status;
 8009992:	7dfb      	ldrb	r3, [r7, #23]
}
 8009994:	4618      	mov	r0, r3
 8009996:	3718      	adds	r7, #24
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b086      	sub	sp, #24
 80099a0:	af02      	add	r7, sp, #8
 80099a2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80099a4:	2301      	movs	r3, #1
 80099a6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80099a8:	2300      	movs	r3, #0
 80099aa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	7e1b      	ldrb	r3, [r3, #24]
 80099b0:	3b01      	subs	r3, #1
 80099b2:	2b0a      	cmp	r3, #10
 80099b4:	f200 8156 	bhi.w	8009c64 <USBH_HandleControl+0x2c8>
 80099b8:	a201      	add	r2, pc, #4	@ (adr r2, 80099c0 <USBH_HandleControl+0x24>)
 80099ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099be:	bf00      	nop
 80099c0:	080099ed 	.word	0x080099ed
 80099c4:	08009a07 	.word	0x08009a07
 80099c8:	08009a71 	.word	0x08009a71
 80099cc:	08009a97 	.word	0x08009a97
 80099d0:	08009acf 	.word	0x08009acf
 80099d4:	08009af9 	.word	0x08009af9
 80099d8:	08009b4b 	.word	0x08009b4b
 80099dc:	08009b6d 	.word	0x08009b6d
 80099e0:	08009ba9 	.word	0x08009ba9
 80099e4:	08009bcf 	.word	0x08009bcf
 80099e8:	08009c0d 	.word	0x08009c0d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f103 0110 	add.w	r1, r3, #16
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	795b      	ldrb	r3, [r3, #5]
 80099f6:	461a      	mov	r2, r3
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 f943 	bl	8009c84 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2202      	movs	r2, #2
 8009a02:	761a      	strb	r2, [r3, #24]
      break;
 8009a04:	e139      	b.n	8009c7a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	795b      	ldrb	r3, [r3, #5]
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 fccb 	bl	800a3a8 <USBH_LL_GetURBState>
 8009a12:	4603      	mov	r3, r0
 8009a14:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009a16:	7bbb      	ldrb	r3, [r7, #14]
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d11e      	bne.n	8009a5a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	7c1b      	ldrb	r3, [r3, #16]
 8009a20:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009a24:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	8adb      	ldrh	r3, [r3, #22]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d00a      	beq.n	8009a44 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009a2e:	7b7b      	ldrb	r3, [r7, #13]
 8009a30:	2b80      	cmp	r3, #128	@ 0x80
 8009a32:	d103      	bne.n	8009a3c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2203      	movs	r2, #3
 8009a38:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009a3a:	e115      	b.n	8009c68 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2205      	movs	r2, #5
 8009a40:	761a      	strb	r2, [r3, #24]
      break;
 8009a42:	e111      	b.n	8009c68 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009a44:	7b7b      	ldrb	r3, [r7, #13]
 8009a46:	2b80      	cmp	r3, #128	@ 0x80
 8009a48:	d103      	bne.n	8009a52 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2209      	movs	r2, #9
 8009a4e:	761a      	strb	r2, [r3, #24]
      break;
 8009a50:	e10a      	b.n	8009c68 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2207      	movs	r2, #7
 8009a56:	761a      	strb	r2, [r3, #24]
      break;
 8009a58:	e106      	b.n	8009c68 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009a5a:	7bbb      	ldrb	r3, [r7, #14]
 8009a5c:	2b04      	cmp	r3, #4
 8009a5e:	d003      	beq.n	8009a68 <USBH_HandleControl+0xcc>
 8009a60:	7bbb      	ldrb	r3, [r7, #14]
 8009a62:	2b02      	cmp	r3, #2
 8009a64:	f040 8100 	bne.w	8009c68 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	220b      	movs	r2, #11
 8009a6c:	761a      	strb	r2, [r3, #24]
      break;
 8009a6e:	e0fb      	b.n	8009c68 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009a76:	b29a      	uxth	r2, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6899      	ldr	r1, [r3, #8]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	899a      	ldrh	r2, [r3, #12]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	791b      	ldrb	r3, [r3, #4]
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 f93a 	bl	8009d02 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2204      	movs	r2, #4
 8009a92:	761a      	strb	r2, [r3, #24]
      break;
 8009a94:	e0f1      	b.n	8009c7a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	791b      	ldrb	r3, [r3, #4]
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 fc83 	bl	800a3a8 <USBH_LL_GetURBState>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009aa6:	7bbb      	ldrb	r3, [r7, #14]
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d102      	bne.n	8009ab2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2209      	movs	r2, #9
 8009ab0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009ab2:	7bbb      	ldrb	r3, [r7, #14]
 8009ab4:	2b05      	cmp	r3, #5
 8009ab6:	d102      	bne.n	8009abe <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009ab8:	2303      	movs	r3, #3
 8009aba:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009abc:	e0d6      	b.n	8009c6c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009abe:	7bbb      	ldrb	r3, [r7, #14]
 8009ac0:	2b04      	cmp	r3, #4
 8009ac2:	f040 80d3 	bne.w	8009c6c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	220b      	movs	r2, #11
 8009aca:	761a      	strb	r2, [r3, #24]
      break;
 8009acc:	e0ce      	b.n	8009c6c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6899      	ldr	r1, [r3, #8]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	899a      	ldrh	r2, [r3, #12]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	795b      	ldrb	r3, [r3, #5]
 8009ada:	2001      	movs	r0, #1
 8009adc:	9000      	str	r0, [sp, #0]
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 f8ea 	bl	8009cb8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009aea:	b29a      	uxth	r2, r3
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2206      	movs	r2, #6
 8009af4:	761a      	strb	r2, [r3, #24]
      break;
 8009af6:	e0c0      	b.n	8009c7a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	795b      	ldrb	r3, [r3, #5]
 8009afc:	4619      	mov	r1, r3
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 fc52 	bl	800a3a8 <USBH_LL_GetURBState>
 8009b04:	4603      	mov	r3, r0
 8009b06:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009b08:	7bbb      	ldrb	r3, [r7, #14]
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d103      	bne.n	8009b16 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2207      	movs	r2, #7
 8009b12:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009b14:	e0ac      	b.n	8009c70 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009b16:	7bbb      	ldrb	r3, [r7, #14]
 8009b18:	2b05      	cmp	r3, #5
 8009b1a:	d105      	bne.n	8009b28 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	220c      	movs	r2, #12
 8009b20:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009b22:	2303      	movs	r3, #3
 8009b24:	73fb      	strb	r3, [r7, #15]
      break;
 8009b26:	e0a3      	b.n	8009c70 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009b28:	7bbb      	ldrb	r3, [r7, #14]
 8009b2a:	2b02      	cmp	r3, #2
 8009b2c:	d103      	bne.n	8009b36 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2205      	movs	r2, #5
 8009b32:	761a      	strb	r2, [r3, #24]
      break;
 8009b34:	e09c      	b.n	8009c70 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009b36:	7bbb      	ldrb	r3, [r7, #14]
 8009b38:	2b04      	cmp	r3, #4
 8009b3a:	f040 8099 	bne.w	8009c70 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	220b      	movs	r2, #11
 8009b42:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009b44:	2302      	movs	r3, #2
 8009b46:	73fb      	strb	r3, [r7, #15]
      break;
 8009b48:	e092      	b.n	8009c70 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	791b      	ldrb	r3, [r3, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	2100      	movs	r1, #0
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 f8d5 	bl	8009d02 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009b5e:	b29a      	uxth	r2, r3
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2208      	movs	r2, #8
 8009b68:	761a      	strb	r2, [r3, #24]

      break;
 8009b6a:	e086      	b.n	8009c7a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	791b      	ldrb	r3, [r3, #4]
 8009b70:	4619      	mov	r1, r3
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 fc18 	bl	800a3a8 <USBH_LL_GetURBState>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009b7c:	7bbb      	ldrb	r3, [r7, #14]
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d105      	bne.n	8009b8e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	220d      	movs	r2, #13
 8009b86:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009b8c:	e072      	b.n	8009c74 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009b8e:	7bbb      	ldrb	r3, [r7, #14]
 8009b90:	2b04      	cmp	r3, #4
 8009b92:	d103      	bne.n	8009b9c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	220b      	movs	r2, #11
 8009b98:	761a      	strb	r2, [r3, #24]
      break;
 8009b9a:	e06b      	b.n	8009c74 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009b9c:	7bbb      	ldrb	r3, [r7, #14]
 8009b9e:	2b05      	cmp	r3, #5
 8009ba0:	d168      	bne.n	8009c74 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009ba2:	2303      	movs	r3, #3
 8009ba4:	73fb      	strb	r3, [r7, #15]
      break;
 8009ba6:	e065      	b.n	8009c74 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	795b      	ldrb	r3, [r3, #5]
 8009bac:	2201      	movs	r2, #1
 8009bae:	9200      	str	r2, [sp, #0]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	2100      	movs	r1, #0
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 f87f 	bl	8009cb8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009bc0:	b29a      	uxth	r2, r3
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	220a      	movs	r2, #10
 8009bca:	761a      	strb	r2, [r3, #24]
      break;
 8009bcc:	e055      	b.n	8009c7a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	795b      	ldrb	r3, [r3, #5]
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 fbe7 	bl	800a3a8 <USBH_LL_GetURBState>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009bde:	7bbb      	ldrb	r3, [r7, #14]
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d105      	bne.n	8009bf0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009be4:	2300      	movs	r3, #0
 8009be6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	220d      	movs	r2, #13
 8009bec:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009bee:	e043      	b.n	8009c78 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009bf0:	7bbb      	ldrb	r3, [r7, #14]
 8009bf2:	2b02      	cmp	r3, #2
 8009bf4:	d103      	bne.n	8009bfe <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2209      	movs	r2, #9
 8009bfa:	761a      	strb	r2, [r3, #24]
      break;
 8009bfc:	e03c      	b.n	8009c78 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009bfe:	7bbb      	ldrb	r3, [r7, #14]
 8009c00:	2b04      	cmp	r3, #4
 8009c02:	d139      	bne.n	8009c78 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	220b      	movs	r2, #11
 8009c08:	761a      	strb	r2, [r3, #24]
      break;
 8009c0a:	e035      	b.n	8009c78 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	7e5b      	ldrb	r3, [r3, #25]
 8009c10:	3301      	adds	r3, #1
 8009c12:	b2da      	uxtb	r2, r3
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	765a      	strb	r2, [r3, #25]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	7e5b      	ldrb	r3, [r3, #25]
 8009c1c:	2b02      	cmp	r3, #2
 8009c1e:	d806      	bhi.n	8009c2e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2201      	movs	r2, #1
 8009c24:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2201      	movs	r2, #1
 8009c2a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009c2c:	e025      	b.n	8009c7a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009c34:	2106      	movs	r1, #6
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	795b      	ldrb	r3, [r3, #5]
 8009c44:	4619      	mov	r1, r3
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 f90c 	bl	8009e64 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	791b      	ldrb	r3, [r3, #4]
 8009c50:	4619      	mov	r1, r3
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 f906 	bl	8009e64 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009c5e:	2302      	movs	r3, #2
 8009c60:	73fb      	strb	r3, [r7, #15]
      break;
 8009c62:	e00a      	b.n	8009c7a <USBH_HandleControl+0x2de>

    default:
      break;
 8009c64:	bf00      	nop
 8009c66:	e008      	b.n	8009c7a <USBH_HandleControl+0x2de>
      break;
 8009c68:	bf00      	nop
 8009c6a:	e006      	b.n	8009c7a <USBH_HandleControl+0x2de>
      break;
 8009c6c:	bf00      	nop
 8009c6e:	e004      	b.n	8009c7a <USBH_HandleControl+0x2de>
      break;
 8009c70:	bf00      	nop
 8009c72:	e002      	b.n	8009c7a <USBH_HandleControl+0x2de>
      break;
 8009c74:	bf00      	nop
 8009c76:	e000      	b.n	8009c7a <USBH_HandleControl+0x2de>
      break;
 8009c78:	bf00      	nop
  }

  return status;
 8009c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3710      	adds	r7, #16
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b088      	sub	sp, #32
 8009c88:	af04      	add	r7, sp, #16
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	60b9      	str	r1, [r7, #8]
 8009c8e:	4613      	mov	r3, r2
 8009c90:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009c92:	79f9      	ldrb	r1, [r7, #7]
 8009c94:	2300      	movs	r3, #0
 8009c96:	9303      	str	r3, [sp, #12]
 8009c98:	2308      	movs	r3, #8
 8009c9a:	9302      	str	r3, [sp, #8]
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	9301      	str	r3, [sp, #4]
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	9300      	str	r3, [sp, #0]
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f000 fb4c 	bl	800a346 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009cae:	2300      	movs	r3, #0
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3710      	adds	r7, #16
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b088      	sub	sp, #32
 8009cbc:	af04      	add	r7, sp, #16
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	4611      	mov	r1, r2
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	80fb      	strh	r3, [r7, #6]
 8009cca:	4613      	mov	r3, r2
 8009ccc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d001      	beq.n	8009cdc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009cdc:	7979      	ldrb	r1, [r7, #5]
 8009cde:	7e3b      	ldrb	r3, [r7, #24]
 8009ce0:	9303      	str	r3, [sp, #12]
 8009ce2:	88fb      	ldrh	r3, [r7, #6]
 8009ce4:	9302      	str	r3, [sp, #8]
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	9301      	str	r3, [sp, #4]
 8009cea:	2301      	movs	r3, #1
 8009cec:	9300      	str	r3, [sp, #0]
 8009cee:	2300      	movs	r3, #0
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	68f8      	ldr	r0, [r7, #12]
 8009cf4:	f000 fb27 	bl	800a346 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009cf8:	2300      	movs	r3, #0
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3710      	adds	r7, #16
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}

08009d02 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009d02:	b580      	push	{r7, lr}
 8009d04:	b088      	sub	sp, #32
 8009d06:	af04      	add	r7, sp, #16
 8009d08:	60f8      	str	r0, [r7, #12]
 8009d0a:	60b9      	str	r1, [r7, #8]
 8009d0c:	4611      	mov	r1, r2
 8009d0e:	461a      	mov	r2, r3
 8009d10:	460b      	mov	r3, r1
 8009d12:	80fb      	strh	r3, [r7, #6]
 8009d14:	4613      	mov	r3, r2
 8009d16:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009d18:	7979      	ldrb	r1, [r7, #5]
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	9303      	str	r3, [sp, #12]
 8009d1e:	88fb      	ldrh	r3, [r7, #6]
 8009d20:	9302      	str	r3, [sp, #8]
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	9301      	str	r3, [sp, #4]
 8009d26:	2301      	movs	r3, #1
 8009d28:	9300      	str	r3, [sp, #0]
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	68f8      	ldr	r0, [r7, #12]
 8009d30:	f000 fb09 	bl	800a346 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009d34:	2300      	movs	r3, #0

}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b088      	sub	sp, #32
 8009d42:	af04      	add	r7, sp, #16
 8009d44:	60f8      	str	r0, [r7, #12]
 8009d46:	60b9      	str	r1, [r7, #8]
 8009d48:	4611      	mov	r1, r2
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	80fb      	strh	r3, [r7, #6]
 8009d50:	4613      	mov	r3, r2
 8009d52:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d001      	beq.n	8009d62 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009d62:	7979      	ldrb	r1, [r7, #5]
 8009d64:	7e3b      	ldrb	r3, [r7, #24]
 8009d66:	9303      	str	r3, [sp, #12]
 8009d68:	88fb      	ldrh	r3, [r7, #6]
 8009d6a:	9302      	str	r3, [sp, #8]
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	9301      	str	r3, [sp, #4]
 8009d70:	2301      	movs	r3, #1
 8009d72:	9300      	str	r3, [sp, #0]
 8009d74:	2302      	movs	r3, #2
 8009d76:	2200      	movs	r2, #0
 8009d78:	68f8      	ldr	r0, [r7, #12]
 8009d7a:	f000 fae4 	bl	800a346 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009d7e:	2300      	movs	r3, #0
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3710      	adds	r7, #16
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b088      	sub	sp, #32
 8009d8c:	af04      	add	r7, sp, #16
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	4611      	mov	r1, r2
 8009d94:	461a      	mov	r2, r3
 8009d96:	460b      	mov	r3, r1
 8009d98:	80fb      	strh	r3, [r7, #6]
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009d9e:	7979      	ldrb	r1, [r7, #5]
 8009da0:	2300      	movs	r3, #0
 8009da2:	9303      	str	r3, [sp, #12]
 8009da4:	88fb      	ldrh	r3, [r7, #6]
 8009da6:	9302      	str	r3, [sp, #8]
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	9301      	str	r3, [sp, #4]
 8009dac:	2301      	movs	r3, #1
 8009dae:	9300      	str	r3, [sp, #0]
 8009db0:	2302      	movs	r3, #2
 8009db2:	2201      	movs	r2, #1
 8009db4:	68f8      	ldr	r0, [r7, #12]
 8009db6:	f000 fac6 	bl	800a346 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009dba:	2300      	movs	r3, #0
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3710      	adds	r7, #16
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b086      	sub	sp, #24
 8009dc8:	af04      	add	r7, sp, #16
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	4608      	mov	r0, r1
 8009dce:	4611      	mov	r1, r2
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	70fb      	strb	r3, [r7, #3]
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	70bb      	strb	r3, [r7, #2]
 8009dda:	4613      	mov	r3, r2
 8009ddc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009dde:	7878      	ldrb	r0, [r7, #1]
 8009de0:	78ba      	ldrb	r2, [r7, #2]
 8009de2:	78f9      	ldrb	r1, [r7, #3]
 8009de4:	8b3b      	ldrh	r3, [r7, #24]
 8009de6:	9302      	str	r3, [sp, #8]
 8009de8:	7d3b      	ldrb	r3, [r7, #20]
 8009dea:	9301      	str	r3, [sp, #4]
 8009dec:	7c3b      	ldrb	r3, [r7, #16]
 8009dee:	9300      	str	r3, [sp, #0]
 8009df0:	4603      	mov	r3, r0
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 fa59 	bl	800a2aa <USBH_LL_OpenPipe>

  return USBH_OK;
 8009df8:	2300      	movs	r3, #0
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3708      	adds	r7, #8
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009e02:	b580      	push	{r7, lr}
 8009e04:	b082      	sub	sp, #8
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009e0e:	78fb      	ldrb	r3, [r7, #3]
 8009e10:	4619      	mov	r1, r3
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 fa78 	bl	800a308 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009e18:	2300      	movs	r3, #0
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3708      	adds	r7, #8
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b084      	sub	sp, #16
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 f836 	bl	8009ea0 <USBH_GetFreePipe>
 8009e34:	4603      	mov	r3, r0
 8009e36:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009e38:	89fb      	ldrh	r3, [r7, #14]
 8009e3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d00a      	beq.n	8009e58 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009e42:	78fa      	ldrb	r2, [r7, #3]
 8009e44:	89fb      	ldrh	r3, [r7, #14]
 8009e46:	f003 030f 	and.w	r3, r3, #15
 8009e4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009e4e:	6879      	ldr	r1, [r7, #4]
 8009e50:	33e0      	adds	r3, #224	@ 0xe0
 8009e52:	009b      	lsls	r3, r3, #2
 8009e54:	440b      	add	r3, r1
 8009e56:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009e58:	89fb      	ldrh	r3, [r7, #14]
 8009e5a:	b2db      	uxtb	r3, r3
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3710      	adds	r7, #16
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009e70:	78fb      	ldrb	r3, [r7, #3]
 8009e72:	2b0f      	cmp	r3, #15
 8009e74:	d80d      	bhi.n	8009e92 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009e76:	78fb      	ldrb	r3, [r7, #3]
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	33e0      	adds	r3, #224	@ 0xe0
 8009e7c:	009b      	lsls	r3, r3, #2
 8009e7e:	4413      	add	r3, r2
 8009e80:	685a      	ldr	r2, [r3, #4]
 8009e82:	78fb      	ldrb	r3, [r7, #3]
 8009e84:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009e88:	6879      	ldr	r1, [r7, #4]
 8009e8a:	33e0      	adds	r3, #224	@ 0xe0
 8009e8c:	009b      	lsls	r3, r3, #2
 8009e8e:	440b      	add	r3, r1
 8009e90:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009e92:	2300      	movs	r3, #0
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	370c      	adds	r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b085      	sub	sp, #20
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009eac:	2300      	movs	r3, #0
 8009eae:	73fb      	strb	r3, [r7, #15]
 8009eb0:	e00f      	b.n	8009ed2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009eb2:	7bfb      	ldrb	r3, [r7, #15]
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	33e0      	adds	r3, #224	@ 0xe0
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	4413      	add	r3, r2
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d102      	bne.n	8009ecc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009ec6:	7bfb      	ldrb	r3, [r7, #15]
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	e007      	b.n	8009edc <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009ecc:	7bfb      	ldrb	r3, [r7, #15]
 8009ece:	3301      	adds	r3, #1
 8009ed0:	73fb      	strb	r3, [r7, #15]
 8009ed2:	7bfb      	ldrb	r3, [r7, #15]
 8009ed4:	2b0f      	cmp	r3, #15
 8009ed6:	d9ec      	bls.n	8009eb2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009ed8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3714      	adds	r7, #20
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr

08009ee8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 8009eec:	2200      	movs	r2, #0
 8009eee:	490e      	ldr	r1, [pc, #56]	@ (8009f28 <MX_USB_HOST_Init+0x40>)
 8009ef0:	480e      	ldr	r0, [pc, #56]	@ (8009f2c <MX_USB_HOST_Init+0x44>)
 8009ef2:	f7fe fb15 	bl	8008520 <USBH_Init>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d001      	beq.n	8009f00 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009efc:	f7f6 ffce 	bl	8000e9c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 8009f00:	490b      	ldr	r1, [pc, #44]	@ (8009f30 <MX_USB_HOST_Init+0x48>)
 8009f02:	480a      	ldr	r0, [pc, #40]	@ (8009f2c <MX_USB_HOST_Init+0x44>)
 8009f04:	f7fe fbb9 	bl	800867a <USBH_RegisterClass>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d001      	beq.n	8009f12 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009f0e:	f7f6 ffc5 	bl	8000e9c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 8009f12:	4806      	ldr	r0, [pc, #24]	@ (8009f2c <MX_USB_HOST_Init+0x44>)
 8009f14:	f7fe fc3d 	bl	8008792 <USBH_Start>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d001      	beq.n	8009f22 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009f1e:	f7f6 ffbd 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009f22:	bf00      	nop
 8009f24:	bd80      	pop	{r7, pc}
 8009f26:	bf00      	nop
 8009f28:	08009f49 	.word	0x08009f49
 8009f2c:	2000031c 	.word	0x2000031c
 8009f30:	2000000c 	.word	0x2000000c

08009f34 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 8009f38:	4802      	ldr	r0, [pc, #8]	@ (8009f44 <MX_USB_HOST_Process+0x10>)
 8009f3a:	f7fe fc3b 	bl	80087b4 <USBH_Process>
}
 8009f3e:	bf00      	nop
 8009f40:	bd80      	pop	{r7, pc}
 8009f42:	bf00      	nop
 8009f44:	2000031c 	.word	0x2000031c

08009f48 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b083      	sub	sp, #12
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	460b      	mov	r3, r1
 8009f52:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009f54:	78fb      	ldrb	r3, [r7, #3]
 8009f56:	3b01      	subs	r3, #1
 8009f58:	2b04      	cmp	r3, #4
 8009f5a:	d819      	bhi.n	8009f90 <USBH_UserProcess+0x48>
 8009f5c:	a201      	add	r2, pc, #4	@ (adr r2, 8009f64 <USBH_UserProcess+0x1c>)
 8009f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f62:	bf00      	nop
 8009f64:	08009f91 	.word	0x08009f91
 8009f68:	08009f81 	.word	0x08009f81
 8009f6c:	08009f91 	.word	0x08009f91
 8009f70:	08009f89 	.word	0x08009f89
 8009f74:	08009f79 	.word	0x08009f79
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009f78:	4b09      	ldr	r3, [pc, #36]	@ (8009fa0 <USBH_UserProcess+0x58>)
 8009f7a:	2203      	movs	r2, #3
 8009f7c:	701a      	strb	r2, [r3, #0]
  break;
 8009f7e:	e008      	b.n	8009f92 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009f80:	4b07      	ldr	r3, [pc, #28]	@ (8009fa0 <USBH_UserProcess+0x58>)
 8009f82:	2202      	movs	r2, #2
 8009f84:	701a      	strb	r2, [r3, #0]
  break;
 8009f86:	e004      	b.n	8009f92 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009f88:	4b05      	ldr	r3, [pc, #20]	@ (8009fa0 <USBH_UserProcess+0x58>)
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	701a      	strb	r2, [r3, #0]
  break;
 8009f8e:	e000      	b.n	8009f92 <USBH_UserProcess+0x4a>

  default:
  break;
 8009f90:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009f92:	bf00      	nop
 8009f94:	370c      	adds	r7, #12
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr
 8009f9e:	bf00      	nop
 8009fa0:	200006f4 	.word	0x200006f4

08009fa4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b08a      	sub	sp, #40	@ 0x28
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009fac:	f107 0314 	add.w	r3, r7, #20
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	601a      	str	r2, [r3, #0]
 8009fb4:	605a      	str	r2, [r3, #4]
 8009fb6:	609a      	str	r2, [r3, #8]
 8009fb8:	60da      	str	r2, [r3, #12]
 8009fba:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a24      	ldr	r2, [pc, #144]	@ (800a054 <HAL_HCD_MspInit+0xb0>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d141      	bne.n	800a04a <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	613b      	str	r3, [r7, #16]
 8009fca:	4b23      	ldr	r3, [pc, #140]	@ (800a058 <HAL_HCD_MspInit+0xb4>)
 8009fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fce:	4a22      	ldr	r2, [pc, #136]	@ (800a058 <HAL_HCD_MspInit+0xb4>)
 8009fd0:	f043 0302 	orr.w	r3, r3, #2
 8009fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8009fd6:	4b20      	ldr	r3, [pc, #128]	@ (800a058 <HAL_HCD_MspInit+0xb4>)
 8009fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fda:	f003 0302 	and.w	r3, r3, #2
 8009fde:	613b      	str	r3, [r7, #16]
 8009fe0:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8009fe2:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8009fe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fe8:	2302      	movs	r3, #2
 8009fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fec:	2300      	movs	r3, #0
 8009fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8009ff4:	230c      	movs	r3, #12
 8009ff6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009ff8:	f107 0314 	add.w	r3, r7, #20
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	4817      	ldr	r0, [pc, #92]	@ (800a05c <HAL_HCD_MspInit+0xb8>)
 800a000:	f7f8 fa16 	bl	8002430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800a004:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a00a:	2300      	movs	r3, #0
 800a00c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a00e:	2300      	movs	r3, #0
 800a010:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800a012:	f107 0314 	add.w	r3, r7, #20
 800a016:	4619      	mov	r1, r3
 800a018:	4810      	ldr	r0, [pc, #64]	@ (800a05c <HAL_HCD_MspInit+0xb8>)
 800a01a:	f7f8 fa09 	bl	8002430 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800a01e:	2300      	movs	r3, #0
 800a020:	60fb      	str	r3, [r7, #12]
 800a022:	4b0d      	ldr	r3, [pc, #52]	@ (800a058 <HAL_HCD_MspInit+0xb4>)
 800a024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a026:	4a0c      	ldr	r2, [pc, #48]	@ (800a058 <HAL_HCD_MspInit+0xb4>)
 800a028:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a02c:	6313      	str	r3, [r2, #48]	@ 0x30
 800a02e:	4b0a      	ldr	r3, [pc, #40]	@ (800a058 <HAL_HCD_MspInit+0xb4>)
 800a030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a032:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a036:	60fb      	str	r3, [r7, #12]
 800a038:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800a03a:	2200      	movs	r2, #0
 800a03c:	2100      	movs	r1, #0
 800a03e:	204d      	movs	r0, #77	@ 0x4d
 800a040:	f7f8 f850 	bl	80020e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800a044:	204d      	movs	r0, #77	@ 0x4d
 800a046:	f7f8 f869 	bl	800211c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800a04a:	bf00      	nop
 800a04c:	3728      	adds	r7, #40	@ 0x28
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop
 800a054:	40040000 	.word	0x40040000
 800a058:	40023800 	.word	0x40023800
 800a05c:	40020400 	.word	0x40020400

0800a060 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b082      	sub	sp, #8
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a06e:	4618      	mov	r0, r3
 800a070:	f7fe ff77 	bl	8008f62 <USBH_LL_IncTimer>
}
 800a074:	bf00      	nop
 800a076:	3708      	adds	r7, #8
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b082      	sub	sp, #8
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a08a:	4618      	mov	r0, r3
 800a08c:	f7fe ffaf 	bl	8008fee <USBH_LL_Connect>
}
 800a090:	bf00      	nop
 800a092:	3708      	adds	r7, #8
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7fe ffb8 	bl	800901c <USBH_LL_Disconnect>
}
 800a0ac:	bf00      	nop
 800a0ae:	3708      	adds	r7, #8
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	460b      	mov	r3, r1
 800a0be:	70fb      	strb	r3, [r7, #3]
 800a0c0:	4613      	mov	r3, r2
 800a0c2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a0c4:	bf00      	nop
 800a0c6:	370c      	adds	r7, #12
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr

0800a0d0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7fe ff69 	bl	8008fb6 <USBH_LL_PortEnabled>
}
 800a0e4:	bf00      	nop
 800a0e6:	3708      	adds	r7, #8
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f7fe ff69 	bl	8008fd2 <USBH_LL_PortDisabled>
}
 800a100:	bf00      	nop
 800a102:	3708      	adds	r7, #8
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a116:	2b00      	cmp	r3, #0
 800a118:	d132      	bne.n	800a180 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800a11a:	4a1c      	ldr	r2, [pc, #112]	@ (800a18c <USBH_LL_Init+0x84>)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_HS;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4a19      	ldr	r2, [pc, #100]	@ (800a18c <USBH_LL_Init+0x84>)
 800a126:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800a12a:	4b18      	ldr	r3, [pc, #96]	@ (800a18c <USBH_LL_Init+0x84>)
 800a12c:	4a18      	ldr	r2, [pc, #96]	@ (800a190 <USBH_LL_Init+0x88>)
 800a12e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800a130:	4b16      	ldr	r3, [pc, #88]	@ (800a18c <USBH_LL_Init+0x84>)
 800a132:	220c      	movs	r2, #12
 800a134:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800a136:	4b15      	ldr	r3, [pc, #84]	@ (800a18c <USBH_LL_Init+0x84>)
 800a138:	2201      	movs	r2, #1
 800a13a:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800a13c:	4b13      	ldr	r3, [pc, #76]	@ (800a18c <USBH_LL_Init+0x84>)
 800a13e:	2200      	movs	r2, #0
 800a140:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800a142:	4b12      	ldr	r3, [pc, #72]	@ (800a18c <USBH_LL_Init+0x84>)
 800a144:	2202      	movs	r2, #2
 800a146:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800a148:	4b10      	ldr	r3, [pc, #64]	@ (800a18c <USBH_LL_Init+0x84>)
 800a14a:	2200      	movs	r2, #0
 800a14c:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800a14e:	4b0f      	ldr	r3, [pc, #60]	@ (800a18c <USBH_LL_Init+0x84>)
 800a150:	2200      	movs	r2, #0
 800a152:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800a154:	4b0d      	ldr	r3, [pc, #52]	@ (800a18c <USBH_LL_Init+0x84>)
 800a156:	2200      	movs	r2, #0
 800a158:	739a      	strb	r2, [r3, #14]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800a15a:	4b0c      	ldr	r3, [pc, #48]	@ (800a18c <USBH_LL_Init+0x84>)
 800a15c:	2200      	movs	r2, #0
 800a15e:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800a160:	480a      	ldr	r0, [pc, #40]	@ (800a18c <USBH_LL_Init+0x84>)
 800a162:	f7f8 fb2a 	bl	80027ba <HAL_HCD_Init>
 800a166:	4603      	mov	r3, r0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d001      	beq.n	800a170 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800a16c:	f7f6 fe96 	bl	8000e9c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800a170:	4806      	ldr	r0, [pc, #24]	@ (800a18c <USBH_LL_Init+0x84>)
 800a172:	f7f8 ff8b 	bl	800308c <HAL_HCD_GetCurrentFrame>
 800a176:	4603      	mov	r3, r0
 800a178:	4619      	mov	r1, r3
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f7fe fee2 	bl	8008f44 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a180:	2300      	movs	r3, #0
}
 800a182:	4618      	mov	r0, r3
 800a184:	3708      	adds	r7, #8
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	200006f8 	.word	0x200006f8
 800a190:	40040000 	.word	0x40040000

0800a194 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b084      	sub	sp, #16
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a19c:	2300      	movs	r3, #0
 800a19e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7f8 fef6 	bl	8002f9c <HAL_HCD_Start>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a1b4:	7bfb      	ldrb	r3, [r7, #15]
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f000 f95e 	bl	800a478 <USBH_Get_USB_Status>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}

0800a1ca <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a1ca:	b580      	push	{r7, lr}
 800a1cc:	b084      	sub	sp, #16
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f7f8 fefe 	bl	8002fe2 <HAL_HCD_Stop>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a1ea:	7bfb      	ldrb	r3, [r7, #15]
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f000 f943 	bl	800a478 <USBH_Get_USB_Status>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3710      	adds	r7, #16
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a208:	2301      	movs	r3, #1
 800a20a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a212:	4618      	mov	r0, r3
 800a214:	f7f8 ff48 	bl	80030a8 <HAL_HCD_GetCurrentSpeed>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b02      	cmp	r3, #2
 800a21c:	d00c      	beq.n	800a238 <USBH_LL_GetSpeed+0x38>
 800a21e:	2b02      	cmp	r3, #2
 800a220:	d80d      	bhi.n	800a23e <USBH_LL_GetSpeed+0x3e>
 800a222:	2b00      	cmp	r3, #0
 800a224:	d002      	beq.n	800a22c <USBH_LL_GetSpeed+0x2c>
 800a226:	2b01      	cmp	r3, #1
 800a228:	d003      	beq.n	800a232 <USBH_LL_GetSpeed+0x32>
 800a22a:	e008      	b.n	800a23e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a22c:	2300      	movs	r3, #0
 800a22e:	73fb      	strb	r3, [r7, #15]
    break;
 800a230:	e008      	b.n	800a244 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a232:	2301      	movs	r3, #1
 800a234:	73fb      	strb	r3, [r7, #15]
    break;
 800a236:	e005      	b.n	800a244 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a238:	2302      	movs	r3, #2
 800a23a:	73fb      	strb	r3, [r7, #15]
    break;
 800a23c:	e002      	b.n	800a244 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a23e:	2301      	movs	r3, #1
 800a240:	73fb      	strb	r3, [r7, #15]
    break;
 800a242:	bf00      	nop
  }
  return  speed;
 800a244:	7bfb      	ldrb	r3, [r7, #15]
}
 800a246:	4618      	mov	r0, r3
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b084      	sub	sp, #16
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a256:	2300      	movs	r3, #0
 800a258:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a25a:	2300      	movs	r3, #0
 800a25c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a264:	4618      	mov	r0, r3
 800a266:	f7f8 fed9 	bl	800301c <HAL_HCD_ResetPort>
 800a26a:	4603      	mov	r3, r0
 800a26c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a26e:	7bfb      	ldrb	r3, [r7, #15]
 800a270:	4618      	mov	r0, r3
 800a272:	f000 f901 	bl	800a478 <USBH_Get_USB_Status>
 800a276:	4603      	mov	r3, r0
 800a278:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a27a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3710      	adds	r7, #16
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	460b      	mov	r3, r1
 800a28e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a296:	78fa      	ldrb	r2, [r7, #3]
 800a298:	4611      	mov	r1, r2
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7f8 fee1 	bl	8003062 <HAL_HCD_HC_GetXferCount>
 800a2a0:	4603      	mov	r3, r0
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3708      	adds	r7, #8
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}

0800a2aa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a2aa:	b590      	push	{r4, r7, lr}
 800a2ac:	b089      	sub	sp, #36	@ 0x24
 800a2ae:	af04      	add	r7, sp, #16
 800a2b0:	6078      	str	r0, [r7, #4]
 800a2b2:	4608      	mov	r0, r1
 800a2b4:	4611      	mov	r1, r2
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	70fb      	strb	r3, [r7, #3]
 800a2bc:	460b      	mov	r3, r1
 800a2be:	70bb      	strb	r3, [r7, #2]
 800a2c0:	4613      	mov	r3, r2
 800a2c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a2d2:	787c      	ldrb	r4, [r7, #1]
 800a2d4:	78ba      	ldrb	r2, [r7, #2]
 800a2d6:	78f9      	ldrb	r1, [r7, #3]
 800a2d8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a2da:	9302      	str	r3, [sp, #8]
 800a2dc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a2e0:	9301      	str	r3, [sp, #4]
 800a2e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a2e6:	9300      	str	r3, [sp, #0]
 800a2e8:	4623      	mov	r3, r4
 800a2ea:	f7f8 facd 	bl	8002888 <HAL_HCD_HC_Init>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a2f2:	7bfb      	ldrb	r3, [r7, #15]
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f000 f8bf 	bl	800a478 <USBH_Get_USB_Status>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800a300:	4618      	mov	r0, r3
 800a302:	3714      	adds	r7, #20
 800a304:	46bd      	mov	sp, r7
 800a306:	bd90      	pop	{r4, r7, pc}

0800a308 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	460b      	mov	r3, r1
 800a312:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a314:	2300      	movs	r3, #0
 800a316:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a318:	2300      	movs	r3, #0
 800a31a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a322:	78fa      	ldrb	r2, [r7, #3]
 800a324:	4611      	mov	r1, r2
 800a326:	4618      	mov	r0, r3
 800a328:	f7f8 fb66 	bl	80029f8 <HAL_HCD_HC_Halt>
 800a32c:	4603      	mov	r3, r0
 800a32e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a330:	7bfb      	ldrb	r3, [r7, #15]
 800a332:	4618      	mov	r0, r3
 800a334:	f000 f8a0 	bl	800a478 <USBH_Get_USB_Status>
 800a338:	4603      	mov	r3, r0
 800a33a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a33c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3710      	adds	r7, #16
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}

0800a346 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a346:	b590      	push	{r4, r7, lr}
 800a348:	b089      	sub	sp, #36	@ 0x24
 800a34a:	af04      	add	r7, sp, #16
 800a34c:	6078      	str	r0, [r7, #4]
 800a34e:	4608      	mov	r0, r1
 800a350:	4611      	mov	r1, r2
 800a352:	461a      	mov	r2, r3
 800a354:	4603      	mov	r3, r0
 800a356:	70fb      	strb	r3, [r7, #3]
 800a358:	460b      	mov	r3, r1
 800a35a:	70bb      	strb	r3, [r7, #2]
 800a35c:	4613      	mov	r3, r2
 800a35e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a360:	2300      	movs	r3, #0
 800a362:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a364:	2300      	movs	r3, #0
 800a366:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a36e:	787c      	ldrb	r4, [r7, #1]
 800a370:	78ba      	ldrb	r2, [r7, #2]
 800a372:	78f9      	ldrb	r1, [r7, #3]
 800a374:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a378:	9303      	str	r3, [sp, #12]
 800a37a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a37c:	9302      	str	r3, [sp, #8]
 800a37e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a380:	9301      	str	r3, [sp, #4]
 800a382:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a386:	9300      	str	r3, [sp, #0]
 800a388:	4623      	mov	r3, r4
 800a38a:	f7f8 fb59 	bl	8002a40 <HAL_HCD_HC_SubmitRequest>
 800a38e:	4603      	mov	r3, r0
 800a390:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a392:	7bfb      	ldrb	r3, [r7, #15]
 800a394:	4618      	mov	r0, r3
 800a396:	f000 f86f 	bl	800a478 <USBH_Get_USB_Status>
 800a39a:	4603      	mov	r3, r0
 800a39c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a39e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3714      	adds	r7, #20
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd90      	pop	{r4, r7, pc}

0800a3a8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a3ba:	78fa      	ldrb	r2, [r7, #3]
 800a3bc:	4611      	mov	r1, r2
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7f8 fe3a 	bl	8003038 <HAL_HCD_HC_GetURBState>
 800a3c4:	4603      	mov	r3, r0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3708      	adds	r7, #8
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}

0800a3ce <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a3ce:	b580      	push	{r7, lr}
 800a3d0:	b082      	sub	sp, #8
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d103      	bne.n	800a3ec <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800a3e4:	78fb      	ldrb	r3, [r7, #3]
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f000 f872 	bl	800a4d0 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a3ec:	20c8      	movs	r0, #200	@ 0xc8
 800a3ee:	f7f7 f99b 	bl	8001728 <HAL_Delay>
  return USBH_OK;
 800a3f2:	2300      	movs	r3, #0
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3708      	adds	r7, #8
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b085      	sub	sp, #20
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	460b      	mov	r3, r1
 800a406:	70fb      	strb	r3, [r7, #3]
 800a408:	4613      	mov	r3, r2
 800a40a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a412:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a414:	78fa      	ldrb	r2, [r7, #3]
 800a416:	68f9      	ldr	r1, [r7, #12]
 800a418:	4613      	mov	r3, r2
 800a41a:	011b      	lsls	r3, r3, #4
 800a41c:	1a9b      	subs	r3, r3, r2
 800a41e:	009b      	lsls	r3, r3, #2
 800a420:	440b      	add	r3, r1
 800a422:	3317      	adds	r3, #23
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d00a      	beq.n	800a440 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a42a:	78fa      	ldrb	r2, [r7, #3]
 800a42c:	68f9      	ldr	r1, [r7, #12]
 800a42e:	4613      	mov	r3, r2
 800a430:	011b      	lsls	r3, r3, #4
 800a432:	1a9b      	subs	r3, r3, r2
 800a434:	009b      	lsls	r3, r3, #2
 800a436:	440b      	add	r3, r1
 800a438:	333c      	adds	r3, #60	@ 0x3c
 800a43a:	78ba      	ldrb	r2, [r7, #2]
 800a43c:	701a      	strb	r2, [r3, #0]
 800a43e:	e009      	b.n	800a454 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a440:	78fa      	ldrb	r2, [r7, #3]
 800a442:	68f9      	ldr	r1, [r7, #12]
 800a444:	4613      	mov	r3, r2
 800a446:	011b      	lsls	r3, r3, #4
 800a448:	1a9b      	subs	r3, r3, r2
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	440b      	add	r3, r1
 800a44e:	333d      	adds	r3, #61	@ 0x3d
 800a450:	78ba      	ldrb	r2, [r7, #2]
 800a452:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a454:	2300      	movs	r3, #0
}
 800a456:	4618      	mov	r0, r3
 800a458:	3714      	adds	r7, #20
 800a45a:	46bd      	mov	sp, r7
 800a45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a460:	4770      	bx	lr

0800a462 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a462:	b580      	push	{r7, lr}
 800a464:	b082      	sub	sp, #8
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f7f7 f95c 	bl	8001728 <HAL_Delay>
}
 800a470:	bf00      	nop
 800a472:	3708      	adds	r7, #8
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a478:	b480      	push	{r7}
 800a47a:	b085      	sub	sp, #20
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	4603      	mov	r3, r0
 800a480:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a482:	2300      	movs	r3, #0
 800a484:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a486:	79fb      	ldrb	r3, [r7, #7]
 800a488:	2b03      	cmp	r3, #3
 800a48a:	d817      	bhi.n	800a4bc <USBH_Get_USB_Status+0x44>
 800a48c:	a201      	add	r2, pc, #4	@ (adr r2, 800a494 <USBH_Get_USB_Status+0x1c>)
 800a48e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a492:	bf00      	nop
 800a494:	0800a4a5 	.word	0x0800a4a5
 800a498:	0800a4ab 	.word	0x0800a4ab
 800a49c:	0800a4b1 	.word	0x0800a4b1
 800a4a0:	0800a4b7 	.word	0x0800a4b7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a4a8:	e00b      	b.n	800a4c2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a4aa:	2302      	movs	r3, #2
 800a4ac:	73fb      	strb	r3, [r7, #15]
    break;
 800a4ae:	e008      	b.n	800a4c2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	73fb      	strb	r3, [r7, #15]
    break;
 800a4b4:	e005      	b.n	800a4c2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a4b6:	2302      	movs	r3, #2
 800a4b8:	73fb      	strb	r3, [r7, #15]
    break;
 800a4ba:	e002      	b.n	800a4c2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a4bc:	2302      	movs	r3, #2
 800a4be:	73fb      	strb	r3, [r7, #15]
    break;
 800a4c0:	bf00      	nop
  }
  return usb_status;
 800a4c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3714      	adds	r7, #20
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr

0800a4d0 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a4da:	79fb      	ldrb	r3, [r7, #7]
 800a4dc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800a4de:	79fb      	ldrb	r3, [r7, #7]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d102      	bne.n	800a4ea <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	73fb      	strb	r3, [r7, #15]
 800a4e8:	e001      	b.n	800a4ee <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800a4ee:	7bfb      	ldrb	r3, [r7, #15]
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	2110      	movs	r1, #16
 800a4f4:	4803      	ldr	r0, [pc, #12]	@ (800a504 <MX_DriverVbusHS+0x34>)
 800a4f6:	f7f8 f947 	bl	8002788 <HAL_GPIO_WritePin>
}
 800a4fa:	bf00      	nop
 800a4fc:	3710      	adds	r7, #16
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
 800a502:	bf00      	nop
 800a504:	40020800 	.word	0x40020800

0800a508 <malloc>:
 800a508:	4b02      	ldr	r3, [pc, #8]	@ (800a514 <malloc+0xc>)
 800a50a:	4601      	mov	r1, r0
 800a50c:	6818      	ldr	r0, [r3, #0]
 800a50e:	f000 b82d 	b.w	800a56c <_malloc_r>
 800a512:	bf00      	nop
 800a514:	20000038 	.word	0x20000038

0800a518 <free>:
 800a518:	4b02      	ldr	r3, [pc, #8]	@ (800a524 <free+0xc>)
 800a51a:	4601      	mov	r1, r0
 800a51c:	6818      	ldr	r0, [r3, #0]
 800a51e:	f000 ba55 	b.w	800a9cc <_free_r>
 800a522:	bf00      	nop
 800a524:	20000038 	.word	0x20000038

0800a528 <sbrk_aligned>:
 800a528:	b570      	push	{r4, r5, r6, lr}
 800a52a:	4e0f      	ldr	r6, [pc, #60]	@ (800a568 <sbrk_aligned+0x40>)
 800a52c:	460c      	mov	r4, r1
 800a52e:	6831      	ldr	r1, [r6, #0]
 800a530:	4605      	mov	r5, r0
 800a532:	b911      	cbnz	r1, 800a53a <sbrk_aligned+0x12>
 800a534:	f000 f9fa 	bl	800a92c <_sbrk_r>
 800a538:	6030      	str	r0, [r6, #0]
 800a53a:	4621      	mov	r1, r4
 800a53c:	4628      	mov	r0, r5
 800a53e:	f000 f9f5 	bl	800a92c <_sbrk_r>
 800a542:	1c43      	adds	r3, r0, #1
 800a544:	d103      	bne.n	800a54e <sbrk_aligned+0x26>
 800a546:	f04f 34ff 	mov.w	r4, #4294967295
 800a54a:	4620      	mov	r0, r4
 800a54c:	bd70      	pop	{r4, r5, r6, pc}
 800a54e:	1cc4      	adds	r4, r0, #3
 800a550:	f024 0403 	bic.w	r4, r4, #3
 800a554:	42a0      	cmp	r0, r4
 800a556:	d0f8      	beq.n	800a54a <sbrk_aligned+0x22>
 800a558:	1a21      	subs	r1, r4, r0
 800a55a:	4628      	mov	r0, r5
 800a55c:	f000 f9e6 	bl	800a92c <_sbrk_r>
 800a560:	3001      	adds	r0, #1
 800a562:	d1f2      	bne.n	800a54a <sbrk_aligned+0x22>
 800a564:	e7ef      	b.n	800a546 <sbrk_aligned+0x1e>
 800a566:	bf00      	nop
 800a568:	20000ad8 	.word	0x20000ad8

0800a56c <_malloc_r>:
 800a56c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a570:	1ccd      	adds	r5, r1, #3
 800a572:	f025 0503 	bic.w	r5, r5, #3
 800a576:	3508      	adds	r5, #8
 800a578:	2d0c      	cmp	r5, #12
 800a57a:	bf38      	it	cc
 800a57c:	250c      	movcc	r5, #12
 800a57e:	2d00      	cmp	r5, #0
 800a580:	4606      	mov	r6, r0
 800a582:	db01      	blt.n	800a588 <_malloc_r+0x1c>
 800a584:	42a9      	cmp	r1, r5
 800a586:	d904      	bls.n	800a592 <_malloc_r+0x26>
 800a588:	230c      	movs	r3, #12
 800a58a:	6033      	str	r3, [r6, #0]
 800a58c:	2000      	movs	r0, #0
 800a58e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a592:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a668 <_malloc_r+0xfc>
 800a596:	f000 f869 	bl	800a66c <__malloc_lock>
 800a59a:	f8d8 3000 	ldr.w	r3, [r8]
 800a59e:	461c      	mov	r4, r3
 800a5a0:	bb44      	cbnz	r4, 800a5f4 <_malloc_r+0x88>
 800a5a2:	4629      	mov	r1, r5
 800a5a4:	4630      	mov	r0, r6
 800a5a6:	f7ff ffbf 	bl	800a528 <sbrk_aligned>
 800a5aa:	1c43      	adds	r3, r0, #1
 800a5ac:	4604      	mov	r4, r0
 800a5ae:	d158      	bne.n	800a662 <_malloc_r+0xf6>
 800a5b0:	f8d8 4000 	ldr.w	r4, [r8]
 800a5b4:	4627      	mov	r7, r4
 800a5b6:	2f00      	cmp	r7, #0
 800a5b8:	d143      	bne.n	800a642 <_malloc_r+0xd6>
 800a5ba:	2c00      	cmp	r4, #0
 800a5bc:	d04b      	beq.n	800a656 <_malloc_r+0xea>
 800a5be:	6823      	ldr	r3, [r4, #0]
 800a5c0:	4639      	mov	r1, r7
 800a5c2:	4630      	mov	r0, r6
 800a5c4:	eb04 0903 	add.w	r9, r4, r3
 800a5c8:	f000 f9b0 	bl	800a92c <_sbrk_r>
 800a5cc:	4581      	cmp	r9, r0
 800a5ce:	d142      	bne.n	800a656 <_malloc_r+0xea>
 800a5d0:	6821      	ldr	r1, [r4, #0]
 800a5d2:	1a6d      	subs	r5, r5, r1
 800a5d4:	4629      	mov	r1, r5
 800a5d6:	4630      	mov	r0, r6
 800a5d8:	f7ff ffa6 	bl	800a528 <sbrk_aligned>
 800a5dc:	3001      	adds	r0, #1
 800a5de:	d03a      	beq.n	800a656 <_malloc_r+0xea>
 800a5e0:	6823      	ldr	r3, [r4, #0]
 800a5e2:	442b      	add	r3, r5
 800a5e4:	6023      	str	r3, [r4, #0]
 800a5e6:	f8d8 3000 	ldr.w	r3, [r8]
 800a5ea:	685a      	ldr	r2, [r3, #4]
 800a5ec:	bb62      	cbnz	r2, 800a648 <_malloc_r+0xdc>
 800a5ee:	f8c8 7000 	str.w	r7, [r8]
 800a5f2:	e00f      	b.n	800a614 <_malloc_r+0xa8>
 800a5f4:	6822      	ldr	r2, [r4, #0]
 800a5f6:	1b52      	subs	r2, r2, r5
 800a5f8:	d420      	bmi.n	800a63c <_malloc_r+0xd0>
 800a5fa:	2a0b      	cmp	r2, #11
 800a5fc:	d917      	bls.n	800a62e <_malloc_r+0xc2>
 800a5fe:	1961      	adds	r1, r4, r5
 800a600:	42a3      	cmp	r3, r4
 800a602:	6025      	str	r5, [r4, #0]
 800a604:	bf18      	it	ne
 800a606:	6059      	strne	r1, [r3, #4]
 800a608:	6863      	ldr	r3, [r4, #4]
 800a60a:	bf08      	it	eq
 800a60c:	f8c8 1000 	streq.w	r1, [r8]
 800a610:	5162      	str	r2, [r4, r5]
 800a612:	604b      	str	r3, [r1, #4]
 800a614:	4630      	mov	r0, r6
 800a616:	f000 f82f 	bl	800a678 <__malloc_unlock>
 800a61a:	f104 000b 	add.w	r0, r4, #11
 800a61e:	1d23      	adds	r3, r4, #4
 800a620:	f020 0007 	bic.w	r0, r0, #7
 800a624:	1ac2      	subs	r2, r0, r3
 800a626:	bf1c      	itt	ne
 800a628:	1a1b      	subne	r3, r3, r0
 800a62a:	50a3      	strne	r3, [r4, r2]
 800a62c:	e7af      	b.n	800a58e <_malloc_r+0x22>
 800a62e:	6862      	ldr	r2, [r4, #4]
 800a630:	42a3      	cmp	r3, r4
 800a632:	bf0c      	ite	eq
 800a634:	f8c8 2000 	streq.w	r2, [r8]
 800a638:	605a      	strne	r2, [r3, #4]
 800a63a:	e7eb      	b.n	800a614 <_malloc_r+0xa8>
 800a63c:	4623      	mov	r3, r4
 800a63e:	6864      	ldr	r4, [r4, #4]
 800a640:	e7ae      	b.n	800a5a0 <_malloc_r+0x34>
 800a642:	463c      	mov	r4, r7
 800a644:	687f      	ldr	r7, [r7, #4]
 800a646:	e7b6      	b.n	800a5b6 <_malloc_r+0x4a>
 800a648:	461a      	mov	r2, r3
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	42a3      	cmp	r3, r4
 800a64e:	d1fb      	bne.n	800a648 <_malloc_r+0xdc>
 800a650:	2300      	movs	r3, #0
 800a652:	6053      	str	r3, [r2, #4]
 800a654:	e7de      	b.n	800a614 <_malloc_r+0xa8>
 800a656:	230c      	movs	r3, #12
 800a658:	6033      	str	r3, [r6, #0]
 800a65a:	4630      	mov	r0, r6
 800a65c:	f000 f80c 	bl	800a678 <__malloc_unlock>
 800a660:	e794      	b.n	800a58c <_malloc_r+0x20>
 800a662:	6005      	str	r5, [r0, #0]
 800a664:	e7d6      	b.n	800a614 <_malloc_r+0xa8>
 800a666:	bf00      	nop
 800a668:	20000adc 	.word	0x20000adc

0800a66c <__malloc_lock>:
 800a66c:	4801      	ldr	r0, [pc, #4]	@ (800a674 <__malloc_lock+0x8>)
 800a66e:	f000 b9aa 	b.w	800a9c6 <__retarget_lock_acquire_recursive>
 800a672:	bf00      	nop
 800a674:	20000c20 	.word	0x20000c20

0800a678 <__malloc_unlock>:
 800a678:	4801      	ldr	r0, [pc, #4]	@ (800a680 <__malloc_unlock+0x8>)
 800a67a:	f000 b9a5 	b.w	800a9c8 <__retarget_lock_release_recursive>
 800a67e:	bf00      	nop
 800a680:	20000c20 	.word	0x20000c20

0800a684 <std>:
 800a684:	2300      	movs	r3, #0
 800a686:	b510      	push	{r4, lr}
 800a688:	4604      	mov	r4, r0
 800a68a:	e9c0 3300 	strd	r3, r3, [r0]
 800a68e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a692:	6083      	str	r3, [r0, #8]
 800a694:	8181      	strh	r1, [r0, #12]
 800a696:	6643      	str	r3, [r0, #100]	@ 0x64
 800a698:	81c2      	strh	r2, [r0, #14]
 800a69a:	6183      	str	r3, [r0, #24]
 800a69c:	4619      	mov	r1, r3
 800a69e:	2208      	movs	r2, #8
 800a6a0:	305c      	adds	r0, #92	@ 0x5c
 800a6a2:	f000 f906 	bl	800a8b2 <memset>
 800a6a6:	4b0d      	ldr	r3, [pc, #52]	@ (800a6dc <std+0x58>)
 800a6a8:	6263      	str	r3, [r4, #36]	@ 0x24
 800a6aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a6e0 <std+0x5c>)
 800a6ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a6ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a6e4 <std+0x60>)
 800a6b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a6b2:	4b0d      	ldr	r3, [pc, #52]	@ (800a6e8 <std+0x64>)
 800a6b4:	6323      	str	r3, [r4, #48]	@ 0x30
 800a6b6:	4b0d      	ldr	r3, [pc, #52]	@ (800a6ec <std+0x68>)
 800a6b8:	6224      	str	r4, [r4, #32]
 800a6ba:	429c      	cmp	r4, r3
 800a6bc:	d006      	beq.n	800a6cc <std+0x48>
 800a6be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a6c2:	4294      	cmp	r4, r2
 800a6c4:	d002      	beq.n	800a6cc <std+0x48>
 800a6c6:	33d0      	adds	r3, #208	@ 0xd0
 800a6c8:	429c      	cmp	r4, r3
 800a6ca:	d105      	bne.n	800a6d8 <std+0x54>
 800a6cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a6d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6d4:	f000 b976 	b.w	800a9c4 <__retarget_lock_init_recursive>
 800a6d8:	bd10      	pop	{r4, pc}
 800a6da:	bf00      	nop
 800a6dc:	0800a82d 	.word	0x0800a82d
 800a6e0:	0800a84f 	.word	0x0800a84f
 800a6e4:	0800a887 	.word	0x0800a887
 800a6e8:	0800a8ab 	.word	0x0800a8ab
 800a6ec:	20000ae0 	.word	0x20000ae0

0800a6f0 <stdio_exit_handler>:
 800a6f0:	4a02      	ldr	r2, [pc, #8]	@ (800a6fc <stdio_exit_handler+0xc>)
 800a6f2:	4903      	ldr	r1, [pc, #12]	@ (800a700 <stdio_exit_handler+0x10>)
 800a6f4:	4803      	ldr	r0, [pc, #12]	@ (800a704 <stdio_exit_handler+0x14>)
 800a6f6:	f000 b869 	b.w	800a7cc <_fwalk_sglue>
 800a6fa:	bf00      	nop
 800a6fc:	2000002c 	.word	0x2000002c
 800a700:	0800b109 	.word	0x0800b109
 800a704:	2000003c 	.word	0x2000003c

0800a708 <cleanup_stdio>:
 800a708:	6841      	ldr	r1, [r0, #4]
 800a70a:	4b0c      	ldr	r3, [pc, #48]	@ (800a73c <cleanup_stdio+0x34>)
 800a70c:	4299      	cmp	r1, r3
 800a70e:	b510      	push	{r4, lr}
 800a710:	4604      	mov	r4, r0
 800a712:	d001      	beq.n	800a718 <cleanup_stdio+0x10>
 800a714:	f000 fcf8 	bl	800b108 <_fflush_r>
 800a718:	68a1      	ldr	r1, [r4, #8]
 800a71a:	4b09      	ldr	r3, [pc, #36]	@ (800a740 <cleanup_stdio+0x38>)
 800a71c:	4299      	cmp	r1, r3
 800a71e:	d002      	beq.n	800a726 <cleanup_stdio+0x1e>
 800a720:	4620      	mov	r0, r4
 800a722:	f000 fcf1 	bl	800b108 <_fflush_r>
 800a726:	68e1      	ldr	r1, [r4, #12]
 800a728:	4b06      	ldr	r3, [pc, #24]	@ (800a744 <cleanup_stdio+0x3c>)
 800a72a:	4299      	cmp	r1, r3
 800a72c:	d004      	beq.n	800a738 <cleanup_stdio+0x30>
 800a72e:	4620      	mov	r0, r4
 800a730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a734:	f000 bce8 	b.w	800b108 <_fflush_r>
 800a738:	bd10      	pop	{r4, pc}
 800a73a:	bf00      	nop
 800a73c:	20000ae0 	.word	0x20000ae0
 800a740:	20000b48 	.word	0x20000b48
 800a744:	20000bb0 	.word	0x20000bb0

0800a748 <global_stdio_init.part.0>:
 800a748:	b510      	push	{r4, lr}
 800a74a:	4b0b      	ldr	r3, [pc, #44]	@ (800a778 <global_stdio_init.part.0+0x30>)
 800a74c:	4c0b      	ldr	r4, [pc, #44]	@ (800a77c <global_stdio_init.part.0+0x34>)
 800a74e:	4a0c      	ldr	r2, [pc, #48]	@ (800a780 <global_stdio_init.part.0+0x38>)
 800a750:	601a      	str	r2, [r3, #0]
 800a752:	4620      	mov	r0, r4
 800a754:	2200      	movs	r2, #0
 800a756:	2104      	movs	r1, #4
 800a758:	f7ff ff94 	bl	800a684 <std>
 800a75c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a760:	2201      	movs	r2, #1
 800a762:	2109      	movs	r1, #9
 800a764:	f7ff ff8e 	bl	800a684 <std>
 800a768:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a76c:	2202      	movs	r2, #2
 800a76e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a772:	2112      	movs	r1, #18
 800a774:	f7ff bf86 	b.w	800a684 <std>
 800a778:	20000c18 	.word	0x20000c18
 800a77c:	20000ae0 	.word	0x20000ae0
 800a780:	0800a6f1 	.word	0x0800a6f1

0800a784 <__sfp_lock_acquire>:
 800a784:	4801      	ldr	r0, [pc, #4]	@ (800a78c <__sfp_lock_acquire+0x8>)
 800a786:	f000 b91e 	b.w	800a9c6 <__retarget_lock_acquire_recursive>
 800a78a:	bf00      	nop
 800a78c:	20000c21 	.word	0x20000c21

0800a790 <__sfp_lock_release>:
 800a790:	4801      	ldr	r0, [pc, #4]	@ (800a798 <__sfp_lock_release+0x8>)
 800a792:	f000 b919 	b.w	800a9c8 <__retarget_lock_release_recursive>
 800a796:	bf00      	nop
 800a798:	20000c21 	.word	0x20000c21

0800a79c <__sinit>:
 800a79c:	b510      	push	{r4, lr}
 800a79e:	4604      	mov	r4, r0
 800a7a0:	f7ff fff0 	bl	800a784 <__sfp_lock_acquire>
 800a7a4:	6a23      	ldr	r3, [r4, #32]
 800a7a6:	b11b      	cbz	r3, 800a7b0 <__sinit+0x14>
 800a7a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7ac:	f7ff bff0 	b.w	800a790 <__sfp_lock_release>
 800a7b0:	4b04      	ldr	r3, [pc, #16]	@ (800a7c4 <__sinit+0x28>)
 800a7b2:	6223      	str	r3, [r4, #32]
 800a7b4:	4b04      	ldr	r3, [pc, #16]	@ (800a7c8 <__sinit+0x2c>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d1f5      	bne.n	800a7a8 <__sinit+0xc>
 800a7bc:	f7ff ffc4 	bl	800a748 <global_stdio_init.part.0>
 800a7c0:	e7f2      	b.n	800a7a8 <__sinit+0xc>
 800a7c2:	bf00      	nop
 800a7c4:	0800a709 	.word	0x0800a709
 800a7c8:	20000c18 	.word	0x20000c18

0800a7cc <_fwalk_sglue>:
 800a7cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7d0:	4607      	mov	r7, r0
 800a7d2:	4688      	mov	r8, r1
 800a7d4:	4614      	mov	r4, r2
 800a7d6:	2600      	movs	r6, #0
 800a7d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a7dc:	f1b9 0901 	subs.w	r9, r9, #1
 800a7e0:	d505      	bpl.n	800a7ee <_fwalk_sglue+0x22>
 800a7e2:	6824      	ldr	r4, [r4, #0]
 800a7e4:	2c00      	cmp	r4, #0
 800a7e6:	d1f7      	bne.n	800a7d8 <_fwalk_sglue+0xc>
 800a7e8:	4630      	mov	r0, r6
 800a7ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7ee:	89ab      	ldrh	r3, [r5, #12]
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	d907      	bls.n	800a804 <_fwalk_sglue+0x38>
 800a7f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	d003      	beq.n	800a804 <_fwalk_sglue+0x38>
 800a7fc:	4629      	mov	r1, r5
 800a7fe:	4638      	mov	r0, r7
 800a800:	47c0      	blx	r8
 800a802:	4306      	orrs	r6, r0
 800a804:	3568      	adds	r5, #104	@ 0x68
 800a806:	e7e9      	b.n	800a7dc <_fwalk_sglue+0x10>

0800a808 <iprintf>:
 800a808:	b40f      	push	{r0, r1, r2, r3}
 800a80a:	b507      	push	{r0, r1, r2, lr}
 800a80c:	4906      	ldr	r1, [pc, #24]	@ (800a828 <iprintf+0x20>)
 800a80e:	ab04      	add	r3, sp, #16
 800a810:	6808      	ldr	r0, [r1, #0]
 800a812:	f853 2b04 	ldr.w	r2, [r3], #4
 800a816:	6881      	ldr	r1, [r0, #8]
 800a818:	9301      	str	r3, [sp, #4]
 800a81a:	f000 f94b 	bl	800aab4 <_vfiprintf_r>
 800a81e:	b003      	add	sp, #12
 800a820:	f85d eb04 	ldr.w	lr, [sp], #4
 800a824:	b004      	add	sp, #16
 800a826:	4770      	bx	lr
 800a828:	20000038 	.word	0x20000038

0800a82c <__sread>:
 800a82c:	b510      	push	{r4, lr}
 800a82e:	460c      	mov	r4, r1
 800a830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a834:	f000 f868 	bl	800a908 <_read_r>
 800a838:	2800      	cmp	r0, #0
 800a83a:	bfab      	itete	ge
 800a83c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a83e:	89a3      	ldrhlt	r3, [r4, #12]
 800a840:	181b      	addge	r3, r3, r0
 800a842:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a846:	bfac      	ite	ge
 800a848:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a84a:	81a3      	strhlt	r3, [r4, #12]
 800a84c:	bd10      	pop	{r4, pc}

0800a84e <__swrite>:
 800a84e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a852:	461f      	mov	r7, r3
 800a854:	898b      	ldrh	r3, [r1, #12]
 800a856:	05db      	lsls	r3, r3, #23
 800a858:	4605      	mov	r5, r0
 800a85a:	460c      	mov	r4, r1
 800a85c:	4616      	mov	r6, r2
 800a85e:	d505      	bpl.n	800a86c <__swrite+0x1e>
 800a860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a864:	2302      	movs	r3, #2
 800a866:	2200      	movs	r2, #0
 800a868:	f000 f83c 	bl	800a8e4 <_lseek_r>
 800a86c:	89a3      	ldrh	r3, [r4, #12]
 800a86e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a872:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a876:	81a3      	strh	r3, [r4, #12]
 800a878:	4632      	mov	r2, r6
 800a87a:	463b      	mov	r3, r7
 800a87c:	4628      	mov	r0, r5
 800a87e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a882:	f000 b863 	b.w	800a94c <_write_r>

0800a886 <__sseek>:
 800a886:	b510      	push	{r4, lr}
 800a888:	460c      	mov	r4, r1
 800a88a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a88e:	f000 f829 	bl	800a8e4 <_lseek_r>
 800a892:	1c43      	adds	r3, r0, #1
 800a894:	89a3      	ldrh	r3, [r4, #12]
 800a896:	bf15      	itete	ne
 800a898:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a89a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a89e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a8a2:	81a3      	strheq	r3, [r4, #12]
 800a8a4:	bf18      	it	ne
 800a8a6:	81a3      	strhne	r3, [r4, #12]
 800a8a8:	bd10      	pop	{r4, pc}

0800a8aa <__sclose>:
 800a8aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8ae:	f000 b809 	b.w	800a8c4 <_close_r>

0800a8b2 <memset>:
 800a8b2:	4402      	add	r2, r0
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d100      	bne.n	800a8bc <memset+0xa>
 800a8ba:	4770      	bx	lr
 800a8bc:	f803 1b01 	strb.w	r1, [r3], #1
 800a8c0:	e7f9      	b.n	800a8b6 <memset+0x4>
	...

0800a8c4 <_close_r>:
 800a8c4:	b538      	push	{r3, r4, r5, lr}
 800a8c6:	4d06      	ldr	r5, [pc, #24]	@ (800a8e0 <_close_r+0x1c>)
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	4604      	mov	r4, r0
 800a8cc:	4608      	mov	r0, r1
 800a8ce:	602b      	str	r3, [r5, #0]
 800a8d0:	f7f6 fe41 	bl	8001556 <_close>
 800a8d4:	1c43      	adds	r3, r0, #1
 800a8d6:	d102      	bne.n	800a8de <_close_r+0x1a>
 800a8d8:	682b      	ldr	r3, [r5, #0]
 800a8da:	b103      	cbz	r3, 800a8de <_close_r+0x1a>
 800a8dc:	6023      	str	r3, [r4, #0]
 800a8de:	bd38      	pop	{r3, r4, r5, pc}
 800a8e0:	20000c1c 	.word	0x20000c1c

0800a8e4 <_lseek_r>:
 800a8e4:	b538      	push	{r3, r4, r5, lr}
 800a8e6:	4d07      	ldr	r5, [pc, #28]	@ (800a904 <_lseek_r+0x20>)
 800a8e8:	4604      	mov	r4, r0
 800a8ea:	4608      	mov	r0, r1
 800a8ec:	4611      	mov	r1, r2
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	602a      	str	r2, [r5, #0]
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	f7f6 fe56 	bl	80015a4 <_lseek>
 800a8f8:	1c43      	adds	r3, r0, #1
 800a8fa:	d102      	bne.n	800a902 <_lseek_r+0x1e>
 800a8fc:	682b      	ldr	r3, [r5, #0]
 800a8fe:	b103      	cbz	r3, 800a902 <_lseek_r+0x1e>
 800a900:	6023      	str	r3, [r4, #0]
 800a902:	bd38      	pop	{r3, r4, r5, pc}
 800a904:	20000c1c 	.word	0x20000c1c

0800a908 <_read_r>:
 800a908:	b538      	push	{r3, r4, r5, lr}
 800a90a:	4d07      	ldr	r5, [pc, #28]	@ (800a928 <_read_r+0x20>)
 800a90c:	4604      	mov	r4, r0
 800a90e:	4608      	mov	r0, r1
 800a910:	4611      	mov	r1, r2
 800a912:	2200      	movs	r2, #0
 800a914:	602a      	str	r2, [r5, #0]
 800a916:	461a      	mov	r2, r3
 800a918:	f7f6 fe00 	bl	800151c <_read>
 800a91c:	1c43      	adds	r3, r0, #1
 800a91e:	d102      	bne.n	800a926 <_read_r+0x1e>
 800a920:	682b      	ldr	r3, [r5, #0]
 800a922:	b103      	cbz	r3, 800a926 <_read_r+0x1e>
 800a924:	6023      	str	r3, [r4, #0]
 800a926:	bd38      	pop	{r3, r4, r5, pc}
 800a928:	20000c1c 	.word	0x20000c1c

0800a92c <_sbrk_r>:
 800a92c:	b538      	push	{r3, r4, r5, lr}
 800a92e:	4d06      	ldr	r5, [pc, #24]	@ (800a948 <_sbrk_r+0x1c>)
 800a930:	2300      	movs	r3, #0
 800a932:	4604      	mov	r4, r0
 800a934:	4608      	mov	r0, r1
 800a936:	602b      	str	r3, [r5, #0]
 800a938:	f7f6 fe42 	bl	80015c0 <_sbrk>
 800a93c:	1c43      	adds	r3, r0, #1
 800a93e:	d102      	bne.n	800a946 <_sbrk_r+0x1a>
 800a940:	682b      	ldr	r3, [r5, #0]
 800a942:	b103      	cbz	r3, 800a946 <_sbrk_r+0x1a>
 800a944:	6023      	str	r3, [r4, #0]
 800a946:	bd38      	pop	{r3, r4, r5, pc}
 800a948:	20000c1c 	.word	0x20000c1c

0800a94c <_write_r>:
 800a94c:	b538      	push	{r3, r4, r5, lr}
 800a94e:	4d07      	ldr	r5, [pc, #28]	@ (800a96c <_write_r+0x20>)
 800a950:	4604      	mov	r4, r0
 800a952:	4608      	mov	r0, r1
 800a954:	4611      	mov	r1, r2
 800a956:	2200      	movs	r2, #0
 800a958:	602a      	str	r2, [r5, #0]
 800a95a:	461a      	mov	r2, r3
 800a95c:	f7f5 fe10 	bl	8000580 <_write>
 800a960:	1c43      	adds	r3, r0, #1
 800a962:	d102      	bne.n	800a96a <_write_r+0x1e>
 800a964:	682b      	ldr	r3, [r5, #0]
 800a966:	b103      	cbz	r3, 800a96a <_write_r+0x1e>
 800a968:	6023      	str	r3, [r4, #0]
 800a96a:	bd38      	pop	{r3, r4, r5, pc}
 800a96c:	20000c1c 	.word	0x20000c1c

0800a970 <__errno>:
 800a970:	4b01      	ldr	r3, [pc, #4]	@ (800a978 <__errno+0x8>)
 800a972:	6818      	ldr	r0, [r3, #0]
 800a974:	4770      	bx	lr
 800a976:	bf00      	nop
 800a978:	20000038 	.word	0x20000038

0800a97c <__libc_init_array>:
 800a97c:	b570      	push	{r4, r5, r6, lr}
 800a97e:	4d0d      	ldr	r5, [pc, #52]	@ (800a9b4 <__libc_init_array+0x38>)
 800a980:	4c0d      	ldr	r4, [pc, #52]	@ (800a9b8 <__libc_init_array+0x3c>)
 800a982:	1b64      	subs	r4, r4, r5
 800a984:	10a4      	asrs	r4, r4, #2
 800a986:	2600      	movs	r6, #0
 800a988:	42a6      	cmp	r6, r4
 800a98a:	d109      	bne.n	800a9a0 <__libc_init_array+0x24>
 800a98c:	4d0b      	ldr	r5, [pc, #44]	@ (800a9bc <__libc_init_array+0x40>)
 800a98e:	4c0c      	ldr	r4, [pc, #48]	@ (800a9c0 <__libc_init_array+0x44>)
 800a990:	f000 fcfa 	bl	800b388 <_init>
 800a994:	1b64      	subs	r4, r4, r5
 800a996:	10a4      	asrs	r4, r4, #2
 800a998:	2600      	movs	r6, #0
 800a99a:	42a6      	cmp	r6, r4
 800a99c:	d105      	bne.n	800a9aa <__libc_init_array+0x2e>
 800a99e:	bd70      	pop	{r4, r5, r6, pc}
 800a9a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9a4:	4798      	blx	r3
 800a9a6:	3601      	adds	r6, #1
 800a9a8:	e7ee      	b.n	800a988 <__libc_init_array+0xc>
 800a9aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9ae:	4798      	blx	r3
 800a9b0:	3601      	adds	r6, #1
 800a9b2:	e7f2      	b.n	800a99a <__libc_init_array+0x1e>
 800a9b4:	0800b43c 	.word	0x0800b43c
 800a9b8:	0800b43c 	.word	0x0800b43c
 800a9bc:	0800b43c 	.word	0x0800b43c
 800a9c0:	0800b440 	.word	0x0800b440

0800a9c4 <__retarget_lock_init_recursive>:
 800a9c4:	4770      	bx	lr

0800a9c6 <__retarget_lock_acquire_recursive>:
 800a9c6:	4770      	bx	lr

0800a9c8 <__retarget_lock_release_recursive>:
 800a9c8:	4770      	bx	lr
	...

0800a9cc <_free_r>:
 800a9cc:	b538      	push	{r3, r4, r5, lr}
 800a9ce:	4605      	mov	r5, r0
 800a9d0:	2900      	cmp	r1, #0
 800a9d2:	d041      	beq.n	800aa58 <_free_r+0x8c>
 800a9d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9d8:	1f0c      	subs	r4, r1, #4
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	bfb8      	it	lt
 800a9de:	18e4      	addlt	r4, r4, r3
 800a9e0:	f7ff fe44 	bl	800a66c <__malloc_lock>
 800a9e4:	4a1d      	ldr	r2, [pc, #116]	@ (800aa5c <_free_r+0x90>)
 800a9e6:	6813      	ldr	r3, [r2, #0]
 800a9e8:	b933      	cbnz	r3, 800a9f8 <_free_r+0x2c>
 800a9ea:	6063      	str	r3, [r4, #4]
 800a9ec:	6014      	str	r4, [r2, #0]
 800a9ee:	4628      	mov	r0, r5
 800a9f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9f4:	f7ff be40 	b.w	800a678 <__malloc_unlock>
 800a9f8:	42a3      	cmp	r3, r4
 800a9fa:	d908      	bls.n	800aa0e <_free_r+0x42>
 800a9fc:	6820      	ldr	r0, [r4, #0]
 800a9fe:	1821      	adds	r1, r4, r0
 800aa00:	428b      	cmp	r3, r1
 800aa02:	bf01      	itttt	eq
 800aa04:	6819      	ldreq	r1, [r3, #0]
 800aa06:	685b      	ldreq	r3, [r3, #4]
 800aa08:	1809      	addeq	r1, r1, r0
 800aa0a:	6021      	streq	r1, [r4, #0]
 800aa0c:	e7ed      	b.n	800a9ea <_free_r+0x1e>
 800aa0e:	461a      	mov	r2, r3
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	b10b      	cbz	r3, 800aa18 <_free_r+0x4c>
 800aa14:	42a3      	cmp	r3, r4
 800aa16:	d9fa      	bls.n	800aa0e <_free_r+0x42>
 800aa18:	6811      	ldr	r1, [r2, #0]
 800aa1a:	1850      	adds	r0, r2, r1
 800aa1c:	42a0      	cmp	r0, r4
 800aa1e:	d10b      	bne.n	800aa38 <_free_r+0x6c>
 800aa20:	6820      	ldr	r0, [r4, #0]
 800aa22:	4401      	add	r1, r0
 800aa24:	1850      	adds	r0, r2, r1
 800aa26:	4283      	cmp	r3, r0
 800aa28:	6011      	str	r1, [r2, #0]
 800aa2a:	d1e0      	bne.n	800a9ee <_free_r+0x22>
 800aa2c:	6818      	ldr	r0, [r3, #0]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	6053      	str	r3, [r2, #4]
 800aa32:	4408      	add	r0, r1
 800aa34:	6010      	str	r0, [r2, #0]
 800aa36:	e7da      	b.n	800a9ee <_free_r+0x22>
 800aa38:	d902      	bls.n	800aa40 <_free_r+0x74>
 800aa3a:	230c      	movs	r3, #12
 800aa3c:	602b      	str	r3, [r5, #0]
 800aa3e:	e7d6      	b.n	800a9ee <_free_r+0x22>
 800aa40:	6820      	ldr	r0, [r4, #0]
 800aa42:	1821      	adds	r1, r4, r0
 800aa44:	428b      	cmp	r3, r1
 800aa46:	bf04      	itt	eq
 800aa48:	6819      	ldreq	r1, [r3, #0]
 800aa4a:	685b      	ldreq	r3, [r3, #4]
 800aa4c:	6063      	str	r3, [r4, #4]
 800aa4e:	bf04      	itt	eq
 800aa50:	1809      	addeq	r1, r1, r0
 800aa52:	6021      	streq	r1, [r4, #0]
 800aa54:	6054      	str	r4, [r2, #4]
 800aa56:	e7ca      	b.n	800a9ee <_free_r+0x22>
 800aa58:	bd38      	pop	{r3, r4, r5, pc}
 800aa5a:	bf00      	nop
 800aa5c:	20000adc 	.word	0x20000adc

0800aa60 <__sfputc_r>:
 800aa60:	6893      	ldr	r3, [r2, #8]
 800aa62:	3b01      	subs	r3, #1
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	b410      	push	{r4}
 800aa68:	6093      	str	r3, [r2, #8]
 800aa6a:	da08      	bge.n	800aa7e <__sfputc_r+0x1e>
 800aa6c:	6994      	ldr	r4, [r2, #24]
 800aa6e:	42a3      	cmp	r3, r4
 800aa70:	db01      	blt.n	800aa76 <__sfputc_r+0x16>
 800aa72:	290a      	cmp	r1, #10
 800aa74:	d103      	bne.n	800aa7e <__sfputc_r+0x1e>
 800aa76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa7a:	f000 bb6d 	b.w	800b158 <__swbuf_r>
 800aa7e:	6813      	ldr	r3, [r2, #0]
 800aa80:	1c58      	adds	r0, r3, #1
 800aa82:	6010      	str	r0, [r2, #0]
 800aa84:	7019      	strb	r1, [r3, #0]
 800aa86:	4608      	mov	r0, r1
 800aa88:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aa8c:	4770      	bx	lr

0800aa8e <__sfputs_r>:
 800aa8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa90:	4606      	mov	r6, r0
 800aa92:	460f      	mov	r7, r1
 800aa94:	4614      	mov	r4, r2
 800aa96:	18d5      	adds	r5, r2, r3
 800aa98:	42ac      	cmp	r4, r5
 800aa9a:	d101      	bne.n	800aaa0 <__sfputs_r+0x12>
 800aa9c:	2000      	movs	r0, #0
 800aa9e:	e007      	b.n	800aab0 <__sfputs_r+0x22>
 800aaa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaa4:	463a      	mov	r2, r7
 800aaa6:	4630      	mov	r0, r6
 800aaa8:	f7ff ffda 	bl	800aa60 <__sfputc_r>
 800aaac:	1c43      	adds	r3, r0, #1
 800aaae:	d1f3      	bne.n	800aa98 <__sfputs_r+0xa>
 800aab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aab4 <_vfiprintf_r>:
 800aab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aab8:	460d      	mov	r5, r1
 800aaba:	b09d      	sub	sp, #116	@ 0x74
 800aabc:	4614      	mov	r4, r2
 800aabe:	4698      	mov	r8, r3
 800aac0:	4606      	mov	r6, r0
 800aac2:	b118      	cbz	r0, 800aacc <_vfiprintf_r+0x18>
 800aac4:	6a03      	ldr	r3, [r0, #32]
 800aac6:	b90b      	cbnz	r3, 800aacc <_vfiprintf_r+0x18>
 800aac8:	f7ff fe68 	bl	800a79c <__sinit>
 800aacc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aace:	07d9      	lsls	r1, r3, #31
 800aad0:	d405      	bmi.n	800aade <_vfiprintf_r+0x2a>
 800aad2:	89ab      	ldrh	r3, [r5, #12]
 800aad4:	059a      	lsls	r2, r3, #22
 800aad6:	d402      	bmi.n	800aade <_vfiprintf_r+0x2a>
 800aad8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aada:	f7ff ff74 	bl	800a9c6 <__retarget_lock_acquire_recursive>
 800aade:	89ab      	ldrh	r3, [r5, #12]
 800aae0:	071b      	lsls	r3, r3, #28
 800aae2:	d501      	bpl.n	800aae8 <_vfiprintf_r+0x34>
 800aae4:	692b      	ldr	r3, [r5, #16]
 800aae6:	b99b      	cbnz	r3, 800ab10 <_vfiprintf_r+0x5c>
 800aae8:	4629      	mov	r1, r5
 800aaea:	4630      	mov	r0, r6
 800aaec:	f000 fb72 	bl	800b1d4 <__swsetup_r>
 800aaf0:	b170      	cbz	r0, 800ab10 <_vfiprintf_r+0x5c>
 800aaf2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aaf4:	07dc      	lsls	r4, r3, #31
 800aaf6:	d504      	bpl.n	800ab02 <_vfiprintf_r+0x4e>
 800aaf8:	f04f 30ff 	mov.w	r0, #4294967295
 800aafc:	b01d      	add	sp, #116	@ 0x74
 800aafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab02:	89ab      	ldrh	r3, [r5, #12]
 800ab04:	0598      	lsls	r0, r3, #22
 800ab06:	d4f7      	bmi.n	800aaf8 <_vfiprintf_r+0x44>
 800ab08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab0a:	f7ff ff5d 	bl	800a9c8 <__retarget_lock_release_recursive>
 800ab0e:	e7f3      	b.n	800aaf8 <_vfiprintf_r+0x44>
 800ab10:	2300      	movs	r3, #0
 800ab12:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab14:	2320      	movs	r3, #32
 800ab16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ab1a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab1e:	2330      	movs	r3, #48	@ 0x30
 800ab20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800acd0 <_vfiprintf_r+0x21c>
 800ab24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab28:	f04f 0901 	mov.w	r9, #1
 800ab2c:	4623      	mov	r3, r4
 800ab2e:	469a      	mov	sl, r3
 800ab30:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab34:	b10a      	cbz	r2, 800ab3a <_vfiprintf_r+0x86>
 800ab36:	2a25      	cmp	r2, #37	@ 0x25
 800ab38:	d1f9      	bne.n	800ab2e <_vfiprintf_r+0x7a>
 800ab3a:	ebba 0b04 	subs.w	fp, sl, r4
 800ab3e:	d00b      	beq.n	800ab58 <_vfiprintf_r+0xa4>
 800ab40:	465b      	mov	r3, fp
 800ab42:	4622      	mov	r2, r4
 800ab44:	4629      	mov	r1, r5
 800ab46:	4630      	mov	r0, r6
 800ab48:	f7ff ffa1 	bl	800aa8e <__sfputs_r>
 800ab4c:	3001      	adds	r0, #1
 800ab4e:	f000 80a7 	beq.w	800aca0 <_vfiprintf_r+0x1ec>
 800ab52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab54:	445a      	add	r2, fp
 800ab56:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab58:	f89a 3000 	ldrb.w	r3, [sl]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	f000 809f 	beq.w	800aca0 <_vfiprintf_r+0x1ec>
 800ab62:	2300      	movs	r3, #0
 800ab64:	f04f 32ff 	mov.w	r2, #4294967295
 800ab68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab6c:	f10a 0a01 	add.w	sl, sl, #1
 800ab70:	9304      	str	r3, [sp, #16]
 800ab72:	9307      	str	r3, [sp, #28]
 800ab74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ab78:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab7a:	4654      	mov	r4, sl
 800ab7c:	2205      	movs	r2, #5
 800ab7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab82:	4853      	ldr	r0, [pc, #332]	@ (800acd0 <_vfiprintf_r+0x21c>)
 800ab84:	f7f5 fb34 	bl	80001f0 <memchr>
 800ab88:	9a04      	ldr	r2, [sp, #16]
 800ab8a:	b9d8      	cbnz	r0, 800abc4 <_vfiprintf_r+0x110>
 800ab8c:	06d1      	lsls	r1, r2, #27
 800ab8e:	bf44      	itt	mi
 800ab90:	2320      	movmi	r3, #32
 800ab92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab96:	0713      	lsls	r3, r2, #28
 800ab98:	bf44      	itt	mi
 800ab9a:	232b      	movmi	r3, #43	@ 0x2b
 800ab9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aba0:	f89a 3000 	ldrb.w	r3, [sl]
 800aba4:	2b2a      	cmp	r3, #42	@ 0x2a
 800aba6:	d015      	beq.n	800abd4 <_vfiprintf_r+0x120>
 800aba8:	9a07      	ldr	r2, [sp, #28]
 800abaa:	4654      	mov	r4, sl
 800abac:	2000      	movs	r0, #0
 800abae:	f04f 0c0a 	mov.w	ip, #10
 800abb2:	4621      	mov	r1, r4
 800abb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abb8:	3b30      	subs	r3, #48	@ 0x30
 800abba:	2b09      	cmp	r3, #9
 800abbc:	d94b      	bls.n	800ac56 <_vfiprintf_r+0x1a2>
 800abbe:	b1b0      	cbz	r0, 800abee <_vfiprintf_r+0x13a>
 800abc0:	9207      	str	r2, [sp, #28]
 800abc2:	e014      	b.n	800abee <_vfiprintf_r+0x13a>
 800abc4:	eba0 0308 	sub.w	r3, r0, r8
 800abc8:	fa09 f303 	lsl.w	r3, r9, r3
 800abcc:	4313      	orrs	r3, r2
 800abce:	9304      	str	r3, [sp, #16]
 800abd0:	46a2      	mov	sl, r4
 800abd2:	e7d2      	b.n	800ab7a <_vfiprintf_r+0xc6>
 800abd4:	9b03      	ldr	r3, [sp, #12]
 800abd6:	1d19      	adds	r1, r3, #4
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	9103      	str	r1, [sp, #12]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	bfbb      	ittet	lt
 800abe0:	425b      	neglt	r3, r3
 800abe2:	f042 0202 	orrlt.w	r2, r2, #2
 800abe6:	9307      	strge	r3, [sp, #28]
 800abe8:	9307      	strlt	r3, [sp, #28]
 800abea:	bfb8      	it	lt
 800abec:	9204      	strlt	r2, [sp, #16]
 800abee:	7823      	ldrb	r3, [r4, #0]
 800abf0:	2b2e      	cmp	r3, #46	@ 0x2e
 800abf2:	d10a      	bne.n	800ac0a <_vfiprintf_r+0x156>
 800abf4:	7863      	ldrb	r3, [r4, #1]
 800abf6:	2b2a      	cmp	r3, #42	@ 0x2a
 800abf8:	d132      	bne.n	800ac60 <_vfiprintf_r+0x1ac>
 800abfa:	9b03      	ldr	r3, [sp, #12]
 800abfc:	1d1a      	adds	r2, r3, #4
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	9203      	str	r2, [sp, #12]
 800ac02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac06:	3402      	adds	r4, #2
 800ac08:	9305      	str	r3, [sp, #20]
 800ac0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ace0 <_vfiprintf_r+0x22c>
 800ac0e:	7821      	ldrb	r1, [r4, #0]
 800ac10:	2203      	movs	r2, #3
 800ac12:	4650      	mov	r0, sl
 800ac14:	f7f5 faec 	bl	80001f0 <memchr>
 800ac18:	b138      	cbz	r0, 800ac2a <_vfiprintf_r+0x176>
 800ac1a:	9b04      	ldr	r3, [sp, #16]
 800ac1c:	eba0 000a 	sub.w	r0, r0, sl
 800ac20:	2240      	movs	r2, #64	@ 0x40
 800ac22:	4082      	lsls	r2, r0
 800ac24:	4313      	orrs	r3, r2
 800ac26:	3401      	adds	r4, #1
 800ac28:	9304      	str	r3, [sp, #16]
 800ac2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac2e:	4829      	ldr	r0, [pc, #164]	@ (800acd4 <_vfiprintf_r+0x220>)
 800ac30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac34:	2206      	movs	r2, #6
 800ac36:	f7f5 fadb 	bl	80001f0 <memchr>
 800ac3a:	2800      	cmp	r0, #0
 800ac3c:	d03f      	beq.n	800acbe <_vfiprintf_r+0x20a>
 800ac3e:	4b26      	ldr	r3, [pc, #152]	@ (800acd8 <_vfiprintf_r+0x224>)
 800ac40:	bb1b      	cbnz	r3, 800ac8a <_vfiprintf_r+0x1d6>
 800ac42:	9b03      	ldr	r3, [sp, #12]
 800ac44:	3307      	adds	r3, #7
 800ac46:	f023 0307 	bic.w	r3, r3, #7
 800ac4a:	3308      	adds	r3, #8
 800ac4c:	9303      	str	r3, [sp, #12]
 800ac4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac50:	443b      	add	r3, r7
 800ac52:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac54:	e76a      	b.n	800ab2c <_vfiprintf_r+0x78>
 800ac56:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac5a:	460c      	mov	r4, r1
 800ac5c:	2001      	movs	r0, #1
 800ac5e:	e7a8      	b.n	800abb2 <_vfiprintf_r+0xfe>
 800ac60:	2300      	movs	r3, #0
 800ac62:	3401      	adds	r4, #1
 800ac64:	9305      	str	r3, [sp, #20]
 800ac66:	4619      	mov	r1, r3
 800ac68:	f04f 0c0a 	mov.w	ip, #10
 800ac6c:	4620      	mov	r0, r4
 800ac6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac72:	3a30      	subs	r2, #48	@ 0x30
 800ac74:	2a09      	cmp	r2, #9
 800ac76:	d903      	bls.n	800ac80 <_vfiprintf_r+0x1cc>
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d0c6      	beq.n	800ac0a <_vfiprintf_r+0x156>
 800ac7c:	9105      	str	r1, [sp, #20]
 800ac7e:	e7c4      	b.n	800ac0a <_vfiprintf_r+0x156>
 800ac80:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac84:	4604      	mov	r4, r0
 800ac86:	2301      	movs	r3, #1
 800ac88:	e7f0      	b.n	800ac6c <_vfiprintf_r+0x1b8>
 800ac8a:	ab03      	add	r3, sp, #12
 800ac8c:	9300      	str	r3, [sp, #0]
 800ac8e:	462a      	mov	r2, r5
 800ac90:	4b12      	ldr	r3, [pc, #72]	@ (800acdc <_vfiprintf_r+0x228>)
 800ac92:	a904      	add	r1, sp, #16
 800ac94:	4630      	mov	r0, r6
 800ac96:	f3af 8000 	nop.w
 800ac9a:	4607      	mov	r7, r0
 800ac9c:	1c78      	adds	r0, r7, #1
 800ac9e:	d1d6      	bne.n	800ac4e <_vfiprintf_r+0x19a>
 800aca0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aca2:	07d9      	lsls	r1, r3, #31
 800aca4:	d405      	bmi.n	800acb2 <_vfiprintf_r+0x1fe>
 800aca6:	89ab      	ldrh	r3, [r5, #12]
 800aca8:	059a      	lsls	r2, r3, #22
 800acaa:	d402      	bmi.n	800acb2 <_vfiprintf_r+0x1fe>
 800acac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800acae:	f7ff fe8b 	bl	800a9c8 <__retarget_lock_release_recursive>
 800acb2:	89ab      	ldrh	r3, [r5, #12]
 800acb4:	065b      	lsls	r3, r3, #25
 800acb6:	f53f af1f 	bmi.w	800aaf8 <_vfiprintf_r+0x44>
 800acba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800acbc:	e71e      	b.n	800aafc <_vfiprintf_r+0x48>
 800acbe:	ab03      	add	r3, sp, #12
 800acc0:	9300      	str	r3, [sp, #0]
 800acc2:	462a      	mov	r2, r5
 800acc4:	4b05      	ldr	r3, [pc, #20]	@ (800acdc <_vfiprintf_r+0x228>)
 800acc6:	a904      	add	r1, sp, #16
 800acc8:	4630      	mov	r0, r6
 800acca:	f000 f879 	bl	800adc0 <_printf_i>
 800acce:	e7e4      	b.n	800ac9a <_vfiprintf_r+0x1e6>
 800acd0:	0800b400 	.word	0x0800b400
 800acd4:	0800b40a 	.word	0x0800b40a
 800acd8:	00000000 	.word	0x00000000
 800acdc:	0800aa8f 	.word	0x0800aa8f
 800ace0:	0800b406 	.word	0x0800b406

0800ace4 <_printf_common>:
 800ace4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ace8:	4616      	mov	r6, r2
 800acea:	4698      	mov	r8, r3
 800acec:	688a      	ldr	r2, [r1, #8]
 800acee:	690b      	ldr	r3, [r1, #16]
 800acf0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800acf4:	4293      	cmp	r3, r2
 800acf6:	bfb8      	it	lt
 800acf8:	4613      	movlt	r3, r2
 800acfa:	6033      	str	r3, [r6, #0]
 800acfc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ad00:	4607      	mov	r7, r0
 800ad02:	460c      	mov	r4, r1
 800ad04:	b10a      	cbz	r2, 800ad0a <_printf_common+0x26>
 800ad06:	3301      	adds	r3, #1
 800ad08:	6033      	str	r3, [r6, #0]
 800ad0a:	6823      	ldr	r3, [r4, #0]
 800ad0c:	0699      	lsls	r1, r3, #26
 800ad0e:	bf42      	ittt	mi
 800ad10:	6833      	ldrmi	r3, [r6, #0]
 800ad12:	3302      	addmi	r3, #2
 800ad14:	6033      	strmi	r3, [r6, #0]
 800ad16:	6825      	ldr	r5, [r4, #0]
 800ad18:	f015 0506 	ands.w	r5, r5, #6
 800ad1c:	d106      	bne.n	800ad2c <_printf_common+0x48>
 800ad1e:	f104 0a19 	add.w	sl, r4, #25
 800ad22:	68e3      	ldr	r3, [r4, #12]
 800ad24:	6832      	ldr	r2, [r6, #0]
 800ad26:	1a9b      	subs	r3, r3, r2
 800ad28:	42ab      	cmp	r3, r5
 800ad2a:	dc26      	bgt.n	800ad7a <_printf_common+0x96>
 800ad2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ad30:	6822      	ldr	r2, [r4, #0]
 800ad32:	3b00      	subs	r3, #0
 800ad34:	bf18      	it	ne
 800ad36:	2301      	movne	r3, #1
 800ad38:	0692      	lsls	r2, r2, #26
 800ad3a:	d42b      	bmi.n	800ad94 <_printf_common+0xb0>
 800ad3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ad40:	4641      	mov	r1, r8
 800ad42:	4638      	mov	r0, r7
 800ad44:	47c8      	blx	r9
 800ad46:	3001      	adds	r0, #1
 800ad48:	d01e      	beq.n	800ad88 <_printf_common+0xa4>
 800ad4a:	6823      	ldr	r3, [r4, #0]
 800ad4c:	6922      	ldr	r2, [r4, #16]
 800ad4e:	f003 0306 	and.w	r3, r3, #6
 800ad52:	2b04      	cmp	r3, #4
 800ad54:	bf02      	ittt	eq
 800ad56:	68e5      	ldreq	r5, [r4, #12]
 800ad58:	6833      	ldreq	r3, [r6, #0]
 800ad5a:	1aed      	subeq	r5, r5, r3
 800ad5c:	68a3      	ldr	r3, [r4, #8]
 800ad5e:	bf0c      	ite	eq
 800ad60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad64:	2500      	movne	r5, #0
 800ad66:	4293      	cmp	r3, r2
 800ad68:	bfc4      	itt	gt
 800ad6a:	1a9b      	subgt	r3, r3, r2
 800ad6c:	18ed      	addgt	r5, r5, r3
 800ad6e:	2600      	movs	r6, #0
 800ad70:	341a      	adds	r4, #26
 800ad72:	42b5      	cmp	r5, r6
 800ad74:	d11a      	bne.n	800adac <_printf_common+0xc8>
 800ad76:	2000      	movs	r0, #0
 800ad78:	e008      	b.n	800ad8c <_printf_common+0xa8>
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	4652      	mov	r2, sl
 800ad7e:	4641      	mov	r1, r8
 800ad80:	4638      	mov	r0, r7
 800ad82:	47c8      	blx	r9
 800ad84:	3001      	adds	r0, #1
 800ad86:	d103      	bne.n	800ad90 <_printf_common+0xac>
 800ad88:	f04f 30ff 	mov.w	r0, #4294967295
 800ad8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad90:	3501      	adds	r5, #1
 800ad92:	e7c6      	b.n	800ad22 <_printf_common+0x3e>
 800ad94:	18e1      	adds	r1, r4, r3
 800ad96:	1c5a      	adds	r2, r3, #1
 800ad98:	2030      	movs	r0, #48	@ 0x30
 800ad9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ad9e:	4422      	add	r2, r4
 800ada0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ada4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ada8:	3302      	adds	r3, #2
 800adaa:	e7c7      	b.n	800ad3c <_printf_common+0x58>
 800adac:	2301      	movs	r3, #1
 800adae:	4622      	mov	r2, r4
 800adb0:	4641      	mov	r1, r8
 800adb2:	4638      	mov	r0, r7
 800adb4:	47c8      	blx	r9
 800adb6:	3001      	adds	r0, #1
 800adb8:	d0e6      	beq.n	800ad88 <_printf_common+0xa4>
 800adba:	3601      	adds	r6, #1
 800adbc:	e7d9      	b.n	800ad72 <_printf_common+0x8e>
	...

0800adc0 <_printf_i>:
 800adc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800adc4:	7e0f      	ldrb	r7, [r1, #24]
 800adc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800adc8:	2f78      	cmp	r7, #120	@ 0x78
 800adca:	4691      	mov	r9, r2
 800adcc:	4680      	mov	r8, r0
 800adce:	460c      	mov	r4, r1
 800add0:	469a      	mov	sl, r3
 800add2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800add6:	d807      	bhi.n	800ade8 <_printf_i+0x28>
 800add8:	2f62      	cmp	r7, #98	@ 0x62
 800adda:	d80a      	bhi.n	800adf2 <_printf_i+0x32>
 800addc:	2f00      	cmp	r7, #0
 800adde:	f000 80d2 	beq.w	800af86 <_printf_i+0x1c6>
 800ade2:	2f58      	cmp	r7, #88	@ 0x58
 800ade4:	f000 80b9 	beq.w	800af5a <_printf_i+0x19a>
 800ade8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800adec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800adf0:	e03a      	b.n	800ae68 <_printf_i+0xa8>
 800adf2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800adf6:	2b15      	cmp	r3, #21
 800adf8:	d8f6      	bhi.n	800ade8 <_printf_i+0x28>
 800adfa:	a101      	add	r1, pc, #4	@ (adr r1, 800ae00 <_printf_i+0x40>)
 800adfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae00:	0800ae59 	.word	0x0800ae59
 800ae04:	0800ae6d 	.word	0x0800ae6d
 800ae08:	0800ade9 	.word	0x0800ade9
 800ae0c:	0800ade9 	.word	0x0800ade9
 800ae10:	0800ade9 	.word	0x0800ade9
 800ae14:	0800ade9 	.word	0x0800ade9
 800ae18:	0800ae6d 	.word	0x0800ae6d
 800ae1c:	0800ade9 	.word	0x0800ade9
 800ae20:	0800ade9 	.word	0x0800ade9
 800ae24:	0800ade9 	.word	0x0800ade9
 800ae28:	0800ade9 	.word	0x0800ade9
 800ae2c:	0800af6d 	.word	0x0800af6d
 800ae30:	0800ae97 	.word	0x0800ae97
 800ae34:	0800af27 	.word	0x0800af27
 800ae38:	0800ade9 	.word	0x0800ade9
 800ae3c:	0800ade9 	.word	0x0800ade9
 800ae40:	0800af8f 	.word	0x0800af8f
 800ae44:	0800ade9 	.word	0x0800ade9
 800ae48:	0800ae97 	.word	0x0800ae97
 800ae4c:	0800ade9 	.word	0x0800ade9
 800ae50:	0800ade9 	.word	0x0800ade9
 800ae54:	0800af2f 	.word	0x0800af2f
 800ae58:	6833      	ldr	r3, [r6, #0]
 800ae5a:	1d1a      	adds	r2, r3, #4
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	6032      	str	r2, [r6, #0]
 800ae60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ae68:	2301      	movs	r3, #1
 800ae6a:	e09d      	b.n	800afa8 <_printf_i+0x1e8>
 800ae6c:	6833      	ldr	r3, [r6, #0]
 800ae6e:	6820      	ldr	r0, [r4, #0]
 800ae70:	1d19      	adds	r1, r3, #4
 800ae72:	6031      	str	r1, [r6, #0]
 800ae74:	0606      	lsls	r6, r0, #24
 800ae76:	d501      	bpl.n	800ae7c <_printf_i+0xbc>
 800ae78:	681d      	ldr	r5, [r3, #0]
 800ae7a:	e003      	b.n	800ae84 <_printf_i+0xc4>
 800ae7c:	0645      	lsls	r5, r0, #25
 800ae7e:	d5fb      	bpl.n	800ae78 <_printf_i+0xb8>
 800ae80:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ae84:	2d00      	cmp	r5, #0
 800ae86:	da03      	bge.n	800ae90 <_printf_i+0xd0>
 800ae88:	232d      	movs	r3, #45	@ 0x2d
 800ae8a:	426d      	negs	r5, r5
 800ae8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae90:	4859      	ldr	r0, [pc, #356]	@ (800aff8 <_printf_i+0x238>)
 800ae92:	230a      	movs	r3, #10
 800ae94:	e011      	b.n	800aeba <_printf_i+0xfa>
 800ae96:	6821      	ldr	r1, [r4, #0]
 800ae98:	6833      	ldr	r3, [r6, #0]
 800ae9a:	0608      	lsls	r0, r1, #24
 800ae9c:	f853 5b04 	ldr.w	r5, [r3], #4
 800aea0:	d402      	bmi.n	800aea8 <_printf_i+0xe8>
 800aea2:	0649      	lsls	r1, r1, #25
 800aea4:	bf48      	it	mi
 800aea6:	b2ad      	uxthmi	r5, r5
 800aea8:	2f6f      	cmp	r7, #111	@ 0x6f
 800aeaa:	4853      	ldr	r0, [pc, #332]	@ (800aff8 <_printf_i+0x238>)
 800aeac:	6033      	str	r3, [r6, #0]
 800aeae:	bf14      	ite	ne
 800aeb0:	230a      	movne	r3, #10
 800aeb2:	2308      	moveq	r3, #8
 800aeb4:	2100      	movs	r1, #0
 800aeb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aeba:	6866      	ldr	r6, [r4, #4]
 800aebc:	60a6      	str	r6, [r4, #8]
 800aebe:	2e00      	cmp	r6, #0
 800aec0:	bfa2      	ittt	ge
 800aec2:	6821      	ldrge	r1, [r4, #0]
 800aec4:	f021 0104 	bicge.w	r1, r1, #4
 800aec8:	6021      	strge	r1, [r4, #0]
 800aeca:	b90d      	cbnz	r5, 800aed0 <_printf_i+0x110>
 800aecc:	2e00      	cmp	r6, #0
 800aece:	d04b      	beq.n	800af68 <_printf_i+0x1a8>
 800aed0:	4616      	mov	r6, r2
 800aed2:	fbb5 f1f3 	udiv	r1, r5, r3
 800aed6:	fb03 5711 	mls	r7, r3, r1, r5
 800aeda:	5dc7      	ldrb	r7, [r0, r7]
 800aedc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aee0:	462f      	mov	r7, r5
 800aee2:	42bb      	cmp	r3, r7
 800aee4:	460d      	mov	r5, r1
 800aee6:	d9f4      	bls.n	800aed2 <_printf_i+0x112>
 800aee8:	2b08      	cmp	r3, #8
 800aeea:	d10b      	bne.n	800af04 <_printf_i+0x144>
 800aeec:	6823      	ldr	r3, [r4, #0]
 800aeee:	07df      	lsls	r7, r3, #31
 800aef0:	d508      	bpl.n	800af04 <_printf_i+0x144>
 800aef2:	6923      	ldr	r3, [r4, #16]
 800aef4:	6861      	ldr	r1, [r4, #4]
 800aef6:	4299      	cmp	r1, r3
 800aef8:	bfde      	ittt	le
 800aefa:	2330      	movle	r3, #48	@ 0x30
 800aefc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800af00:	f106 36ff 	addle.w	r6, r6, #4294967295
 800af04:	1b92      	subs	r2, r2, r6
 800af06:	6122      	str	r2, [r4, #16]
 800af08:	f8cd a000 	str.w	sl, [sp]
 800af0c:	464b      	mov	r3, r9
 800af0e:	aa03      	add	r2, sp, #12
 800af10:	4621      	mov	r1, r4
 800af12:	4640      	mov	r0, r8
 800af14:	f7ff fee6 	bl	800ace4 <_printf_common>
 800af18:	3001      	adds	r0, #1
 800af1a:	d14a      	bne.n	800afb2 <_printf_i+0x1f2>
 800af1c:	f04f 30ff 	mov.w	r0, #4294967295
 800af20:	b004      	add	sp, #16
 800af22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af26:	6823      	ldr	r3, [r4, #0]
 800af28:	f043 0320 	orr.w	r3, r3, #32
 800af2c:	6023      	str	r3, [r4, #0]
 800af2e:	4833      	ldr	r0, [pc, #204]	@ (800affc <_printf_i+0x23c>)
 800af30:	2778      	movs	r7, #120	@ 0x78
 800af32:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800af36:	6823      	ldr	r3, [r4, #0]
 800af38:	6831      	ldr	r1, [r6, #0]
 800af3a:	061f      	lsls	r7, r3, #24
 800af3c:	f851 5b04 	ldr.w	r5, [r1], #4
 800af40:	d402      	bmi.n	800af48 <_printf_i+0x188>
 800af42:	065f      	lsls	r7, r3, #25
 800af44:	bf48      	it	mi
 800af46:	b2ad      	uxthmi	r5, r5
 800af48:	6031      	str	r1, [r6, #0]
 800af4a:	07d9      	lsls	r1, r3, #31
 800af4c:	bf44      	itt	mi
 800af4e:	f043 0320 	orrmi.w	r3, r3, #32
 800af52:	6023      	strmi	r3, [r4, #0]
 800af54:	b11d      	cbz	r5, 800af5e <_printf_i+0x19e>
 800af56:	2310      	movs	r3, #16
 800af58:	e7ac      	b.n	800aeb4 <_printf_i+0xf4>
 800af5a:	4827      	ldr	r0, [pc, #156]	@ (800aff8 <_printf_i+0x238>)
 800af5c:	e7e9      	b.n	800af32 <_printf_i+0x172>
 800af5e:	6823      	ldr	r3, [r4, #0]
 800af60:	f023 0320 	bic.w	r3, r3, #32
 800af64:	6023      	str	r3, [r4, #0]
 800af66:	e7f6      	b.n	800af56 <_printf_i+0x196>
 800af68:	4616      	mov	r6, r2
 800af6a:	e7bd      	b.n	800aee8 <_printf_i+0x128>
 800af6c:	6833      	ldr	r3, [r6, #0]
 800af6e:	6825      	ldr	r5, [r4, #0]
 800af70:	6961      	ldr	r1, [r4, #20]
 800af72:	1d18      	adds	r0, r3, #4
 800af74:	6030      	str	r0, [r6, #0]
 800af76:	062e      	lsls	r6, r5, #24
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	d501      	bpl.n	800af80 <_printf_i+0x1c0>
 800af7c:	6019      	str	r1, [r3, #0]
 800af7e:	e002      	b.n	800af86 <_printf_i+0x1c6>
 800af80:	0668      	lsls	r0, r5, #25
 800af82:	d5fb      	bpl.n	800af7c <_printf_i+0x1bc>
 800af84:	8019      	strh	r1, [r3, #0]
 800af86:	2300      	movs	r3, #0
 800af88:	6123      	str	r3, [r4, #16]
 800af8a:	4616      	mov	r6, r2
 800af8c:	e7bc      	b.n	800af08 <_printf_i+0x148>
 800af8e:	6833      	ldr	r3, [r6, #0]
 800af90:	1d1a      	adds	r2, r3, #4
 800af92:	6032      	str	r2, [r6, #0]
 800af94:	681e      	ldr	r6, [r3, #0]
 800af96:	6862      	ldr	r2, [r4, #4]
 800af98:	2100      	movs	r1, #0
 800af9a:	4630      	mov	r0, r6
 800af9c:	f7f5 f928 	bl	80001f0 <memchr>
 800afa0:	b108      	cbz	r0, 800afa6 <_printf_i+0x1e6>
 800afa2:	1b80      	subs	r0, r0, r6
 800afa4:	6060      	str	r0, [r4, #4]
 800afa6:	6863      	ldr	r3, [r4, #4]
 800afa8:	6123      	str	r3, [r4, #16]
 800afaa:	2300      	movs	r3, #0
 800afac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800afb0:	e7aa      	b.n	800af08 <_printf_i+0x148>
 800afb2:	6923      	ldr	r3, [r4, #16]
 800afb4:	4632      	mov	r2, r6
 800afb6:	4649      	mov	r1, r9
 800afb8:	4640      	mov	r0, r8
 800afba:	47d0      	blx	sl
 800afbc:	3001      	adds	r0, #1
 800afbe:	d0ad      	beq.n	800af1c <_printf_i+0x15c>
 800afc0:	6823      	ldr	r3, [r4, #0]
 800afc2:	079b      	lsls	r3, r3, #30
 800afc4:	d413      	bmi.n	800afee <_printf_i+0x22e>
 800afc6:	68e0      	ldr	r0, [r4, #12]
 800afc8:	9b03      	ldr	r3, [sp, #12]
 800afca:	4298      	cmp	r0, r3
 800afcc:	bfb8      	it	lt
 800afce:	4618      	movlt	r0, r3
 800afd0:	e7a6      	b.n	800af20 <_printf_i+0x160>
 800afd2:	2301      	movs	r3, #1
 800afd4:	4632      	mov	r2, r6
 800afd6:	4649      	mov	r1, r9
 800afd8:	4640      	mov	r0, r8
 800afda:	47d0      	blx	sl
 800afdc:	3001      	adds	r0, #1
 800afde:	d09d      	beq.n	800af1c <_printf_i+0x15c>
 800afe0:	3501      	adds	r5, #1
 800afe2:	68e3      	ldr	r3, [r4, #12]
 800afe4:	9903      	ldr	r1, [sp, #12]
 800afe6:	1a5b      	subs	r3, r3, r1
 800afe8:	42ab      	cmp	r3, r5
 800afea:	dcf2      	bgt.n	800afd2 <_printf_i+0x212>
 800afec:	e7eb      	b.n	800afc6 <_printf_i+0x206>
 800afee:	2500      	movs	r5, #0
 800aff0:	f104 0619 	add.w	r6, r4, #25
 800aff4:	e7f5      	b.n	800afe2 <_printf_i+0x222>
 800aff6:	bf00      	nop
 800aff8:	0800b411 	.word	0x0800b411
 800affc:	0800b422 	.word	0x0800b422

0800b000 <__sflush_r>:
 800b000:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b008:	0716      	lsls	r6, r2, #28
 800b00a:	4605      	mov	r5, r0
 800b00c:	460c      	mov	r4, r1
 800b00e:	d454      	bmi.n	800b0ba <__sflush_r+0xba>
 800b010:	684b      	ldr	r3, [r1, #4]
 800b012:	2b00      	cmp	r3, #0
 800b014:	dc02      	bgt.n	800b01c <__sflush_r+0x1c>
 800b016:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b018:	2b00      	cmp	r3, #0
 800b01a:	dd48      	ble.n	800b0ae <__sflush_r+0xae>
 800b01c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b01e:	2e00      	cmp	r6, #0
 800b020:	d045      	beq.n	800b0ae <__sflush_r+0xae>
 800b022:	2300      	movs	r3, #0
 800b024:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b028:	682f      	ldr	r7, [r5, #0]
 800b02a:	6a21      	ldr	r1, [r4, #32]
 800b02c:	602b      	str	r3, [r5, #0]
 800b02e:	d030      	beq.n	800b092 <__sflush_r+0x92>
 800b030:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b032:	89a3      	ldrh	r3, [r4, #12]
 800b034:	0759      	lsls	r1, r3, #29
 800b036:	d505      	bpl.n	800b044 <__sflush_r+0x44>
 800b038:	6863      	ldr	r3, [r4, #4]
 800b03a:	1ad2      	subs	r2, r2, r3
 800b03c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b03e:	b10b      	cbz	r3, 800b044 <__sflush_r+0x44>
 800b040:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b042:	1ad2      	subs	r2, r2, r3
 800b044:	2300      	movs	r3, #0
 800b046:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b048:	6a21      	ldr	r1, [r4, #32]
 800b04a:	4628      	mov	r0, r5
 800b04c:	47b0      	blx	r6
 800b04e:	1c43      	adds	r3, r0, #1
 800b050:	89a3      	ldrh	r3, [r4, #12]
 800b052:	d106      	bne.n	800b062 <__sflush_r+0x62>
 800b054:	6829      	ldr	r1, [r5, #0]
 800b056:	291d      	cmp	r1, #29
 800b058:	d82b      	bhi.n	800b0b2 <__sflush_r+0xb2>
 800b05a:	4a2a      	ldr	r2, [pc, #168]	@ (800b104 <__sflush_r+0x104>)
 800b05c:	410a      	asrs	r2, r1
 800b05e:	07d6      	lsls	r6, r2, #31
 800b060:	d427      	bmi.n	800b0b2 <__sflush_r+0xb2>
 800b062:	2200      	movs	r2, #0
 800b064:	6062      	str	r2, [r4, #4]
 800b066:	04d9      	lsls	r1, r3, #19
 800b068:	6922      	ldr	r2, [r4, #16]
 800b06a:	6022      	str	r2, [r4, #0]
 800b06c:	d504      	bpl.n	800b078 <__sflush_r+0x78>
 800b06e:	1c42      	adds	r2, r0, #1
 800b070:	d101      	bne.n	800b076 <__sflush_r+0x76>
 800b072:	682b      	ldr	r3, [r5, #0]
 800b074:	b903      	cbnz	r3, 800b078 <__sflush_r+0x78>
 800b076:	6560      	str	r0, [r4, #84]	@ 0x54
 800b078:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b07a:	602f      	str	r7, [r5, #0]
 800b07c:	b1b9      	cbz	r1, 800b0ae <__sflush_r+0xae>
 800b07e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b082:	4299      	cmp	r1, r3
 800b084:	d002      	beq.n	800b08c <__sflush_r+0x8c>
 800b086:	4628      	mov	r0, r5
 800b088:	f7ff fca0 	bl	800a9cc <_free_r>
 800b08c:	2300      	movs	r3, #0
 800b08e:	6363      	str	r3, [r4, #52]	@ 0x34
 800b090:	e00d      	b.n	800b0ae <__sflush_r+0xae>
 800b092:	2301      	movs	r3, #1
 800b094:	4628      	mov	r0, r5
 800b096:	47b0      	blx	r6
 800b098:	4602      	mov	r2, r0
 800b09a:	1c50      	adds	r0, r2, #1
 800b09c:	d1c9      	bne.n	800b032 <__sflush_r+0x32>
 800b09e:	682b      	ldr	r3, [r5, #0]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d0c6      	beq.n	800b032 <__sflush_r+0x32>
 800b0a4:	2b1d      	cmp	r3, #29
 800b0a6:	d001      	beq.n	800b0ac <__sflush_r+0xac>
 800b0a8:	2b16      	cmp	r3, #22
 800b0aa:	d11e      	bne.n	800b0ea <__sflush_r+0xea>
 800b0ac:	602f      	str	r7, [r5, #0]
 800b0ae:	2000      	movs	r0, #0
 800b0b0:	e022      	b.n	800b0f8 <__sflush_r+0xf8>
 800b0b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0b6:	b21b      	sxth	r3, r3
 800b0b8:	e01b      	b.n	800b0f2 <__sflush_r+0xf2>
 800b0ba:	690f      	ldr	r7, [r1, #16]
 800b0bc:	2f00      	cmp	r7, #0
 800b0be:	d0f6      	beq.n	800b0ae <__sflush_r+0xae>
 800b0c0:	0793      	lsls	r3, r2, #30
 800b0c2:	680e      	ldr	r6, [r1, #0]
 800b0c4:	bf08      	it	eq
 800b0c6:	694b      	ldreq	r3, [r1, #20]
 800b0c8:	600f      	str	r7, [r1, #0]
 800b0ca:	bf18      	it	ne
 800b0cc:	2300      	movne	r3, #0
 800b0ce:	eba6 0807 	sub.w	r8, r6, r7
 800b0d2:	608b      	str	r3, [r1, #8]
 800b0d4:	f1b8 0f00 	cmp.w	r8, #0
 800b0d8:	dde9      	ble.n	800b0ae <__sflush_r+0xae>
 800b0da:	6a21      	ldr	r1, [r4, #32]
 800b0dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b0de:	4643      	mov	r3, r8
 800b0e0:	463a      	mov	r2, r7
 800b0e2:	4628      	mov	r0, r5
 800b0e4:	47b0      	blx	r6
 800b0e6:	2800      	cmp	r0, #0
 800b0e8:	dc08      	bgt.n	800b0fc <__sflush_r+0xfc>
 800b0ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0f2:	81a3      	strh	r3, [r4, #12]
 800b0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0fc:	4407      	add	r7, r0
 800b0fe:	eba8 0800 	sub.w	r8, r8, r0
 800b102:	e7e7      	b.n	800b0d4 <__sflush_r+0xd4>
 800b104:	dfbffffe 	.word	0xdfbffffe

0800b108 <_fflush_r>:
 800b108:	b538      	push	{r3, r4, r5, lr}
 800b10a:	690b      	ldr	r3, [r1, #16]
 800b10c:	4605      	mov	r5, r0
 800b10e:	460c      	mov	r4, r1
 800b110:	b913      	cbnz	r3, 800b118 <_fflush_r+0x10>
 800b112:	2500      	movs	r5, #0
 800b114:	4628      	mov	r0, r5
 800b116:	bd38      	pop	{r3, r4, r5, pc}
 800b118:	b118      	cbz	r0, 800b122 <_fflush_r+0x1a>
 800b11a:	6a03      	ldr	r3, [r0, #32]
 800b11c:	b90b      	cbnz	r3, 800b122 <_fflush_r+0x1a>
 800b11e:	f7ff fb3d 	bl	800a79c <__sinit>
 800b122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d0f3      	beq.n	800b112 <_fflush_r+0xa>
 800b12a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b12c:	07d0      	lsls	r0, r2, #31
 800b12e:	d404      	bmi.n	800b13a <_fflush_r+0x32>
 800b130:	0599      	lsls	r1, r3, #22
 800b132:	d402      	bmi.n	800b13a <_fflush_r+0x32>
 800b134:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b136:	f7ff fc46 	bl	800a9c6 <__retarget_lock_acquire_recursive>
 800b13a:	4628      	mov	r0, r5
 800b13c:	4621      	mov	r1, r4
 800b13e:	f7ff ff5f 	bl	800b000 <__sflush_r>
 800b142:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b144:	07da      	lsls	r2, r3, #31
 800b146:	4605      	mov	r5, r0
 800b148:	d4e4      	bmi.n	800b114 <_fflush_r+0xc>
 800b14a:	89a3      	ldrh	r3, [r4, #12]
 800b14c:	059b      	lsls	r3, r3, #22
 800b14e:	d4e1      	bmi.n	800b114 <_fflush_r+0xc>
 800b150:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b152:	f7ff fc39 	bl	800a9c8 <__retarget_lock_release_recursive>
 800b156:	e7dd      	b.n	800b114 <_fflush_r+0xc>

0800b158 <__swbuf_r>:
 800b158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b15a:	460e      	mov	r6, r1
 800b15c:	4614      	mov	r4, r2
 800b15e:	4605      	mov	r5, r0
 800b160:	b118      	cbz	r0, 800b16a <__swbuf_r+0x12>
 800b162:	6a03      	ldr	r3, [r0, #32]
 800b164:	b90b      	cbnz	r3, 800b16a <__swbuf_r+0x12>
 800b166:	f7ff fb19 	bl	800a79c <__sinit>
 800b16a:	69a3      	ldr	r3, [r4, #24]
 800b16c:	60a3      	str	r3, [r4, #8]
 800b16e:	89a3      	ldrh	r3, [r4, #12]
 800b170:	071a      	lsls	r2, r3, #28
 800b172:	d501      	bpl.n	800b178 <__swbuf_r+0x20>
 800b174:	6923      	ldr	r3, [r4, #16]
 800b176:	b943      	cbnz	r3, 800b18a <__swbuf_r+0x32>
 800b178:	4621      	mov	r1, r4
 800b17a:	4628      	mov	r0, r5
 800b17c:	f000 f82a 	bl	800b1d4 <__swsetup_r>
 800b180:	b118      	cbz	r0, 800b18a <__swbuf_r+0x32>
 800b182:	f04f 37ff 	mov.w	r7, #4294967295
 800b186:	4638      	mov	r0, r7
 800b188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b18a:	6823      	ldr	r3, [r4, #0]
 800b18c:	6922      	ldr	r2, [r4, #16]
 800b18e:	1a98      	subs	r0, r3, r2
 800b190:	6963      	ldr	r3, [r4, #20]
 800b192:	b2f6      	uxtb	r6, r6
 800b194:	4283      	cmp	r3, r0
 800b196:	4637      	mov	r7, r6
 800b198:	dc05      	bgt.n	800b1a6 <__swbuf_r+0x4e>
 800b19a:	4621      	mov	r1, r4
 800b19c:	4628      	mov	r0, r5
 800b19e:	f7ff ffb3 	bl	800b108 <_fflush_r>
 800b1a2:	2800      	cmp	r0, #0
 800b1a4:	d1ed      	bne.n	800b182 <__swbuf_r+0x2a>
 800b1a6:	68a3      	ldr	r3, [r4, #8]
 800b1a8:	3b01      	subs	r3, #1
 800b1aa:	60a3      	str	r3, [r4, #8]
 800b1ac:	6823      	ldr	r3, [r4, #0]
 800b1ae:	1c5a      	adds	r2, r3, #1
 800b1b0:	6022      	str	r2, [r4, #0]
 800b1b2:	701e      	strb	r6, [r3, #0]
 800b1b4:	6962      	ldr	r2, [r4, #20]
 800b1b6:	1c43      	adds	r3, r0, #1
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d004      	beq.n	800b1c6 <__swbuf_r+0x6e>
 800b1bc:	89a3      	ldrh	r3, [r4, #12]
 800b1be:	07db      	lsls	r3, r3, #31
 800b1c0:	d5e1      	bpl.n	800b186 <__swbuf_r+0x2e>
 800b1c2:	2e0a      	cmp	r6, #10
 800b1c4:	d1df      	bne.n	800b186 <__swbuf_r+0x2e>
 800b1c6:	4621      	mov	r1, r4
 800b1c8:	4628      	mov	r0, r5
 800b1ca:	f7ff ff9d 	bl	800b108 <_fflush_r>
 800b1ce:	2800      	cmp	r0, #0
 800b1d0:	d0d9      	beq.n	800b186 <__swbuf_r+0x2e>
 800b1d2:	e7d6      	b.n	800b182 <__swbuf_r+0x2a>

0800b1d4 <__swsetup_r>:
 800b1d4:	b538      	push	{r3, r4, r5, lr}
 800b1d6:	4b29      	ldr	r3, [pc, #164]	@ (800b27c <__swsetup_r+0xa8>)
 800b1d8:	4605      	mov	r5, r0
 800b1da:	6818      	ldr	r0, [r3, #0]
 800b1dc:	460c      	mov	r4, r1
 800b1de:	b118      	cbz	r0, 800b1e8 <__swsetup_r+0x14>
 800b1e0:	6a03      	ldr	r3, [r0, #32]
 800b1e2:	b90b      	cbnz	r3, 800b1e8 <__swsetup_r+0x14>
 800b1e4:	f7ff fada 	bl	800a79c <__sinit>
 800b1e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1ec:	0719      	lsls	r1, r3, #28
 800b1ee:	d422      	bmi.n	800b236 <__swsetup_r+0x62>
 800b1f0:	06da      	lsls	r2, r3, #27
 800b1f2:	d407      	bmi.n	800b204 <__swsetup_r+0x30>
 800b1f4:	2209      	movs	r2, #9
 800b1f6:	602a      	str	r2, [r5, #0]
 800b1f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1fc:	81a3      	strh	r3, [r4, #12]
 800b1fe:	f04f 30ff 	mov.w	r0, #4294967295
 800b202:	e033      	b.n	800b26c <__swsetup_r+0x98>
 800b204:	0758      	lsls	r0, r3, #29
 800b206:	d512      	bpl.n	800b22e <__swsetup_r+0x5a>
 800b208:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b20a:	b141      	cbz	r1, 800b21e <__swsetup_r+0x4a>
 800b20c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b210:	4299      	cmp	r1, r3
 800b212:	d002      	beq.n	800b21a <__swsetup_r+0x46>
 800b214:	4628      	mov	r0, r5
 800b216:	f7ff fbd9 	bl	800a9cc <_free_r>
 800b21a:	2300      	movs	r3, #0
 800b21c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b21e:	89a3      	ldrh	r3, [r4, #12]
 800b220:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b224:	81a3      	strh	r3, [r4, #12]
 800b226:	2300      	movs	r3, #0
 800b228:	6063      	str	r3, [r4, #4]
 800b22a:	6923      	ldr	r3, [r4, #16]
 800b22c:	6023      	str	r3, [r4, #0]
 800b22e:	89a3      	ldrh	r3, [r4, #12]
 800b230:	f043 0308 	orr.w	r3, r3, #8
 800b234:	81a3      	strh	r3, [r4, #12]
 800b236:	6923      	ldr	r3, [r4, #16]
 800b238:	b94b      	cbnz	r3, 800b24e <__swsetup_r+0x7a>
 800b23a:	89a3      	ldrh	r3, [r4, #12]
 800b23c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b240:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b244:	d003      	beq.n	800b24e <__swsetup_r+0x7a>
 800b246:	4621      	mov	r1, r4
 800b248:	4628      	mov	r0, r5
 800b24a:	f000 f83f 	bl	800b2cc <__smakebuf_r>
 800b24e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b252:	f013 0201 	ands.w	r2, r3, #1
 800b256:	d00a      	beq.n	800b26e <__swsetup_r+0x9a>
 800b258:	2200      	movs	r2, #0
 800b25a:	60a2      	str	r2, [r4, #8]
 800b25c:	6962      	ldr	r2, [r4, #20]
 800b25e:	4252      	negs	r2, r2
 800b260:	61a2      	str	r2, [r4, #24]
 800b262:	6922      	ldr	r2, [r4, #16]
 800b264:	b942      	cbnz	r2, 800b278 <__swsetup_r+0xa4>
 800b266:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b26a:	d1c5      	bne.n	800b1f8 <__swsetup_r+0x24>
 800b26c:	bd38      	pop	{r3, r4, r5, pc}
 800b26e:	0799      	lsls	r1, r3, #30
 800b270:	bf58      	it	pl
 800b272:	6962      	ldrpl	r2, [r4, #20]
 800b274:	60a2      	str	r2, [r4, #8]
 800b276:	e7f4      	b.n	800b262 <__swsetup_r+0x8e>
 800b278:	2000      	movs	r0, #0
 800b27a:	e7f7      	b.n	800b26c <__swsetup_r+0x98>
 800b27c:	20000038 	.word	0x20000038

0800b280 <__swhatbuf_r>:
 800b280:	b570      	push	{r4, r5, r6, lr}
 800b282:	460c      	mov	r4, r1
 800b284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b288:	2900      	cmp	r1, #0
 800b28a:	b096      	sub	sp, #88	@ 0x58
 800b28c:	4615      	mov	r5, r2
 800b28e:	461e      	mov	r6, r3
 800b290:	da0d      	bge.n	800b2ae <__swhatbuf_r+0x2e>
 800b292:	89a3      	ldrh	r3, [r4, #12]
 800b294:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b298:	f04f 0100 	mov.w	r1, #0
 800b29c:	bf14      	ite	ne
 800b29e:	2340      	movne	r3, #64	@ 0x40
 800b2a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b2a4:	2000      	movs	r0, #0
 800b2a6:	6031      	str	r1, [r6, #0]
 800b2a8:	602b      	str	r3, [r5, #0]
 800b2aa:	b016      	add	sp, #88	@ 0x58
 800b2ac:	bd70      	pop	{r4, r5, r6, pc}
 800b2ae:	466a      	mov	r2, sp
 800b2b0:	f000 f848 	bl	800b344 <_fstat_r>
 800b2b4:	2800      	cmp	r0, #0
 800b2b6:	dbec      	blt.n	800b292 <__swhatbuf_r+0x12>
 800b2b8:	9901      	ldr	r1, [sp, #4]
 800b2ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b2be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b2c2:	4259      	negs	r1, r3
 800b2c4:	4159      	adcs	r1, r3
 800b2c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b2ca:	e7eb      	b.n	800b2a4 <__swhatbuf_r+0x24>

0800b2cc <__smakebuf_r>:
 800b2cc:	898b      	ldrh	r3, [r1, #12]
 800b2ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2d0:	079d      	lsls	r5, r3, #30
 800b2d2:	4606      	mov	r6, r0
 800b2d4:	460c      	mov	r4, r1
 800b2d6:	d507      	bpl.n	800b2e8 <__smakebuf_r+0x1c>
 800b2d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b2dc:	6023      	str	r3, [r4, #0]
 800b2de:	6123      	str	r3, [r4, #16]
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	6163      	str	r3, [r4, #20]
 800b2e4:	b003      	add	sp, #12
 800b2e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2e8:	ab01      	add	r3, sp, #4
 800b2ea:	466a      	mov	r2, sp
 800b2ec:	f7ff ffc8 	bl	800b280 <__swhatbuf_r>
 800b2f0:	9f00      	ldr	r7, [sp, #0]
 800b2f2:	4605      	mov	r5, r0
 800b2f4:	4639      	mov	r1, r7
 800b2f6:	4630      	mov	r0, r6
 800b2f8:	f7ff f938 	bl	800a56c <_malloc_r>
 800b2fc:	b948      	cbnz	r0, 800b312 <__smakebuf_r+0x46>
 800b2fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b302:	059a      	lsls	r2, r3, #22
 800b304:	d4ee      	bmi.n	800b2e4 <__smakebuf_r+0x18>
 800b306:	f023 0303 	bic.w	r3, r3, #3
 800b30a:	f043 0302 	orr.w	r3, r3, #2
 800b30e:	81a3      	strh	r3, [r4, #12]
 800b310:	e7e2      	b.n	800b2d8 <__smakebuf_r+0xc>
 800b312:	89a3      	ldrh	r3, [r4, #12]
 800b314:	6020      	str	r0, [r4, #0]
 800b316:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b31a:	81a3      	strh	r3, [r4, #12]
 800b31c:	9b01      	ldr	r3, [sp, #4]
 800b31e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b322:	b15b      	cbz	r3, 800b33c <__smakebuf_r+0x70>
 800b324:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b328:	4630      	mov	r0, r6
 800b32a:	f000 f81d 	bl	800b368 <_isatty_r>
 800b32e:	b128      	cbz	r0, 800b33c <__smakebuf_r+0x70>
 800b330:	89a3      	ldrh	r3, [r4, #12]
 800b332:	f023 0303 	bic.w	r3, r3, #3
 800b336:	f043 0301 	orr.w	r3, r3, #1
 800b33a:	81a3      	strh	r3, [r4, #12]
 800b33c:	89a3      	ldrh	r3, [r4, #12]
 800b33e:	431d      	orrs	r5, r3
 800b340:	81a5      	strh	r5, [r4, #12]
 800b342:	e7cf      	b.n	800b2e4 <__smakebuf_r+0x18>

0800b344 <_fstat_r>:
 800b344:	b538      	push	{r3, r4, r5, lr}
 800b346:	4d07      	ldr	r5, [pc, #28]	@ (800b364 <_fstat_r+0x20>)
 800b348:	2300      	movs	r3, #0
 800b34a:	4604      	mov	r4, r0
 800b34c:	4608      	mov	r0, r1
 800b34e:	4611      	mov	r1, r2
 800b350:	602b      	str	r3, [r5, #0]
 800b352:	f7f6 f90c 	bl	800156e <_fstat>
 800b356:	1c43      	adds	r3, r0, #1
 800b358:	d102      	bne.n	800b360 <_fstat_r+0x1c>
 800b35a:	682b      	ldr	r3, [r5, #0]
 800b35c:	b103      	cbz	r3, 800b360 <_fstat_r+0x1c>
 800b35e:	6023      	str	r3, [r4, #0]
 800b360:	bd38      	pop	{r3, r4, r5, pc}
 800b362:	bf00      	nop
 800b364:	20000c1c 	.word	0x20000c1c

0800b368 <_isatty_r>:
 800b368:	b538      	push	{r3, r4, r5, lr}
 800b36a:	4d06      	ldr	r5, [pc, #24]	@ (800b384 <_isatty_r+0x1c>)
 800b36c:	2300      	movs	r3, #0
 800b36e:	4604      	mov	r4, r0
 800b370:	4608      	mov	r0, r1
 800b372:	602b      	str	r3, [r5, #0]
 800b374:	f7f6 f90b 	bl	800158e <_isatty>
 800b378:	1c43      	adds	r3, r0, #1
 800b37a:	d102      	bne.n	800b382 <_isatty_r+0x1a>
 800b37c:	682b      	ldr	r3, [r5, #0]
 800b37e:	b103      	cbz	r3, 800b382 <_isatty_r+0x1a>
 800b380:	6023      	str	r3, [r4, #0]
 800b382:	bd38      	pop	{r3, r4, r5, pc}
 800b384:	20000c1c 	.word	0x20000c1c

0800b388 <_init>:
 800b388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b38a:	bf00      	nop
 800b38c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b38e:	bc08      	pop	{r3}
 800b390:	469e      	mov	lr, r3
 800b392:	4770      	bx	lr

0800b394 <_fini>:
 800b394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b396:	bf00      	nop
 800b398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b39a:	bc08      	pop	{r3}
 800b39c:	469e      	mov	lr, r3
 800b39e:	4770      	bx	lr
