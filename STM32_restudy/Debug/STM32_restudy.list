
STM32_restudy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a40  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002bec  08002bec  00003bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c08  08002c08  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002c08  08002c08  00003c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c10  08002c10  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c10  08002c10  00003c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c14  08002c14  00003c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002c18  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          000000b4  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c0  200000c0  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008c97  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000177c  00000000  00000000  0000ccd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000780  00000000  00000000  0000e450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005b4  00000000  00000000  0000ebd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000237f9  00000000  00000000  0000f184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a05a  00000000  00000000  0003297d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db456  00000000  00000000  0003c9d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00117e2d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001d60  00000000  00000000  00117e70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000080  00000000  00000000  00119bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002bd4 	.word	0x08002bd4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08002bd4 	.word	0x08002bd4

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <adcRead>:
{
	return true;
}

uint16_t adcRead(uint8_t rank)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
	static const uint16_t Timeout = 10;
	uint16_t ret;

	HAL_ADC_Start(&hadc1);
 80004e6:	4815      	ldr	r0, [pc, #84]	@ (800053c <adcRead+0x60>)
 80004e8:	f000 fda8 	bl	800103c <HAL_ADC_Start>

	for (int i = 1; i < hadc1.Init.NbrOfConversion; i++)
 80004ec:	2301      	movs	r3, #1
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	e019      	b.n	8000526 <adcRead+0x4a>
	{
		HAL_ADC_PollForConversion(&hadc1, Timeout);
 80004f2:	4b13      	ldr	r3, [pc, #76]	@ (8000540 <adcRead+0x64>)
 80004f4:	881b      	ldrh	r3, [r3, #0]
 80004f6:	4619      	mov	r1, r3
 80004f8:	4810      	ldr	r0, [pc, #64]	@ (800053c <adcRead+0x60>)
 80004fa:	f000 fe71 	bl	80011e0 <HAL_ADC_PollForConversion>

		ret = HAL_ADC_GetValue(&hadc1);
 80004fe:	480f      	ldr	r0, [pc, #60]	@ (800053c <adcRead+0x60>)
 8000500:	f000 fef9 	bl	80012f6 <HAL_ADC_GetValue>
 8000504:	4603      	mov	r3, r0
 8000506:	817b      	strh	r3, [r7, #10]

		if (i == rank)
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	68fa      	ldr	r2, [r7, #12]
 800050c:	429a      	cmp	r2, r3
 800050e:	d101      	bne.n	8000514 <adcRead+0x38>
		{
			return ret;
 8000510:	897b      	ldrh	r3, [r7, #10]
 8000512:	e00e      	b.n	8000532 <adcRead+0x56>
		}
		else if (i > rank)
 8000514:	79fb      	ldrb	r3, [r7, #7]
 8000516:	68fa      	ldr	r2, [r7, #12]
 8000518:	429a      	cmp	r2, r3
 800051a:	dd01      	ble.n	8000520 <adcRead+0x44>
		{
			return 0;
 800051c:	2300      	movs	r3, #0
 800051e:	e008      	b.n	8000532 <adcRead+0x56>
	for (int i = 1; i < hadc1.Init.NbrOfConversion; i++)
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	3301      	adds	r3, #1
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	4b05      	ldr	r3, [pc, #20]	@ (800053c <adcRead+0x60>)
 8000528:	69da      	ldr	r2, [r3, #28]
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	429a      	cmp	r2, r3
 800052e:	d8e0      	bhi.n	80004f2 <adcRead+0x16>
		}
	}
	return 0 ;
 8000530:	2300      	movs	r3, #0
}
 8000532:	4618      	mov	r0, r3
 8000534:	3710      	adds	r7, #16
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	2000002c 	.word	0x2000002c
 8000540:	08002bec 	.word	0x08002bec

08000544 <adcReadVoltage>:

uint16_t adcReadVoltage(uint8_t rank)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
	uint16_t ret ;
	ret = adcRead(rank);
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	4618      	mov	r0, r3
 8000552:	f7ff ffc3 	bl	80004dc <adcRead>
 8000556:	4603      	mov	r3, r0
 8000558:	81fb      	strh	r3, [r7, #14]
	ret =  (330 * ret ) / 4096 ;
 800055a:	89fb      	ldrh	r3, [r7, #14]
 800055c:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8000560:	fb02 f303 	mul.w	r3, r2, r3
 8000564:	2b00      	cmp	r3, #0
 8000566:	da01      	bge.n	800056c <adcReadVoltage+0x28>
 8000568:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 800056c:	131b      	asrs	r3, r3, #12
 800056e:	81fb      	strh	r3, [r7, #14]
	return ret ;
 8000570:	89fb      	ldrh	r3, [r7, #14]
}
 8000572:	4618      	mov	r0, r3
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <apInit>:
#include "adc.h"
uint16_t adc_vol = 0;


void apInit(void)
{
 800057a:	b480      	push	{r7}
 800057c:	af00      	add	r7, sp, #0

}
 800057e:	bf00      	nop
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr

08000588 <apMain>:



void apMain(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0

	while(1)
	{
		adc_vol =adcReadVoltage(_DEF_CH1);
 800058c:	2000      	movs	r0, #0
 800058e:	f7ff ffd9 	bl	8000544 <adcReadVoltage>
 8000592:	4603      	mov	r3, r0
 8000594:	461a      	mov	r2, r3
 8000596:	4b01      	ldr	r3, [pc, #4]	@ (800059c <apMain+0x14>)
 8000598:	801a      	strh	r2, [r3, #0]
 800059a:	e7f7      	b.n	800058c <apMain+0x4>
 800059c:	20000028 	.word	0x20000028

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a4:	f000 fc94 	bl	8000ed0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a8:	f000 f80c 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f000 f910 	bl	80007d0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005b0:	f000 f8e4 	bl	800077c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80005b4:	f000 f872 	bl	800069c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  apInit();
 80005b8:	f7ff ffdf 	bl	800057a <apInit>
  apMain();
 80005bc:	f7ff ffe4 	bl	8000588 <apMain>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c0:	bf00      	nop
 80005c2:	e7fd      	b.n	80005c0 <main+0x20>

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	@ 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	2230      	movs	r2, #48	@ 0x30
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f002 fad2 	bl	8002b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	4b29      	ldr	r3, [pc, #164]	@ (8000694 <SystemClock_Config+0xd0>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f0:	4a28      	ldr	r2, [pc, #160]	@ (8000694 <SystemClock_Config+0xd0>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f8:	4b26      	ldr	r3, [pc, #152]	@ (8000694 <SystemClock_Config+0xd0>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b23      	ldr	r3, [pc, #140]	@ (8000698 <SystemClock_Config+0xd4>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000610:	4a21      	ldr	r2, [pc, #132]	@ (8000698 <SystemClock_Config+0xd4>)
 8000612:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4b1f      	ldr	r3, [pc, #124]	@ (8000698 <SystemClock_Config+0xd4>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000624:	2301      	movs	r3, #1
 8000626:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000628:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800062c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062e:	2302      	movs	r3, #2
 8000630:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000632:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000636:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000638:	2304      	movs	r3, #4
 800063a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800063c:	2360      	movs	r3, #96	@ 0x60
 800063e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000644:	2303      	movs	r3, #3
 8000646:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 0320 	add.w	r3, r7, #32
 800064c:	4618      	mov	r0, r3
 800064e:	f001 fb39 	bl	8001cc4 <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000658:	f000 fb14 	bl	8000c84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
 800065e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000660:	2302      	movs	r3, #2
 8000662:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000668:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800066c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800066e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000672:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2103      	movs	r1, #3
 800067a:	4618      	mov	r0, r3
 800067c:	f001 fd9a 	bl	80021b4 <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000686:	f000 fafd 	bl	8000c84 <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3750      	adds	r7, #80	@ 0x50
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800
 8000698:	40007000 	.word	0x40007000

0800069c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006a2:	463b      	mov	r3, r7
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006ae:	4b2f      	ldr	r3, [pc, #188]	@ (800076c <MX_ADC1_Init+0xd0>)
 80006b0:	4a2f      	ldr	r2, [pc, #188]	@ (8000770 <MX_ADC1_Init+0xd4>)
 80006b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006b4:	4b2d      	ldr	r3, [pc, #180]	@ (800076c <MX_ADC1_Init+0xd0>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ba:	4b2c      	ldr	r3, [pc, #176]	@ (800076c <MX_ADC1_Init+0xd0>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80006c0:	4b2a      	ldr	r3, [pc, #168]	@ (800076c <MX_ADC1_Init+0xd0>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006c6:	4b29      	ldr	r3, [pc, #164]	@ (800076c <MX_ADC1_Init+0xd0>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006cc:	4b27      	ldr	r3, [pc, #156]	@ (800076c <MX_ADC1_Init+0xd0>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006d4:	4b25      	ldr	r3, [pc, #148]	@ (800076c <MX_ADC1_Init+0xd0>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006da:	4b24      	ldr	r3, [pc, #144]	@ (800076c <MX_ADC1_Init+0xd0>)
 80006dc:	4a25      	ldr	r2, [pc, #148]	@ (8000774 <MX_ADC1_Init+0xd8>)
 80006de:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006e0:	4b22      	ldr	r3, [pc, #136]	@ (800076c <MX_ADC1_Init+0xd0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80006e6:	4b21      	ldr	r3, [pc, #132]	@ (800076c <MX_ADC1_Init+0xd0>)
 80006e8:	2203      	movs	r2, #3
 80006ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006ec:	4b1f      	ldr	r3, [pc, #124]	@ (800076c <MX_ADC1_Init+0xd0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006f4:	4b1d      	ldr	r3, [pc, #116]	@ (800076c <MX_ADC1_Init+0xd0>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006fa:	481c      	ldr	r0, [pc, #112]	@ (800076c <MX_ADC1_Init+0xd0>)
 80006fc:	f000 fc5a 	bl	8000fb4 <HAL_ADC_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000706:	f000 fabd 	bl	8000c84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800070a:	2305      	movs	r3, #5
 800070c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800070e:	2301      	movs	r3, #1
 8000710:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000712:	2301      	movs	r3, #1
 8000714:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000716:	463b      	mov	r3, r7
 8000718:	4619      	mov	r1, r3
 800071a:	4814      	ldr	r0, [pc, #80]	@ (800076c <MX_ADC1_Init+0xd0>)
 800071c:	f000 fdf8 	bl	8001310 <HAL_ADC_ConfigChannel>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000726:	f000 faad 	bl	8000c84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800072a:	4b13      	ldr	r3, [pc, #76]	@ (8000778 <MX_ADC1_Init+0xdc>)
 800072c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800072e:	2302      	movs	r3, #2
 8000730:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000732:	463b      	mov	r3, r7
 8000734:	4619      	mov	r1, r3
 8000736:	480d      	ldr	r0, [pc, #52]	@ (800076c <MX_ADC1_Init+0xd0>)
 8000738:	f000 fdea 	bl	8001310 <HAL_ADC_ConfigChannel>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000742:	f000 fa9f 	bl	8000c84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000746:	2311      	movs	r3, #17
 8000748:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800074a:	2303      	movs	r3, #3
 800074c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074e:	463b      	mov	r3, r7
 8000750:	4619      	mov	r1, r3
 8000752:	4806      	ldr	r0, [pc, #24]	@ (800076c <MX_ADC1_Init+0xd0>)
 8000754:	f000 fddc 	bl	8001310 <HAL_ADC_ConfigChannel>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800075e:	f000 fa91 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	2000002c 	.word	0x2000002c
 8000770:	40012000 	.word	0x40012000
 8000774:	0f000001 	.word	0x0f000001
 8000778:	10000012 	.word	0x10000012

0800077c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000780:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <MX_USART1_UART_Init+0x4c>)
 8000782:	4a12      	ldr	r2, [pc, #72]	@ (80007cc <MX_USART1_UART_Init+0x50>)
 8000784:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000786:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <MX_USART1_UART_Init+0x4c>)
 8000788:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800078c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800078e:	4b0e      	ldr	r3, [pc, #56]	@ (80007c8 <MX_USART1_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000794:	4b0c      	ldr	r3, [pc, #48]	@ (80007c8 <MX_USART1_UART_Init+0x4c>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	@ (80007c8 <MX_USART1_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007a0:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <MX_USART1_UART_Init+0x4c>)
 80007a2:	220c      	movs	r2, #12
 80007a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <MX_USART1_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ac:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <MX_USART1_UART_Init+0x4c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	@ (80007c8 <MX_USART1_UART_Init+0x4c>)
 80007b4:	f001 ff1e 	bl	80025f4 <HAL_UART_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007be:	f000 fa61 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000074 	.word	0x20000074
 80007cc:	40011000 	.word	0x40011000

080007d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08e      	sub	sp, #56	@ 0x38
 80007d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	623b      	str	r3, [r7, #32]
 80007ea:	4bb2      	ldr	r3, [pc, #712]	@ (8000ab4 <MX_GPIO_Init+0x2e4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4ab1      	ldr	r2, [pc, #708]	@ (8000ab4 <MX_GPIO_Init+0x2e4>)
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4baf      	ldr	r3, [pc, #700]	@ (8000ab4 <MX_GPIO_Init+0x2e4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0304 	and.w	r3, r3, #4
 80007fe:	623b      	str	r3, [r7, #32]
 8000800:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
 8000806:	4bab      	ldr	r3, [pc, #684]	@ (8000ab4 <MX_GPIO_Init+0x2e4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4aaa      	ldr	r2, [pc, #680]	@ (8000ab4 <MX_GPIO_Init+0x2e4>)
 800080c:	f043 0320 	orr.w	r3, r3, #32
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4ba8      	ldr	r3, [pc, #672]	@ (8000ab4 <MX_GPIO_Init+0x2e4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0320 	and.w	r3, r3, #32
 800081a:	61fb      	str	r3, [r7, #28]
 800081c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
 8000822:	4ba4      	ldr	r3, [pc, #656]	@ (8000ab4 <MX_GPIO_Init+0x2e4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4aa3      	ldr	r2, [pc, #652]	@ (8000ab4 <MX_GPIO_Init+0x2e4>)
 8000828:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4ba1      	ldr	r3, [pc, #644]	@ (8000ab4 <MX_GPIO_Init+0x2e4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000836:	61bb      	str	r3, [r7, #24]
 8000838:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
 800083e:	4b9d      	ldr	r3, [pc, #628]	@ (8000ab4 <MX_GPIO_Init+0x2e4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a9c      	ldr	r2, [pc, #624]	@ (8000ab4 <MX_GPIO_Init+0x2e4>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b9a      	ldr	r3, [pc, #616]	@ (8000ab4 <MX_GPIO_Init+0x2e4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
 800085a:	4b96      	ldr	r3, [pc, #600]	@ (8000ab4 <MX_GPIO_Init+0x2e4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a95      	ldr	r2, [pc, #596]	@ (8000ab4 <MX_GPIO_Init+0x2e4>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b93      	ldr	r3, [pc, #588]	@ (8000ab4 <MX_GPIO_Init+0x2e4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	4b8f      	ldr	r3, [pc, #572]	@ (8000ab4 <MX_GPIO_Init+0x2e4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	4a8e      	ldr	r2, [pc, #568]	@ (8000ab4 <MX_GPIO_Init+0x2e4>)
 800087c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000880:	6313      	str	r3, [r2, #48]	@ 0x30
 8000882:	4b8c      	ldr	r3, [pc, #560]	@ (8000ab4 <MX_GPIO_Init+0x2e4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	4b88      	ldr	r3, [pc, #544]	@ (8000ab4 <MX_GPIO_Init+0x2e4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a87      	ldr	r2, [pc, #540]	@ (8000ab4 <MX_GPIO_Init+0x2e4>)
 8000898:	f043 0310 	orr.w	r3, r3, #16
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b85      	ldr	r3, [pc, #532]	@ (8000ab4 <MX_GPIO_Init+0x2e4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0310 	and.w	r3, r3, #16
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4b81      	ldr	r3, [pc, #516]	@ (8000ab4 <MX_GPIO_Init+0x2e4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a80      	ldr	r2, [pc, #512]	@ (8000ab4 <MX_GPIO_Init+0x2e4>)
 80008b4:	f043 0308 	orr.w	r3, r3, #8
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b7e      	ldr	r3, [pc, #504]	@ (8000ab4 <MX_GPIO_Init+0x2e4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0308 	and.w	r3, r3, #8
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2116      	movs	r1, #22
 80008ca:	487b      	ldr	r0, [pc, #492]	@ (8000ab8 <MX_GPIO_Init+0x2e8>)
 80008cc:	f001 f9e0 	bl	8001c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2180      	movs	r1, #128	@ 0x80
 80008d4:	4879      	ldr	r0, [pc, #484]	@ (8000abc <MX_GPIO_Init+0x2ec>)
 80008d6:	f001 f9db 	bl	8001c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80008e0:	4877      	ldr	r0, [pc, #476]	@ (8000ac0 <MX_GPIO_Init+0x2f0>)
 80008e2:	f001 f9d5 	bl	8001c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80008ec:	4875      	ldr	r0, [pc, #468]	@ (8000ac4 <MX_GPIO_Init+0x2f4>)
 80008ee:	f001 f9cf 	bl	8001c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80008f2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f8:	2302      	movs	r3, #2
 80008fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000900:	2303      	movs	r3, #3
 8000902:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000904:	230c      	movs	r3, #12
 8000906:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000908:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800090c:	4619      	mov	r1, r3
 800090e:	486e      	ldr	r0, [pc, #440]	@ (8000ac8 <MX_GPIO_Init+0x2f8>)
 8000910:	f001 f812 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000914:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000918:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000926:	2305      	movs	r3, #5
 8000928:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800092a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800092e:	4619      	mov	r1, r3
 8000930:	4865      	ldr	r0, [pc, #404]	@ (8000ac8 <MX_GPIO_Init+0x2f8>)
 8000932:	f001 f801 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000936:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800093a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000948:	230e      	movs	r3, #14
 800094a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000950:	4619      	mov	r1, r3
 8000952:	485d      	ldr	r0, [pc, #372]	@ (8000ac8 <MX_GPIO_Init+0x2f8>)
 8000954:	f000 fff0 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000958:	2301      	movs	r3, #1
 800095a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095c:	2302      	movs	r3, #2
 800095e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000964:	2303      	movs	r3, #3
 8000966:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000968:	230c      	movs	r3, #12
 800096a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000970:	4619      	mov	r1, r3
 8000972:	4851      	ldr	r0, [pc, #324]	@ (8000ab8 <MX_GPIO_Init+0x2e8>)
 8000974:	f000 ffe0 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000978:	2316      	movs	r3, #22
 800097a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097c:	2301      	movs	r3, #1
 800097e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000988:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800098c:	4619      	mov	r1, r3
 800098e:	484a      	ldr	r0, [pc, #296]	@ (8000ab8 <MX_GPIO_Init+0x2e8>)
 8000990:	f000 ffd2 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000994:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000998:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800099a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800099e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009a8:	4619      	mov	r1, r3
 80009aa:	4844      	ldr	r0, [pc, #272]	@ (8000abc <MX_GPIO_Init+0x2ec>)
 80009ac:	f000 ffc4 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80009b0:	f641 0358 	movw	r3, #6232	@ 0x1858
 80009b4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009c2:	230e      	movs	r3, #14
 80009c4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ca:	4619      	mov	r1, r3
 80009cc:	483b      	ldr	r0, [pc, #236]	@ (8000abc <MX_GPIO_Init+0x2ec>)
 80009ce:	f000 ffb3 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80009d2:	2380      	movs	r3, #128	@ 0x80
 80009d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e6:	4619      	mov	r1, r3
 80009e8:	4834      	ldr	r0, [pc, #208]	@ (8000abc <MX_GPIO_Init+0x2ec>)
 80009ea:	f000 ffa5 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80009ee:	2320      	movs	r3, #32
 80009f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a00:	4619      	mov	r1, r3
 8000a02:	482d      	ldr	r0, [pc, #180]	@ (8000ab8 <MX_GPIO_Init+0x2e8>)
 8000a04:	f000 ff98 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2300      	movs	r3, #0
 8000a16:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a18:	2309      	movs	r3, #9
 8000a1a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a20:	4619      	mov	r1, r3
 8000a22:	482a      	ldr	r0, [pc, #168]	@ (8000acc <MX_GPIO_Init+0x2fc>)
 8000a24:	f000 ff88 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a28:	2304      	movs	r3, #4
 8000a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4824      	ldr	r0, [pc, #144]	@ (8000acc <MX_GPIO_Init+0x2fc>)
 8000a3c:	f000 ff7c 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000a40:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000a44:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a52:	230c      	movs	r3, #12
 8000a54:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4819      	ldr	r0, [pc, #100]	@ (8000ac4 <MX_GPIO_Init+0x2f4>)
 8000a5e:	f000 ff6b 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000a62:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000a66:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a70:	2303      	movs	r3, #3
 8000a72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a74:	230c      	movs	r3, #12
 8000a76:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4814      	ldr	r0, [pc, #80]	@ (8000ad0 <MX_GPIO_Init+0x300>)
 8000a80:	f000 ff5a 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000a84:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000a88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a96:	230e      	movs	r3, #14
 8000a98:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	480a      	ldr	r0, [pc, #40]	@ (8000acc <MX_GPIO_Init+0x2fc>)
 8000aa2:	f000 ff49 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000aa6:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8000aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aac:	2302      	movs	r3, #2
 8000aae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ab0:	e010      	b.n	8000ad4 <MX_GPIO_Init+0x304>
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020800 	.word	0x40020800
 8000abc:	40020000 	.word	0x40020000
 8000ac0:	40020c00 	.word	0x40020c00
 8000ac4:	40021800 	.word	0x40021800
 8000ac8:	40021400 	.word	0x40021400
 8000acc:	40020400 	.word	0x40020400
 8000ad0:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000adc:	230c      	movs	r3, #12
 8000ade:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4862      	ldr	r0, [pc, #392]	@ (8000c70 <MX_GPIO_Init+0x4a0>)
 8000ae8:	f000 ff26 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000aec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000af0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000afe:	4619      	mov	r1, r3
 8000b00:	485b      	ldr	r0, [pc, #364]	@ (8000c70 <MX_GPIO_Init+0x4a0>)
 8000b02:	f000 ff19 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000b06:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000b0a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b18:	230c      	movs	r3, #12
 8000b1a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b20:	4619      	mov	r1, r3
 8000b22:	4854      	ldr	r0, [pc, #336]	@ (8000c74 <MX_GPIO_Init+0x4a4>)
 8000b24:	f000 ff08 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000b28:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	484d      	ldr	r0, [pc, #308]	@ (8000c74 <MX_GPIO_Init+0x4a4>)
 8000b3e:	f000 fefb 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000b42:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000b46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4846      	ldr	r0, [pc, #280]	@ (8000c74 <MX_GPIO_Init+0x4a4>)
 8000b5c:	f000 feec 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000b60:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000b64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b72:	230e      	movs	r3, #14
 8000b74:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	483e      	ldr	r0, [pc, #248]	@ (8000c78 <MX_GPIO_Init+0x4a8>)
 8000b7e:	f000 fedb 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000b82:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000b86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b94:	230e      	movs	r3, #14
 8000b96:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4837      	ldr	r0, [pc, #220]	@ (8000c7c <MX_GPIO_Init+0x4ac>)
 8000ba0:	f000 feca 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000ba4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000baa:	2312      	movs	r3, #18
 8000bac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bb6:	2304      	movs	r3, #4
 8000bb8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000bba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	482e      	ldr	r0, [pc, #184]	@ (8000c7c <MX_GPIO_Init+0x4ac>)
 8000bc2:	f000 feb9 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000bc6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bcc:	2312      	movs	r3, #18
 8000bce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bd8:	2304      	movs	r3, #4
 8000bda:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be0:	4619      	mov	r1, r3
 8000be2:	4827      	ldr	r0, [pc, #156]	@ (8000c80 <MX_GPIO_Init+0x4b0>)
 8000be4:	f000 fea8 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000be8:	2348      	movs	r3, #72	@ 0x48
 8000bea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	2302      	movs	r3, #2
 8000bee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bf8:	230e      	movs	r3, #14
 8000bfa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c00:	4619      	mov	r1, r3
 8000c02:	481c      	ldr	r0, [pc, #112]	@ (8000c74 <MX_GPIO_Init+0x4a4>)
 8000c04:	f000 fe98 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000c08:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2300      	movs	r3, #0
 8000c18:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c1a:	2309      	movs	r3, #9
 8000c1c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c22:	4619      	mov	r1, r3
 8000c24:	4814      	ldr	r0, [pc, #80]	@ (8000c78 <MX_GPIO_Init+0x4a8>)
 8000c26:	f000 fe87 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000c2a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c40:	4619      	mov	r1, r3
 8000c42:	480d      	ldr	r0, [pc, #52]	@ (8000c78 <MX_GPIO_Init+0x4a8>)
 8000c44:	f000 fe78 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000c48:	2360      	movs	r3, #96	@ 0x60
 8000c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c54:	2303      	movs	r3, #3
 8000c56:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c58:	230c      	movs	r3, #12
 8000c5a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c60:	4619      	mov	r1, r3
 8000c62:	4803      	ldr	r0, [pc, #12]	@ (8000c70 <MX_GPIO_Init+0x4a0>)
 8000c64:	f000 fe68 	bl	8001938 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c68:	bf00      	nop
 8000c6a:	3738      	adds	r7, #56	@ 0x38
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40020400 	.word	0x40020400
 8000c74:	40020c00 	.word	0x40020c00
 8000c78:	40021800 	.word	0x40021800
 8000c7c:	40020800 	.word	0x40020800
 8000c80:	40020000 	.word	0x40020000

08000c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c88:	b672      	cpsid	i
}
 8000c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <Error_Handler+0x8>

08000c90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	4b10      	ldr	r3, [pc, #64]	@ (8000cdc <HAL_MspInit+0x4c>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9e:	4a0f      	ldr	r2, [pc, #60]	@ (8000cdc <HAL_MspInit+0x4c>)
 8000ca0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ca4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8000cdc <HAL_MspInit+0x4c>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000caa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	603b      	str	r3, [r7, #0]
 8000cb6:	4b09      	ldr	r3, [pc, #36]	@ (8000cdc <HAL_MspInit+0x4c>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cba:	4a08      	ldr	r2, [pc, #32]	@ (8000cdc <HAL_MspInit+0x4c>)
 8000cbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cc2:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <HAL_MspInit+0x4c>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	40023800 	.word	0x40023800

08000ce0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	@ 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a17      	ldr	r2, [pc, #92]	@ (8000d5c <HAL_ADC_MspInit+0x7c>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d127      	bne.n	8000d52 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	4b16      	ldr	r3, [pc, #88]	@ (8000d60 <HAL_ADC_MspInit+0x80>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0a:	4a15      	ldr	r2, [pc, #84]	@ (8000d60 <HAL_ADC_MspInit+0x80>)
 8000d0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d12:	4b13      	ldr	r3, [pc, #76]	@ (8000d60 <HAL_ADC_MspInit+0x80>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <HAL_ADC_MspInit+0x80>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	4a0e      	ldr	r2, [pc, #56]	@ (8000d60 <HAL_ADC_MspInit+0x80>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d60 <HAL_ADC_MspInit+0x80>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d3a:	2320      	movs	r3, #32
 8000d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4805      	ldr	r0, [pc, #20]	@ (8000d64 <HAL_ADC_MspInit+0x84>)
 8000d4e:	f000 fdf3 	bl	8001938 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d52:	bf00      	nop
 8000d54:	3728      	adds	r7, #40	@ 0x28
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40012000 	.word	0x40012000
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40020000 	.word	0x40020000

08000d68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	@ 0x28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a19      	ldr	r2, [pc, #100]	@ (8000dec <HAL_UART_MspInit+0x84>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d12c      	bne.n	8000de4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	4b18      	ldr	r3, [pc, #96]	@ (8000df0 <HAL_UART_MspInit+0x88>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d92:	4a17      	ldr	r2, [pc, #92]	@ (8000df0 <HAL_UART_MspInit+0x88>)
 8000d94:	f043 0310 	orr.w	r3, r3, #16
 8000d98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d9a:	4b15      	ldr	r3, [pc, #84]	@ (8000df0 <HAL_UART_MspInit+0x88>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9e:	f003 0310 	and.w	r3, r3, #16
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	4b11      	ldr	r3, [pc, #68]	@ (8000df0 <HAL_UART_MspInit+0x88>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	4a10      	ldr	r2, [pc, #64]	@ (8000df0 <HAL_UART_MspInit+0x88>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db6:	4b0e      	ldr	r3, [pc, #56]	@ (8000df0 <HAL_UART_MspInit+0x88>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000dc2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dd4:	2307      	movs	r3, #7
 8000dd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4805      	ldr	r0, [pc, #20]	@ (8000df4 <HAL_UART_MspInit+0x8c>)
 8000de0:	f000 fdaa 	bl	8001938 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000de4:	bf00      	nop
 8000de6:	3728      	adds	r7, #40	@ 0x28
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40011000 	.word	0x40011000
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40020000 	.word	0x40020000

08000df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <NMI_Handler+0x4>

08000e00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <HardFault_Handler+0x4>

08000e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <MemManage_Handler+0x4>

08000e10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <BusFault_Handler+0x4>

08000e18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <UsageFault_Handler+0x4>

08000e20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e4e:	f000 f891 	bl	8000f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e5c:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <SystemInit+0x20>)
 8000e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e62:	4a05      	ldr	r2, [pc, #20]	@ (8000e78 <SystemInit+0x20>)
 8000e64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000eb4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e80:	f7ff ffea 	bl	8000e58 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e84:	480c      	ldr	r0, [pc, #48]	@ (8000eb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e86:	490d      	ldr	r1, [pc, #52]	@ (8000ebc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e88:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e8c:	e002      	b.n	8000e94 <LoopCopyDataInit>

08000e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e92:	3304      	adds	r3, #4

08000e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e98:	d3f9      	bcc.n	8000e8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ec8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea0:	e001      	b.n	8000ea6 <LoopFillZerobss>

08000ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea4:	3204      	adds	r2, #4

08000ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea8:	d3fb      	bcc.n	8000ea2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000eaa:	f001 fe6f 	bl	8002b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eae:	f7ff fb77 	bl	80005a0 <main>
  bx  lr    
 8000eb2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000eb4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000eb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ebc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ec0:	08002c18 	.word	0x08002c18
  ldr r2, =_sbss
 8000ec4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ec8:	200000c0 	.word	0x200000c0

08000ecc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ecc:	e7fe      	b.n	8000ecc <ADC_IRQHandler>
	...

08000ed0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f10 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f10 <HAL_Init+0x40>)
 8000eda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f10 <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0a      	ldr	r2, [pc, #40]	@ (8000f10 <HAL_Init+0x40>)
 8000ee6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eec:	4b08      	ldr	r3, [pc, #32]	@ (8000f10 <HAL_Init+0x40>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a07      	ldr	r2, [pc, #28]	@ (8000f10 <HAL_Init+0x40>)
 8000ef2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ef6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef8:	2003      	movs	r0, #3
 8000efa:	f000 fce9 	bl	80018d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000efe:	2000      	movs	r0, #0
 8000f00:	f000 f808 	bl	8000f14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f04:	f7ff fec4 	bl	8000c90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40023c00 	.word	0x40023c00

08000f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f1c:	4b12      	ldr	r3, [pc, #72]	@ (8000f68 <HAL_InitTick+0x54>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b12      	ldr	r3, [pc, #72]	@ (8000f6c <HAL_InitTick+0x58>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	4619      	mov	r1, r3
 8000f26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 fcf3 	bl	800191e <HAL_SYSTICK_Config>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e00e      	b.n	8000f60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b0f      	cmp	r3, #15
 8000f46:	d80a      	bhi.n	8000f5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f50:	f000 fcc9 	bl	80018e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f54:	4a06      	ldr	r2, [pc, #24]	@ (8000f70 <HAL_InitTick+0x5c>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e000      	b.n	8000f60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	20000008 	.word	0x20000008
 8000f70:	20000004 	.word	0x20000004

08000f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f78:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <HAL_IncTick+0x20>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <HAL_IncTick+0x24>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4413      	add	r3, r2
 8000f84:	4a04      	ldr	r2, [pc, #16]	@ (8000f98 <HAL_IncTick+0x24>)
 8000f86:	6013      	str	r3, [r2, #0]
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000008 	.word	0x20000008
 8000f98:	200000bc 	.word	0x200000bc

08000f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa0:	4b03      	ldr	r3, [pc, #12]	@ (8000fb0 <HAL_GetTick+0x14>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	200000bc 	.word	0x200000bc

08000fb4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d101      	bne.n	8000fca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e033      	b.n	8001032 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d109      	bne.n	8000fe6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff fe84 	bl	8000ce0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fea:	f003 0310 	and.w	r3, r3, #16
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d118      	bne.n	8001024 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000ffa:	f023 0302 	bic.w	r3, r3, #2
 8000ffe:	f043 0202 	orr.w	r2, r3, #2
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f000 fab4 	bl	8001574 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001016:	f023 0303 	bic.w	r3, r3, #3
 800101a:	f043 0201 	orr.w	r2, r3, #1
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	641a      	str	r2, [r3, #64]	@ 0x40
 8001022:	e001      	b.n	8001028 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001030:	7bfb      	ldrb	r3, [r7, #15]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001044:	2300      	movs	r3, #0
 8001046:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800104e:	2b01      	cmp	r3, #1
 8001050:	d101      	bne.n	8001056 <HAL_ADC_Start+0x1a>
 8001052:	2302      	movs	r3, #2
 8001054:	e0b2      	b.n	80011bc <HAL_ADC_Start+0x180>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2201      	movs	r2, #1
 800105a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	2b01      	cmp	r3, #1
 800106a:	d018      	beq.n	800109e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	689a      	ldr	r2, [r3, #8]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f042 0201 	orr.w	r2, r2, #1
 800107a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800107c:	4b52      	ldr	r3, [pc, #328]	@ (80011c8 <HAL_ADC_Start+0x18c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a52      	ldr	r2, [pc, #328]	@ (80011cc <HAL_ADC_Start+0x190>)
 8001082:	fba2 2303 	umull	r2, r3, r2, r3
 8001086:	0c9a      	lsrs	r2, r3, #18
 8001088:	4613      	mov	r3, r2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	4413      	add	r3, r2
 800108e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001090:	e002      	b.n	8001098 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	3b01      	subs	r3, #1
 8001096:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1f9      	bne.n	8001092 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d17a      	bne.n	80011a2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80010b4:	f023 0301 	bic.w	r3, r3, #1
 80010b8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d007      	beq.n	80010de <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80010d6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80010ea:	d106      	bne.n	80010fa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f0:	f023 0206 	bic.w	r2, r3, #6
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	645a      	str	r2, [r3, #68]	@ 0x44
 80010f8:	e002      	b.n	8001100 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001108:	4b31      	ldr	r3, [pc, #196]	@ (80011d0 <HAL_ADC_Start+0x194>)
 800110a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001114:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f003 031f 	and.w	r3, r3, #31
 800111e:	2b00      	cmp	r3, #0
 8001120:	d12a      	bne.n	8001178 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a2b      	ldr	r2, [pc, #172]	@ (80011d4 <HAL_ADC_Start+0x198>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d015      	beq.n	8001158 <HAL_ADC_Start+0x11c>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a29      	ldr	r2, [pc, #164]	@ (80011d8 <HAL_ADC_Start+0x19c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d105      	bne.n	8001142 <HAL_ADC_Start+0x106>
 8001136:	4b26      	ldr	r3, [pc, #152]	@ (80011d0 <HAL_ADC_Start+0x194>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f003 031f 	and.w	r3, r3, #31
 800113e:	2b00      	cmp	r3, #0
 8001140:	d00a      	beq.n	8001158 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a25      	ldr	r2, [pc, #148]	@ (80011dc <HAL_ADC_Start+0x1a0>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d136      	bne.n	80011ba <HAL_ADC_Start+0x17e>
 800114c:	4b20      	ldr	r3, [pc, #128]	@ (80011d0 <HAL_ADC_Start+0x194>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 0310 	and.w	r3, r3, #16
 8001154:	2b00      	cmp	r3, #0
 8001156:	d130      	bne.n	80011ba <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d129      	bne.n	80011ba <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	689a      	ldr	r2, [r3, #8]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	e020      	b.n	80011ba <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a15      	ldr	r2, [pc, #84]	@ (80011d4 <HAL_ADC_Start+0x198>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d11b      	bne.n	80011ba <HAL_ADC_Start+0x17e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d114      	bne.n	80011ba <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	689a      	ldr	r2, [r3, #8]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	e00b      	b.n	80011ba <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a6:	f043 0210 	orr.w	r2, r3, #16
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b2:	f043 0201 	orr.w	r2, r3, #1
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	20000000 	.word	0x20000000
 80011cc:	431bde83 	.word	0x431bde83
 80011d0:	40012300 	.word	0x40012300
 80011d4:	40012000 	.word	0x40012000
 80011d8:	40012100 	.word	0x40012100
 80011dc:	40012200 	.word	0x40012200

080011e0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011fc:	d113      	bne.n	8001226 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001208:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800120c:	d10b      	bne.n	8001226 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001212:	f043 0220 	orr.w	r2, r3, #32
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e063      	b.n	80012ee <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001226:	f7ff feb9 	bl	8000f9c <HAL_GetTick>
 800122a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800122c:	e021      	b.n	8001272 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001234:	d01d      	beq.n	8001272 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d007      	beq.n	800124c <HAL_ADC_PollForConversion+0x6c>
 800123c:	f7ff feae 	bl	8000f9c <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	429a      	cmp	r2, r3
 800124a:	d212      	bcs.n	8001272 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b02      	cmp	r3, #2
 8001258:	d00b      	beq.n	8001272 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125e:	f043 0204 	orr.w	r2, r3, #4
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e03d      	b.n	80012ee <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	2b02      	cmp	r3, #2
 800127e:	d1d6      	bne.n	800122e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f06f 0212 	mvn.w	r2, #18
 8001288:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d123      	bne.n	80012ec <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d11f      	bne.n	80012ec <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012b2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d006      	beq.n	80012c8 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d111      	bne.n	80012ec <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d105      	bne.n	80012ec <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e4:	f043 0201 	orr.w	r2, r3, #1
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b083      	sub	sp, #12
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001304:	4618      	mov	r0, r3
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001324:	2b01      	cmp	r3, #1
 8001326:	d101      	bne.n	800132c <HAL_ADC_ConfigChannel+0x1c>
 8001328:	2302      	movs	r3, #2
 800132a:	e113      	b.n	8001554 <HAL_ADC_ConfigChannel+0x244>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2201      	movs	r2, #1
 8001330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b09      	cmp	r3, #9
 800133a:	d925      	bls.n	8001388 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	68d9      	ldr	r1, [r3, #12]
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	b29b      	uxth	r3, r3
 8001348:	461a      	mov	r2, r3
 800134a:	4613      	mov	r3, r2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	4413      	add	r3, r2
 8001350:	3b1e      	subs	r3, #30
 8001352:	2207      	movs	r2, #7
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43da      	mvns	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	400a      	ands	r2, r1
 8001360:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	68d9      	ldr	r1, [r3, #12]
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	689a      	ldr	r2, [r3, #8]
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	b29b      	uxth	r3, r3
 8001372:	4618      	mov	r0, r3
 8001374:	4603      	mov	r3, r0
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	4403      	add	r3, r0
 800137a:	3b1e      	subs	r3, #30
 800137c:	409a      	lsls	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	430a      	orrs	r2, r1
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	e022      	b.n	80013ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6919      	ldr	r1, [r3, #16]
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	b29b      	uxth	r3, r3
 8001394:	461a      	mov	r2, r3
 8001396:	4613      	mov	r3, r2
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	4413      	add	r3, r2
 800139c:	2207      	movs	r2, #7
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43da      	mvns	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	400a      	ands	r2, r1
 80013aa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6919      	ldr	r1, [r3, #16]
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	689a      	ldr	r2, [r3, #8]
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	4618      	mov	r0, r3
 80013be:	4603      	mov	r3, r0
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	4403      	add	r3, r0
 80013c4:	409a      	lsls	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	430a      	orrs	r2, r1
 80013cc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b06      	cmp	r3, #6
 80013d4:	d824      	bhi.n	8001420 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	4613      	mov	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	3b05      	subs	r3, #5
 80013e8:	221f      	movs	r2, #31
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43da      	mvns	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	400a      	ands	r2, r1
 80013f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	b29b      	uxth	r3, r3
 8001404:	4618      	mov	r0, r3
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	4613      	mov	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	3b05      	subs	r3, #5
 8001412:	fa00 f203 	lsl.w	r2, r0, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	430a      	orrs	r2, r1
 800141c:	635a      	str	r2, [r3, #52]	@ 0x34
 800141e:	e04c      	b.n	80014ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b0c      	cmp	r3, #12
 8001426:	d824      	bhi.n	8001472 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	4613      	mov	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	3b23      	subs	r3, #35	@ 0x23
 800143a:	221f      	movs	r2, #31
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43da      	mvns	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	400a      	ands	r2, r1
 8001448:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	b29b      	uxth	r3, r3
 8001456:	4618      	mov	r0, r3
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	4613      	mov	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4413      	add	r3, r2
 8001462:	3b23      	subs	r3, #35	@ 0x23
 8001464:	fa00 f203 	lsl.w	r2, r0, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	430a      	orrs	r2, r1
 800146e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001470:	e023      	b.n	80014ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	4613      	mov	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4413      	add	r3, r2
 8001482:	3b41      	subs	r3, #65	@ 0x41
 8001484:	221f      	movs	r2, #31
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43da      	mvns	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	400a      	ands	r2, r1
 8001492:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	b29b      	uxth	r3, r3
 80014a0:	4618      	mov	r0, r3
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	4613      	mov	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	3b41      	subs	r3, #65	@ 0x41
 80014ae:	fa00 f203 	lsl.w	r2, r0, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014ba:	4b29      	ldr	r3, [pc, #164]	@ (8001560 <HAL_ADC_ConfigChannel+0x250>)
 80014bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a28      	ldr	r2, [pc, #160]	@ (8001564 <HAL_ADC_ConfigChannel+0x254>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d10f      	bne.n	80014e8 <HAL_ADC_ConfigChannel+0x1d8>
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b12      	cmp	r3, #18
 80014ce:	d10b      	bne.n	80014e8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001564 <HAL_ADC_ConfigChannel+0x254>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d12b      	bne.n	800154a <HAL_ADC_ConfigChannel+0x23a>
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001568 <HAL_ADC_ConfigChannel+0x258>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d003      	beq.n	8001504 <HAL_ADC_ConfigChannel+0x1f4>
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b11      	cmp	r3, #17
 8001502:	d122      	bne.n	800154a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a11      	ldr	r2, [pc, #68]	@ (8001568 <HAL_ADC_ConfigChannel+0x258>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d111      	bne.n	800154a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001526:	4b11      	ldr	r3, [pc, #68]	@ (800156c <HAL_ADC_ConfigChannel+0x25c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a11      	ldr	r2, [pc, #68]	@ (8001570 <HAL_ADC_ConfigChannel+0x260>)
 800152c:	fba2 2303 	umull	r2, r3, r2, r3
 8001530:	0c9a      	lsrs	r2, r3, #18
 8001532:	4613      	mov	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	4413      	add	r3, r2
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800153c:	e002      	b.n	8001544 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	3b01      	subs	r3, #1
 8001542:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1f9      	bne.n	800153e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	40012300 	.word	0x40012300
 8001564:	40012000 	.word	0x40012000
 8001568:	10000012 	.word	0x10000012
 800156c:	20000000 	.word	0x20000000
 8001570:	431bde83 	.word	0x431bde83

08001574 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800157c:	4b79      	ldr	r3, [pc, #484]	@ (8001764 <ADC_Init+0x1f0>)
 800157e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	431a      	orrs	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6859      	ldr	r1, [r3, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	021a      	lsls	r2, r3, #8
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80015cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6859      	ldr	r1, [r3, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689a      	ldr	r2, [r3, #8]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	430a      	orrs	r2, r1
 80015de:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	689a      	ldr	r2, [r3, #8]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6899      	ldr	r1, [r3, #8]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68da      	ldr	r2, [r3, #12]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	430a      	orrs	r2, r1
 8001600:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001606:	4a58      	ldr	r2, [pc, #352]	@ (8001768 <ADC_Init+0x1f4>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d022      	beq.n	8001652 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800161a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6899      	ldr	r1, [r3, #8]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800163c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6899      	ldr	r1, [r3, #8]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	e00f      	b.n	8001672 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001660:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001670:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f022 0202 	bic.w	r2, r2, #2
 8001680:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6899      	ldr	r1, [r3, #8]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	7e1b      	ldrb	r3, [r3, #24]
 800168c:	005a      	lsls	r2, r3, #1
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 3020 	ldrb.w	r3, [r3, #32]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d01b      	beq.n	80016d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80016ae:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80016be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6859      	ldr	r1, [r3, #4]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ca:	3b01      	subs	r3, #1
 80016cc:	035a      	lsls	r2, r3, #13
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	e007      	b.n	80016e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016e6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80016f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	3b01      	subs	r3, #1
 8001704:	051a      	lsls	r2, r3, #20
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	430a      	orrs	r2, r1
 800170c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800171c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6899      	ldr	r1, [r3, #8]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800172a:	025a      	lsls	r2, r3, #9
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	430a      	orrs	r2, r1
 8001732:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001742:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6899      	ldr	r1, [r3, #8]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	029a      	lsls	r2, r3, #10
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	430a      	orrs	r2, r1
 8001756:	609a      	str	r2, [r3, #8]
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	40012300 	.word	0x40012300
 8001768:	0f000001 	.word	0x0f000001

0800176c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800177c:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <__NVIC_SetPriorityGrouping+0x44>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001788:	4013      	ands	r3, r2
 800178a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001794:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001798:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800179c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179e:	4a04      	ldr	r2, [pc, #16]	@ (80017b0 <__NVIC_SetPriorityGrouping+0x44>)
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	60d3      	str	r3, [r2, #12]
}
 80017a4:	bf00      	nop
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b8:	4b04      	ldr	r3, [pc, #16]	@ (80017cc <__NVIC_GetPriorityGrouping+0x18>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	0a1b      	lsrs	r3, r3, #8
 80017be:	f003 0307 	and.w	r3, r3, #7
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	6039      	str	r1, [r7, #0]
 80017da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	db0a      	blt.n	80017fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	490c      	ldr	r1, [pc, #48]	@ (800181c <__NVIC_SetPriority+0x4c>)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	0112      	lsls	r2, r2, #4
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	440b      	add	r3, r1
 80017f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f8:	e00a      	b.n	8001810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	4908      	ldr	r1, [pc, #32]	@ (8001820 <__NVIC_SetPriority+0x50>)
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	3b04      	subs	r3, #4
 8001808:	0112      	lsls	r2, r2, #4
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	440b      	add	r3, r1
 800180e:	761a      	strb	r2, [r3, #24]
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000e100 	.word	0xe000e100
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001824:	b480      	push	{r7}
 8001826:	b089      	sub	sp, #36	@ 0x24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f1c3 0307 	rsb	r3, r3, #7
 800183e:	2b04      	cmp	r3, #4
 8001840:	bf28      	it	cs
 8001842:	2304      	movcs	r3, #4
 8001844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3304      	adds	r3, #4
 800184a:	2b06      	cmp	r3, #6
 800184c:	d902      	bls.n	8001854 <NVIC_EncodePriority+0x30>
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3b03      	subs	r3, #3
 8001852:	e000      	b.n	8001856 <NVIC_EncodePriority+0x32>
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001858:	f04f 32ff 	mov.w	r2, #4294967295
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43da      	mvns	r2, r3
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	401a      	ands	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800186c:	f04f 31ff 	mov.w	r1, #4294967295
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	fa01 f303 	lsl.w	r3, r1, r3
 8001876:	43d9      	mvns	r1, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187c:	4313      	orrs	r3, r2
         );
}
 800187e:	4618      	mov	r0, r3
 8001880:	3724      	adds	r7, #36	@ 0x24
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3b01      	subs	r3, #1
 8001898:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800189c:	d301      	bcc.n	80018a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800189e:	2301      	movs	r3, #1
 80018a0:	e00f      	b.n	80018c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018a2:	4a0a      	ldr	r2, [pc, #40]	@ (80018cc <SysTick_Config+0x40>)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018aa:	210f      	movs	r1, #15
 80018ac:	f04f 30ff 	mov.w	r0, #4294967295
 80018b0:	f7ff ff8e 	bl	80017d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b4:	4b05      	ldr	r3, [pc, #20]	@ (80018cc <SysTick_Config+0x40>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ba:	4b04      	ldr	r3, [pc, #16]	@ (80018cc <SysTick_Config+0x40>)
 80018bc:	2207      	movs	r2, #7
 80018be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	e000e010 	.word	0xe000e010

080018d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff ff47 	bl	800176c <__NVIC_SetPriorityGrouping>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b086      	sub	sp, #24
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	4603      	mov	r3, r0
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
 80018f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018f8:	f7ff ff5c 	bl	80017b4 <__NVIC_GetPriorityGrouping>
 80018fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	68b9      	ldr	r1, [r7, #8]
 8001902:	6978      	ldr	r0, [r7, #20]
 8001904:	f7ff ff8e 	bl	8001824 <NVIC_EncodePriority>
 8001908:	4602      	mov	r2, r0
 800190a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800190e:	4611      	mov	r1, r2
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff5d 	bl	80017d0 <__NVIC_SetPriority>
}
 8001916:	bf00      	nop
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7ff ffb0 	bl	800188c <SysTick_Config>
 800192c:	4603      	mov	r3, r0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
	...

08001938 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001938:	b480      	push	{r7}
 800193a:	b089      	sub	sp, #36	@ 0x24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800194a:	2300      	movs	r3, #0
 800194c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
 8001952:	e177      	b.n	8001c44 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001954:	2201      	movs	r2, #1
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	4013      	ands	r3, r2
 8001966:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	429a      	cmp	r2, r3
 800196e:	f040 8166 	bne.w	8001c3e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	2b01      	cmp	r3, #1
 800197c:	d005      	beq.n	800198a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001986:	2b02      	cmp	r3, #2
 8001988:	d130      	bne.n	80019ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	2203      	movs	r2, #3
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4013      	ands	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	68da      	ldr	r2, [r3, #12]
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019c0:	2201      	movs	r2, #1
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	091b      	lsrs	r3, r3, #4
 80019d6:	f003 0201 	and.w	r2, r3, #1
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	2b03      	cmp	r3, #3
 80019f6:	d017      	beq.n	8001a28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	2203      	movs	r2, #3
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d123      	bne.n	8001a7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	08da      	lsrs	r2, r3, #3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3208      	adds	r2, #8
 8001a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	220f      	movs	r2, #15
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	691a      	ldr	r2, [r3, #16]
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	08da      	lsrs	r2, r3, #3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3208      	adds	r2, #8
 8001a76:	69b9      	ldr	r1, [r7, #24]
 8001a78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	2203      	movs	r2, #3
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0203 	and.w	r2, r3, #3
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 80c0 	beq.w	8001c3e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	4b66      	ldr	r3, [pc, #408]	@ (8001c5c <HAL_GPIO_Init+0x324>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac6:	4a65      	ldr	r2, [pc, #404]	@ (8001c5c <HAL_GPIO_Init+0x324>)
 8001ac8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001acc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ace:	4b63      	ldr	r3, [pc, #396]	@ (8001c5c <HAL_GPIO_Init+0x324>)
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ada:	4a61      	ldr	r2, [pc, #388]	@ (8001c60 <HAL_GPIO_Init+0x328>)
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	089b      	lsrs	r3, r3, #2
 8001ae0:	3302      	adds	r3, #2
 8001ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	220f      	movs	r2, #15
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43db      	mvns	r3, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4013      	ands	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a58      	ldr	r2, [pc, #352]	@ (8001c64 <HAL_GPIO_Init+0x32c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d037      	beq.n	8001b76 <HAL_GPIO_Init+0x23e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a57      	ldr	r2, [pc, #348]	@ (8001c68 <HAL_GPIO_Init+0x330>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d031      	beq.n	8001b72 <HAL_GPIO_Init+0x23a>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a56      	ldr	r2, [pc, #344]	@ (8001c6c <HAL_GPIO_Init+0x334>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d02b      	beq.n	8001b6e <HAL_GPIO_Init+0x236>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a55      	ldr	r2, [pc, #340]	@ (8001c70 <HAL_GPIO_Init+0x338>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d025      	beq.n	8001b6a <HAL_GPIO_Init+0x232>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a54      	ldr	r2, [pc, #336]	@ (8001c74 <HAL_GPIO_Init+0x33c>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d01f      	beq.n	8001b66 <HAL_GPIO_Init+0x22e>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a53      	ldr	r2, [pc, #332]	@ (8001c78 <HAL_GPIO_Init+0x340>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d019      	beq.n	8001b62 <HAL_GPIO_Init+0x22a>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a52      	ldr	r2, [pc, #328]	@ (8001c7c <HAL_GPIO_Init+0x344>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d013      	beq.n	8001b5e <HAL_GPIO_Init+0x226>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a51      	ldr	r2, [pc, #324]	@ (8001c80 <HAL_GPIO_Init+0x348>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d00d      	beq.n	8001b5a <HAL_GPIO_Init+0x222>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a50      	ldr	r2, [pc, #320]	@ (8001c84 <HAL_GPIO_Init+0x34c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d007      	beq.n	8001b56 <HAL_GPIO_Init+0x21e>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a4f      	ldr	r2, [pc, #316]	@ (8001c88 <HAL_GPIO_Init+0x350>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d101      	bne.n	8001b52 <HAL_GPIO_Init+0x21a>
 8001b4e:	2309      	movs	r3, #9
 8001b50:	e012      	b.n	8001b78 <HAL_GPIO_Init+0x240>
 8001b52:	230a      	movs	r3, #10
 8001b54:	e010      	b.n	8001b78 <HAL_GPIO_Init+0x240>
 8001b56:	2308      	movs	r3, #8
 8001b58:	e00e      	b.n	8001b78 <HAL_GPIO_Init+0x240>
 8001b5a:	2307      	movs	r3, #7
 8001b5c:	e00c      	b.n	8001b78 <HAL_GPIO_Init+0x240>
 8001b5e:	2306      	movs	r3, #6
 8001b60:	e00a      	b.n	8001b78 <HAL_GPIO_Init+0x240>
 8001b62:	2305      	movs	r3, #5
 8001b64:	e008      	b.n	8001b78 <HAL_GPIO_Init+0x240>
 8001b66:	2304      	movs	r3, #4
 8001b68:	e006      	b.n	8001b78 <HAL_GPIO_Init+0x240>
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e004      	b.n	8001b78 <HAL_GPIO_Init+0x240>
 8001b6e:	2302      	movs	r3, #2
 8001b70:	e002      	b.n	8001b78 <HAL_GPIO_Init+0x240>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <HAL_GPIO_Init+0x240>
 8001b76:	2300      	movs	r3, #0
 8001b78:	69fa      	ldr	r2, [r7, #28]
 8001b7a:	f002 0203 	and.w	r2, r2, #3
 8001b7e:	0092      	lsls	r2, r2, #2
 8001b80:	4093      	lsls	r3, r2
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b88:	4935      	ldr	r1, [pc, #212]	@ (8001c60 <HAL_GPIO_Init+0x328>)
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	089b      	lsrs	r3, r3, #2
 8001b8e:	3302      	adds	r3, #2
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b96:	4b3d      	ldr	r3, [pc, #244]	@ (8001c8c <HAL_GPIO_Init+0x354>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bba:	4a34      	ldr	r2, [pc, #208]	@ (8001c8c <HAL_GPIO_Init+0x354>)
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bc0:	4b32      	ldr	r3, [pc, #200]	@ (8001c8c <HAL_GPIO_Init+0x354>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001be4:	4a29      	ldr	r2, [pc, #164]	@ (8001c8c <HAL_GPIO_Init+0x354>)
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bea:	4b28      	ldr	r3, [pc, #160]	@ (8001c8c <HAL_GPIO_Init+0x354>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c0e:	4a1f      	ldr	r2, [pc, #124]	@ (8001c8c <HAL_GPIO_Init+0x354>)
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c14:	4b1d      	ldr	r3, [pc, #116]	@ (8001c8c <HAL_GPIO_Init+0x354>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c38:	4a14      	ldr	r2, [pc, #80]	@ (8001c8c <HAL_GPIO_Init+0x354>)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3301      	adds	r3, #1
 8001c42:	61fb      	str	r3, [r7, #28]
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	2b0f      	cmp	r3, #15
 8001c48:	f67f ae84 	bls.w	8001954 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c4c:	bf00      	nop
 8001c4e:	bf00      	nop
 8001c50:	3724      	adds	r7, #36	@ 0x24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40013800 	.word	0x40013800
 8001c64:	40020000 	.word	0x40020000
 8001c68:	40020400 	.word	0x40020400
 8001c6c:	40020800 	.word	0x40020800
 8001c70:	40020c00 	.word	0x40020c00
 8001c74:	40021000 	.word	0x40021000
 8001c78:	40021400 	.word	0x40021400
 8001c7c:	40021800 	.word	0x40021800
 8001c80:	40021c00 	.word	0x40021c00
 8001c84:	40022000 	.word	0x40022000
 8001c88:	40022400 	.word	0x40022400
 8001c8c:	40013c00 	.word	0x40013c00

08001c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	807b      	strh	r3, [r7, #2]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ca0:	787b      	ldrb	r3, [r7, #1]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ca6:	887a      	ldrh	r2, [r7, #2]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cac:	e003      	b.n	8001cb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cae:	887b      	ldrh	r3, [r7, #2]
 8001cb0:	041a      	lsls	r2, r3, #16
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	619a      	str	r2, [r3, #24]
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
	...

08001cc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e267      	b.n	80021a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d075      	beq.n	8001dce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ce2:	4b88      	ldr	r3, [pc, #544]	@ (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	d00c      	beq.n	8001d08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cee:	4b85      	ldr	r3, [pc, #532]	@ (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cf6:	2b08      	cmp	r3, #8
 8001cf8:	d112      	bne.n	8001d20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cfa:	4b82      	ldr	r3, [pc, #520]	@ (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d06:	d10b      	bne.n	8001d20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d08:	4b7e      	ldr	r3, [pc, #504]	@ (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d05b      	beq.n	8001dcc <HAL_RCC_OscConfig+0x108>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d157      	bne.n	8001dcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e242      	b.n	80021a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d28:	d106      	bne.n	8001d38 <HAL_RCC_OscConfig+0x74>
 8001d2a:	4b76      	ldr	r3, [pc, #472]	@ (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a75      	ldr	r2, [pc, #468]	@ (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001d30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	e01d      	b.n	8001d74 <HAL_RCC_OscConfig+0xb0>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d40:	d10c      	bne.n	8001d5c <HAL_RCC_OscConfig+0x98>
 8001d42:	4b70      	ldr	r3, [pc, #448]	@ (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a6f      	ldr	r2, [pc, #444]	@ (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001d48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	4b6d      	ldr	r3, [pc, #436]	@ (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a6c      	ldr	r2, [pc, #432]	@ (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001d54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	e00b      	b.n	8001d74 <HAL_RCC_OscConfig+0xb0>
 8001d5c:	4b69      	ldr	r3, [pc, #420]	@ (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a68      	ldr	r2, [pc, #416]	@ (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001d62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d66:	6013      	str	r3, [r2, #0]
 8001d68:	4b66      	ldr	r3, [pc, #408]	@ (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a65      	ldr	r2, [pc, #404]	@ (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001d6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d013      	beq.n	8001da4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7c:	f7ff f90e 	bl	8000f9c <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d84:	f7ff f90a 	bl	8000f9c <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b64      	cmp	r3, #100	@ 0x64
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e207      	b.n	80021a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d96:	4b5b      	ldr	r3, [pc, #364]	@ (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0f0      	beq.n	8001d84 <HAL_RCC_OscConfig+0xc0>
 8001da2:	e014      	b.n	8001dce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da4:	f7ff f8fa 	bl	8000f9c <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dac:	f7ff f8f6 	bl	8000f9c <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b64      	cmp	r3, #100	@ 0x64
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e1f3      	b.n	80021a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dbe:	4b51      	ldr	r3, [pc, #324]	@ (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f0      	bne.n	8001dac <HAL_RCC_OscConfig+0xe8>
 8001dca:	e000      	b.n	8001dce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d063      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dda:	4b4a      	ldr	r3, [pc, #296]	@ (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 030c 	and.w	r3, r3, #12
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00b      	beq.n	8001dfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001de6:	4b47      	ldr	r3, [pc, #284]	@ (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dee:	2b08      	cmp	r3, #8
 8001df0:	d11c      	bne.n	8001e2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001df2:	4b44      	ldr	r3, [pc, #272]	@ (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d116      	bne.n	8001e2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dfe:	4b41      	ldr	r3, [pc, #260]	@ (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d005      	beq.n	8001e16 <HAL_RCC_OscConfig+0x152>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d001      	beq.n	8001e16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e1c7      	b.n	80021a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e16:	4b3b      	ldr	r3, [pc, #236]	@ (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	4937      	ldr	r1, [pc, #220]	@ (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e2a:	e03a      	b.n	8001ea2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d020      	beq.n	8001e76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e34:	4b34      	ldr	r3, [pc, #208]	@ (8001f08 <HAL_RCC_OscConfig+0x244>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3a:	f7ff f8af 	bl	8000f9c <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e42:	f7ff f8ab 	bl	8000f9c <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e1a8      	b.n	80021a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e54:	4b2b      	ldr	r3, [pc, #172]	@ (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0f0      	beq.n	8001e42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e60:	4b28      	ldr	r3, [pc, #160]	@ (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	4925      	ldr	r1, [pc, #148]	@ (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	600b      	str	r3, [r1, #0]
 8001e74:	e015      	b.n	8001ea2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e76:	4b24      	ldr	r3, [pc, #144]	@ (8001f08 <HAL_RCC_OscConfig+0x244>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7c:	f7ff f88e 	bl	8000f9c <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e84:	f7ff f88a 	bl	8000f9c <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e187      	b.n	80021a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e96:	4b1b      	ldr	r3, [pc, #108]	@ (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d036      	beq.n	8001f1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d016      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eb6:	4b15      	ldr	r3, [pc, #84]	@ (8001f0c <HAL_RCC_OscConfig+0x248>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ebc:	f7ff f86e 	bl	8000f9c <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ec4:	f7ff f86a 	bl	8000f9c <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e167      	b.n	80021a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8001f04 <HAL_RCC_OscConfig+0x240>)
 8001ed8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0f0      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x200>
 8001ee2:	e01b      	b.n	8001f1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ee4:	4b09      	ldr	r3, [pc, #36]	@ (8001f0c <HAL_RCC_OscConfig+0x248>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eea:	f7ff f857 	bl	8000f9c <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef0:	e00e      	b.n	8001f10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ef2:	f7ff f853 	bl	8000f9c <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d907      	bls.n	8001f10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e150      	b.n	80021a6 <HAL_RCC_OscConfig+0x4e2>
 8001f04:	40023800 	.word	0x40023800
 8001f08:	42470000 	.word	0x42470000
 8001f0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f10:	4b88      	ldr	r3, [pc, #544]	@ (8002134 <HAL_RCC_OscConfig+0x470>)
 8001f12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1ea      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 8097 	beq.w	8002058 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f2e:	4b81      	ldr	r3, [pc, #516]	@ (8002134 <HAL_RCC_OscConfig+0x470>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10f      	bne.n	8001f5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	4b7d      	ldr	r3, [pc, #500]	@ (8002134 <HAL_RCC_OscConfig+0x470>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f42:	4a7c      	ldr	r2, [pc, #496]	@ (8002134 <HAL_RCC_OscConfig+0x470>)
 8001f44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f4a:	4b7a      	ldr	r3, [pc, #488]	@ (8002134 <HAL_RCC_OscConfig+0x470>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f56:	2301      	movs	r3, #1
 8001f58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5a:	4b77      	ldr	r3, [pc, #476]	@ (8002138 <HAL_RCC_OscConfig+0x474>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d118      	bne.n	8001f98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f66:	4b74      	ldr	r3, [pc, #464]	@ (8002138 <HAL_RCC_OscConfig+0x474>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a73      	ldr	r2, [pc, #460]	@ (8002138 <HAL_RCC_OscConfig+0x474>)
 8001f6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f72:	f7ff f813 	bl	8000f9c <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f7a:	f7ff f80f 	bl	8000f9c <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e10c      	b.n	80021a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8c:	4b6a      	ldr	r3, [pc, #424]	@ (8002138 <HAL_RCC_OscConfig+0x474>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0f0      	beq.n	8001f7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d106      	bne.n	8001fae <HAL_RCC_OscConfig+0x2ea>
 8001fa0:	4b64      	ldr	r3, [pc, #400]	@ (8002134 <HAL_RCC_OscConfig+0x470>)
 8001fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fa4:	4a63      	ldr	r2, [pc, #396]	@ (8002134 <HAL_RCC_OscConfig+0x470>)
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fac:	e01c      	b.n	8001fe8 <HAL_RCC_OscConfig+0x324>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	2b05      	cmp	r3, #5
 8001fb4:	d10c      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x30c>
 8001fb6:	4b5f      	ldr	r3, [pc, #380]	@ (8002134 <HAL_RCC_OscConfig+0x470>)
 8001fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fba:	4a5e      	ldr	r2, [pc, #376]	@ (8002134 <HAL_RCC_OscConfig+0x470>)
 8001fbc:	f043 0304 	orr.w	r3, r3, #4
 8001fc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fc2:	4b5c      	ldr	r3, [pc, #368]	@ (8002134 <HAL_RCC_OscConfig+0x470>)
 8001fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fc6:	4a5b      	ldr	r2, [pc, #364]	@ (8002134 <HAL_RCC_OscConfig+0x470>)
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fce:	e00b      	b.n	8001fe8 <HAL_RCC_OscConfig+0x324>
 8001fd0:	4b58      	ldr	r3, [pc, #352]	@ (8002134 <HAL_RCC_OscConfig+0x470>)
 8001fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fd4:	4a57      	ldr	r2, [pc, #348]	@ (8002134 <HAL_RCC_OscConfig+0x470>)
 8001fd6:	f023 0301 	bic.w	r3, r3, #1
 8001fda:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fdc:	4b55      	ldr	r3, [pc, #340]	@ (8002134 <HAL_RCC_OscConfig+0x470>)
 8001fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe0:	4a54      	ldr	r2, [pc, #336]	@ (8002134 <HAL_RCC_OscConfig+0x470>)
 8001fe2:	f023 0304 	bic.w	r3, r3, #4
 8001fe6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d015      	beq.n	800201c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff0:	f7fe ffd4 	bl	8000f9c <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff6:	e00a      	b.n	800200e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ff8:	f7fe ffd0 	bl	8000f9c <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002006:	4293      	cmp	r3, r2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e0cb      	b.n	80021a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800200e:	4b49      	ldr	r3, [pc, #292]	@ (8002134 <HAL_RCC_OscConfig+0x470>)
 8002010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0ee      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x334>
 800201a:	e014      	b.n	8002046 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201c:	f7fe ffbe 	bl	8000f9c <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002022:	e00a      	b.n	800203a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002024:	f7fe ffba 	bl	8000f9c <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002032:	4293      	cmp	r3, r2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e0b5      	b.n	80021a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800203a:	4b3e      	ldr	r3, [pc, #248]	@ (8002134 <HAL_RCC_OscConfig+0x470>)
 800203c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1ee      	bne.n	8002024 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002046:	7dfb      	ldrb	r3, [r7, #23]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d105      	bne.n	8002058 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800204c:	4b39      	ldr	r3, [pc, #228]	@ (8002134 <HAL_RCC_OscConfig+0x470>)
 800204e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002050:	4a38      	ldr	r2, [pc, #224]	@ (8002134 <HAL_RCC_OscConfig+0x470>)
 8002052:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002056:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 80a1 	beq.w	80021a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002062:	4b34      	ldr	r3, [pc, #208]	@ (8002134 <HAL_RCC_OscConfig+0x470>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 030c 	and.w	r3, r3, #12
 800206a:	2b08      	cmp	r3, #8
 800206c:	d05c      	beq.n	8002128 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d141      	bne.n	80020fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002076:	4b31      	ldr	r3, [pc, #196]	@ (800213c <HAL_RCC_OscConfig+0x478>)
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207c:	f7fe ff8e 	bl	8000f9c <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002084:	f7fe ff8a 	bl	8000f9c <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e087      	b.n	80021a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002096:	4b27      	ldr	r3, [pc, #156]	@ (8002134 <HAL_RCC_OscConfig+0x470>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f0      	bne.n	8002084 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	69da      	ldr	r2, [r3, #28]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b0:	019b      	lsls	r3, r3, #6
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b8:	085b      	lsrs	r3, r3, #1
 80020ba:	3b01      	subs	r3, #1
 80020bc:	041b      	lsls	r3, r3, #16
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c4:	061b      	lsls	r3, r3, #24
 80020c6:	491b      	ldr	r1, [pc, #108]	@ (8002134 <HAL_RCC_OscConfig+0x470>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020cc:	4b1b      	ldr	r3, [pc, #108]	@ (800213c <HAL_RCC_OscConfig+0x478>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d2:	f7fe ff63 	bl	8000f9c <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020da:	f7fe ff5f 	bl	8000f9c <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e05c      	b.n	80021a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ec:	4b11      	ldr	r3, [pc, #68]	@ (8002134 <HAL_RCC_OscConfig+0x470>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0f0      	beq.n	80020da <HAL_RCC_OscConfig+0x416>
 80020f8:	e054      	b.n	80021a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020fa:	4b10      	ldr	r3, [pc, #64]	@ (800213c <HAL_RCC_OscConfig+0x478>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002100:	f7fe ff4c 	bl	8000f9c <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002108:	f7fe ff48 	bl	8000f9c <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e045      	b.n	80021a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800211a:	4b06      	ldr	r3, [pc, #24]	@ (8002134 <HAL_RCC_OscConfig+0x470>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f0      	bne.n	8002108 <HAL_RCC_OscConfig+0x444>
 8002126:	e03d      	b.n	80021a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d107      	bne.n	8002140 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e038      	b.n	80021a6 <HAL_RCC_OscConfig+0x4e2>
 8002134:	40023800 	.word	0x40023800
 8002138:	40007000 	.word	0x40007000
 800213c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002140:	4b1b      	ldr	r3, [pc, #108]	@ (80021b0 <HAL_RCC_OscConfig+0x4ec>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d028      	beq.n	80021a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002158:	429a      	cmp	r2, r3
 800215a:	d121      	bne.n	80021a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002166:	429a      	cmp	r2, r3
 8002168:	d11a      	bne.n	80021a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002170:	4013      	ands	r3, r2
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002176:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002178:	4293      	cmp	r3, r2
 800217a:	d111      	bne.n	80021a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002186:	085b      	lsrs	r3, r3, #1
 8002188:	3b01      	subs	r3, #1
 800218a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800218c:	429a      	cmp	r2, r3
 800218e:	d107      	bne.n	80021a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800219c:	429a      	cmp	r2, r3
 800219e:	d001      	beq.n	80021a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e000      	b.n	80021a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40023800 	.word	0x40023800

080021b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e0cc      	b.n	8002362 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021c8:	4b68      	ldr	r3, [pc, #416]	@ (800236c <HAL_RCC_ClockConfig+0x1b8>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 030f 	and.w	r3, r3, #15
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d90c      	bls.n	80021f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d6:	4b65      	ldr	r3, [pc, #404]	@ (800236c <HAL_RCC_ClockConfig+0x1b8>)
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021de:	4b63      	ldr	r3, [pc, #396]	@ (800236c <HAL_RCC_ClockConfig+0x1b8>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e0b8      	b.n	8002362 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d020      	beq.n	800223e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	d005      	beq.n	8002214 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002208:	4b59      	ldr	r3, [pc, #356]	@ (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	4a58      	ldr	r2, [pc, #352]	@ (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 800220e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002212:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0308 	and.w	r3, r3, #8
 800221c:	2b00      	cmp	r3, #0
 800221e:	d005      	beq.n	800222c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002220:	4b53      	ldr	r3, [pc, #332]	@ (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	4a52      	ldr	r2, [pc, #328]	@ (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 8002226:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800222a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800222c:	4b50      	ldr	r3, [pc, #320]	@ (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	494d      	ldr	r1, [pc, #308]	@ (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 800223a:	4313      	orrs	r3, r2
 800223c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d044      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d107      	bne.n	8002262 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002252:	4b47      	ldr	r3, [pc, #284]	@ (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d119      	bne.n	8002292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e07f      	b.n	8002362 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b02      	cmp	r3, #2
 8002268:	d003      	beq.n	8002272 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800226e:	2b03      	cmp	r3, #3
 8002270:	d107      	bne.n	8002282 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002272:	4b3f      	ldr	r3, [pc, #252]	@ (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d109      	bne.n	8002292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e06f      	b.n	8002362 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002282:	4b3b      	ldr	r3, [pc, #236]	@ (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e067      	b.n	8002362 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002292:	4b37      	ldr	r3, [pc, #220]	@ (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f023 0203 	bic.w	r2, r3, #3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	4934      	ldr	r1, [pc, #208]	@ (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022a4:	f7fe fe7a 	bl	8000f9c <HAL_GetTick>
 80022a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022aa:	e00a      	b.n	80022c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ac:	f7fe fe76 	bl	8000f9c <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e04f      	b.n	8002362 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 020c 	and.w	r2, r3, #12
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d1eb      	bne.n	80022ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022d4:	4b25      	ldr	r3, [pc, #148]	@ (800236c <HAL_RCC_ClockConfig+0x1b8>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 030f 	and.w	r3, r3, #15
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d20c      	bcs.n	80022fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e2:	4b22      	ldr	r3, [pc, #136]	@ (800236c <HAL_RCC_ClockConfig+0x1b8>)
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ea:	4b20      	ldr	r3, [pc, #128]	@ (800236c <HAL_RCC_ClockConfig+0x1b8>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d001      	beq.n	80022fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e032      	b.n	8002362 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b00      	cmp	r3, #0
 8002306:	d008      	beq.n	800231a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002308:	4b19      	ldr	r3, [pc, #100]	@ (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	4916      	ldr	r1, [pc, #88]	@ (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 8002316:	4313      	orrs	r3, r2
 8002318:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d009      	beq.n	800233a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002326:	4b12      	ldr	r3, [pc, #72]	@ (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	490e      	ldr	r1, [pc, #56]	@ (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 8002336:	4313      	orrs	r3, r2
 8002338:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800233a:	f000 f821 	bl	8002380 <HAL_RCC_GetSysClockFreq>
 800233e:	4602      	mov	r2, r0
 8002340:	4b0b      	ldr	r3, [pc, #44]	@ (8002370 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	091b      	lsrs	r3, r3, #4
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	490a      	ldr	r1, [pc, #40]	@ (8002374 <HAL_RCC_ClockConfig+0x1c0>)
 800234c:	5ccb      	ldrb	r3, [r1, r3]
 800234e:	fa22 f303 	lsr.w	r3, r2, r3
 8002352:	4a09      	ldr	r2, [pc, #36]	@ (8002378 <HAL_RCC_ClockConfig+0x1c4>)
 8002354:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002356:	4b09      	ldr	r3, [pc, #36]	@ (800237c <HAL_RCC_ClockConfig+0x1c8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe fdda 	bl	8000f14 <HAL_InitTick>

  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40023c00 	.word	0x40023c00
 8002370:	40023800 	.word	0x40023800
 8002374:	08002bf0 	.word	0x08002bf0
 8002378:	20000000 	.word	0x20000000
 800237c:	20000004 	.word	0x20000004

08002380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002384:	b094      	sub	sp, #80	@ 0x50
 8002386:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002388:	2300      	movs	r3, #0
 800238a:	647b      	str	r3, [r7, #68]	@ 0x44
 800238c:	2300      	movs	r3, #0
 800238e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002390:	2300      	movs	r3, #0
 8002392:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002398:	4b79      	ldr	r3, [pc, #484]	@ (8002580 <HAL_RCC_GetSysClockFreq+0x200>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 030c 	and.w	r3, r3, #12
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	d00d      	beq.n	80023c0 <HAL_RCC_GetSysClockFreq+0x40>
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	f200 80e1 	bhi.w	800256c <HAL_RCC_GetSysClockFreq+0x1ec>
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d002      	beq.n	80023b4 <HAL_RCC_GetSysClockFreq+0x34>
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d003      	beq.n	80023ba <HAL_RCC_GetSysClockFreq+0x3a>
 80023b2:	e0db      	b.n	800256c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023b4:	4b73      	ldr	r3, [pc, #460]	@ (8002584 <HAL_RCC_GetSysClockFreq+0x204>)
 80023b6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80023b8:	e0db      	b.n	8002572 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023ba:	4b73      	ldr	r3, [pc, #460]	@ (8002588 <HAL_RCC_GetSysClockFreq+0x208>)
 80023bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023be:	e0d8      	b.n	8002572 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023c0:	4b6f      	ldr	r3, [pc, #444]	@ (8002580 <HAL_RCC_GetSysClockFreq+0x200>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023c8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023ca:	4b6d      	ldr	r3, [pc, #436]	@ (8002580 <HAL_RCC_GetSysClockFreq+0x200>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d063      	beq.n	800249e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023d6:	4b6a      	ldr	r3, [pc, #424]	@ (8002580 <HAL_RCC_GetSysClockFreq+0x200>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	099b      	lsrs	r3, r3, #6
 80023dc:	2200      	movs	r2, #0
 80023de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80023e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80023e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80023ea:	2300      	movs	r3, #0
 80023ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80023ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80023f2:	4622      	mov	r2, r4
 80023f4:	462b      	mov	r3, r5
 80023f6:	f04f 0000 	mov.w	r0, #0
 80023fa:	f04f 0100 	mov.w	r1, #0
 80023fe:	0159      	lsls	r1, r3, #5
 8002400:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002404:	0150      	lsls	r0, r2, #5
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	4621      	mov	r1, r4
 800240c:	1a51      	subs	r1, r2, r1
 800240e:	6139      	str	r1, [r7, #16]
 8002410:	4629      	mov	r1, r5
 8002412:	eb63 0301 	sbc.w	r3, r3, r1
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002424:	4659      	mov	r1, fp
 8002426:	018b      	lsls	r3, r1, #6
 8002428:	4651      	mov	r1, sl
 800242a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800242e:	4651      	mov	r1, sl
 8002430:	018a      	lsls	r2, r1, #6
 8002432:	4651      	mov	r1, sl
 8002434:	ebb2 0801 	subs.w	r8, r2, r1
 8002438:	4659      	mov	r1, fp
 800243a:	eb63 0901 	sbc.w	r9, r3, r1
 800243e:	f04f 0200 	mov.w	r2, #0
 8002442:	f04f 0300 	mov.w	r3, #0
 8002446:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800244a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800244e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002452:	4690      	mov	r8, r2
 8002454:	4699      	mov	r9, r3
 8002456:	4623      	mov	r3, r4
 8002458:	eb18 0303 	adds.w	r3, r8, r3
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	462b      	mov	r3, r5
 8002460:	eb49 0303 	adc.w	r3, r9, r3
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	f04f 0300 	mov.w	r3, #0
 800246e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002472:	4629      	mov	r1, r5
 8002474:	024b      	lsls	r3, r1, #9
 8002476:	4621      	mov	r1, r4
 8002478:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800247c:	4621      	mov	r1, r4
 800247e:	024a      	lsls	r2, r1, #9
 8002480:	4610      	mov	r0, r2
 8002482:	4619      	mov	r1, r3
 8002484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002486:	2200      	movs	r2, #0
 8002488:	62bb      	str	r3, [r7, #40]	@ 0x28
 800248a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800248c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002490:	f7fd feac 	bl	80001ec <__aeabi_uldivmod>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4613      	mov	r3, r2
 800249a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800249c:	e058      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800249e:	4b38      	ldr	r3, [pc, #224]	@ (8002580 <HAL_RCC_GetSysClockFreq+0x200>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	099b      	lsrs	r3, r3, #6
 80024a4:	2200      	movs	r2, #0
 80024a6:	4618      	mov	r0, r3
 80024a8:	4611      	mov	r1, r2
 80024aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024ae:	623b      	str	r3, [r7, #32]
 80024b0:	2300      	movs	r3, #0
 80024b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80024b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024b8:	4642      	mov	r2, r8
 80024ba:	464b      	mov	r3, r9
 80024bc:	f04f 0000 	mov.w	r0, #0
 80024c0:	f04f 0100 	mov.w	r1, #0
 80024c4:	0159      	lsls	r1, r3, #5
 80024c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024ca:	0150      	lsls	r0, r2, #5
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4641      	mov	r1, r8
 80024d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80024d6:	4649      	mov	r1, r9
 80024d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80024ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80024f0:	ebb2 040a 	subs.w	r4, r2, sl
 80024f4:	eb63 050b 	sbc.w	r5, r3, fp
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	00eb      	lsls	r3, r5, #3
 8002502:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002506:	00e2      	lsls	r2, r4, #3
 8002508:	4614      	mov	r4, r2
 800250a:	461d      	mov	r5, r3
 800250c:	4643      	mov	r3, r8
 800250e:	18e3      	adds	r3, r4, r3
 8002510:	603b      	str	r3, [r7, #0]
 8002512:	464b      	mov	r3, r9
 8002514:	eb45 0303 	adc.w	r3, r5, r3
 8002518:	607b      	str	r3, [r7, #4]
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	f04f 0300 	mov.w	r3, #0
 8002522:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002526:	4629      	mov	r1, r5
 8002528:	028b      	lsls	r3, r1, #10
 800252a:	4621      	mov	r1, r4
 800252c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002530:	4621      	mov	r1, r4
 8002532:	028a      	lsls	r2, r1, #10
 8002534:	4610      	mov	r0, r2
 8002536:	4619      	mov	r1, r3
 8002538:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800253a:	2200      	movs	r2, #0
 800253c:	61bb      	str	r3, [r7, #24]
 800253e:	61fa      	str	r2, [r7, #28]
 8002540:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002544:	f7fd fe52 	bl	80001ec <__aeabi_uldivmod>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4613      	mov	r3, r2
 800254e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002550:	4b0b      	ldr	r3, [pc, #44]	@ (8002580 <HAL_RCC_GetSysClockFreq+0x200>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	0c1b      	lsrs	r3, r3, #16
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	3301      	adds	r3, #1
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002560:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002562:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002564:	fbb2 f3f3 	udiv	r3, r2, r3
 8002568:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800256a:	e002      	b.n	8002572 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800256c:	4b05      	ldr	r3, [pc, #20]	@ (8002584 <HAL_RCC_GetSysClockFreq+0x204>)
 800256e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002570:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002572:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002574:	4618      	mov	r0, r3
 8002576:	3750      	adds	r7, #80	@ 0x50
 8002578:	46bd      	mov	sp, r7
 800257a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800257e:	bf00      	nop
 8002580:	40023800 	.word	0x40023800
 8002584:	00f42400 	.word	0x00f42400
 8002588:	007a1200 	.word	0x007a1200

0800258c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002590:	4b03      	ldr	r3, [pc, #12]	@ (80025a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002592:	681b      	ldr	r3, [r3, #0]
}
 8002594:	4618      	mov	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	20000000 	.word	0x20000000

080025a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025a8:	f7ff fff0 	bl	800258c <HAL_RCC_GetHCLKFreq>
 80025ac:	4602      	mov	r2, r0
 80025ae:	4b05      	ldr	r3, [pc, #20]	@ (80025c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	0a9b      	lsrs	r3, r3, #10
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	4903      	ldr	r1, [pc, #12]	@ (80025c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ba:	5ccb      	ldrb	r3, [r1, r3]
 80025bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40023800 	.word	0x40023800
 80025c8:	08002c00 	.word	0x08002c00

080025cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025d0:	f7ff ffdc 	bl	800258c <HAL_RCC_GetHCLKFreq>
 80025d4:	4602      	mov	r2, r0
 80025d6:	4b05      	ldr	r3, [pc, #20]	@ (80025ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	0b5b      	lsrs	r3, r3, #13
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	4903      	ldr	r1, [pc, #12]	@ (80025f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025e2:	5ccb      	ldrb	r3, [r1, r3]
 80025e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40023800 	.word	0x40023800
 80025f0:	08002c00 	.word	0x08002c00

080025f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e042      	b.n	800268c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d106      	bne.n	8002620 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7fe fba4 	bl	8000d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2224      	movs	r2, #36	@ 0x24
 8002624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68da      	ldr	r2, [r3, #12]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002636:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 f82b 	bl	8002694 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	691a      	ldr	r2, [r3, #16]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800264c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695a      	ldr	r2, [r3, #20]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800265c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800266c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2220      	movs	r2, #32
 8002678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2220      	movs	r2, #32
 8002680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002698:	b0c0      	sub	sp, #256	@ 0x100
 800269a:	af00      	add	r7, sp, #0
 800269c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80026ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026b0:	68d9      	ldr	r1, [r3, #12]
 80026b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	ea40 0301 	orr.w	r3, r0, r1
 80026bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	431a      	orrs	r2, r3
 80026cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	431a      	orrs	r2, r3
 80026d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	4313      	orrs	r3, r2
 80026dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80026e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80026ec:	f021 010c 	bic.w	r1, r1, #12
 80026f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80026fa:	430b      	orrs	r3, r1
 80026fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800270a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800270e:	6999      	ldr	r1, [r3, #24]
 8002710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	ea40 0301 	orr.w	r3, r0, r1
 800271a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800271c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	4b8f      	ldr	r3, [pc, #572]	@ (8002960 <UART_SetConfig+0x2cc>)
 8002724:	429a      	cmp	r2, r3
 8002726:	d005      	beq.n	8002734 <UART_SetConfig+0xa0>
 8002728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	4b8d      	ldr	r3, [pc, #564]	@ (8002964 <UART_SetConfig+0x2d0>)
 8002730:	429a      	cmp	r2, r3
 8002732:	d104      	bne.n	800273e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002734:	f7ff ff4a 	bl	80025cc <HAL_RCC_GetPCLK2Freq>
 8002738:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800273c:	e003      	b.n	8002746 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800273e:	f7ff ff31 	bl	80025a4 <HAL_RCC_GetPCLK1Freq>
 8002742:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002750:	f040 810c 	bne.w	800296c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002754:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002758:	2200      	movs	r2, #0
 800275a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800275e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002762:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002766:	4622      	mov	r2, r4
 8002768:	462b      	mov	r3, r5
 800276a:	1891      	adds	r1, r2, r2
 800276c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800276e:	415b      	adcs	r3, r3
 8002770:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002772:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002776:	4621      	mov	r1, r4
 8002778:	eb12 0801 	adds.w	r8, r2, r1
 800277c:	4629      	mov	r1, r5
 800277e:	eb43 0901 	adc.w	r9, r3, r1
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	f04f 0300 	mov.w	r3, #0
 800278a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800278e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002792:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002796:	4690      	mov	r8, r2
 8002798:	4699      	mov	r9, r3
 800279a:	4623      	mov	r3, r4
 800279c:	eb18 0303 	adds.w	r3, r8, r3
 80027a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80027a4:	462b      	mov	r3, r5
 80027a6:	eb49 0303 	adc.w	r3, r9, r3
 80027aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80027ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80027ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80027be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80027c2:	460b      	mov	r3, r1
 80027c4:	18db      	adds	r3, r3, r3
 80027c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80027c8:	4613      	mov	r3, r2
 80027ca:	eb42 0303 	adc.w	r3, r2, r3
 80027ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80027d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80027d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80027d8:	f7fd fd08 	bl	80001ec <__aeabi_uldivmod>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4b61      	ldr	r3, [pc, #388]	@ (8002968 <UART_SetConfig+0x2d4>)
 80027e2:	fba3 2302 	umull	r2, r3, r3, r2
 80027e6:	095b      	lsrs	r3, r3, #5
 80027e8:	011c      	lsls	r4, r3, #4
 80027ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027ee:	2200      	movs	r2, #0
 80027f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80027f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80027f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80027fc:	4642      	mov	r2, r8
 80027fe:	464b      	mov	r3, r9
 8002800:	1891      	adds	r1, r2, r2
 8002802:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002804:	415b      	adcs	r3, r3
 8002806:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002808:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800280c:	4641      	mov	r1, r8
 800280e:	eb12 0a01 	adds.w	sl, r2, r1
 8002812:	4649      	mov	r1, r9
 8002814:	eb43 0b01 	adc.w	fp, r3, r1
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002824:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002828:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800282c:	4692      	mov	sl, r2
 800282e:	469b      	mov	fp, r3
 8002830:	4643      	mov	r3, r8
 8002832:	eb1a 0303 	adds.w	r3, sl, r3
 8002836:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800283a:	464b      	mov	r3, r9
 800283c:	eb4b 0303 	adc.w	r3, fp, r3
 8002840:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002850:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002854:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002858:	460b      	mov	r3, r1
 800285a:	18db      	adds	r3, r3, r3
 800285c:	643b      	str	r3, [r7, #64]	@ 0x40
 800285e:	4613      	mov	r3, r2
 8002860:	eb42 0303 	adc.w	r3, r2, r3
 8002864:	647b      	str	r3, [r7, #68]	@ 0x44
 8002866:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800286a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800286e:	f7fd fcbd 	bl	80001ec <__aeabi_uldivmod>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4611      	mov	r1, r2
 8002878:	4b3b      	ldr	r3, [pc, #236]	@ (8002968 <UART_SetConfig+0x2d4>)
 800287a:	fba3 2301 	umull	r2, r3, r3, r1
 800287e:	095b      	lsrs	r3, r3, #5
 8002880:	2264      	movs	r2, #100	@ 0x64
 8002882:	fb02 f303 	mul.w	r3, r2, r3
 8002886:	1acb      	subs	r3, r1, r3
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800288e:	4b36      	ldr	r3, [pc, #216]	@ (8002968 <UART_SetConfig+0x2d4>)
 8002890:	fba3 2302 	umull	r2, r3, r3, r2
 8002894:	095b      	lsrs	r3, r3, #5
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800289c:	441c      	add	r4, r3
 800289e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028a2:	2200      	movs	r2, #0
 80028a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80028a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80028ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80028b0:	4642      	mov	r2, r8
 80028b2:	464b      	mov	r3, r9
 80028b4:	1891      	adds	r1, r2, r2
 80028b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80028b8:	415b      	adcs	r3, r3
 80028ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80028c0:	4641      	mov	r1, r8
 80028c2:	1851      	adds	r1, r2, r1
 80028c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80028c6:	4649      	mov	r1, r9
 80028c8:	414b      	adcs	r3, r1
 80028ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80028cc:	f04f 0200 	mov.w	r2, #0
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80028d8:	4659      	mov	r1, fp
 80028da:	00cb      	lsls	r3, r1, #3
 80028dc:	4651      	mov	r1, sl
 80028de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028e2:	4651      	mov	r1, sl
 80028e4:	00ca      	lsls	r2, r1, #3
 80028e6:	4610      	mov	r0, r2
 80028e8:	4619      	mov	r1, r3
 80028ea:	4603      	mov	r3, r0
 80028ec:	4642      	mov	r2, r8
 80028ee:	189b      	adds	r3, r3, r2
 80028f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80028f4:	464b      	mov	r3, r9
 80028f6:	460a      	mov	r2, r1
 80028f8:	eb42 0303 	adc.w	r3, r2, r3
 80028fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800290c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002910:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002914:	460b      	mov	r3, r1
 8002916:	18db      	adds	r3, r3, r3
 8002918:	62bb      	str	r3, [r7, #40]	@ 0x28
 800291a:	4613      	mov	r3, r2
 800291c:	eb42 0303 	adc.w	r3, r2, r3
 8002920:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002922:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002926:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800292a:	f7fd fc5f 	bl	80001ec <__aeabi_uldivmod>
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	4b0d      	ldr	r3, [pc, #52]	@ (8002968 <UART_SetConfig+0x2d4>)
 8002934:	fba3 1302 	umull	r1, r3, r3, r2
 8002938:	095b      	lsrs	r3, r3, #5
 800293a:	2164      	movs	r1, #100	@ 0x64
 800293c:	fb01 f303 	mul.w	r3, r1, r3
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	3332      	adds	r3, #50	@ 0x32
 8002946:	4a08      	ldr	r2, [pc, #32]	@ (8002968 <UART_SetConfig+0x2d4>)
 8002948:	fba2 2303 	umull	r2, r3, r2, r3
 800294c:	095b      	lsrs	r3, r3, #5
 800294e:	f003 0207 	and.w	r2, r3, #7
 8002952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4422      	add	r2, r4
 800295a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800295c:	e106      	b.n	8002b6c <UART_SetConfig+0x4d8>
 800295e:	bf00      	nop
 8002960:	40011000 	.word	0x40011000
 8002964:	40011400 	.word	0x40011400
 8002968:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800296c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002970:	2200      	movs	r2, #0
 8002972:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002976:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800297a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800297e:	4642      	mov	r2, r8
 8002980:	464b      	mov	r3, r9
 8002982:	1891      	adds	r1, r2, r2
 8002984:	6239      	str	r1, [r7, #32]
 8002986:	415b      	adcs	r3, r3
 8002988:	627b      	str	r3, [r7, #36]	@ 0x24
 800298a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800298e:	4641      	mov	r1, r8
 8002990:	1854      	adds	r4, r2, r1
 8002992:	4649      	mov	r1, r9
 8002994:	eb43 0501 	adc.w	r5, r3, r1
 8002998:	f04f 0200 	mov.w	r2, #0
 800299c:	f04f 0300 	mov.w	r3, #0
 80029a0:	00eb      	lsls	r3, r5, #3
 80029a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029a6:	00e2      	lsls	r2, r4, #3
 80029a8:	4614      	mov	r4, r2
 80029aa:	461d      	mov	r5, r3
 80029ac:	4643      	mov	r3, r8
 80029ae:	18e3      	adds	r3, r4, r3
 80029b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80029b4:	464b      	mov	r3, r9
 80029b6:	eb45 0303 	adc.w	r3, r5, r3
 80029ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80029be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80029ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80029da:	4629      	mov	r1, r5
 80029dc:	008b      	lsls	r3, r1, #2
 80029de:	4621      	mov	r1, r4
 80029e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029e4:	4621      	mov	r1, r4
 80029e6:	008a      	lsls	r2, r1, #2
 80029e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80029ec:	f7fd fbfe 	bl	80001ec <__aeabi_uldivmod>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4b60      	ldr	r3, [pc, #384]	@ (8002b78 <UART_SetConfig+0x4e4>)
 80029f6:	fba3 2302 	umull	r2, r3, r3, r2
 80029fa:	095b      	lsrs	r3, r3, #5
 80029fc:	011c      	lsls	r4, r3, #4
 80029fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a02:	2200      	movs	r2, #0
 8002a04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a08:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002a10:	4642      	mov	r2, r8
 8002a12:	464b      	mov	r3, r9
 8002a14:	1891      	adds	r1, r2, r2
 8002a16:	61b9      	str	r1, [r7, #24]
 8002a18:	415b      	adcs	r3, r3
 8002a1a:	61fb      	str	r3, [r7, #28]
 8002a1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a20:	4641      	mov	r1, r8
 8002a22:	1851      	adds	r1, r2, r1
 8002a24:	6139      	str	r1, [r7, #16]
 8002a26:	4649      	mov	r1, r9
 8002a28:	414b      	adcs	r3, r1
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	f04f 0200 	mov.w	r2, #0
 8002a30:	f04f 0300 	mov.w	r3, #0
 8002a34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a38:	4659      	mov	r1, fp
 8002a3a:	00cb      	lsls	r3, r1, #3
 8002a3c:	4651      	mov	r1, sl
 8002a3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a42:	4651      	mov	r1, sl
 8002a44:	00ca      	lsls	r2, r1, #3
 8002a46:	4610      	mov	r0, r2
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	4642      	mov	r2, r8
 8002a4e:	189b      	adds	r3, r3, r2
 8002a50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a54:	464b      	mov	r3, r9
 8002a56:	460a      	mov	r2, r1
 8002a58:	eb42 0303 	adc.w	r3, r2, r3
 8002a5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002a6a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	f04f 0300 	mov.w	r3, #0
 8002a74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002a78:	4649      	mov	r1, r9
 8002a7a:	008b      	lsls	r3, r1, #2
 8002a7c:	4641      	mov	r1, r8
 8002a7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a82:	4641      	mov	r1, r8
 8002a84:	008a      	lsls	r2, r1, #2
 8002a86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002a8a:	f7fd fbaf 	bl	80001ec <__aeabi_uldivmod>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	4611      	mov	r1, r2
 8002a94:	4b38      	ldr	r3, [pc, #224]	@ (8002b78 <UART_SetConfig+0x4e4>)
 8002a96:	fba3 2301 	umull	r2, r3, r3, r1
 8002a9a:	095b      	lsrs	r3, r3, #5
 8002a9c:	2264      	movs	r2, #100	@ 0x64
 8002a9e:	fb02 f303 	mul.w	r3, r2, r3
 8002aa2:	1acb      	subs	r3, r1, r3
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	3332      	adds	r3, #50	@ 0x32
 8002aa8:	4a33      	ldr	r2, [pc, #204]	@ (8002b78 <UART_SetConfig+0x4e4>)
 8002aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002aae:	095b      	lsrs	r3, r3, #5
 8002ab0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ab4:	441c      	add	r4, r3
 8002ab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002aba:	2200      	movs	r2, #0
 8002abc:	673b      	str	r3, [r7, #112]	@ 0x70
 8002abe:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ac0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002ac4:	4642      	mov	r2, r8
 8002ac6:	464b      	mov	r3, r9
 8002ac8:	1891      	adds	r1, r2, r2
 8002aca:	60b9      	str	r1, [r7, #8]
 8002acc:	415b      	adcs	r3, r3
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ad4:	4641      	mov	r1, r8
 8002ad6:	1851      	adds	r1, r2, r1
 8002ad8:	6039      	str	r1, [r7, #0]
 8002ada:	4649      	mov	r1, r9
 8002adc:	414b      	adcs	r3, r1
 8002ade:	607b      	str	r3, [r7, #4]
 8002ae0:	f04f 0200 	mov.w	r2, #0
 8002ae4:	f04f 0300 	mov.w	r3, #0
 8002ae8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002aec:	4659      	mov	r1, fp
 8002aee:	00cb      	lsls	r3, r1, #3
 8002af0:	4651      	mov	r1, sl
 8002af2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002af6:	4651      	mov	r1, sl
 8002af8:	00ca      	lsls	r2, r1, #3
 8002afa:	4610      	mov	r0, r2
 8002afc:	4619      	mov	r1, r3
 8002afe:	4603      	mov	r3, r0
 8002b00:	4642      	mov	r2, r8
 8002b02:	189b      	adds	r3, r3, r2
 8002b04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b06:	464b      	mov	r3, r9
 8002b08:	460a      	mov	r2, r1
 8002b0a:	eb42 0303 	adc.w	r3, r2, r3
 8002b0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b1a:	667a      	str	r2, [r7, #100]	@ 0x64
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002b28:	4649      	mov	r1, r9
 8002b2a:	008b      	lsls	r3, r1, #2
 8002b2c:	4641      	mov	r1, r8
 8002b2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b32:	4641      	mov	r1, r8
 8002b34:	008a      	lsls	r2, r1, #2
 8002b36:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002b3a:	f7fd fb57 	bl	80001ec <__aeabi_uldivmod>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	4b0d      	ldr	r3, [pc, #52]	@ (8002b78 <UART_SetConfig+0x4e4>)
 8002b44:	fba3 1302 	umull	r1, r3, r3, r2
 8002b48:	095b      	lsrs	r3, r3, #5
 8002b4a:	2164      	movs	r1, #100	@ 0x64
 8002b4c:	fb01 f303 	mul.w	r3, r1, r3
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	3332      	adds	r3, #50	@ 0x32
 8002b56:	4a08      	ldr	r2, [pc, #32]	@ (8002b78 <UART_SetConfig+0x4e4>)
 8002b58:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5c:	095b      	lsrs	r3, r3, #5
 8002b5e:	f003 020f 	and.w	r2, r3, #15
 8002b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4422      	add	r2, r4
 8002b6a:	609a      	str	r2, [r3, #8]
}
 8002b6c:	bf00      	nop
 8002b6e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002b72:	46bd      	mov	sp, r7
 8002b74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b78:	51eb851f 	.word	0x51eb851f

08002b7c <memset>:
 8002b7c:	4402      	add	r2, r0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d100      	bne.n	8002b86 <memset+0xa>
 8002b84:	4770      	bx	lr
 8002b86:	f803 1b01 	strb.w	r1, [r3], #1
 8002b8a:	e7f9      	b.n	8002b80 <memset+0x4>

08002b8c <__libc_init_array>:
 8002b8c:	b570      	push	{r4, r5, r6, lr}
 8002b8e:	4d0d      	ldr	r5, [pc, #52]	@ (8002bc4 <__libc_init_array+0x38>)
 8002b90:	4c0d      	ldr	r4, [pc, #52]	@ (8002bc8 <__libc_init_array+0x3c>)
 8002b92:	1b64      	subs	r4, r4, r5
 8002b94:	10a4      	asrs	r4, r4, #2
 8002b96:	2600      	movs	r6, #0
 8002b98:	42a6      	cmp	r6, r4
 8002b9a:	d109      	bne.n	8002bb0 <__libc_init_array+0x24>
 8002b9c:	4d0b      	ldr	r5, [pc, #44]	@ (8002bcc <__libc_init_array+0x40>)
 8002b9e:	4c0c      	ldr	r4, [pc, #48]	@ (8002bd0 <__libc_init_array+0x44>)
 8002ba0:	f000 f818 	bl	8002bd4 <_init>
 8002ba4:	1b64      	subs	r4, r4, r5
 8002ba6:	10a4      	asrs	r4, r4, #2
 8002ba8:	2600      	movs	r6, #0
 8002baa:	42a6      	cmp	r6, r4
 8002bac:	d105      	bne.n	8002bba <__libc_init_array+0x2e>
 8002bae:	bd70      	pop	{r4, r5, r6, pc}
 8002bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bb4:	4798      	blx	r3
 8002bb6:	3601      	adds	r6, #1
 8002bb8:	e7ee      	b.n	8002b98 <__libc_init_array+0xc>
 8002bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bbe:	4798      	blx	r3
 8002bc0:	3601      	adds	r6, #1
 8002bc2:	e7f2      	b.n	8002baa <__libc_init_array+0x1e>
 8002bc4:	08002c10 	.word	0x08002c10
 8002bc8:	08002c10 	.word	0x08002c10
 8002bcc:	08002c10 	.word	0x08002c10
 8002bd0:	08002c14 	.word	0x08002c14

08002bd4 <_init>:
 8002bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bd6:	bf00      	nop
 8002bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bda:	bc08      	pop	{r3}
 8002bdc:	469e      	mov	lr, r3
 8002bde:	4770      	bx	lr

08002be0 <_fini>:
 8002be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002be2:	bf00      	nop
 8002be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002be6:	bc08      	pop	{r3}
 8002be8:	469e      	mov	lr, r3
 8002bea:	4770      	bx	lr
