
delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051d8  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005384  08005384  00006384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053a4  080053a4  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  080053a4  080053a4  000063a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053ac  080053ac  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053ac  080053ac  000063ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053b0  080053b0  000063b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080053b4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000700c  2**0
                  CONTENTS
 10 .bss          00000340  2000000c  2000000c  0000700c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000034c  2000034c  0000700c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018c46  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003527  00000000  00000000  0001fc82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016e8  00000000  00000000  000231b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011ef  00000000  00000000  00024898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027325  00000000  00000000  00025a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d608  00000000  00000000  0004cdac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eeb77  00000000  00000000  0006a3b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00158f2b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000061a4  00000000  00000000  00158f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  0015f114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800536c 	.word	0x0800536c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	0800536c 	.word	0x0800536c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <apInit>:

//uint32_t adc_vol = 0 ;
float adc_vol = 0 ;

void apInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	adcInit();
 80004e0:	f000 f82c 	bl	800053c <adcInit>
}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <apMain>:

void apMain(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
	uint32_t pre_time = 0 ;
 80004ee:	2300      	movs	r3, #0
 80004f0:	607b      	str	r3, [r7, #4]

	while(1)
	{
		if (millis() - pre_time >= 500)	// 논블락킹 코드
 80004f2:	f000 f86c 	bl	80005ce <millis>
 80004f6:	4602      	mov	r2, r0
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	1ad3      	subs	r3, r2, r3
 80004fc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000500:	d307      	bcc.n	8000512 <apMain+0x2a>
		{
			pre_time = millis();
 8000502:	f000 f864 	bl	80005ce <millis>
 8000506:	6078      	str	r0, [r7, #4]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000508:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800050c:	4808      	ldr	r0, [pc, #32]	@ (8000530 <apMain+0x48>)
 800050e:	f002 fa78 	bl	8002a02 <HAL_GPIO_TogglePin>


		//HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
		//HAL_Delay(500);

		adc_vol = (float)adcReadVoltage(_DEF_CH1) / 100.f;
 8000512:	2000      	movs	r0, #0
 8000514:	f000 f844 	bl	80005a0 <adcReadVoltage>
 8000518:	ee07 0a90 	vmov	s15, r0
 800051c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000520:	eddf 6a04 	vldr	s13, [pc, #16]	@ 8000534 <apMain+0x4c>
 8000524:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000528:	4b03      	ldr	r3, [pc, #12]	@ (8000538 <apMain+0x50>)
 800052a:	edc3 7a00 	vstr	s15, [r3]
		if (millis() - pre_time >= 500)	// 논블락킹 코드
 800052e:	e7e0      	b.n	80004f2 <apMain+0xa>
 8000530:	40021800 	.word	0x40021800
 8000534:	42c80000 	.word	0x42c80000
 8000538:	20000028 	.word	0x20000028

0800053c <adcInit>:
uint16_t adc_data[3];



bool adcInit(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_data, 3);		//핸들러, 배열, 채널 수
 8000540:	2203      	movs	r2, #3
 8000542:	4903      	ldr	r1, [pc, #12]	@ (8000550 <adcInit+0x14>)
 8000544:	4803      	ldr	r0, [pc, #12]	@ (8000554 <adcInit+0x18>)
 8000546:	f001 f9d5 	bl	80018f4 <HAL_ADC_Start_DMA>
	return true;
 800054a:	2301      	movs	r3, #1
}
 800054c:	4618      	mov	r0, r3
 800054e:	bd80      	pop	{r7, pc}
 8000550:	2000002c 	.word	0x2000002c
 8000554:	20000034 	.word	0x20000034

08000558 <adcRead>:
uint16_t adcRead(uint8_t ch)
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	71fb      	strb	r3, [r7, #7]
	uint16_t cali_value = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	81bb      	strh	r3, [r7, #12]
	uint16_t ret = 0;
 8000566:	2300      	movs	r3, #0
 8000568:	81fb      	strh	r3, [r7, #14]
	switch(ch)
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d10e      	bne.n	800058e <adcRead+0x36>
	{
		case _DEF_CH1 :
			if(adc_data[ch] > cali_value)
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	4a0a      	ldr	r2, [pc, #40]	@ (800059c <adcRead+0x44>)
 8000574:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000578:	89ba      	ldrh	r2, [r7, #12]
 800057a:	429a      	cmp	r2, r3
 800057c:	d206      	bcs.n	800058c <adcRead+0x34>
			{
				ret = adc_data[ch] - cali_value;
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	4a06      	ldr	r2, [pc, #24]	@ (800059c <adcRead+0x44>)
 8000582:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000586:	89bb      	ldrh	r3, [r7, #12]
 8000588:	1ad3      	subs	r3, r2, r3
 800058a:	81fb      	strh	r3, [r7, #14]
			}

		break;
 800058c:	bf00      	nop
	}
	return ret;
 800058e:	89fb      	ldrh	r3, [r7, #14]
}
 8000590:	4618      	mov	r0, r3
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr
 800059c:	2000002c 	.word	0x2000002c

080005a0 <adcReadVoltage>:


uint32_t adcReadVoltage(uint8_t ch)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
	uint32_t ret ;
	uint32_t adc_data;
	adc_data = adcRead(ch);
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	4618      	mov	r0, r3
 80005ae:	f7ff ffd3 	bl	8000558 <adcRead>
 80005b2:	4603      	mov	r3, r0
 80005b4:	60fb      	str	r3, [r7, #12]
	ret = (330 * adc_data ) / 4096 ;	// float 안쓰고 330 (3.3v) * adc_data / 2의 12승(해상도)
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80005bc:	fb02 f303 	mul.w	r3, r2, r3
 80005c0:	0b1b      	lsrs	r3, r3, #12
 80005c2:	60bb      	str	r3, [r7, #8]
	return ret ;
 80005c4:	68bb      	ldr	r3, [r7, #8]
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}

080005ce <millis>:
}



uint32_t millis(void)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80005d2:	f001 f93f 	bl	8001854 <HAL_GetTick>
 80005d6:	4603      	mov	r3, r0
}
 80005d8:	4618      	mov	r0, r3
 80005da:	bd80      	pop	{r7, pc}

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f001 f902 	bl	80017e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f81a 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 fae0 	bl	8000bac <MX_GPIO_Init>
  MX_DMA_Init();
 80005ec:	f000 fa74 	bl	8000ad8 <MX_DMA_Init>
  MX_CRC_Init();
 80005f0:	f000 f8f0 	bl	80007d4 <MX_CRC_Init>
  MX_FMC_Init();
 80005f4:	f000 fa8a 	bl	8000b0c <MX_FMC_Init>
  MX_I2C3_Init();
 80005f8:	f000 f900 	bl	80007fc <MX_I2C3_Init>
  MX_SPI5_Init();
 80005fc:	f000 f9bc 	bl	8000978 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000600:	f000 f9f0 	bl	80009e4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000604:	f000 fa3e 	bl	8000a84 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000608:	f000 f874 	bl	80006f4 <MX_ADC1_Init>
  MX_LTDC_Init();
 800060c:	f000 f936 	bl	800087c <MX_LTDC_Init>
  /* USER CODE BEGIN 2 */
  apInit();
 8000610:	f7ff ff64 	bl	80004dc <apInit>
  apMain(); // 안에 while문이 있음.
 8000614:	f7ff ff68 	bl	80004e8 <apMain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <main+0x3c>

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	@ 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	@ 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f004 fe72 	bl	8005314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b29      	ldr	r3, [pc, #164]	@ (80006ec <SystemClock_Config+0xd0>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000648:	4a28      	ldr	r2, [pc, #160]	@ (80006ec <SystemClock_Config+0xd0>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000650:	4b26      	ldr	r3, [pc, #152]	@ (80006ec <SystemClock_Config+0xd0>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b23      	ldr	r3, [pc, #140]	@ (80006f0 <SystemClock_Config+0xd4>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000668:	4a21      	ldr	r2, [pc, #132]	@ (80006f0 <SystemClock_Config+0xd4>)
 800066a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <SystemClock_Config+0xd4>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800067c:	2301      	movs	r3, #1
 800067e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000680:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000684:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000686:	2302      	movs	r3, #2
 8000688:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800068e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000690:	2304      	movs	r3, #4
 8000692:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000694:	2360      	movs	r3, #96	@ 0x60
 8000696:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000698:	2302      	movs	r3, #2
 800069a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800069c:	2304      	movs	r3, #4
 800069e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 0320 	add.w	r3, r7, #32
 80006a4:	4618      	mov	r0, r3
 80006a6:	f002 feef 	bl	8003488 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006b0:	f000 fbbc 	bl	8000e2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	2302      	movs	r3, #2
 80006ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2103      	movs	r1, #3
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 f950 	bl	8003978 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006de:	f000 fba5 	bl	8000e2c <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3750      	adds	r7, #80	@ 0x50
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006fa:	463b      	mov	r3, r7
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000706:	4b2f      	ldr	r3, [pc, #188]	@ (80007c4 <MX_ADC1_Init+0xd0>)
 8000708:	4a2f      	ldr	r2, [pc, #188]	@ (80007c8 <MX_ADC1_Init+0xd4>)
 800070a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800070c:	4b2d      	ldr	r3, [pc, #180]	@ (80007c4 <MX_ADC1_Init+0xd0>)
 800070e:	2200      	movs	r2, #0
 8000710:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000712:	4b2c      	ldr	r3, [pc, #176]	@ (80007c4 <MX_ADC1_Init+0xd0>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000718:	4b2a      	ldr	r3, [pc, #168]	@ (80007c4 <MX_ADC1_Init+0xd0>)
 800071a:	2201      	movs	r2, #1
 800071c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800071e:	4b29      	ldr	r3, [pc, #164]	@ (80007c4 <MX_ADC1_Init+0xd0>)
 8000720:	2201      	movs	r2, #1
 8000722:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000724:	4b27      	ldr	r3, [pc, #156]	@ (80007c4 <MX_ADC1_Init+0xd0>)
 8000726:	2200      	movs	r2, #0
 8000728:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800072c:	4b25      	ldr	r3, [pc, #148]	@ (80007c4 <MX_ADC1_Init+0xd0>)
 800072e:	2200      	movs	r2, #0
 8000730:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000732:	4b24      	ldr	r3, [pc, #144]	@ (80007c4 <MX_ADC1_Init+0xd0>)
 8000734:	4a25      	ldr	r2, [pc, #148]	@ (80007cc <MX_ADC1_Init+0xd8>)
 8000736:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000738:	4b22      	ldr	r3, [pc, #136]	@ (80007c4 <MX_ADC1_Init+0xd0>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800073e:	4b21      	ldr	r3, [pc, #132]	@ (80007c4 <MX_ADC1_Init+0xd0>)
 8000740:	2203      	movs	r2, #3
 8000742:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000744:	4b1f      	ldr	r3, [pc, #124]	@ (80007c4 <MX_ADC1_Init+0xd0>)
 8000746:	2201      	movs	r2, #1
 8000748:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800074c:	4b1d      	ldr	r3, [pc, #116]	@ (80007c4 <MX_ADC1_Init+0xd0>)
 800074e:	2201      	movs	r2, #1
 8000750:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000752:	481c      	ldr	r0, [pc, #112]	@ (80007c4 <MX_ADC1_Init+0xd0>)
 8000754:	f001 f88a 	bl	800186c <HAL_ADC_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800075e:	f000 fb65 	bl	8000e2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000762:	2305      	movs	r3, #5
 8000764:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000766:	2301      	movs	r3, #1
 8000768:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800076a:	2301      	movs	r3, #1
 800076c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800076e:	463b      	mov	r3, r7
 8000770:	4619      	mov	r1, r3
 8000772:	4814      	ldr	r0, [pc, #80]	@ (80007c4 <MX_ADC1_Init+0xd0>)
 8000774:	f001 f9ec 	bl	8001b50 <HAL_ADC_ConfigChannel>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800077e:	f000 fb55 	bl	8000e2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000782:	4b13      	ldr	r3, [pc, #76]	@ (80007d0 <MX_ADC1_Init+0xdc>)
 8000784:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000786:	2302      	movs	r3, #2
 8000788:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800078a:	463b      	mov	r3, r7
 800078c:	4619      	mov	r1, r3
 800078e:	480d      	ldr	r0, [pc, #52]	@ (80007c4 <MX_ADC1_Init+0xd0>)
 8000790:	f001 f9de 	bl	8001b50 <HAL_ADC_ConfigChannel>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800079a:	f000 fb47 	bl	8000e2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800079e:	2311      	movs	r3, #17
 80007a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80007a2:	2303      	movs	r3, #3
 80007a4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a6:	463b      	mov	r3, r7
 80007a8:	4619      	mov	r1, r3
 80007aa:	4806      	ldr	r0, [pc, #24]	@ (80007c4 <MX_ADC1_Init+0xd0>)
 80007ac:	f001 f9d0 	bl	8001b50 <HAL_ADC_ConfigChannel>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80007b6:	f000 fb39 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000034 	.word	0x20000034
 80007c8:	40012000 	.word	0x40012000
 80007cc:	0f000001 	.word	0x0f000001
 80007d0:	10000012 	.word	0x10000012

080007d4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007d8:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <MX_CRC_Init+0x20>)
 80007da:	4a07      	ldr	r2, [pc, #28]	@ (80007f8 <MX_CRC_Init+0x24>)
 80007dc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007de:	4805      	ldr	r0, [pc, #20]	@ (80007f4 <MX_CRC_Init+0x20>)
 80007e0:	f001 fd48 	bl	8002274 <HAL_CRC_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80007ea:	f000 fb1f 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200000dc 	.word	0x200000dc
 80007f8:	40023000 	.word	0x40023000

080007fc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000800:	4b1b      	ldr	r3, [pc, #108]	@ (8000870 <MX_I2C3_Init+0x74>)
 8000802:	4a1c      	ldr	r2, [pc, #112]	@ (8000874 <MX_I2C3_Init+0x78>)
 8000804:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000806:	4b1a      	ldr	r3, [pc, #104]	@ (8000870 <MX_I2C3_Init+0x74>)
 8000808:	4a1b      	ldr	r2, [pc, #108]	@ (8000878 <MX_I2C3_Init+0x7c>)
 800080a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800080c:	4b18      	ldr	r3, [pc, #96]	@ (8000870 <MX_I2C3_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000812:	4b17      	ldr	r3, [pc, #92]	@ (8000870 <MX_I2C3_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000818:	4b15      	ldr	r3, [pc, #84]	@ (8000870 <MX_I2C3_Init+0x74>)
 800081a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800081e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000820:	4b13      	ldr	r3, [pc, #76]	@ (8000870 <MX_I2C3_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000826:	4b12      	ldr	r3, [pc, #72]	@ (8000870 <MX_I2C3_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800082c:	4b10      	ldr	r3, [pc, #64]	@ (8000870 <MX_I2C3_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000832:	4b0f      	ldr	r3, [pc, #60]	@ (8000870 <MX_I2C3_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000838:	480d      	ldr	r0, [pc, #52]	@ (8000870 <MX_I2C3_Init+0x74>)
 800083a:	f002 f8fd 	bl	8002a38 <HAL_I2C_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000844:	f000 faf2 	bl	8000e2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000848:	2100      	movs	r1, #0
 800084a:	4809      	ldr	r0, [pc, #36]	@ (8000870 <MX_I2C3_Init+0x74>)
 800084c:	f002 fa38 	bl	8002cc0 <HAL_I2CEx_ConfigAnalogFilter>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000856:	f000 fae9 	bl	8000e2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800085a:	2100      	movs	r1, #0
 800085c:	4804      	ldr	r0, [pc, #16]	@ (8000870 <MX_I2C3_Init+0x74>)
 800085e:	f002 fa6b 	bl	8002d38 <HAL_I2CEx_ConfigDigitalFilter>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000868:	f000 fae0 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	200000e4 	.word	0x200000e4
 8000874:	40005c00 	.word	0x40005c00
 8000878:	000186a0 	.word	0x000186a0

0800087c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08e      	sub	sp, #56	@ 0x38
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2234      	movs	r2, #52	@ 0x34
 8000886:	2100      	movs	r1, #0
 8000888:	4618      	mov	r0, r3
 800088a:	f004 fd43 	bl	8005314 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800088e:	4b38      	ldr	r3, [pc, #224]	@ (8000970 <MX_LTDC_Init+0xf4>)
 8000890:	4a38      	ldr	r2, [pc, #224]	@ (8000974 <MX_LTDC_Init+0xf8>)
 8000892:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000894:	4b36      	ldr	r3, [pc, #216]	@ (8000970 <MX_LTDC_Init+0xf4>)
 8000896:	2200      	movs	r2, #0
 8000898:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800089a:	4b35      	ldr	r3, [pc, #212]	@ (8000970 <MX_LTDC_Init+0xf4>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80008a0:	4b33      	ldr	r3, [pc, #204]	@ (8000970 <MX_LTDC_Init+0xf4>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80008a6:	4b32      	ldr	r3, [pc, #200]	@ (8000970 <MX_LTDC_Init+0xf4>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80008ac:	4b30      	ldr	r3, [pc, #192]	@ (8000970 <MX_LTDC_Init+0xf4>)
 80008ae:	2207      	movs	r2, #7
 80008b0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80008b2:	4b2f      	ldr	r3, [pc, #188]	@ (8000970 <MX_LTDC_Init+0xf4>)
 80008b4:	2203      	movs	r2, #3
 80008b6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80008b8:	4b2d      	ldr	r3, [pc, #180]	@ (8000970 <MX_LTDC_Init+0xf4>)
 80008ba:	220e      	movs	r2, #14
 80008bc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80008be:	4b2c      	ldr	r3, [pc, #176]	@ (8000970 <MX_LTDC_Init+0xf4>)
 80008c0:	2205      	movs	r2, #5
 80008c2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 334;
 80008c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000970 <MX_LTDC_Init+0xf4>)
 80008c6:	f44f 72a7 	mov.w	r2, #334	@ 0x14e
 80008ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 245;
 80008cc:	4b28      	ldr	r3, [pc, #160]	@ (8000970 <MX_LTDC_Init+0xf4>)
 80008ce:	22f5      	movs	r2, #245	@ 0xf5
 80008d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 340;
 80008d2:	4b27      	ldr	r3, [pc, #156]	@ (8000970 <MX_LTDC_Init+0xf4>)
 80008d4:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 80008d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 247;
 80008da:	4b25      	ldr	r3, [pc, #148]	@ (8000970 <MX_LTDC_Init+0xf4>)
 80008dc:	22f7      	movs	r2, #247	@ 0xf7
 80008de:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80008e0:	4b23      	ldr	r3, [pc, #140]	@ (8000970 <MX_LTDC_Init+0xf4>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80008e8:	4b21      	ldr	r3, [pc, #132]	@ (8000970 <MX_LTDC_Init+0xf4>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80008f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000970 <MX_LTDC_Init+0xf4>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80008f8:	481d      	ldr	r0, [pc, #116]	@ (8000970 <MX_LTDC_Init+0xf4>)
 80008fa:	f002 fa5d 	bl	8002db8 <HAL_LTDC_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_LTDC_Init+0x8c>
  {
    Error_Handler();
 8000904:	f000 fa92 	bl	8000e2c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 320;
 800090c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000910:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 240;
 8000916:	23f0      	movs	r3, #240	@ 0xf0
 8000918:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800091a:	2302      	movs	r3, #2
 800091c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800091e:	23ff      	movs	r3, #255	@ 0xff
 8000920:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000926:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800092a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800092c:	2307      	movs	r3, #7
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 320;
 8000934:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000938:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 240;
 800093a:	23f0      	movs	r3, #240	@ 0xf0
 800093c:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	2200      	movs	r2, #0
 8000954:	4619      	mov	r1, r3
 8000956:	4806      	ldr	r0, [pc, #24]	@ (8000970 <MX_LTDC_Init+0xf4>)
 8000958:	f002 fbc0 	bl	80030dc <HAL_LTDC_ConfigLayer>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_LTDC_Init+0xea>
  {
    Error_Handler();
 8000962:	f000 fa63 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	3738      	adds	r7, #56	@ 0x38
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000138 	.word	0x20000138
 8000974:	40016800 	.word	0x40016800

08000978 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800097c:	4b17      	ldr	r3, [pc, #92]	@ (80009dc <MX_SPI5_Init+0x64>)
 800097e:	4a18      	ldr	r2, [pc, #96]	@ (80009e0 <MX_SPI5_Init+0x68>)
 8000980:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000982:	4b16      	ldr	r3, [pc, #88]	@ (80009dc <MX_SPI5_Init+0x64>)
 8000984:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000988:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800098a:	4b14      	ldr	r3, [pc, #80]	@ (80009dc <MX_SPI5_Init+0x64>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000990:	4b12      	ldr	r3, [pc, #72]	@ (80009dc <MX_SPI5_Init+0x64>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000996:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <MX_SPI5_Init+0x64>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800099c:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <MX_SPI5_Init+0x64>)
 800099e:	2200      	movs	r2, #0
 80009a0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <MX_SPI5_Init+0x64>)
 80009a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009a8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80009aa:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <MX_SPI5_Init+0x64>)
 80009ac:	2218      	movs	r2, #24
 80009ae:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009b0:	4b0a      	ldr	r3, [pc, #40]	@ (80009dc <MX_SPI5_Init+0x64>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80009b6:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <MX_SPI5_Init+0x64>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009bc:	4b07      	ldr	r3, [pc, #28]	@ (80009dc <MX_SPI5_Init+0x64>)
 80009be:	2200      	movs	r2, #0
 80009c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80009c2:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <MX_SPI5_Init+0x64>)
 80009c4:	220a      	movs	r2, #10
 80009c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80009c8:	4804      	ldr	r0, [pc, #16]	@ (80009dc <MX_SPI5_Init+0x64>)
 80009ca:	f003 fc1b 	bl	8004204 <HAL_SPI_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80009d4:	f000 fa2a 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	200001e0 	.word	0x200001e0
 80009e0:	40015000 	.word	0x40015000

080009e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ea:	f107 0308 	add.w	r3, r7, #8
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f8:	463b      	mov	r3, r7
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a00:	4b1e      	ldr	r3, [pc, #120]	@ (8000a7c <MX_TIM1_Init+0x98>)
 8000a02:	4a1f      	ldr	r2, [pc, #124]	@ (8000a80 <MX_TIM1_Init+0x9c>)
 8000a04:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a06:	4b1d      	ldr	r3, [pc, #116]	@ (8000a7c <MX_TIM1_Init+0x98>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a7c <MX_TIM1_Init+0x98>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a12:	4b1a      	ldr	r3, [pc, #104]	@ (8000a7c <MX_TIM1_Init+0x98>)
 8000a14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a18:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a1a:	4b18      	ldr	r3, [pc, #96]	@ (8000a7c <MX_TIM1_Init+0x98>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a20:	4b16      	ldr	r3, [pc, #88]	@ (8000a7c <MX_TIM1_Init+0x98>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a26:	4b15      	ldr	r3, [pc, #84]	@ (8000a7c <MX_TIM1_Init+0x98>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a2c:	4813      	ldr	r0, [pc, #76]	@ (8000a7c <MX_TIM1_Init+0x98>)
 8000a2e:	f003 fc72 	bl	8004316 <HAL_TIM_Base_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000a38:	f000 f9f8 	bl	8000e2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a42:	f107 0308 	add.w	r3, r7, #8
 8000a46:	4619      	mov	r1, r3
 8000a48:	480c      	ldr	r0, [pc, #48]	@ (8000a7c <MX_TIM1_Init+0x98>)
 8000a4a:	f003 fe13 	bl	8004674 <HAL_TIM_ConfigClockSource>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000a54:	f000 f9ea 	bl	8000e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a60:	463b      	mov	r3, r7
 8000a62:	4619      	mov	r1, r3
 8000a64:	4805      	ldr	r0, [pc, #20]	@ (8000a7c <MX_TIM1_Init+0x98>)
 8000a66:	f004 f83b 	bl	8004ae0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a70:	f000 f9dc 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000238 	.word	0x20000238
 8000a80:	40010000 	.word	0x40010000

08000a84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a88:	4b11      	ldr	r3, [pc, #68]	@ (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000a8a:	4a12      	ldr	r2, [pc, #72]	@ (8000ad4 <MX_USART1_UART_Init+0x50>)
 8000a8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a8e:	4b10      	ldr	r3, [pc, #64]	@ (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000a90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aa8:	4b09      	ldr	r3, [pc, #36]	@ (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000aaa:	220c      	movs	r2, #12
 8000aac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aae:	4b08      	ldr	r3, [pc, #32]	@ (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aba:	4805      	ldr	r0, [pc, #20]	@ (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000abc:	f004 f8a0 	bl	8004c00 <HAL_UART_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ac6:	f000 f9b1 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000280 	.word	0x20000280
 8000ad4:	40011000 	.word	0x40011000

08000ad8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	4b09      	ldr	r3, [pc, #36]	@ (8000b08 <MX_DMA_Init+0x30>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	4a08      	ldr	r2, [pc, #32]	@ (8000b08 <MX_DMA_Init+0x30>)
 8000ae8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aee:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <MX_DMA_Init+0x30>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]

}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800

08000b0c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b088      	sub	sp, #32
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
 8000b20:	615a      	str	r2, [r3, #20]
 8000b22:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000b24:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba4 <MX_FMC_Init+0x98>)
 8000b26:	4a20      	ldr	r2, [pc, #128]	@ (8000ba8 <MX_FMC_Init+0x9c>)
 8000b28:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000b2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba4 <MX_FMC_Init+0x98>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b30:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba4 <MX_FMC_Init+0x98>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b36:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba4 <MX_FMC_Init+0x98>)
 8000b38:	2204      	movs	r2, #4
 8000b3a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b3c:	4b19      	ldr	r3, [pc, #100]	@ (8000ba4 <MX_FMC_Init+0x98>)
 8000b3e:	2210      	movs	r2, #16
 8000b40:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b42:	4b18      	ldr	r3, [pc, #96]	@ (8000ba4 <MX_FMC_Init+0x98>)
 8000b44:	2240      	movs	r2, #64	@ 0x40
 8000b46:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000b48:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <MX_FMC_Init+0x98>)
 8000b4a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000b4e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000b50:	4b14      	ldr	r3, [pc, #80]	@ (8000ba4 <MX_FMC_Init+0x98>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000b56:	4b13      	ldr	r3, [pc, #76]	@ (8000ba4 <MX_FMC_Init+0x98>)
 8000b58:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b5c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000b5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ba4 <MX_FMC_Init+0x98>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba4 <MX_FMC_Init+0x98>)
 8000b66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b6a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000b70:	2307      	movs	r3, #7
 8000b72:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000b74:	2304      	movs	r3, #4
 8000b76:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000b78:	2307      	movs	r3, #7
 8000b7a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000b80:	2302      	movs	r3, #2
 8000b82:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000b84:	2302      	movs	r3, #2
 8000b86:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4805      	ldr	r0, [pc, #20]	@ (8000ba4 <MX_FMC_Init+0x98>)
 8000b8e:	f003 fb05 	bl	800419c <HAL_SDRAM_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000b98:	f000 f948 	bl	8000e2c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b9c:	bf00      	nop
 8000b9e:	3720      	adds	r7, #32
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	200002c8 	.word	0x200002c8
 8000ba8:	a0000140 	.word	0xa0000140

08000bac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08e      	sub	sp, #56	@ 0x38
 8000bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
 8000bc0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	623b      	str	r3, [r7, #32]
 8000bc6:	4b8a      	ldr	r3, [pc, #552]	@ (8000df0 <MX_GPIO_Init+0x244>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	4a89      	ldr	r2, [pc, #548]	@ (8000df0 <MX_GPIO_Init+0x244>)
 8000bcc:	f043 0304 	orr.w	r3, r3, #4
 8000bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd2:	4b87      	ldr	r3, [pc, #540]	@ (8000df0 <MX_GPIO_Init+0x244>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	f003 0304 	and.w	r3, r3, #4
 8000bda:	623b      	str	r3, [r7, #32]
 8000bdc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
 8000be2:	4b83      	ldr	r3, [pc, #524]	@ (8000df0 <MX_GPIO_Init+0x244>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	4a82      	ldr	r2, [pc, #520]	@ (8000df0 <MX_GPIO_Init+0x244>)
 8000be8:	f043 0320 	orr.w	r3, r3, #32
 8000bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bee:	4b80      	ldr	r3, [pc, #512]	@ (8000df0 <MX_GPIO_Init+0x244>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	f003 0320 	and.w	r3, r3, #32
 8000bf6:	61fb      	str	r3, [r7, #28]
 8000bf8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61bb      	str	r3, [r7, #24]
 8000bfe:	4b7c      	ldr	r3, [pc, #496]	@ (8000df0 <MX_GPIO_Init+0x244>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	4a7b      	ldr	r2, [pc, #492]	@ (8000df0 <MX_GPIO_Init+0x244>)
 8000c04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0a:	4b79      	ldr	r3, [pc, #484]	@ (8000df0 <MX_GPIO_Init+0x244>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c12:	61bb      	str	r3, [r7, #24]
 8000c14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	4b75      	ldr	r3, [pc, #468]	@ (8000df0 <MX_GPIO_Init+0x244>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	4a74      	ldr	r2, [pc, #464]	@ (8000df0 <MX_GPIO_Init+0x244>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c26:	4b72      	ldr	r3, [pc, #456]	@ (8000df0 <MX_GPIO_Init+0x244>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	4b6e      	ldr	r3, [pc, #440]	@ (8000df0 <MX_GPIO_Init+0x244>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	4a6d      	ldr	r2, [pc, #436]	@ (8000df0 <MX_GPIO_Init+0x244>)
 8000c3c:	f043 0302 	orr.w	r3, r3, #2
 8000c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c42:	4b6b      	ldr	r3, [pc, #428]	@ (8000df0 <MX_GPIO_Init+0x244>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b67      	ldr	r3, [pc, #412]	@ (8000df0 <MX_GPIO_Init+0x244>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	4a66      	ldr	r2, [pc, #408]	@ (8000df0 <MX_GPIO_Init+0x244>)
 8000c58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5e:	4b64      	ldr	r3, [pc, #400]	@ (8000df0 <MX_GPIO_Init+0x244>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	4b60      	ldr	r3, [pc, #384]	@ (8000df0 <MX_GPIO_Init+0x244>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	4a5f      	ldr	r2, [pc, #380]	@ (8000df0 <MX_GPIO_Init+0x244>)
 8000c74:	f043 0310 	orr.w	r3, r3, #16
 8000c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7a:	4b5d      	ldr	r3, [pc, #372]	@ (8000df0 <MX_GPIO_Init+0x244>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	f003 0310 	and.w	r3, r3, #16
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	4b59      	ldr	r3, [pc, #356]	@ (8000df0 <MX_GPIO_Init+0x244>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	4a58      	ldr	r2, [pc, #352]	@ (8000df0 <MX_GPIO_Init+0x244>)
 8000c90:	f043 0308 	orr.w	r3, r3, #8
 8000c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c96:	4b56      	ldr	r3, [pc, #344]	@ (8000df0 <MX_GPIO_Init+0x244>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	f003 0308 	and.w	r3, r3, #8
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2116      	movs	r1, #22
 8000ca6:	4853      	ldr	r0, [pc, #332]	@ (8000df4 <MX_GPIO_Init+0x248>)
 8000ca8:	f001 fe92 	bl	80029d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2180      	movs	r1, #128	@ 0x80
 8000cb0:	4851      	ldr	r0, [pc, #324]	@ (8000df8 <MX_GPIO_Init+0x24c>)
 8000cb2:	f001 fe8d 	bl	80029d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000cbc:	484f      	ldr	r0, [pc, #316]	@ (8000dfc <MX_GPIO_Init+0x250>)
 8000cbe:	f001 fe87 	bl	80029d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000cc8:	484d      	ldr	r0, [pc, #308]	@ (8000e00 <MX_GPIO_Init+0x254>)
 8000cca:	f001 fe81 	bl	80029d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000cce:	2316      	movs	r3, #22
 8000cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4843      	ldr	r0, [pc, #268]	@ (8000df4 <MX_GPIO_Init+0x248>)
 8000ce6:	f001 fcc7 	bl	8002678 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000cea:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000cee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cf0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cfe:	4619      	mov	r1, r3
 8000d00:	483d      	ldr	r0, [pc, #244]	@ (8000df8 <MX_GPIO_Init+0x24c>)
 8000d02:	f001 fcb9 	bl	8002678 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000d06:	2380      	movs	r3, #128	@ 0x80
 8000d08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000d16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4836      	ldr	r0, [pc, #216]	@ (8000df8 <MX_GPIO_Init+0x24c>)
 8000d1e:	f001 fcab 	bl	8002678 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000d22:	2320      	movs	r3, #32
 8000d24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d26:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d34:	4619      	mov	r1, r3
 8000d36:	482f      	ldr	r0, [pc, #188]	@ (8000df4 <MX_GPIO_Init+0x248>)
 8000d38:	f001 fc9e 	bl	8002678 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d3c:	2304      	movs	r3, #4
 8000d3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	482d      	ldr	r0, [pc, #180]	@ (8000e04 <MX_GPIO_Init+0x258>)
 8000d50:	f001 fc92 	bl	8002678 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000d54:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8000d58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000d66:	230c      	movs	r3, #12
 8000d68:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4824      	ldr	r0, [pc, #144]	@ (8000e04 <MX_GPIO_Init+0x258>)
 8000d72:	f001 fc81 	bl	8002678 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000d76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000d84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d88:	4619      	mov	r1, r3
 8000d8a:	481e      	ldr	r0, [pc, #120]	@ (8000e04 <MX_GPIO_Init+0x258>)
 8000d8c:	f001 fc74 	bl	8002678 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000d90:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000d9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000da2:	4619      	mov	r1, r3
 8000da4:	4815      	ldr	r0, [pc, #84]	@ (8000dfc <MX_GPIO_Init+0x250>)
 8000da6:	f001 fc67 	bl	8002678 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000daa:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000dae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2300      	movs	r3, #0
 8000dba:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	480e      	ldr	r0, [pc, #56]	@ (8000dfc <MX_GPIO_Init+0x250>)
 8000dc4:	f001 fc58 	bl	8002678 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000dc8:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dde:	4619      	mov	r1, r3
 8000de0:	4807      	ldr	r0, [pc, #28]	@ (8000e00 <MX_GPIO_Init+0x254>)
 8000de2:	f001 fc49 	bl	8002678 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000de6:	bf00      	nop
 8000de8:	3738      	adds	r7, #56	@ 0x38
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40020800 	.word	0x40020800
 8000df8:	40020000 	.word	0x40020000
 8000dfc:	40020c00 	.word	0x40020c00
 8000e00:	40021800 	.word	0x40021800
 8000e04:	40020400 	.word	0x40020400

08000e08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a04      	ldr	r2, [pc, #16]	@ (8000e28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d101      	bne.n	8000e1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e1a:	f000 fd07 	bl	800182c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40001000 	.word	0x40001000

08000e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e30:	b672      	cpsid	i
}
 8000e32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <Error_Handler+0x8>

08000e38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	4b10      	ldr	r3, [pc, #64]	@ (8000e84 <HAL_MspInit+0x4c>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e46:	4a0f      	ldr	r2, [pc, #60]	@ (8000e84 <HAL_MspInit+0x4c>)
 8000e48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e84 <HAL_MspInit+0x4c>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	603b      	str	r3, [r7, #0]
 8000e5e:	4b09      	ldr	r3, [pc, #36]	@ (8000e84 <HAL_MspInit+0x4c>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e62:	4a08      	ldr	r2, [pc, #32]	@ (8000e84 <HAL_MspInit+0x4c>)
 8000e64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e6a:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <HAL_MspInit+0x4c>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e72:	603b      	str	r3, [r7, #0]
 8000e74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	40023800 	.word	0x40023800

08000e88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	@ 0x28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a2f      	ldr	r2, [pc, #188]	@ (8000f64 <HAL_ADC_MspInit+0xdc>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d157      	bne.n	8000f5a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	4b2e      	ldr	r3, [pc, #184]	@ (8000f68 <HAL_ADC_MspInit+0xe0>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb2:	4a2d      	ldr	r2, [pc, #180]	@ (8000f68 <HAL_ADC_MspInit+0xe0>)
 8000eb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eba:	4b2b      	ldr	r3, [pc, #172]	@ (8000f68 <HAL_ADC_MspInit+0xe0>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	4b27      	ldr	r3, [pc, #156]	@ (8000f68 <HAL_ADC_MspInit+0xe0>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	4a26      	ldr	r2, [pc, #152]	@ (8000f68 <HAL_ADC_MspInit+0xe0>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed6:	4b24      	ldr	r3, [pc, #144]	@ (8000f68 <HAL_ADC_MspInit+0xe0>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ee2:	2320      	movs	r3, #32
 8000ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	481d      	ldr	r0, [pc, #116]	@ (8000f6c <HAL_ADC_MspInit+0xe4>)
 8000ef6:	f001 fbbf 	bl	8002678 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000efa:	4b1d      	ldr	r3, [pc, #116]	@ (8000f70 <HAL_ADC_MspInit+0xe8>)
 8000efc:	4a1d      	ldr	r2, [pc, #116]	@ (8000f74 <HAL_ADC_MspInit+0xec>)
 8000efe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f00:	4b1b      	ldr	r3, [pc, #108]	@ (8000f70 <HAL_ADC_MspInit+0xe8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f06:	4b1a      	ldr	r3, [pc, #104]	@ (8000f70 <HAL_ADC_MspInit+0xe8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f0c:	4b18      	ldr	r3, [pc, #96]	@ (8000f70 <HAL_ADC_MspInit+0xe8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f12:	4b17      	ldr	r3, [pc, #92]	@ (8000f70 <HAL_ADC_MspInit+0xe8>)
 8000f14:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f18:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f1a:	4b15      	ldr	r3, [pc, #84]	@ (8000f70 <HAL_ADC_MspInit+0xe8>)
 8000f1c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f20:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f22:	4b13      	ldr	r3, [pc, #76]	@ (8000f70 <HAL_ADC_MspInit+0xe8>)
 8000f24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f28:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f2a:	4b11      	ldr	r3, [pc, #68]	@ (8000f70 <HAL_ADC_MspInit+0xe8>)
 8000f2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f30:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f32:	4b0f      	ldr	r3, [pc, #60]	@ (8000f70 <HAL_ADC_MspInit+0xe8>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f38:	4b0d      	ldr	r3, [pc, #52]	@ (8000f70 <HAL_ADC_MspInit+0xe8>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f3e:	480c      	ldr	r0, [pc, #48]	@ (8000f70 <HAL_ADC_MspInit+0xe8>)
 8000f40:	f001 f9b4 	bl	80022ac <HAL_DMA_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000f4a:	f7ff ff6f 	bl	8000e2c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a07      	ldr	r2, [pc, #28]	@ (8000f70 <HAL_ADC_MspInit+0xe8>)
 8000f52:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f54:	4a06      	ldr	r2, [pc, #24]	@ (8000f70 <HAL_ADC_MspInit+0xe8>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000f5a:	bf00      	nop
 8000f5c:	3728      	adds	r7, #40	@ 0x28
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40012000 	.word	0x40012000
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020000 	.word	0x40020000
 8000f70:	2000007c 	.word	0x2000007c
 8000f74:	40026410 	.word	0x40026410

08000f78 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0b      	ldr	r2, [pc, #44]	@ (8000fb4 <HAL_CRC_MspInit+0x3c>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d10d      	bne.n	8000fa6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb8 <HAL_CRC_MspInit+0x40>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	4a09      	ldr	r2, [pc, #36]	@ (8000fb8 <HAL_CRC_MspInit+0x40>)
 8000f94:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9a:	4b07      	ldr	r3, [pc, #28]	@ (8000fb8 <HAL_CRC_MspInit+0x40>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000fa6:	bf00      	nop
 8000fa8:	3714      	adds	r7, #20
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	40023000 	.word	0x40023000
 8000fb8:	40023800 	.word	0x40023800

08000fbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	@ 0x28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a29      	ldr	r2, [pc, #164]	@ (8001080 <HAL_I2C_MspInit+0xc4>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d14b      	bne.n	8001076 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	4b28      	ldr	r3, [pc, #160]	@ (8001084 <HAL_I2C_MspInit+0xc8>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	4a27      	ldr	r2, [pc, #156]	@ (8001084 <HAL_I2C_MspInit+0xc8>)
 8000fe8:	f043 0304 	orr.w	r3, r3, #4
 8000fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fee:	4b25      	ldr	r3, [pc, #148]	@ (8001084 <HAL_I2C_MspInit+0xc8>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	f003 0304 	and.w	r3, r3, #4
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	4b21      	ldr	r3, [pc, #132]	@ (8001084 <HAL_I2C_MspInit+0xc8>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	4a20      	ldr	r2, [pc, #128]	@ (8001084 <HAL_I2C_MspInit+0xc8>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6313      	str	r3, [r2, #48]	@ 0x30
 800100a:	4b1e      	ldr	r3, [pc, #120]	@ (8001084 <HAL_I2C_MspInit+0xc8>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001016:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800101a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800101c:	2312      	movs	r3, #18
 800101e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001020:	2301      	movs	r3, #1
 8001022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001028:	2304      	movs	r3, #4
 800102a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4619      	mov	r1, r3
 8001032:	4815      	ldr	r0, [pc, #84]	@ (8001088 <HAL_I2C_MspInit+0xcc>)
 8001034:	f001 fb20 	bl	8002678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001038:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800103c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800103e:	2312      	movs	r3, #18
 8001040:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001042:	2301      	movs	r3, #1
 8001044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800104a:	2304      	movs	r3, #4
 800104c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	4619      	mov	r1, r3
 8001054:	480d      	ldr	r0, [pc, #52]	@ (800108c <HAL_I2C_MspInit+0xd0>)
 8001056:	f001 fb0f 	bl	8002678 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	4b09      	ldr	r3, [pc, #36]	@ (8001084 <HAL_I2C_MspInit+0xc8>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001062:	4a08      	ldr	r2, [pc, #32]	@ (8001084 <HAL_I2C_MspInit+0xc8>)
 8001064:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001068:	6413      	str	r3, [r2, #64]	@ 0x40
 800106a:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <HAL_I2C_MspInit+0xc8>)
 800106c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001076:	bf00      	nop
 8001078:	3728      	adds	r7, #40	@ 0x28
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40005c00 	.word	0x40005c00
 8001084:	40023800 	.word	0x40023800
 8001088:	40020800 	.word	0x40020800
 800108c:	40020000 	.word	0x40020000

08001090 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b09a      	sub	sp, #104	@ 0x68
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ac:	2230      	movs	r2, #48	@ 0x30
 80010ae:	2100      	movs	r1, #0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f004 f92f 	bl	8005314 <memset>
  if(hltdc->Instance==LTDC)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a99      	ldr	r2, [pc, #612]	@ (8001320 <HAL_LTDC_MspInit+0x290>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	f040 812a 	bne.w	8001316 <HAL_LTDC_MspInit+0x286>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80010c2:	2308      	movs	r3, #8
 80010c4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80010c6:	2332      	movs	r3, #50	@ 0x32
 80010c8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80010ca:	2302      	movs	r3, #2
 80010cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80010ce:	2300      	movs	r3, #0
 80010d0:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010d6:	4618      	mov	r0, r3
 80010d8:	f002 fea0 	bl	8003e1c <HAL_RCCEx_PeriphCLKConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80010e2:	f7ff fea3 	bl	8000e2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	623b      	str	r3, [r7, #32]
 80010ea:	4b8e      	ldr	r3, [pc, #568]	@ (8001324 <HAL_LTDC_MspInit+0x294>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ee:	4a8d      	ldr	r2, [pc, #564]	@ (8001324 <HAL_LTDC_MspInit+0x294>)
 80010f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80010f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010f6:	4b8b      	ldr	r3, [pc, #556]	@ (8001324 <HAL_LTDC_MspInit+0x294>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80010fe:	623b      	str	r3, [r7, #32]
 8001100:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
 8001106:	4b87      	ldr	r3, [pc, #540]	@ (8001324 <HAL_LTDC_MspInit+0x294>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	4a86      	ldr	r2, [pc, #536]	@ (8001324 <HAL_LTDC_MspInit+0x294>)
 800110c:	f043 0320 	orr.w	r3, r3, #32
 8001110:	6313      	str	r3, [r2, #48]	@ 0x30
 8001112:	4b84      	ldr	r3, [pc, #528]	@ (8001324 <HAL_LTDC_MspInit+0x294>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	f003 0320 	and.w	r3, r3, #32
 800111a:	61fb      	str	r3, [r7, #28]
 800111c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	61bb      	str	r3, [r7, #24]
 8001122:	4b80      	ldr	r3, [pc, #512]	@ (8001324 <HAL_LTDC_MspInit+0x294>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	4a7f      	ldr	r2, [pc, #508]	@ (8001324 <HAL_LTDC_MspInit+0x294>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	6313      	str	r3, [r2, #48]	@ 0x30
 800112e:	4b7d      	ldr	r3, [pc, #500]	@ (8001324 <HAL_LTDC_MspInit+0x294>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	61bb      	str	r3, [r7, #24]
 8001138:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
 800113e:	4b79      	ldr	r3, [pc, #484]	@ (8001324 <HAL_LTDC_MspInit+0x294>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	4a78      	ldr	r2, [pc, #480]	@ (8001324 <HAL_LTDC_MspInit+0x294>)
 8001144:	f043 0302 	orr.w	r3, r3, #2
 8001148:	6313      	str	r3, [r2, #48]	@ 0x30
 800114a:	4b76      	ldr	r3, [pc, #472]	@ (8001324 <HAL_LTDC_MspInit+0x294>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	4b72      	ldr	r3, [pc, #456]	@ (8001324 <HAL_LTDC_MspInit+0x294>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	4a71      	ldr	r2, [pc, #452]	@ (8001324 <HAL_LTDC_MspInit+0x294>)
 8001160:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001164:	6313      	str	r3, [r2, #48]	@ 0x30
 8001166:	4b6f      	ldr	r3, [pc, #444]	@ (8001324 <HAL_LTDC_MspInit+0x294>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	4b6b      	ldr	r3, [pc, #428]	@ (8001324 <HAL_LTDC_MspInit+0x294>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	4a6a      	ldr	r2, [pc, #424]	@ (8001324 <HAL_LTDC_MspInit+0x294>)
 800117c:	f043 0304 	orr.w	r3, r3, #4
 8001180:	6313      	str	r3, [r2, #48]	@ 0x30
 8001182:	4b68      	ldr	r3, [pc, #416]	@ (8001324 <HAL_LTDC_MspInit+0x294>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	f003 0304 	and.w	r3, r3, #4
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	4b64      	ldr	r3, [pc, #400]	@ (8001324 <HAL_LTDC_MspInit+0x294>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a63      	ldr	r2, [pc, #396]	@ (8001324 <HAL_LTDC_MspInit+0x294>)
 8001198:	f043 0308 	orr.w	r3, r3, #8
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b61      	ldr	r3, [pc, #388]	@ (8001324 <HAL_LTDC_MspInit+0x294>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f003 0308 	and.w	r3, r3, #8
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80011aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011ae:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011b8:	2302      	movs	r3, #2
 80011ba:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011bc:	230e      	movs	r3, #14
 80011be:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80011c0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011c4:	4619      	mov	r1, r3
 80011c6:	4858      	ldr	r0, [pc, #352]	@ (8001328 <HAL_LTDC_MspInit+0x298>)
 80011c8:	f001 fa56 	bl	8002678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80011cc:	f641 0358 	movw	r3, #6232	@ 0x1858
 80011d0:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011da:	2302      	movs	r3, #2
 80011dc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011de:	230e      	movs	r3, #14
 80011e0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011e6:	4619      	mov	r1, r3
 80011e8:	4850      	ldr	r0, [pc, #320]	@ (800132c <HAL_LTDC_MspInit+0x29c>)
 80011ea:	f001 fa45 	bl	8002678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80011ee:	2303      	movs	r3, #3
 80011f0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f2:	2302      	movs	r3, #2
 80011f4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011fa:	2302      	movs	r3, #2
 80011fc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80011fe:	2309      	movs	r3, #9
 8001200:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001202:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001206:	4619      	mov	r1, r3
 8001208:	4849      	ldr	r0, [pc, #292]	@ (8001330 <HAL_LTDC_MspInit+0x2a0>)
 800120a:	f001 fa35 	bl	8002678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800120e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001212:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800121c:	2302      	movs	r3, #2
 800121e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001220:	230e      	movs	r3, #14
 8001222:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001224:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001228:	4619      	mov	r1, r3
 800122a:	4841      	ldr	r0, [pc, #260]	@ (8001330 <HAL_LTDC_MspInit+0x2a0>)
 800122c:	f001 fa24 	bl	8002678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001230:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001234:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800123e:	2302      	movs	r3, #2
 8001240:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001242:	230e      	movs	r3, #14
 8001244:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001246:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800124a:	4619      	mov	r1, r3
 800124c:	4839      	ldr	r0, [pc, #228]	@ (8001334 <HAL_LTDC_MspInit+0x2a4>)
 800124e:	f001 fa13 	bl	8002678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin;
 8001252:	23c0      	movs	r3, #192	@ 0xc0
 8001254:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	2302      	movs	r3, #2
 8001258:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800125e:	2302      	movs	r3, #2
 8001260:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001262:	230e      	movs	r3, #14
 8001264:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001266:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800126a:	4619      	mov	r1, r3
 800126c:	4832      	ldr	r0, [pc, #200]	@ (8001338 <HAL_LTDC_MspInit+0x2a8>)
 800126e:	f001 fa03 	bl	8002678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R2_Pin;
 8001272:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001276:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001278:	2302      	movs	r3, #2
 800127a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001280:	2300      	movs	r3, #0
 8001282:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001284:	230e      	movs	r3, #14
 8001286:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(R2_GPIO_Port, &GPIO_InitStruct);
 8001288:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800128c:	4619      	mov	r1, r3
 800128e:	482a      	ldr	r0, [pc, #168]	@ (8001338 <HAL_LTDC_MspInit+0x2a8>)
 8001290:	f001 f9f2 	bl	8002678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin;
 8001294:	2308      	movs	r3, #8
 8001296:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001298:	2302      	movs	r3, #2
 800129a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a0:	2302      	movs	r3, #2
 80012a2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012a4:	230e      	movs	r3, #14
 80012a6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(G7_GPIO_Port, &GPIO_InitStruct);
 80012a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012ac:	4619      	mov	r1, r3
 80012ae:	4823      	ldr	r0, [pc, #140]	@ (800133c <HAL_LTDC_MspInit+0x2ac>)
 80012b0:	f001 f9e2 	bl	8002678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B2_Pin;
 80012b4:	2340      	movs	r3, #64	@ 0x40
 80012b6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2300      	movs	r3, #0
 80012c2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012c4:	230e      	movs	r3, #14
 80012c6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 80012c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012cc:	4619      	mov	r1, r3
 80012ce:	481b      	ldr	r0, [pc, #108]	@ (800133c <HAL_LTDC_MspInit+0x2ac>)
 80012d0:	f001 f9d2 	bl	8002678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80012d4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012d8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012e2:	2302      	movs	r3, #2
 80012e4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80012e6:	2309      	movs	r3, #9
 80012e8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012ea:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012ee:	4619      	mov	r1, r3
 80012f0:	4810      	ldr	r0, [pc, #64]	@ (8001334 <HAL_LTDC_MspInit+0x2a4>)
 80012f2:	f001 f9c1 	bl	8002678 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	2058      	movs	r0, #88	@ 0x58
 80012fc:	f000 ff90 	bl	8002220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001300:	2058      	movs	r0, #88	@ 0x58
 8001302:	f000 ffa9 	bl	8002258 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	2100      	movs	r1, #0
 800130a:	2059      	movs	r0, #89	@ 0x59
 800130c:	f000 ff88 	bl	8002220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 8001310:	2059      	movs	r0, #89	@ 0x59
 8001312:	f000 ffa1 	bl	8002258 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001316:	bf00      	nop
 8001318:	3768      	adds	r7, #104	@ 0x68
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40016800 	.word	0x40016800
 8001324:	40023800 	.word	0x40023800
 8001328:	40021400 	.word	0x40021400
 800132c:	40020000 	.word	0x40020000
 8001330:	40020400 	.word	0x40020400
 8001334:	40021800 	.word	0x40021800
 8001338:	40020800 	.word	0x40020800
 800133c:	40020c00 	.word	0x40020c00

08001340 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	@ 0x28
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a19      	ldr	r2, [pc, #100]	@ (80013c4 <HAL_SPI_MspInit+0x84>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d12c      	bne.n	80013bc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	4b18      	ldr	r3, [pc, #96]	@ (80013c8 <HAL_SPI_MspInit+0x88>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136a:	4a17      	ldr	r2, [pc, #92]	@ (80013c8 <HAL_SPI_MspInit+0x88>)
 800136c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001370:	6453      	str	r3, [r2, #68]	@ 0x44
 8001372:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <HAL_SPI_MspInit+0x88>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001376:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b11      	ldr	r3, [pc, #68]	@ (80013c8 <HAL_SPI_MspInit+0x88>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	4a10      	ldr	r2, [pc, #64]	@ (80013c8 <HAL_SPI_MspInit+0x88>)
 8001388:	f043 0320 	orr.w	r3, r3, #32
 800138c:	6313      	str	r3, [r2, #48]	@ 0x30
 800138e:	4b0e      	ldr	r3, [pc, #56]	@ (80013c8 <HAL_SPI_MspInit+0x88>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	f003 0320 	and.w	r3, r3, #32
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800139a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800139e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a0:	2302      	movs	r3, #2
 80013a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a8:	2300      	movs	r3, #0
 80013aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80013ac:	2305      	movs	r3, #5
 80013ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	4619      	mov	r1, r3
 80013b6:	4805      	ldr	r0, [pc, #20]	@ (80013cc <HAL_SPI_MspInit+0x8c>)
 80013b8:	f001 f95e 	bl	8002678 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80013bc:	bf00      	nop
 80013be:	3728      	adds	r7, #40	@ 0x28
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40015000 	.word	0x40015000
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40021400 	.word	0x40021400

080013d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a0b      	ldr	r2, [pc, #44]	@ (800140c <HAL_TIM_Base_MspInit+0x3c>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d10d      	bne.n	80013fe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001410 <HAL_TIM_Base_MspInit+0x40>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ea:	4a09      	ldr	r2, [pc, #36]	@ (8001410 <HAL_TIM_Base_MspInit+0x40>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013f2:	4b07      	ldr	r3, [pc, #28]	@ (8001410 <HAL_TIM_Base_MspInit+0x40>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80013fe:	bf00      	nop
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40010000 	.word	0x40010000
 8001410:	40023800 	.word	0x40023800

08001414 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	@ 0x28
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a19      	ldr	r2, [pc, #100]	@ (8001498 <HAL_UART_MspInit+0x84>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d12c      	bne.n	8001490 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	4b18      	ldr	r3, [pc, #96]	@ (800149c <HAL_UART_MspInit+0x88>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143e:	4a17      	ldr	r2, [pc, #92]	@ (800149c <HAL_UART_MspInit+0x88>)
 8001440:	f043 0310 	orr.w	r3, r3, #16
 8001444:	6453      	str	r3, [r2, #68]	@ 0x44
 8001446:	4b15      	ldr	r3, [pc, #84]	@ (800149c <HAL_UART_MspInit+0x88>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	4b11      	ldr	r3, [pc, #68]	@ (800149c <HAL_UART_MspInit+0x88>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	4a10      	ldr	r2, [pc, #64]	@ (800149c <HAL_UART_MspInit+0x88>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6313      	str	r3, [r2, #48]	@ 0x30
 8001462:	4b0e      	ldr	r3, [pc, #56]	@ (800149c <HAL_UART_MspInit+0x88>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800146e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001474:	2302      	movs	r3, #2
 8001476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147c:	2303      	movs	r3, #3
 800147e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001480:	2307      	movs	r3, #7
 8001482:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	4619      	mov	r1, r3
 800148a:	4805      	ldr	r0, [pc, #20]	@ (80014a0 <HAL_UART_MspInit+0x8c>)
 800148c:	f001 f8f4 	bl	8002678 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001490:	bf00      	nop
 8001492:	3728      	adds	r7, #40	@ 0x28
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40011000 	.word	0x40011000
 800149c:	40023800 	.word	0x40023800
 80014a0:	40020000 	.word	0x40020000

080014a4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80014b8:	4b3b      	ldr	r3, [pc, #236]	@ (80015a8 <HAL_FMC_MspInit+0x104>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d16f      	bne.n	80015a0 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80014c0:	4b39      	ldr	r3, [pc, #228]	@ (80015a8 <HAL_FMC_MspInit+0x104>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	603b      	str	r3, [r7, #0]
 80014ca:	4b38      	ldr	r3, [pc, #224]	@ (80015ac <HAL_FMC_MspInit+0x108>)
 80014cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014ce:	4a37      	ldr	r2, [pc, #220]	@ (80015ac <HAL_FMC_MspInit+0x108>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	6393      	str	r3, [r2, #56]	@ 0x38
 80014d6:	4b35      	ldr	r3, [pc, #212]	@ (80015ac <HAL_FMC_MspInit+0x108>)
 80014d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80014e2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80014e6:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f0:	2303      	movs	r3, #3
 80014f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014f4:	230c      	movs	r3, #12
 80014f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	4619      	mov	r1, r3
 80014fc:	482c      	ldr	r0, [pc, #176]	@ (80015b0 <HAL_FMC_MspInit+0x10c>)
 80014fe:	f001 f8bb 	bl	8002678 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001502:	2301      	movs	r3, #1
 8001504:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150e:	2303      	movs	r3, #3
 8001510:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001512:	230c      	movs	r3, #12
 8001514:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	4619      	mov	r1, r3
 800151a:	4826      	ldr	r0, [pc, #152]	@ (80015b4 <HAL_FMC_MspInit+0x110>)
 800151c:	f001 f8ac 	bl	8002678 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001520:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001524:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	2302      	movs	r3, #2
 8001528:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152e:	2303      	movs	r3, #3
 8001530:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001532:	230c      	movs	r3, #12
 8001534:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	4619      	mov	r1, r3
 800153a:	481f      	ldr	r0, [pc, #124]	@ (80015b8 <HAL_FMC_MspInit+0x114>)
 800153c:	f001 f89c 	bl	8002678 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001540:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001544:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154e:	2303      	movs	r3, #3
 8001550:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001552:	230c      	movs	r3, #12
 8001554:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	4619      	mov	r1, r3
 800155a:	4818      	ldr	r0, [pc, #96]	@ (80015bc <HAL_FMC_MspInit+0x118>)
 800155c:	f001 f88c 	bl	8002678 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001560:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001564:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001566:	2302      	movs	r3, #2
 8001568:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156e:	2303      	movs	r3, #3
 8001570:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001572:	230c      	movs	r3, #12
 8001574:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	4619      	mov	r1, r3
 800157a:	4811      	ldr	r0, [pc, #68]	@ (80015c0 <HAL_FMC_MspInit+0x11c>)
 800157c:	f001 f87c 	bl	8002678 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001580:	2360      	movs	r3, #96	@ 0x60
 8001582:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001584:	2302      	movs	r3, #2
 8001586:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158c:	2303      	movs	r3, #3
 800158e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001590:	230c      	movs	r3, #12
 8001592:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	4619      	mov	r1, r3
 8001598:	480a      	ldr	r0, [pc, #40]	@ (80015c4 <HAL_FMC_MspInit+0x120>)
 800159a:	f001 f86d 	bl	8002678 <HAL_GPIO_Init>
 800159e:	e000      	b.n	80015a2 <HAL_FMC_MspInit+0xfe>
    return;
 80015a0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	200002fc 	.word	0x200002fc
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40021400 	.word	0x40021400
 80015b4:	40020800 	.word	0x40020800
 80015b8:	40021800 	.word	0x40021800
 80015bc:	40021000 	.word	0x40021000
 80015c0:	40020c00 	.word	0x40020c00
 80015c4:	40020400 	.word	0x40020400

080015c8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80015d0:	f7ff ff68 	bl	80014a4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08e      	sub	sp, #56	@ 0x38
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	4b33      	ldr	r3, [pc, #204]	@ (80016c0 <HAL_InitTick+0xe4>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f4:	4a32      	ldr	r2, [pc, #200]	@ (80016c0 <HAL_InitTick+0xe4>)
 80015f6:	f043 0310 	orr.w	r3, r3, #16
 80015fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80015fc:	4b30      	ldr	r3, [pc, #192]	@ (80016c0 <HAL_InitTick+0xe4>)
 80015fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001600:	f003 0310 	and.w	r3, r3, #16
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001608:	f107 0210 	add.w	r2, r7, #16
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4611      	mov	r1, r2
 8001612:	4618      	mov	r0, r3
 8001614:	f002 fbd0 	bl	8003db8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001618:	6a3b      	ldr	r3, [r7, #32]
 800161a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800161c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800161e:	2b00      	cmp	r3, #0
 8001620:	d103      	bne.n	800162a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001622:	f002 fba1 	bl	8003d68 <HAL_RCC_GetPCLK1Freq>
 8001626:	6378      	str	r0, [r7, #52]	@ 0x34
 8001628:	e004      	b.n	8001634 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800162a:	f002 fb9d 	bl	8003d68 <HAL_RCC_GetPCLK1Freq>
 800162e:	4603      	mov	r3, r0
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001636:	4a23      	ldr	r2, [pc, #140]	@ (80016c4 <HAL_InitTick+0xe8>)
 8001638:	fba2 2303 	umull	r2, r3, r2, r3
 800163c:	0c9b      	lsrs	r3, r3, #18
 800163e:	3b01      	subs	r3, #1
 8001640:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001642:	4b21      	ldr	r3, [pc, #132]	@ (80016c8 <HAL_InitTick+0xec>)
 8001644:	4a21      	ldr	r2, [pc, #132]	@ (80016cc <HAL_InitTick+0xf0>)
 8001646:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001648:	4b1f      	ldr	r3, [pc, #124]	@ (80016c8 <HAL_InitTick+0xec>)
 800164a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800164e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001650:	4a1d      	ldr	r2, [pc, #116]	@ (80016c8 <HAL_InitTick+0xec>)
 8001652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001654:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001656:	4b1c      	ldr	r3, [pc, #112]	@ (80016c8 <HAL_InitTick+0xec>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165c:	4b1a      	ldr	r3, [pc, #104]	@ (80016c8 <HAL_InitTick+0xec>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001662:	4b19      	ldr	r3, [pc, #100]	@ (80016c8 <HAL_InitTick+0xec>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001668:	4817      	ldr	r0, [pc, #92]	@ (80016c8 <HAL_InitTick+0xec>)
 800166a:	f002 fe54 	bl	8004316 <HAL_TIM_Base_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001674:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001678:	2b00      	cmp	r3, #0
 800167a:	d11b      	bne.n	80016b4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800167c:	4812      	ldr	r0, [pc, #72]	@ (80016c8 <HAL_InitTick+0xec>)
 800167e:	f002 fe99 	bl	80043b4 <HAL_TIM_Base_Start_IT>
 8001682:	4603      	mov	r3, r0
 8001684:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001688:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800168c:	2b00      	cmp	r3, #0
 800168e:	d111      	bne.n	80016b4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001690:	2036      	movs	r0, #54	@ 0x36
 8001692:	f000 fde1 	bl	8002258 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b0f      	cmp	r3, #15
 800169a:	d808      	bhi.n	80016ae <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800169c:	2200      	movs	r2, #0
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	2036      	movs	r0, #54	@ 0x36
 80016a2:	f000 fdbd 	bl	8002220 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016a6:	4a0a      	ldr	r2, [pc, #40]	@ (80016d0 <HAL_InitTick+0xf4>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	e002      	b.n	80016b4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80016b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3738      	adds	r7, #56	@ 0x38
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40023800 	.word	0x40023800
 80016c4:	431bde83 	.word	0x431bde83
 80016c8:	20000300 	.word	0x20000300
 80016cc:	40001000 	.word	0x40001000
 80016d0:	20000004 	.word	0x20000004

080016d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016d8:	bf00      	nop
 80016da:	e7fd      	b.n	80016d8 <NMI_Handler+0x4>

080016dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e0:	bf00      	nop
 80016e2:	e7fd      	b.n	80016e0 <HardFault_Handler+0x4>

080016e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <MemManage_Handler+0x4>

080016ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f0:	bf00      	nop
 80016f2:	e7fd      	b.n	80016f0 <BusFault_Handler+0x4>

080016f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <UsageFault_Handler+0x4>

080016fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001738:	4802      	ldr	r0, [pc, #8]	@ (8001744 <TIM6_DAC_IRQHandler+0x10>)
 800173a:	f002 feab 	bl	8004494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000300 	.word	0x20000300

08001748 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800174c:	4802      	ldr	r0, [pc, #8]	@ (8001758 <LTDC_IRQHandler+0x10>)
 800174e:	f001 fc03 	bl	8002f58 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000138 	.word	0x20000138

0800175c <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC global error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001760:	4802      	ldr	r0, [pc, #8]	@ (800176c <LTDC_ER_IRQHandler+0x10>)
 8001762:	f001 fbf9 	bl	8002f58 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000138 	.word	0x20000138

08001770 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001774:	4b06      	ldr	r3, [pc, #24]	@ (8001790 <SystemInit+0x20>)
 8001776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800177a:	4a05      	ldr	r2, [pc, #20]	@ (8001790 <SystemInit+0x20>)
 800177c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001780:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001794:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001798:	f7ff ffea 	bl	8001770 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800179c:	480c      	ldr	r0, [pc, #48]	@ (80017d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800179e:	490d      	ldr	r1, [pc, #52]	@ (80017d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017a0:	4a0d      	ldr	r2, [pc, #52]	@ (80017d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a4:	e002      	b.n	80017ac <LoopCopyDataInit>

080017a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017aa:	3304      	adds	r3, #4

080017ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b0:	d3f9      	bcc.n	80017a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017b2:	4a0a      	ldr	r2, [pc, #40]	@ (80017dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017b4:	4c0a      	ldr	r4, [pc, #40]	@ (80017e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b8:	e001      	b.n	80017be <LoopFillZerobss>

080017ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017bc:	3204      	adds	r2, #4

080017be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c0:	d3fb      	bcc.n	80017ba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017c2:	f003 fdaf 	bl	8005324 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017c6:	f7fe ff09 	bl	80005dc <main>
  bx  lr    
 80017ca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80017cc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80017d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80017d8:	080053b4 	.word	0x080053b4
  ldr r2, =_sbss
 80017dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80017e0:	2000034c 	.word	0x2000034c

080017e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017e4:	e7fe      	b.n	80017e4 <ADC_IRQHandler>
	...

080017e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001828 <HAL_Init+0x40>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001828 <HAL_Init+0x40>)
 80017f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001828 <HAL_Init+0x40>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001828 <HAL_Init+0x40>)
 80017fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001802:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001804:	4b08      	ldr	r3, [pc, #32]	@ (8001828 <HAL_Init+0x40>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a07      	ldr	r2, [pc, #28]	@ (8001828 <HAL_Init+0x40>)
 800180a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800180e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001810:	2003      	movs	r0, #3
 8001812:	f000 fcfa 	bl	800220a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001816:	200f      	movs	r0, #15
 8001818:	f7ff fee0 	bl	80015dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800181c:	f7ff fb0c 	bl	8000e38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40023c00 	.word	0x40023c00

0800182c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001830:	4b06      	ldr	r3, [pc, #24]	@ (800184c <HAL_IncTick+0x20>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	4b06      	ldr	r3, [pc, #24]	@ (8001850 <HAL_IncTick+0x24>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4413      	add	r3, r2
 800183c:	4a04      	ldr	r2, [pc, #16]	@ (8001850 <HAL_IncTick+0x24>)
 800183e:	6013      	str	r3, [r2, #0]
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	20000008 	.word	0x20000008
 8001850:	20000348 	.word	0x20000348

08001854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return uwTick;
 8001858:	4b03      	ldr	r3, [pc, #12]	@ (8001868 <HAL_GetTick+0x14>)
 800185a:	681b      	ldr	r3, [r3, #0]
}
 800185c:	4618      	mov	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	20000348 	.word	0x20000348

0800186c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001874:	2300      	movs	r3, #0
 8001876:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e033      	b.n	80018ea <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001886:	2b00      	cmp	r3, #0
 8001888:	d109      	bne.n	800189e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff fafc 	bl	8000e88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a2:	f003 0310 	and.w	r3, r3, #16
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d118      	bne.n	80018dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ae:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80018b2:	f023 0302 	bic.w	r3, r3, #2
 80018b6:	f043 0202 	orr.w	r2, r3, #2
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 fa78 	bl	8001db4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	f023 0303 	bic.w	r3, r3, #3
 80018d2:	f043 0201 	orr.w	r2, r3, #1
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	641a      	str	r2, [r3, #64]	@ 0x40
 80018da:	e001      	b.n	80018e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800190a:	2b01      	cmp	r3, #1
 800190c:	d101      	bne.n	8001912 <HAL_ADC_Start_DMA+0x1e>
 800190e:	2302      	movs	r3, #2
 8001910:	e0e9      	b.n	8001ae6 <HAL_ADC_Start_DMA+0x1f2>
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2201      	movs	r2, #1
 8001916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b01      	cmp	r3, #1
 8001926:	d018      	beq.n	800195a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689a      	ldr	r2, [r3, #8]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f042 0201 	orr.w	r2, r2, #1
 8001936:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001938:	4b6d      	ldr	r3, [pc, #436]	@ (8001af0 <HAL_ADC_Start_DMA+0x1fc>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a6d      	ldr	r2, [pc, #436]	@ (8001af4 <HAL_ADC_Start_DMA+0x200>)
 800193e:	fba2 2303 	umull	r2, r3, r2, r3
 8001942:	0c9a      	lsrs	r2, r3, #18
 8001944:	4613      	mov	r3, r2
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	4413      	add	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800194c:	e002      	b.n	8001954 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	3b01      	subs	r3, #1
 8001952:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f9      	bne.n	800194e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001964:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001968:	d107      	bne.n	800197a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001978:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	2b01      	cmp	r3, #1
 8001986:	f040 80a1 	bne.w	8001acc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001992:	f023 0301 	bic.w	r3, r3, #1
 8001996:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d007      	beq.n	80019bc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80019b4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80019c8:	d106      	bne.n	80019d8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ce:	f023 0206 	bic.w	r2, r3, #6
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	645a      	str	r2, [r3, #68]	@ 0x44
 80019d6:	e002      	b.n	80019de <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2200      	movs	r2, #0
 80019dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019e6:	4b44      	ldr	r3, [pc, #272]	@ (8001af8 <HAL_ADC_Start_DMA+0x204>)
 80019e8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019ee:	4a43      	ldr	r2, [pc, #268]	@ (8001afc <HAL_ADC_Start_DMA+0x208>)
 80019f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019f6:	4a42      	ldr	r2, [pc, #264]	@ (8001b00 <HAL_ADC_Start_DMA+0x20c>)
 80019f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019fe:	4a41      	ldr	r2, [pc, #260]	@ (8001b04 <HAL_ADC_Start_DMA+0x210>)
 8001a00:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001a0a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001a1a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a2a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	334c      	adds	r3, #76	@ 0x4c
 8001a36:	4619      	mov	r1, r3
 8001a38:	68ba      	ldr	r2, [r7, #8]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f000 fce4 	bl	8002408 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 031f 	and.w	r3, r3, #31
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d12a      	bne.n	8001aa2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a2d      	ldr	r2, [pc, #180]	@ (8001b08 <HAL_ADC_Start_DMA+0x214>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d015      	beq.n	8001a82 <HAL_ADC_Start_DMA+0x18e>
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a2c      	ldr	r2, [pc, #176]	@ (8001b0c <HAL_ADC_Start_DMA+0x218>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d105      	bne.n	8001a6c <HAL_ADC_Start_DMA+0x178>
 8001a60:	4b25      	ldr	r3, [pc, #148]	@ (8001af8 <HAL_ADC_Start_DMA+0x204>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 031f 	and.w	r3, r3, #31
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d00a      	beq.n	8001a82 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a27      	ldr	r2, [pc, #156]	@ (8001b10 <HAL_ADC_Start_DMA+0x21c>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d136      	bne.n	8001ae4 <HAL_ADC_Start_DMA+0x1f0>
 8001a76:	4b20      	ldr	r3, [pc, #128]	@ (8001af8 <HAL_ADC_Start_DMA+0x204>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f003 0310 	and.w	r3, r3, #16
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d130      	bne.n	8001ae4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d129      	bne.n	8001ae4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	e020      	b.n	8001ae4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a18      	ldr	r2, [pc, #96]	@ (8001b08 <HAL_ADC_Start_DMA+0x214>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d11b      	bne.n	8001ae4 <HAL_ADC_Start_DMA+0x1f0>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d114      	bne.n	8001ae4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	e00b      	b.n	8001ae4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad0:	f043 0210 	orr.w	r2, r3, #16
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001adc:	f043 0201 	orr.w	r2, r3, #1
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000000 	.word	0x20000000
 8001af4:	431bde83 	.word	0x431bde83
 8001af8:	40012300 	.word	0x40012300
 8001afc:	08001fad 	.word	0x08001fad
 8001b00:	08002067 	.word	0x08002067
 8001b04:	08002083 	.word	0x08002083
 8001b08:	40012000 	.word	0x40012000
 8001b0c:	40012100 	.word	0x40012100
 8001b10:	40012200 	.word	0x40012200

08001b14 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d101      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x1c>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e113      	b.n	8001d94 <HAL_ADC_ConfigChannel+0x244>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b09      	cmp	r3, #9
 8001b7a:	d925      	bls.n	8001bc8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68d9      	ldr	r1, [r3, #12]
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4413      	add	r3, r2
 8001b90:	3b1e      	subs	r3, #30
 8001b92:	2207      	movs	r2, #7
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43da      	mvns	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	400a      	ands	r2, r1
 8001ba0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68d9      	ldr	r1, [r3, #12]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	4403      	add	r3, r0
 8001bba:	3b1e      	subs	r3, #30
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	e022      	b.n	8001c0e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6919      	ldr	r1, [r3, #16]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	4413      	add	r3, r2
 8001bdc:	2207      	movs	r2, #7
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43da      	mvns	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	400a      	ands	r2, r1
 8001bea:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6919      	ldr	r1, [r3, #16]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	689a      	ldr	r2, [r3, #8]
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	4603      	mov	r3, r0
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	4403      	add	r3, r0
 8001c04:	409a      	lsls	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b06      	cmp	r3, #6
 8001c14:	d824      	bhi.n	8001c60 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	4613      	mov	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	3b05      	subs	r3, #5
 8001c28:	221f      	movs	r2, #31
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	400a      	ands	r2, r1
 8001c36:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	4618      	mov	r0, r3
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	3b05      	subs	r3, #5
 8001c52:	fa00 f203 	lsl.w	r2, r0, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c5e:	e04c      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b0c      	cmp	r3, #12
 8001c66:	d824      	bhi.n	8001cb2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	4613      	mov	r3, r2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	3b23      	subs	r3, #35	@ 0x23
 8001c7a:	221f      	movs	r2, #31
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43da      	mvns	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	400a      	ands	r2, r1
 8001c88:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	4618      	mov	r0, r3
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3b23      	subs	r3, #35	@ 0x23
 8001ca4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cb0:	e023      	b.n	8001cfa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	3b41      	subs	r3, #65	@ 0x41
 8001cc4:	221f      	movs	r2, #31
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43da      	mvns	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	400a      	ands	r2, r1
 8001cd2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	3b41      	subs	r3, #65	@ 0x41
 8001cee:	fa00 f203 	lsl.w	r2, r0, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cfa:	4b29      	ldr	r3, [pc, #164]	@ (8001da0 <HAL_ADC_ConfigChannel+0x250>)
 8001cfc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a28      	ldr	r2, [pc, #160]	@ (8001da4 <HAL_ADC_ConfigChannel+0x254>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d10f      	bne.n	8001d28 <HAL_ADC_ConfigChannel+0x1d8>
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2b12      	cmp	r3, #18
 8001d0e:	d10b      	bne.n	8001d28 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a1d      	ldr	r2, [pc, #116]	@ (8001da4 <HAL_ADC_ConfigChannel+0x254>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d12b      	bne.n	8001d8a <HAL_ADC_ConfigChannel+0x23a>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a1c      	ldr	r2, [pc, #112]	@ (8001da8 <HAL_ADC_ConfigChannel+0x258>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d003      	beq.n	8001d44 <HAL_ADC_ConfigChannel+0x1f4>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b11      	cmp	r3, #17
 8001d42:	d122      	bne.n	8001d8a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a11      	ldr	r2, [pc, #68]	@ (8001da8 <HAL_ADC_ConfigChannel+0x258>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d111      	bne.n	8001d8a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d66:	4b11      	ldr	r3, [pc, #68]	@ (8001dac <HAL_ADC_ConfigChannel+0x25c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a11      	ldr	r2, [pc, #68]	@ (8001db0 <HAL_ADC_ConfigChannel+0x260>)
 8001d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d70:	0c9a      	lsrs	r2, r3, #18
 8001d72:	4613      	mov	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d7c:	e002      	b.n	8001d84 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	3b01      	subs	r3, #1
 8001d82:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1f9      	bne.n	8001d7e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	40012300 	.word	0x40012300
 8001da4:	40012000 	.word	0x40012000
 8001da8:	10000012 	.word	0x10000012
 8001dac:	20000000 	.word	0x20000000
 8001db0:	431bde83 	.word	0x431bde83

08001db4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dbc:	4b79      	ldr	r3, [pc, #484]	@ (8001fa4 <ADC_Init+0x1f0>)
 8001dbe:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001de8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6859      	ldr	r1, [r3, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	021a      	lsls	r2, r3, #8
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001e0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6859      	ldr	r1, [r3, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6899      	ldr	r1, [r3, #8]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e46:	4a58      	ldr	r2, [pc, #352]	@ (8001fa8 <ADC_Init+0x1f4>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d022      	beq.n	8001e92 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689a      	ldr	r2, [r3, #8]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6899      	ldr	r1, [r3, #8]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6899      	ldr	r1, [r3, #8]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	e00f      	b.n	8001eb2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ea0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001eb0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0202 	bic.w	r2, r2, #2
 8001ec0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6899      	ldr	r1, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	7e1b      	ldrb	r3, [r3, #24]
 8001ecc:	005a      	lsls	r2, r3, #1
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d01b      	beq.n	8001f18 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001eee:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001efe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6859      	ldr	r1, [r3, #4]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	035a      	lsls	r2, r3, #13
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	e007      	b.n	8001f28 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f26:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001f36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	051a      	lsls	r2, r3, #20
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001f5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6899      	ldr	r1, [r3, #8]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f6a:	025a      	lsls	r2, r3, #9
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689a      	ldr	r2, [r3, #8]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6899      	ldr	r1, [r3, #8]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	029a      	lsls	r2, r3, #10
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	609a      	str	r2, [r3, #8]
}
 8001f98:	bf00      	nop
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	40012300 	.word	0x40012300
 8001fa8:	0f000001 	.word	0x0f000001

08001fac <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fb8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbe:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d13c      	bne.n	8002040 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fca:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d12b      	bne.n	8002038 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d127      	bne.n	8002038 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fee:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d006      	beq.n	8002004 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002000:	2b00      	cmp	r3, #0
 8002002:	d119      	bne.n	8002038 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0220 	bic.w	r2, r2, #32
 8002012:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002018:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002024:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d105      	bne.n	8002038 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002030:	f043 0201 	orr.w	r2, r3, #1
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f7ff fd6b 	bl	8001b14 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800203e:	e00e      	b.n	800205e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002044:	f003 0310 	and.w	r3, r3, #16
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f7ff fd75 	bl	8001b3c <HAL_ADC_ErrorCallback>
}
 8002052:	e004      	b.n	800205e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	4798      	blx	r3
}
 800205e:	bf00      	nop
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b084      	sub	sp, #16
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002072:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f7ff fd57 	bl	8001b28 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800207a:	bf00      	nop
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b084      	sub	sp, #16
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800208e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2240      	movs	r2, #64	@ 0x40
 8002094:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209a:	f043 0204 	orr.w	r2, r3, #4
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f7ff fd4a 	bl	8001b3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020a8:	bf00      	nop
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020c0:	4b0c      	ldr	r3, [pc, #48]	@ (80020f4 <__NVIC_SetPriorityGrouping+0x44>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020cc:	4013      	ands	r3, r2
 80020ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020e2:	4a04      	ldr	r2, [pc, #16]	@ (80020f4 <__NVIC_SetPriorityGrouping+0x44>)
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	60d3      	str	r3, [r2, #12]
}
 80020e8:	bf00      	nop
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020fc:	4b04      	ldr	r3, [pc, #16]	@ (8002110 <__NVIC_GetPriorityGrouping+0x18>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	0a1b      	lsrs	r3, r3, #8
 8002102:	f003 0307 	and.w	r3, r3, #7
}
 8002106:	4618      	mov	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	2b00      	cmp	r3, #0
 8002124:	db0b      	blt.n	800213e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	f003 021f 	and.w	r2, r3, #31
 800212c:	4907      	ldr	r1, [pc, #28]	@ (800214c <__NVIC_EnableIRQ+0x38>)
 800212e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002132:	095b      	lsrs	r3, r3, #5
 8002134:	2001      	movs	r0, #1
 8002136:	fa00 f202 	lsl.w	r2, r0, r2
 800213a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	e000e100 	.word	0xe000e100

08002150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	6039      	str	r1, [r7, #0]
 800215a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800215c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002160:	2b00      	cmp	r3, #0
 8002162:	db0a      	blt.n	800217a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	b2da      	uxtb	r2, r3
 8002168:	490c      	ldr	r1, [pc, #48]	@ (800219c <__NVIC_SetPriority+0x4c>)
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	0112      	lsls	r2, r2, #4
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	440b      	add	r3, r1
 8002174:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002178:	e00a      	b.n	8002190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	b2da      	uxtb	r2, r3
 800217e:	4908      	ldr	r1, [pc, #32]	@ (80021a0 <__NVIC_SetPriority+0x50>)
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	3b04      	subs	r3, #4
 8002188:	0112      	lsls	r2, r2, #4
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	440b      	add	r3, r1
 800218e:	761a      	strb	r2, [r3, #24]
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	e000e100 	.word	0xe000e100
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b089      	sub	sp, #36	@ 0x24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f1c3 0307 	rsb	r3, r3, #7
 80021be:	2b04      	cmp	r3, #4
 80021c0:	bf28      	it	cs
 80021c2:	2304      	movcs	r3, #4
 80021c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3304      	adds	r3, #4
 80021ca:	2b06      	cmp	r3, #6
 80021cc:	d902      	bls.n	80021d4 <NVIC_EncodePriority+0x30>
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3b03      	subs	r3, #3
 80021d2:	e000      	b.n	80021d6 <NVIC_EncodePriority+0x32>
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d8:	f04f 32ff 	mov.w	r2, #4294967295
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43da      	mvns	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	401a      	ands	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021ec:	f04f 31ff 	mov.w	r1, #4294967295
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	fa01 f303 	lsl.w	r3, r1, r3
 80021f6:	43d9      	mvns	r1, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021fc:	4313      	orrs	r3, r2
         );
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3724      	adds	r7, #36	@ 0x24
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff ff4c 	bl	80020b0 <__NVIC_SetPriorityGrouping>
}
 8002218:	bf00      	nop
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
 800222c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002232:	f7ff ff61 	bl	80020f8 <__NVIC_GetPriorityGrouping>
 8002236:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	68b9      	ldr	r1, [r7, #8]
 800223c:	6978      	ldr	r0, [r7, #20]
 800223e:	f7ff ffb1 	bl	80021a4 <NVIC_EncodePriority>
 8002242:	4602      	mov	r2, r0
 8002244:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002248:	4611      	mov	r1, r2
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff ff80 	bl	8002150 <__NVIC_SetPriority>
}
 8002250:	bf00      	nop
 8002252:	3718      	adds	r7, #24
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff ff54 	bl	8002114 <__NVIC_EnableIRQ>
}
 800226c:	bf00      	nop
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e00e      	b.n	80022a4 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	795b      	ldrb	r3, [r3, #5]
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d105      	bne.n	800229c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7fe fe6e 	bl	8000f78 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022b8:	f7ff facc 	bl	8001854 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e099      	b.n	80023fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2202      	movs	r2, #2
 80022cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0201 	bic.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022e8:	e00f      	b.n	800230a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022ea:	f7ff fab3 	bl	8001854 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b05      	cmp	r3, #5
 80022f6:	d908      	bls.n	800230a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2220      	movs	r2, #32
 80022fc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2203      	movs	r2, #3
 8002302:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e078      	b.n	80023fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1e8      	bne.n	80022ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	4b38      	ldr	r3, [pc, #224]	@ (8002404 <HAL_DMA_Init+0x158>)
 8002324:	4013      	ands	r3, r2
 8002326:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002336:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002342:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800234e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	4313      	orrs	r3, r2
 800235a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002360:	2b04      	cmp	r3, #4
 8002362:	d107      	bne.n	8002374 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236c:	4313      	orrs	r3, r2
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	4313      	orrs	r3, r2
 8002372:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	f023 0307 	bic.w	r3, r3, #7
 800238a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	4313      	orrs	r3, r2
 8002394:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239a:	2b04      	cmp	r3, #4
 800239c:	d117      	bne.n	80023ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00e      	beq.n	80023ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f8e5 	bl	8002580 <DMA_CheckFifoParam>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d008      	beq.n	80023ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2240      	movs	r2, #64	@ 0x40
 80023c0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80023ca:	2301      	movs	r3, #1
 80023cc:	e016      	b.n	80023fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f89c 	bl	8002514 <DMA_CalcBaseAndBitshift>
 80023dc:	4603      	mov	r3, r0
 80023de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e4:	223f      	movs	r2, #63	@ 0x3f
 80023e6:	409a      	lsls	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	f010803f 	.word	0xf010803f

08002408 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
 8002414:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800241e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002426:	2b01      	cmp	r3, #1
 8002428:	d101      	bne.n	800242e <HAL_DMA_Start_IT+0x26>
 800242a:	2302      	movs	r3, #2
 800242c:	e040      	b.n	80024b0 <HAL_DMA_Start_IT+0xa8>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b01      	cmp	r3, #1
 8002440:	d12f      	bne.n	80024a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2202      	movs	r2, #2
 8002446:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 f82e 	bl	80024b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002460:	223f      	movs	r2, #63	@ 0x3f
 8002462:	409a      	lsls	r2, r3
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0216 	orr.w	r2, r2, #22
 8002476:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247c:	2b00      	cmp	r3, #0
 800247e:	d007      	beq.n	8002490 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0208 	orr.w	r2, r2, #8
 800248e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 0201 	orr.w	r2, r2, #1
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	e005      	b.n	80024ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024aa:	2302      	movs	r3, #2
 80024ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
 80024c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80024d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	2b40      	cmp	r3, #64	@ 0x40
 80024e4:	d108      	bne.n	80024f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024f6:	e007      	b.n	8002508 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68ba      	ldr	r2, [r7, #8]
 80024fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	60da      	str	r2, [r3, #12]
}
 8002508:	bf00      	nop
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	b2db      	uxtb	r3, r3
 8002522:	3b10      	subs	r3, #16
 8002524:	4a14      	ldr	r2, [pc, #80]	@ (8002578 <DMA_CalcBaseAndBitshift+0x64>)
 8002526:	fba2 2303 	umull	r2, r3, r2, r3
 800252a:	091b      	lsrs	r3, r3, #4
 800252c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800252e:	4a13      	ldr	r2, [pc, #76]	@ (800257c <DMA_CalcBaseAndBitshift+0x68>)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4413      	add	r3, r2
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	461a      	mov	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2b03      	cmp	r3, #3
 8002540:	d909      	bls.n	8002556 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800254a:	f023 0303 	bic.w	r3, r3, #3
 800254e:	1d1a      	adds	r2, r3, #4
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	659a      	str	r2, [r3, #88]	@ 0x58
 8002554:	e007      	b.n	8002566 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800255e:	f023 0303 	bic.w	r3, r3, #3
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800256a:	4618      	mov	r0, r3
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	aaaaaaab 	.word	0xaaaaaaab
 800257c:	0800539c 	.word	0x0800539c

08002580 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002588:	2300      	movs	r3, #0
 800258a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002590:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d11f      	bne.n	80025da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2b03      	cmp	r3, #3
 800259e:	d856      	bhi.n	800264e <DMA_CheckFifoParam+0xce>
 80025a0:	a201      	add	r2, pc, #4	@ (adr r2, 80025a8 <DMA_CheckFifoParam+0x28>)
 80025a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a6:	bf00      	nop
 80025a8:	080025b9 	.word	0x080025b9
 80025ac:	080025cb 	.word	0x080025cb
 80025b0:	080025b9 	.word	0x080025b9
 80025b4:	0800264f 	.word	0x0800264f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d046      	beq.n	8002652 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025c8:	e043      	b.n	8002652 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025d2:	d140      	bne.n	8002656 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025d8:	e03d      	b.n	8002656 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025e2:	d121      	bne.n	8002628 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d837      	bhi.n	800265a <DMA_CheckFifoParam+0xda>
 80025ea:	a201      	add	r2, pc, #4	@ (adr r2, 80025f0 <DMA_CheckFifoParam+0x70>)
 80025ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f0:	08002601 	.word	0x08002601
 80025f4:	08002607 	.word	0x08002607
 80025f8:	08002601 	.word	0x08002601
 80025fc:	08002619 	.word	0x08002619
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]
      break;
 8002604:	e030      	b.n	8002668 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800260a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d025      	beq.n	800265e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002616:	e022      	b.n	800265e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800261c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002620:	d11f      	bne.n	8002662 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002626:	e01c      	b.n	8002662 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d903      	bls.n	8002636 <DMA_CheckFifoParam+0xb6>
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	2b03      	cmp	r3, #3
 8002632:	d003      	beq.n	800263c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002634:	e018      	b.n	8002668 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	73fb      	strb	r3, [r7, #15]
      break;
 800263a:	e015      	b.n	8002668 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002640:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00e      	beq.n	8002666 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
      break;
 800264c:	e00b      	b.n	8002666 <DMA_CheckFifoParam+0xe6>
      break;
 800264e:	bf00      	nop
 8002650:	e00a      	b.n	8002668 <DMA_CheckFifoParam+0xe8>
      break;
 8002652:	bf00      	nop
 8002654:	e008      	b.n	8002668 <DMA_CheckFifoParam+0xe8>
      break;
 8002656:	bf00      	nop
 8002658:	e006      	b.n	8002668 <DMA_CheckFifoParam+0xe8>
      break;
 800265a:	bf00      	nop
 800265c:	e004      	b.n	8002668 <DMA_CheckFifoParam+0xe8>
      break;
 800265e:	bf00      	nop
 8002660:	e002      	b.n	8002668 <DMA_CheckFifoParam+0xe8>
      break;   
 8002662:	bf00      	nop
 8002664:	e000      	b.n	8002668 <DMA_CheckFifoParam+0xe8>
      break;
 8002666:	bf00      	nop
    }
  } 
  
  return status; 
 8002668:	7bfb      	ldrb	r3, [r7, #15]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop

08002678 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002678:	b480      	push	{r7}
 800267a:	b089      	sub	sp, #36	@ 0x24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002686:	2300      	movs	r3, #0
 8002688:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800268a:	2300      	movs	r3, #0
 800268c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
 8002692:	e177      	b.n	8002984 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002694:	2201      	movs	r2, #1
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	4013      	ands	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	f040 8166 	bne.w	800297e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d005      	beq.n	80026ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d130      	bne.n	800272c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	2203      	movs	r2, #3
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43db      	mvns	r3, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4013      	ands	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	68da      	ldr	r2, [r3, #12]
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002700:	2201      	movs	r2, #1
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	091b      	lsrs	r3, r3, #4
 8002716:	f003 0201 	and.w	r2, r3, #1
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4313      	orrs	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f003 0303 	and.w	r3, r3, #3
 8002734:	2b03      	cmp	r3, #3
 8002736:	d017      	beq.n	8002768 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	2203      	movs	r2, #3
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4013      	ands	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d123      	bne.n	80027bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	08da      	lsrs	r2, r3, #3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3208      	adds	r2, #8
 800277c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002780:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	220f      	movs	r2, #15
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4013      	ands	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	691a      	ldr	r2, [r3, #16]
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	08da      	lsrs	r2, r3, #3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3208      	adds	r2, #8
 80027b6:	69b9      	ldr	r1, [r7, #24]
 80027b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	2203      	movs	r2, #3
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 0203 	and.w	r2, r3, #3
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 80c0 	beq.w	800297e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	4b66      	ldr	r3, [pc, #408]	@ (800299c <HAL_GPIO_Init+0x324>)
 8002804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002806:	4a65      	ldr	r2, [pc, #404]	@ (800299c <HAL_GPIO_Init+0x324>)
 8002808:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800280c:	6453      	str	r3, [r2, #68]	@ 0x44
 800280e:	4b63      	ldr	r3, [pc, #396]	@ (800299c <HAL_GPIO_Init+0x324>)
 8002810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002812:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800281a:	4a61      	ldr	r2, [pc, #388]	@ (80029a0 <HAL_GPIO_Init+0x328>)
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	089b      	lsrs	r3, r3, #2
 8002820:	3302      	adds	r3, #2
 8002822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002826:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	220f      	movs	r2, #15
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43db      	mvns	r3, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4013      	ands	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a58      	ldr	r2, [pc, #352]	@ (80029a4 <HAL_GPIO_Init+0x32c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d037      	beq.n	80028b6 <HAL_GPIO_Init+0x23e>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a57      	ldr	r2, [pc, #348]	@ (80029a8 <HAL_GPIO_Init+0x330>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d031      	beq.n	80028b2 <HAL_GPIO_Init+0x23a>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a56      	ldr	r2, [pc, #344]	@ (80029ac <HAL_GPIO_Init+0x334>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d02b      	beq.n	80028ae <HAL_GPIO_Init+0x236>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a55      	ldr	r2, [pc, #340]	@ (80029b0 <HAL_GPIO_Init+0x338>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d025      	beq.n	80028aa <HAL_GPIO_Init+0x232>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a54      	ldr	r2, [pc, #336]	@ (80029b4 <HAL_GPIO_Init+0x33c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d01f      	beq.n	80028a6 <HAL_GPIO_Init+0x22e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a53      	ldr	r2, [pc, #332]	@ (80029b8 <HAL_GPIO_Init+0x340>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d019      	beq.n	80028a2 <HAL_GPIO_Init+0x22a>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a52      	ldr	r2, [pc, #328]	@ (80029bc <HAL_GPIO_Init+0x344>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d013      	beq.n	800289e <HAL_GPIO_Init+0x226>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a51      	ldr	r2, [pc, #324]	@ (80029c0 <HAL_GPIO_Init+0x348>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d00d      	beq.n	800289a <HAL_GPIO_Init+0x222>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a50      	ldr	r2, [pc, #320]	@ (80029c4 <HAL_GPIO_Init+0x34c>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d007      	beq.n	8002896 <HAL_GPIO_Init+0x21e>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a4f      	ldr	r2, [pc, #316]	@ (80029c8 <HAL_GPIO_Init+0x350>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d101      	bne.n	8002892 <HAL_GPIO_Init+0x21a>
 800288e:	2309      	movs	r3, #9
 8002890:	e012      	b.n	80028b8 <HAL_GPIO_Init+0x240>
 8002892:	230a      	movs	r3, #10
 8002894:	e010      	b.n	80028b8 <HAL_GPIO_Init+0x240>
 8002896:	2308      	movs	r3, #8
 8002898:	e00e      	b.n	80028b8 <HAL_GPIO_Init+0x240>
 800289a:	2307      	movs	r3, #7
 800289c:	e00c      	b.n	80028b8 <HAL_GPIO_Init+0x240>
 800289e:	2306      	movs	r3, #6
 80028a0:	e00a      	b.n	80028b8 <HAL_GPIO_Init+0x240>
 80028a2:	2305      	movs	r3, #5
 80028a4:	e008      	b.n	80028b8 <HAL_GPIO_Init+0x240>
 80028a6:	2304      	movs	r3, #4
 80028a8:	e006      	b.n	80028b8 <HAL_GPIO_Init+0x240>
 80028aa:	2303      	movs	r3, #3
 80028ac:	e004      	b.n	80028b8 <HAL_GPIO_Init+0x240>
 80028ae:	2302      	movs	r3, #2
 80028b0:	e002      	b.n	80028b8 <HAL_GPIO_Init+0x240>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <HAL_GPIO_Init+0x240>
 80028b6:	2300      	movs	r3, #0
 80028b8:	69fa      	ldr	r2, [r7, #28]
 80028ba:	f002 0203 	and.w	r2, r2, #3
 80028be:	0092      	lsls	r2, r2, #2
 80028c0:	4093      	lsls	r3, r2
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028c8:	4935      	ldr	r1, [pc, #212]	@ (80029a0 <HAL_GPIO_Init+0x328>)
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	089b      	lsrs	r3, r3, #2
 80028ce:	3302      	adds	r3, #2
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028d6:	4b3d      	ldr	r3, [pc, #244]	@ (80029cc <HAL_GPIO_Init+0x354>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	43db      	mvns	r3, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4013      	ands	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028fa:	4a34      	ldr	r2, [pc, #208]	@ (80029cc <HAL_GPIO_Init+0x354>)
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002900:	4b32      	ldr	r3, [pc, #200]	@ (80029cc <HAL_GPIO_Init+0x354>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002924:	4a29      	ldr	r2, [pc, #164]	@ (80029cc <HAL_GPIO_Init+0x354>)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800292a:	4b28      	ldr	r3, [pc, #160]	@ (80029cc <HAL_GPIO_Init+0x354>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	43db      	mvns	r3, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4013      	ands	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800294e:	4a1f      	ldr	r2, [pc, #124]	@ (80029cc <HAL_GPIO_Init+0x354>)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002954:	4b1d      	ldr	r3, [pc, #116]	@ (80029cc <HAL_GPIO_Init+0x354>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002978:	4a14      	ldr	r2, [pc, #80]	@ (80029cc <HAL_GPIO_Init+0x354>)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	3301      	adds	r3, #1
 8002982:	61fb      	str	r3, [r7, #28]
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	2b0f      	cmp	r3, #15
 8002988:	f67f ae84 	bls.w	8002694 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800298c:	bf00      	nop
 800298e:	bf00      	nop
 8002990:	3724      	adds	r7, #36	@ 0x24
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40023800 	.word	0x40023800
 80029a0:	40013800 	.word	0x40013800
 80029a4:	40020000 	.word	0x40020000
 80029a8:	40020400 	.word	0x40020400
 80029ac:	40020800 	.word	0x40020800
 80029b0:	40020c00 	.word	0x40020c00
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40021400 	.word	0x40021400
 80029bc:	40021800 	.word	0x40021800
 80029c0:	40021c00 	.word	0x40021c00
 80029c4:	40022000 	.word	0x40022000
 80029c8:	40022400 	.word	0x40022400
 80029cc:	40013c00 	.word	0x40013c00

080029d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	807b      	strh	r3, [r7, #2]
 80029dc:	4613      	mov	r3, r2
 80029de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029e0:	787b      	ldrb	r3, [r7, #1]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029e6:	887a      	ldrh	r2, [r7, #2]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029ec:	e003      	b.n	80029f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029ee:	887b      	ldrh	r3, [r7, #2]
 80029f0:	041a      	lsls	r2, r3, #16
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	619a      	str	r2, [r3, #24]
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b085      	sub	sp, #20
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a14:	887a      	ldrh	r2, [r7, #2]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	041a      	lsls	r2, r3, #16
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	43d9      	mvns	r1, r3
 8002a20:	887b      	ldrh	r3, [r7, #2]
 8002a22:	400b      	ands	r3, r1
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	619a      	str	r2, [r3, #24]
}
 8002a2a:	bf00      	nop
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
	...

08002a38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e12b      	b.n	8002ca2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d106      	bne.n	8002a64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7fe faac 	bl	8000fbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2224      	movs	r2, #36	@ 0x24
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 0201 	bic.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a9c:	f001 f964 	bl	8003d68 <HAL_RCC_GetPCLK1Freq>
 8002aa0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	4a81      	ldr	r2, [pc, #516]	@ (8002cac <HAL_I2C_Init+0x274>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d807      	bhi.n	8002abc <HAL_I2C_Init+0x84>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4a80      	ldr	r2, [pc, #512]	@ (8002cb0 <HAL_I2C_Init+0x278>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	bf94      	ite	ls
 8002ab4:	2301      	movls	r3, #1
 8002ab6:	2300      	movhi	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	e006      	b.n	8002aca <HAL_I2C_Init+0x92>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4a7d      	ldr	r2, [pc, #500]	@ (8002cb4 <HAL_I2C_Init+0x27c>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	bf94      	ite	ls
 8002ac4:	2301      	movls	r3, #1
 8002ac6:	2300      	movhi	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e0e7      	b.n	8002ca2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	4a78      	ldr	r2, [pc, #480]	@ (8002cb8 <HAL_I2C_Init+0x280>)
 8002ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ada:	0c9b      	lsrs	r3, r3, #18
 8002adc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	4a6a      	ldr	r2, [pc, #424]	@ (8002cac <HAL_I2C_Init+0x274>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d802      	bhi.n	8002b0c <HAL_I2C_Init+0xd4>
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	e009      	b.n	8002b20 <HAL_I2C_Init+0xe8>
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002b12:	fb02 f303 	mul.w	r3, r2, r3
 8002b16:	4a69      	ldr	r2, [pc, #420]	@ (8002cbc <HAL_I2C_Init+0x284>)
 8002b18:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1c:	099b      	lsrs	r3, r3, #6
 8002b1e:	3301      	adds	r3, #1
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6812      	ldr	r2, [r2, #0]
 8002b24:	430b      	orrs	r3, r1
 8002b26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002b32:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	495c      	ldr	r1, [pc, #368]	@ (8002cac <HAL_I2C_Init+0x274>)
 8002b3c:	428b      	cmp	r3, r1
 8002b3e:	d819      	bhi.n	8002b74 <HAL_I2C_Init+0x13c>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	1e59      	subs	r1, r3, #1
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b4e:	1c59      	adds	r1, r3, #1
 8002b50:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b54:	400b      	ands	r3, r1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00a      	beq.n	8002b70 <HAL_I2C_Init+0x138>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	1e59      	subs	r1, r3, #1
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b68:	3301      	adds	r3, #1
 8002b6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b6e:	e051      	b.n	8002c14 <HAL_I2C_Init+0x1dc>
 8002b70:	2304      	movs	r3, #4
 8002b72:	e04f      	b.n	8002c14 <HAL_I2C_Init+0x1dc>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d111      	bne.n	8002ba0 <HAL_I2C_Init+0x168>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	1e58      	subs	r0, r3, #1
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6859      	ldr	r1, [r3, #4]
 8002b84:	460b      	mov	r3, r1
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	440b      	add	r3, r1
 8002b8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b8e:	3301      	adds	r3, #1
 8002b90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	bf0c      	ite	eq
 8002b98:	2301      	moveq	r3, #1
 8002b9a:	2300      	movne	r3, #0
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	e012      	b.n	8002bc6 <HAL_I2C_Init+0x18e>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	1e58      	subs	r0, r3, #1
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6859      	ldr	r1, [r3, #4]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	0099      	lsls	r1, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	bf0c      	ite	eq
 8002bc0:	2301      	moveq	r3, #1
 8002bc2:	2300      	movne	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <HAL_I2C_Init+0x196>
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e022      	b.n	8002c14 <HAL_I2C_Init+0x1dc>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10e      	bne.n	8002bf4 <HAL_I2C_Init+0x1bc>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1e58      	subs	r0, r3, #1
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6859      	ldr	r1, [r3, #4]
 8002bde:	460b      	mov	r3, r1
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	440b      	add	r3, r1
 8002be4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002be8:	3301      	adds	r3, #1
 8002bea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bf2:	e00f      	b.n	8002c14 <HAL_I2C_Init+0x1dc>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	1e58      	subs	r0, r3, #1
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6859      	ldr	r1, [r3, #4]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	0099      	lsls	r1, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	6809      	ldr	r1, [r1, #0]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69da      	ldr	r2, [r3, #28]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002c42:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6911      	ldr	r1, [r2, #16]
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	68d2      	ldr	r2, [r2, #12]
 8002c4e:	4311      	orrs	r1, r2
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6812      	ldr	r2, [r2, #0]
 8002c54:	430b      	orrs	r3, r1
 8002c56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	695a      	ldr	r2, [r3, #20]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f042 0201 	orr.w	r2, r2, #1
 8002c82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	000186a0 	.word	0x000186a0
 8002cb0:	001e847f 	.word	0x001e847f
 8002cb4:	003d08ff 	.word	0x003d08ff
 8002cb8:	431bde83 	.word	0x431bde83
 8002cbc:	10624dd3 	.word	0x10624dd3

08002cc0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b20      	cmp	r3, #32
 8002cd4:	d129      	bne.n	8002d2a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2224      	movs	r2, #36	@ 0x24
 8002cda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0201 	bic.w	r2, r2, #1
 8002cec:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 0210 	bic.w	r2, r2, #16
 8002cfc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f042 0201 	orr.w	r2, r2, #1
 8002d1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2220      	movs	r2, #32
 8002d22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	e000      	b.n	8002d2c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002d2a:	2302      	movs	r3, #2
  }
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002d42:	2300      	movs	r3, #0
 8002d44:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b20      	cmp	r3, #32
 8002d50:	d12a      	bne.n	8002da8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2224      	movs	r2, #36	@ 0x24
 8002d56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 0201 	bic.w	r2, r2, #1
 8002d68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d70:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002d72:	89fb      	ldrh	r3, [r7, #14]
 8002d74:	f023 030f 	bic.w	r3, r3, #15
 8002d78:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	89fb      	ldrh	r3, [r7, #14]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	89fa      	ldrh	r2, [r7, #14]
 8002d8a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0201 	orr.w	r2, r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002da4:	2300      	movs	r3, #0
 8002da6:	e000      	b.n	8002daa <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002da8:	2302      	movs	r3, #2
  }
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
	...

08002db8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e0bf      	b.n	8002f4a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d106      	bne.n	8002de4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7fe f956 	bl	8001090 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2202      	movs	r2, #2
 8002de8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	699a      	ldr	r2, [r3, #24]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8002dfa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6999      	ldr	r1, [r3, #24]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002e10:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6899      	ldr	r1, [r3, #8]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	4b4a      	ldr	r3, [pc, #296]	@ (8002f54 <HAL_LTDC_Init+0x19c>)
 8002e2c:	400b      	ands	r3, r1
 8002e2e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	041b      	lsls	r3, r3, #16
 8002e36:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6899      	ldr	r1, [r3, #8]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699a      	ldr	r2, [r3, #24]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	431a      	orrs	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68d9      	ldr	r1, [r3, #12]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	4b3e      	ldr	r3, [pc, #248]	@ (8002f54 <HAL_LTDC_Init+0x19c>)
 8002e5a:	400b      	ands	r3, r1
 8002e5c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	041b      	lsls	r3, r3, #16
 8002e64:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68d9      	ldr	r1, [r3, #12]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a1a      	ldr	r2, [r3, #32]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	431a      	orrs	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6919      	ldr	r1, [r3, #16]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	4b33      	ldr	r3, [pc, #204]	@ (8002f54 <HAL_LTDC_Init+0x19c>)
 8002e88:	400b      	ands	r3, r1
 8002e8a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e90:	041b      	lsls	r3, r3, #16
 8002e92:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6919      	ldr	r1, [r3, #16]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6959      	ldr	r1, [r3, #20]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	4b27      	ldr	r3, [pc, #156]	@ (8002f54 <HAL_LTDC_Init+0x19c>)
 8002eb6:	400b      	ands	r3, r1
 8002eb8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ebe:	041b      	lsls	r3, r3, #16
 8002ec0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	6959      	ldr	r1, [r3, #20]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ede:	021b      	lsls	r3, r3, #8
 8002ee0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002ee8:	041b      	lsls	r3, r3, #16
 8002eea:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8002efa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0206 	orr.w	r2, r2, #6
 8002f26:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699a      	ldr	r2, [r3, #24]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0201 	orr.w	r2, r2, #1
 8002f36:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	f000f800 	.word	0xf000f800

08002f58 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f66:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f6e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d023      	beq.n	8002fc2 <HAL_LTDC_IRQHandler+0x6a>
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d01e      	beq.n	8002fc2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 0204 	bic.w	r2, r2, #4
 8002f92:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2204      	movs	r2, #4
 8002f9a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002fa2:	f043 0201 	orr.w	r2, r3, #1
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2204      	movs	r2, #4
 8002fb0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f86f 	bl	80030a0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d023      	beq.n	8003014 <HAL_LTDC_IRQHandler+0xbc>
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d01e      	beq.n	8003014 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0202 	bic.w	r2, r2, #2
 8002fe4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2202      	movs	r2, #2
 8002fec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002ff4:	f043 0202 	orr.w	r2, r3, #2
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2204      	movs	r2, #4
 8003002:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f846 	bl	80030a0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d01b      	beq.n	8003056 <HAL_LTDC_IRQHandler+0xfe>
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d016      	beq.n	8003056 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0201 	bic.w	r2, r2, #1
 8003036:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2201      	movs	r2, #1
 800303e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f82f 	bl	80030b4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f003 0308 	and.w	r3, r3, #8
 800305c:	2b00      	cmp	r3, #0
 800305e:	d01b      	beq.n	8003098 <HAL_LTDC_IRQHandler+0x140>
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	2b00      	cmp	r3, #0
 8003068:	d016      	beq.n	8003098 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0208 	bic.w	r2, r2, #8
 8003078:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2208      	movs	r2, #8
 8003080:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f818 	bl	80030c8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003098:	bf00      	nop
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80030dc:	b5b0      	push	{r4, r5, r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d101      	bne.n	80030f6 <HAL_LTDC_ConfigLayer+0x1a>
 80030f2:	2302      	movs	r3, #2
 80030f4:	e02c      	b.n	8003150 <HAL_LTDC_ConfigLayer+0x74>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2202      	movs	r2, #2
 8003102:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2134      	movs	r1, #52	@ 0x34
 800310c:	fb01 f303 	mul.w	r3, r1, r3
 8003110:	4413      	add	r3, r2
 8003112:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	4614      	mov	r4, r2
 800311a:	461d      	mov	r5, r3
 800311c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800311e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003124:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003128:	682b      	ldr	r3, [r5, #0]
 800312a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	68b9      	ldr	r1, [r7, #8]
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 f811 	bl	8003158 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2201      	movs	r2, #1
 800313c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bdb0      	pop	{r4, r5, r7, pc}

08003158 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003158:	b480      	push	{r7}
 800315a:	b089      	sub	sp, #36	@ 0x24
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	685a      	ldr	r2, [r3, #4]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	0c1b      	lsrs	r3, r3, #16
 8003170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003174:	4413      	add	r3, r2
 8003176:	041b      	lsls	r3, r3, #16
 8003178:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	461a      	mov	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	01db      	lsls	r3, r3, #7
 8003184:	4413      	add	r3, r2
 8003186:	3384      	adds	r3, #132	@ 0x84
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	6812      	ldr	r2, [r2, #0]
 800318e:	4611      	mov	r1, r2
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	01d2      	lsls	r2, r2, #7
 8003194:	440a      	add	r2, r1
 8003196:	3284      	adds	r2, #132	@ 0x84
 8003198:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800319c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	0c1b      	lsrs	r3, r3, #16
 80031aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80031ae:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80031b0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4619      	mov	r1, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	01db      	lsls	r3, r3, #7
 80031bc:	440b      	add	r3, r1
 80031be:	3384      	adds	r3, #132	@ 0x84
 80031c0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80031c6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	68da      	ldr	r2, [r3, #12]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031d6:	4413      	add	r3, r2
 80031d8:	041b      	lsls	r3, r3, #16
 80031da:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	461a      	mov	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	01db      	lsls	r3, r3, #7
 80031e6:	4413      	add	r3, r2
 80031e8:	3384      	adds	r3, #132	@ 0x84
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	6812      	ldr	r2, [r2, #0]
 80031f0:	4611      	mov	r1, r2
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	01d2      	lsls	r2, r2, #7
 80031f6:	440a      	add	r2, r1
 80031f8:	3284      	adds	r2, #132	@ 0x84
 80031fa:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80031fe:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800320e:	4413      	add	r3, r2
 8003210:	1c5a      	adds	r2, r3, #1
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4619      	mov	r1, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	01db      	lsls	r3, r3, #7
 800321c:	440b      	add	r3, r1
 800321e:	3384      	adds	r3, #132	@ 0x84
 8003220:	4619      	mov	r1, r3
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	4313      	orrs	r3, r2
 8003226:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	461a      	mov	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	01db      	lsls	r3, r3, #7
 8003232:	4413      	add	r3, r2
 8003234:	3384      	adds	r3, #132	@ 0x84
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	6812      	ldr	r2, [r2, #0]
 800323c:	4611      	mov	r1, r2
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	01d2      	lsls	r2, r2, #7
 8003242:	440a      	add	r2, r1
 8003244:	3284      	adds	r2, #132	@ 0x84
 8003246:	f023 0307 	bic.w	r3, r3, #7
 800324a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	461a      	mov	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	01db      	lsls	r3, r3, #7
 8003256:	4413      	add	r3, r2
 8003258:	3384      	adds	r3, #132	@ 0x84
 800325a:	461a      	mov	r2, r3
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003268:	021b      	lsls	r3, r3, #8
 800326a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003272:	041b      	lsls	r3, r3, #16
 8003274:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	061b      	lsls	r3, r3, #24
 800327c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	461a      	mov	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	01db      	lsls	r3, r3, #7
 8003288:	4413      	add	r3, r2
 800328a:	3384      	adds	r3, #132	@ 0x84
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	01db      	lsls	r3, r3, #7
 8003298:	4413      	add	r3, r2
 800329a:	3384      	adds	r3, #132	@ 0x84
 800329c:	461a      	mov	r2, r3
 800329e:	2300      	movs	r3, #0
 80032a0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80032a8:	461a      	mov	r2, r3
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	431a      	orrs	r2, r3
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	431a      	orrs	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4619      	mov	r1, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	01db      	lsls	r3, r3, #7
 80032bc:	440b      	add	r3, r1
 80032be:	3384      	adds	r3, #132	@ 0x84
 80032c0:	4619      	mov	r1, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	461a      	mov	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	01db      	lsls	r3, r3, #7
 80032d2:	4413      	add	r3, r2
 80032d4:	3384      	adds	r3, #132	@ 0x84
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	6812      	ldr	r2, [r2, #0]
 80032dc:	4611      	mov	r1, r2
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	01d2      	lsls	r2, r2, #7
 80032e2:	440a      	add	r2, r1
 80032e4:	3284      	adds	r2, #132	@ 0x84
 80032e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80032ea:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	461a      	mov	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	01db      	lsls	r3, r3, #7
 80032f6:	4413      	add	r3, r2
 80032f8:	3384      	adds	r3, #132	@ 0x84
 80032fa:	461a      	mov	r2, r3
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	461a      	mov	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	01db      	lsls	r3, r3, #7
 800330c:	4413      	add	r3, r2
 800330e:	3384      	adds	r3, #132	@ 0x84
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	6812      	ldr	r2, [r2, #0]
 8003316:	4611      	mov	r1, r2
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	01d2      	lsls	r2, r2, #7
 800331c:	440a      	add	r2, r1
 800331e:	3284      	adds	r2, #132	@ 0x84
 8003320:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003324:	f023 0307 	bic.w	r3, r3, #7
 8003328:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	69da      	ldr	r2, [r3, #28]
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	68f9      	ldr	r1, [r7, #12]
 8003334:	6809      	ldr	r1, [r1, #0]
 8003336:	4608      	mov	r0, r1
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	01c9      	lsls	r1, r1, #7
 800333c:	4401      	add	r1, r0
 800333e:	3184      	adds	r1, #132	@ 0x84
 8003340:	4313      	orrs	r3, r2
 8003342:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	461a      	mov	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	01db      	lsls	r3, r3, #7
 800334e:	4413      	add	r3, r2
 8003350:	3384      	adds	r3, #132	@ 0x84
 8003352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	461a      	mov	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	01db      	lsls	r3, r3, #7
 800335e:	4413      	add	r3, r2
 8003360:	3384      	adds	r3, #132	@ 0x84
 8003362:	461a      	mov	r2, r3
 8003364:	2300      	movs	r3, #0
 8003366:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	461a      	mov	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	01db      	lsls	r3, r3, #7
 8003372:	4413      	add	r3, r2
 8003374:	3384      	adds	r3, #132	@ 0x84
 8003376:	461a      	mov	r2, r3
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d102      	bne.n	800338c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003386:	2304      	movs	r3, #4
 8003388:	61fb      	str	r3, [r7, #28]
 800338a:	e01b      	b.n	80033c4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d102      	bne.n	800339a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003394:	2303      	movs	r3, #3
 8003396:	61fb      	str	r3, [r7, #28]
 8003398:	e014      	b.n	80033c4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	2b04      	cmp	r3, #4
 80033a0:	d00b      	beq.n	80033ba <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d007      	beq.n	80033ba <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80033ae:	2b03      	cmp	r3, #3
 80033b0:	d003      	beq.n	80033ba <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80033b6:	2b07      	cmp	r3, #7
 80033b8:	d102      	bne.n	80033c0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80033ba:	2302      	movs	r3, #2
 80033bc:	61fb      	str	r3, [r7, #28]
 80033be:	e001      	b.n	80033c4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80033c0:	2301      	movs	r3, #1
 80033c2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	461a      	mov	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	01db      	lsls	r3, r3, #7
 80033ce:	4413      	add	r3, r2
 80033d0:	3384      	adds	r3, #132	@ 0x84
 80033d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	6812      	ldr	r2, [r2, #0]
 80033d8:	4611      	mov	r1, r2
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	01d2      	lsls	r2, r2, #7
 80033de:	440a      	add	r2, r1
 80033e0:	3284      	adds	r2, #132	@ 0x84
 80033e2:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80033e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ec:	69fa      	ldr	r2, [r7, #28]
 80033ee:	fb02 f303 	mul.w	r3, r2, r3
 80033f2:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	6859      	ldr	r1, [r3, #4]
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	1acb      	subs	r3, r1, r3
 80033fe:	69f9      	ldr	r1, [r7, #28]
 8003400:	fb01 f303 	mul.w	r3, r1, r3
 8003404:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003406:	68f9      	ldr	r1, [r7, #12]
 8003408:	6809      	ldr	r1, [r1, #0]
 800340a:	4608      	mov	r0, r1
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	01c9      	lsls	r1, r1, #7
 8003410:	4401      	add	r1, r0
 8003412:	3184      	adds	r1, #132	@ 0x84
 8003414:	4313      	orrs	r3, r2
 8003416:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	461a      	mov	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	01db      	lsls	r3, r3, #7
 8003422:	4413      	add	r3, r2
 8003424:	3384      	adds	r3, #132	@ 0x84
 8003426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	6812      	ldr	r2, [r2, #0]
 800342c:	4611      	mov	r1, r2
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	01d2      	lsls	r2, r2, #7
 8003432:	440a      	add	r2, r1
 8003434:	3284      	adds	r2, #132	@ 0x84
 8003436:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800343a:	f023 0307 	bic.w	r3, r3, #7
 800343e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	461a      	mov	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	01db      	lsls	r3, r3, #7
 800344a:	4413      	add	r3, r2
 800344c:	3384      	adds	r3, #132	@ 0x84
 800344e:	461a      	mov	r2, r3
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003454:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	461a      	mov	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	01db      	lsls	r3, r3, #7
 8003460:	4413      	add	r3, r2
 8003462:	3384      	adds	r3, #132	@ 0x84
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	6812      	ldr	r2, [r2, #0]
 800346a:	4611      	mov	r1, r2
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	01d2      	lsls	r2, r2, #7
 8003470:	440a      	add	r2, r1
 8003472:	3284      	adds	r2, #132	@ 0x84
 8003474:	f043 0301 	orr.w	r3, r3, #1
 8003478:	6013      	str	r3, [r2, #0]
}
 800347a:	bf00      	nop
 800347c:	3724      	adds	r7, #36	@ 0x24
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
	...

08003488 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e267      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d075      	beq.n	8003592 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034a6:	4b88      	ldr	r3, [pc, #544]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 030c 	and.w	r3, r3, #12
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d00c      	beq.n	80034cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034b2:	4b85      	ldr	r3, [pc, #532]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034ba:	2b08      	cmp	r3, #8
 80034bc:	d112      	bne.n	80034e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034be:	4b82      	ldr	r3, [pc, #520]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034ca:	d10b      	bne.n	80034e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034cc:	4b7e      	ldr	r3, [pc, #504]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d05b      	beq.n	8003590 <HAL_RCC_OscConfig+0x108>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d157      	bne.n	8003590 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e242      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034ec:	d106      	bne.n	80034fc <HAL_RCC_OscConfig+0x74>
 80034ee:	4b76      	ldr	r3, [pc, #472]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a75      	ldr	r2, [pc, #468]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 80034f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	e01d      	b.n	8003538 <HAL_RCC_OscConfig+0xb0>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003504:	d10c      	bne.n	8003520 <HAL_RCC_OscConfig+0x98>
 8003506:	4b70      	ldr	r3, [pc, #448]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a6f      	ldr	r2, [pc, #444]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 800350c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003510:	6013      	str	r3, [r2, #0]
 8003512:	4b6d      	ldr	r3, [pc, #436]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a6c      	ldr	r2, [pc, #432]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 8003518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	e00b      	b.n	8003538 <HAL_RCC_OscConfig+0xb0>
 8003520:	4b69      	ldr	r3, [pc, #420]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a68      	ldr	r2, [pc, #416]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 8003526:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800352a:	6013      	str	r3, [r2, #0]
 800352c:	4b66      	ldr	r3, [pc, #408]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a65      	ldr	r2, [pc, #404]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 8003532:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003536:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d013      	beq.n	8003568 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003540:	f7fe f988 	bl	8001854 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003548:	f7fe f984 	bl	8001854 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b64      	cmp	r3, #100	@ 0x64
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e207      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355a:	4b5b      	ldr	r3, [pc, #364]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0f0      	beq.n	8003548 <HAL_RCC_OscConfig+0xc0>
 8003566:	e014      	b.n	8003592 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003568:	f7fe f974 	bl	8001854 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003570:	f7fe f970 	bl	8001854 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b64      	cmp	r3, #100	@ 0x64
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e1f3      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003582:	4b51      	ldr	r3, [pc, #324]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f0      	bne.n	8003570 <HAL_RCC_OscConfig+0xe8>
 800358e:	e000      	b.n	8003592 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d063      	beq.n	8003666 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800359e:	4b4a      	ldr	r3, [pc, #296]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 030c 	and.w	r3, r3, #12
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00b      	beq.n	80035c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035aa:	4b47      	ldr	r3, [pc, #284]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d11c      	bne.n	80035f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035b6:	4b44      	ldr	r3, [pc, #272]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d116      	bne.n	80035f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035c2:	4b41      	ldr	r3, [pc, #260]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d005      	beq.n	80035da <HAL_RCC_OscConfig+0x152>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d001      	beq.n	80035da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e1c7      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035da:	4b3b      	ldr	r3, [pc, #236]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	4937      	ldr	r1, [pc, #220]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ee:	e03a      	b.n	8003666 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d020      	beq.n	800363a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035f8:	4b34      	ldr	r3, [pc, #208]	@ (80036cc <HAL_RCC_OscConfig+0x244>)
 80035fa:	2201      	movs	r2, #1
 80035fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fe:	f7fe f929 	bl	8001854 <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003604:	e008      	b.n	8003618 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003606:	f7fe f925 	bl	8001854 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e1a8      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003618:	4b2b      	ldr	r3, [pc, #172]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0f0      	beq.n	8003606 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003624:	4b28      	ldr	r3, [pc, #160]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	4925      	ldr	r1, [pc, #148]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 8003634:	4313      	orrs	r3, r2
 8003636:	600b      	str	r3, [r1, #0]
 8003638:	e015      	b.n	8003666 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800363a:	4b24      	ldr	r3, [pc, #144]	@ (80036cc <HAL_RCC_OscConfig+0x244>)
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003640:	f7fe f908 	bl	8001854 <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003648:	f7fe f904 	bl	8001854 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e187      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800365a:	4b1b      	ldr	r3, [pc, #108]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f0      	bne.n	8003648 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b00      	cmp	r3, #0
 8003670:	d036      	beq.n	80036e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d016      	beq.n	80036a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800367a:	4b15      	ldr	r3, [pc, #84]	@ (80036d0 <HAL_RCC_OscConfig+0x248>)
 800367c:	2201      	movs	r2, #1
 800367e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003680:	f7fe f8e8 	bl	8001854 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003688:	f7fe f8e4 	bl	8001854 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e167      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800369a:	4b0b      	ldr	r3, [pc, #44]	@ (80036c8 <HAL_RCC_OscConfig+0x240>)
 800369c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0f0      	beq.n	8003688 <HAL_RCC_OscConfig+0x200>
 80036a6:	e01b      	b.n	80036e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036a8:	4b09      	ldr	r3, [pc, #36]	@ (80036d0 <HAL_RCC_OscConfig+0x248>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ae:	f7fe f8d1 	bl	8001854 <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036b4:	e00e      	b.n	80036d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036b6:	f7fe f8cd 	bl	8001854 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d907      	bls.n	80036d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e150      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
 80036c8:	40023800 	.word	0x40023800
 80036cc:	42470000 	.word	0x42470000
 80036d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036d4:	4b88      	ldr	r3, [pc, #544]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 80036d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1ea      	bne.n	80036b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 8097 	beq.w	800381c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ee:	2300      	movs	r3, #0
 80036f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036f2:	4b81      	ldr	r3, [pc, #516]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 80036f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10f      	bne.n	800371e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036fe:	2300      	movs	r3, #0
 8003700:	60bb      	str	r3, [r7, #8]
 8003702:	4b7d      	ldr	r3, [pc, #500]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 8003704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003706:	4a7c      	ldr	r2, [pc, #496]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 8003708:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800370c:	6413      	str	r3, [r2, #64]	@ 0x40
 800370e:	4b7a      	ldr	r3, [pc, #488]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 8003710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003712:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003716:	60bb      	str	r3, [r7, #8]
 8003718:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800371a:	2301      	movs	r3, #1
 800371c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800371e:	4b77      	ldr	r3, [pc, #476]	@ (80038fc <HAL_RCC_OscConfig+0x474>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003726:	2b00      	cmp	r3, #0
 8003728:	d118      	bne.n	800375c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800372a:	4b74      	ldr	r3, [pc, #464]	@ (80038fc <HAL_RCC_OscConfig+0x474>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a73      	ldr	r2, [pc, #460]	@ (80038fc <HAL_RCC_OscConfig+0x474>)
 8003730:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003734:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003736:	f7fe f88d 	bl	8001854 <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373c:	e008      	b.n	8003750 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800373e:	f7fe f889 	bl	8001854 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e10c      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003750:	4b6a      	ldr	r3, [pc, #424]	@ (80038fc <HAL_RCC_OscConfig+0x474>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0f0      	beq.n	800373e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d106      	bne.n	8003772 <HAL_RCC_OscConfig+0x2ea>
 8003764:	4b64      	ldr	r3, [pc, #400]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 8003766:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003768:	4a63      	ldr	r2, [pc, #396]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 800376a:	f043 0301 	orr.w	r3, r3, #1
 800376e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003770:	e01c      	b.n	80037ac <HAL_RCC_OscConfig+0x324>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	2b05      	cmp	r3, #5
 8003778:	d10c      	bne.n	8003794 <HAL_RCC_OscConfig+0x30c>
 800377a:	4b5f      	ldr	r3, [pc, #380]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 800377c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800377e:	4a5e      	ldr	r2, [pc, #376]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 8003780:	f043 0304 	orr.w	r3, r3, #4
 8003784:	6713      	str	r3, [r2, #112]	@ 0x70
 8003786:	4b5c      	ldr	r3, [pc, #368]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 8003788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800378a:	4a5b      	ldr	r2, [pc, #364]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 800378c:	f043 0301 	orr.w	r3, r3, #1
 8003790:	6713      	str	r3, [r2, #112]	@ 0x70
 8003792:	e00b      	b.n	80037ac <HAL_RCC_OscConfig+0x324>
 8003794:	4b58      	ldr	r3, [pc, #352]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 8003796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003798:	4a57      	ldr	r2, [pc, #348]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 800379a:	f023 0301 	bic.w	r3, r3, #1
 800379e:	6713      	str	r3, [r2, #112]	@ 0x70
 80037a0:	4b55      	ldr	r3, [pc, #340]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 80037a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037a4:	4a54      	ldr	r2, [pc, #336]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 80037a6:	f023 0304 	bic.w	r3, r3, #4
 80037aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d015      	beq.n	80037e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b4:	f7fe f84e 	bl	8001854 <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ba:	e00a      	b.n	80037d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037bc:	f7fe f84a 	bl	8001854 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e0cb      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d2:	4b49      	ldr	r3, [pc, #292]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 80037d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0ee      	beq.n	80037bc <HAL_RCC_OscConfig+0x334>
 80037de:	e014      	b.n	800380a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037e0:	f7fe f838 	bl	8001854 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037e6:	e00a      	b.n	80037fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037e8:	f7fe f834 	bl	8001854 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e0b5      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037fe:	4b3e      	ldr	r3, [pc, #248]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 8003800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1ee      	bne.n	80037e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800380a:	7dfb      	ldrb	r3, [r7, #23]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d105      	bne.n	800381c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003810:	4b39      	ldr	r3, [pc, #228]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 8003812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003814:	4a38      	ldr	r2, [pc, #224]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 8003816:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800381a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 80a1 	beq.w	8003968 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003826:	4b34      	ldr	r3, [pc, #208]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 030c 	and.w	r3, r3, #12
 800382e:	2b08      	cmp	r3, #8
 8003830:	d05c      	beq.n	80038ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	2b02      	cmp	r3, #2
 8003838:	d141      	bne.n	80038be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800383a:	4b31      	ldr	r3, [pc, #196]	@ (8003900 <HAL_RCC_OscConfig+0x478>)
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003840:	f7fe f808 	bl	8001854 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003848:	f7fe f804 	bl	8001854 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e087      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800385a:	4b27      	ldr	r3, [pc, #156]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1f0      	bne.n	8003848 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	69da      	ldr	r2, [r3, #28]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003874:	019b      	lsls	r3, r3, #6
 8003876:	431a      	orrs	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800387c:	085b      	lsrs	r3, r3, #1
 800387e:	3b01      	subs	r3, #1
 8003880:	041b      	lsls	r3, r3, #16
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003888:	061b      	lsls	r3, r3, #24
 800388a:	491b      	ldr	r1, [pc, #108]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 800388c:	4313      	orrs	r3, r2
 800388e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003890:	4b1b      	ldr	r3, [pc, #108]	@ (8003900 <HAL_RCC_OscConfig+0x478>)
 8003892:	2201      	movs	r2, #1
 8003894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003896:	f7fd ffdd 	bl	8001854 <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800389c:	e008      	b.n	80038b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800389e:	f7fd ffd9 	bl	8001854 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e05c      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b0:	4b11      	ldr	r3, [pc, #68]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0f0      	beq.n	800389e <HAL_RCC_OscConfig+0x416>
 80038bc:	e054      	b.n	8003968 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038be:	4b10      	ldr	r3, [pc, #64]	@ (8003900 <HAL_RCC_OscConfig+0x478>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c4:	f7fd ffc6 	bl	8001854 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038cc:	f7fd ffc2 	bl	8001854 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e045      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038de:	4b06      	ldr	r3, [pc, #24]	@ (80038f8 <HAL_RCC_OscConfig+0x470>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1f0      	bne.n	80038cc <HAL_RCC_OscConfig+0x444>
 80038ea:	e03d      	b.n	8003968 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d107      	bne.n	8003904 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e038      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
 80038f8:	40023800 	.word	0x40023800
 80038fc:	40007000 	.word	0x40007000
 8003900:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003904:	4b1b      	ldr	r3, [pc, #108]	@ (8003974 <HAL_RCC_OscConfig+0x4ec>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d028      	beq.n	8003964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800391c:	429a      	cmp	r2, r3
 800391e:	d121      	bne.n	8003964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800392a:	429a      	cmp	r2, r3
 800392c:	d11a      	bne.n	8003964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003934:	4013      	ands	r3, r2
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800393a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800393c:	4293      	cmp	r3, r2
 800393e:	d111      	bne.n	8003964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800394a:	085b      	lsrs	r3, r3, #1
 800394c:	3b01      	subs	r3, #1
 800394e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003950:	429a      	cmp	r2, r3
 8003952:	d107      	bne.n	8003964 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800395e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003960:	429a      	cmp	r2, r3
 8003962:	d001      	beq.n	8003968 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e000      	b.n	800396a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3718      	adds	r7, #24
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	40023800 	.word	0x40023800

08003978 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e0cc      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800398c:	4b68      	ldr	r3, [pc, #416]	@ (8003b30 <HAL_RCC_ClockConfig+0x1b8>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 030f 	and.w	r3, r3, #15
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	429a      	cmp	r2, r3
 8003998:	d90c      	bls.n	80039b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399a:	4b65      	ldr	r3, [pc, #404]	@ (8003b30 <HAL_RCC_ClockConfig+0x1b8>)
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	b2d2      	uxtb	r2, r2
 80039a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a2:	4b63      	ldr	r3, [pc, #396]	@ (8003b30 <HAL_RCC_ClockConfig+0x1b8>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 030f 	and.w	r3, r3, #15
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d001      	beq.n	80039b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e0b8      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d020      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d005      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039cc:	4b59      	ldr	r3, [pc, #356]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	4a58      	ldr	r2, [pc, #352]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80039d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0308 	and.w	r3, r3, #8
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d005      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039e4:	4b53      	ldr	r3, [pc, #332]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	4a52      	ldr	r2, [pc, #328]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80039ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f0:	4b50      	ldr	r3, [pc, #320]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	494d      	ldr	r1, [pc, #308]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d044      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d107      	bne.n	8003a26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a16:	4b47      	ldr	r3, [pc, #284]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d119      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e07f      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d003      	beq.n	8003a36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a32:	2b03      	cmp	r3, #3
 8003a34:	d107      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a36:	4b3f      	ldr	r3, [pc, #252]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d109      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e06f      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a46:	4b3b      	ldr	r3, [pc, #236]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e067      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a56:	4b37      	ldr	r3, [pc, #220]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f023 0203 	bic.w	r2, r3, #3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	4934      	ldr	r1, [pc, #208]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a68:	f7fd fef4 	bl	8001854 <HAL_GetTick>
 8003a6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a6e:	e00a      	b.n	8003a86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a70:	f7fd fef0 	bl	8001854 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e04f      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a86:	4b2b      	ldr	r3, [pc, #172]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 020c 	and.w	r2, r3, #12
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d1eb      	bne.n	8003a70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a98:	4b25      	ldr	r3, [pc, #148]	@ (8003b30 <HAL_RCC_ClockConfig+0x1b8>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 030f 	and.w	r3, r3, #15
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d20c      	bcs.n	8003ac0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa6:	4b22      	ldr	r3, [pc, #136]	@ (8003b30 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aae:	4b20      	ldr	r3, [pc, #128]	@ (8003b30 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 030f 	and.w	r3, r3, #15
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d001      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e032      	b.n	8003b26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d008      	beq.n	8003ade <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003acc:	4b19      	ldr	r3, [pc, #100]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	4916      	ldr	r1, [pc, #88]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d009      	beq.n	8003afe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003aea:	4b12      	ldr	r3, [pc, #72]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	490e      	ldr	r1, [pc, #56]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003afe:	f000 f821 	bl	8003b44 <HAL_RCC_GetSysClockFreq>
 8003b02:	4602      	mov	r2, r0
 8003b04:	4b0b      	ldr	r3, [pc, #44]	@ (8003b34 <HAL_RCC_ClockConfig+0x1bc>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	091b      	lsrs	r3, r3, #4
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	490a      	ldr	r1, [pc, #40]	@ (8003b38 <HAL_RCC_ClockConfig+0x1c0>)
 8003b10:	5ccb      	ldrb	r3, [r1, r3]
 8003b12:	fa22 f303 	lsr.w	r3, r2, r3
 8003b16:	4a09      	ldr	r2, [pc, #36]	@ (8003b3c <HAL_RCC_ClockConfig+0x1c4>)
 8003b18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b1a:	4b09      	ldr	r3, [pc, #36]	@ (8003b40 <HAL_RCC_ClockConfig+0x1c8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fd fd5c 	bl	80015dc <HAL_InitTick>

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40023c00 	.word	0x40023c00
 8003b34:	40023800 	.word	0x40023800
 8003b38:	08005384 	.word	0x08005384
 8003b3c:	20000000 	.word	0x20000000
 8003b40:	20000004 	.word	0x20000004

08003b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b48:	b094      	sub	sp, #80	@ 0x50
 8003b4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b50:	2300      	movs	r3, #0
 8003b52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b54:	2300      	movs	r3, #0
 8003b56:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b5c:	4b79      	ldr	r3, [pc, #484]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 030c 	and.w	r3, r3, #12
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d00d      	beq.n	8003b84 <HAL_RCC_GetSysClockFreq+0x40>
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	f200 80e1 	bhi.w	8003d30 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d002      	beq.n	8003b78 <HAL_RCC_GetSysClockFreq+0x34>
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	d003      	beq.n	8003b7e <HAL_RCC_GetSysClockFreq+0x3a>
 8003b76:	e0db      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b78:	4b73      	ldr	r3, [pc, #460]	@ (8003d48 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003b7c:	e0db      	b.n	8003d36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b7e:	4b73      	ldr	r3, [pc, #460]	@ (8003d4c <HAL_RCC_GetSysClockFreq+0x208>)
 8003b80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b82:	e0d8      	b.n	8003d36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b84:	4b6f      	ldr	r3, [pc, #444]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b8c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b8e:	4b6d      	ldr	r3, [pc, #436]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d063      	beq.n	8003c62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b9a:	4b6a      	ldr	r3, [pc, #424]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	099b      	lsrs	r3, r3, #6
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ba4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bac:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bae:	2300      	movs	r3, #0
 8003bb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bb2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003bb6:	4622      	mov	r2, r4
 8003bb8:	462b      	mov	r3, r5
 8003bba:	f04f 0000 	mov.w	r0, #0
 8003bbe:	f04f 0100 	mov.w	r1, #0
 8003bc2:	0159      	lsls	r1, r3, #5
 8003bc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bc8:	0150      	lsls	r0, r2, #5
 8003bca:	4602      	mov	r2, r0
 8003bcc:	460b      	mov	r3, r1
 8003bce:	4621      	mov	r1, r4
 8003bd0:	1a51      	subs	r1, r2, r1
 8003bd2:	6139      	str	r1, [r7, #16]
 8003bd4:	4629      	mov	r1, r5
 8003bd6:	eb63 0301 	sbc.w	r3, r3, r1
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003be8:	4659      	mov	r1, fp
 8003bea:	018b      	lsls	r3, r1, #6
 8003bec:	4651      	mov	r1, sl
 8003bee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bf2:	4651      	mov	r1, sl
 8003bf4:	018a      	lsls	r2, r1, #6
 8003bf6:	4651      	mov	r1, sl
 8003bf8:	ebb2 0801 	subs.w	r8, r2, r1
 8003bfc:	4659      	mov	r1, fp
 8003bfe:	eb63 0901 	sbc.w	r9, r3, r1
 8003c02:	f04f 0200 	mov.w	r2, #0
 8003c06:	f04f 0300 	mov.w	r3, #0
 8003c0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c16:	4690      	mov	r8, r2
 8003c18:	4699      	mov	r9, r3
 8003c1a:	4623      	mov	r3, r4
 8003c1c:	eb18 0303 	adds.w	r3, r8, r3
 8003c20:	60bb      	str	r3, [r7, #8]
 8003c22:	462b      	mov	r3, r5
 8003c24:	eb49 0303 	adc.w	r3, r9, r3
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	f04f 0200 	mov.w	r2, #0
 8003c2e:	f04f 0300 	mov.w	r3, #0
 8003c32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c36:	4629      	mov	r1, r5
 8003c38:	024b      	lsls	r3, r1, #9
 8003c3a:	4621      	mov	r1, r4
 8003c3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c40:	4621      	mov	r1, r4
 8003c42:	024a      	lsls	r2, r1, #9
 8003c44:	4610      	mov	r0, r2
 8003c46:	4619      	mov	r1, r3
 8003c48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c54:	f7fc faca 	bl	80001ec <__aeabi_uldivmod>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c60:	e058      	b.n	8003d14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c62:	4b38      	ldr	r3, [pc, #224]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	099b      	lsrs	r3, r3, #6
 8003c68:	2200      	movs	r2, #0
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	4611      	mov	r1, r2
 8003c6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c72:	623b      	str	r3, [r7, #32]
 8003c74:	2300      	movs	r3, #0
 8003c76:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c7c:	4642      	mov	r2, r8
 8003c7e:	464b      	mov	r3, r9
 8003c80:	f04f 0000 	mov.w	r0, #0
 8003c84:	f04f 0100 	mov.w	r1, #0
 8003c88:	0159      	lsls	r1, r3, #5
 8003c8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c8e:	0150      	lsls	r0, r2, #5
 8003c90:	4602      	mov	r2, r0
 8003c92:	460b      	mov	r3, r1
 8003c94:	4641      	mov	r1, r8
 8003c96:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c9a:	4649      	mov	r1, r9
 8003c9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ca0:	f04f 0200 	mov.w	r2, #0
 8003ca4:	f04f 0300 	mov.w	r3, #0
 8003ca8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003cac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003cb0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003cb4:	ebb2 040a 	subs.w	r4, r2, sl
 8003cb8:	eb63 050b 	sbc.w	r5, r3, fp
 8003cbc:	f04f 0200 	mov.w	r2, #0
 8003cc0:	f04f 0300 	mov.w	r3, #0
 8003cc4:	00eb      	lsls	r3, r5, #3
 8003cc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cca:	00e2      	lsls	r2, r4, #3
 8003ccc:	4614      	mov	r4, r2
 8003cce:	461d      	mov	r5, r3
 8003cd0:	4643      	mov	r3, r8
 8003cd2:	18e3      	adds	r3, r4, r3
 8003cd4:	603b      	str	r3, [r7, #0]
 8003cd6:	464b      	mov	r3, r9
 8003cd8:	eb45 0303 	adc.w	r3, r5, r3
 8003cdc:	607b      	str	r3, [r7, #4]
 8003cde:	f04f 0200 	mov.w	r2, #0
 8003ce2:	f04f 0300 	mov.w	r3, #0
 8003ce6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cea:	4629      	mov	r1, r5
 8003cec:	028b      	lsls	r3, r1, #10
 8003cee:	4621      	mov	r1, r4
 8003cf0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cf4:	4621      	mov	r1, r4
 8003cf6:	028a      	lsls	r2, r1, #10
 8003cf8:	4610      	mov	r0, r2
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cfe:	2200      	movs	r2, #0
 8003d00:	61bb      	str	r3, [r7, #24]
 8003d02:	61fa      	str	r2, [r7, #28]
 8003d04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d08:	f7fc fa70 	bl	80001ec <__aeabi_uldivmod>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4613      	mov	r3, r2
 8003d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d14:	4b0b      	ldr	r3, [pc, #44]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	0c1b      	lsrs	r3, r3, #16
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	3301      	adds	r3, #1
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003d24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d2c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d2e:	e002      	b.n	8003d36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d30:	4b05      	ldr	r3, [pc, #20]	@ (8003d48 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3750      	adds	r7, #80	@ 0x50
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d42:	bf00      	nop
 8003d44:	40023800 	.word	0x40023800
 8003d48:	00f42400 	.word	0x00f42400
 8003d4c:	007a1200 	.word	0x007a1200

08003d50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d54:	4b03      	ldr	r3, [pc, #12]	@ (8003d64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d56:	681b      	ldr	r3, [r3, #0]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	20000000 	.word	0x20000000

08003d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d6c:	f7ff fff0 	bl	8003d50 <HAL_RCC_GetHCLKFreq>
 8003d70:	4602      	mov	r2, r0
 8003d72:	4b05      	ldr	r3, [pc, #20]	@ (8003d88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	0a9b      	lsrs	r3, r3, #10
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	4903      	ldr	r1, [pc, #12]	@ (8003d8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d7e:	5ccb      	ldrb	r3, [r1, r3]
 8003d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	08005394 	.word	0x08005394

08003d90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d94:	f7ff ffdc 	bl	8003d50 <HAL_RCC_GetHCLKFreq>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	4b05      	ldr	r3, [pc, #20]	@ (8003db0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	0b5b      	lsrs	r3, r3, #13
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	4903      	ldr	r1, [pc, #12]	@ (8003db4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003da6:	5ccb      	ldrb	r3, [r1, r3]
 8003da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40023800 	.word	0x40023800
 8003db4:	08005394 	.word	0x08005394

08003db8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	220f      	movs	r2, #15
 8003dc6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003dc8:	4b12      	ldr	r3, [pc, #72]	@ (8003e14 <HAL_RCC_GetClockConfig+0x5c>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f003 0203 	and.w	r2, r3, #3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8003e14 <HAL_RCC_GetClockConfig+0x5c>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003de0:	4b0c      	ldr	r3, [pc, #48]	@ (8003e14 <HAL_RCC_GetClockConfig+0x5c>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003dec:	4b09      	ldr	r3, [pc, #36]	@ (8003e14 <HAL_RCC_GetClockConfig+0x5c>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	08db      	lsrs	r3, r3, #3
 8003df2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003dfa:	4b07      	ldr	r3, [pc, #28]	@ (8003e18 <HAL_RCC_GetClockConfig+0x60>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 020f 	and.w	r2, r3, #15
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	601a      	str	r2, [r3, #0]
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	40023800 	.word	0x40023800
 8003e18:	40023c00 	.word	0x40023c00

08003e1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10b      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d105      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d075      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e50:	4b91      	ldr	r3, [pc, #580]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e56:	f7fd fcfd 	bl	8001854 <HAL_GetTick>
 8003e5a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e5c:	e008      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e5e:	f7fd fcf9 	bl	8001854 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e189      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e70:	4b8a      	ldr	r3, [pc, #552]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1f0      	bne.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d009      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	019a      	lsls	r2, r3, #6
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	071b      	lsls	r3, r3, #28
 8003e94:	4981      	ldr	r1, [pc, #516]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d01f      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ea8:	4b7c      	ldr	r3, [pc, #496]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003eae:	0f1b      	lsrs	r3, r3, #28
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	019a      	lsls	r2, r3, #6
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	061b      	lsls	r3, r3, #24
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	071b      	lsls	r3, r3, #28
 8003ec8:	4974      	ldr	r1, [pc, #464]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003ed0:	4b72      	ldr	r3, [pc, #456]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ed2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ed6:	f023 021f 	bic.w	r2, r3, #31
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	496e      	ldr	r1, [pc, #440]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00d      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	019a      	lsls	r2, r3, #6
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	061b      	lsls	r3, r3, #24
 8003f00:	431a      	orrs	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	071b      	lsls	r3, r3, #28
 8003f08:	4964      	ldr	r1, [pc, #400]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f10:	4b61      	ldr	r3, [pc, #388]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003f12:	2201      	movs	r2, #1
 8003f14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f16:	f7fd fc9d 	bl	8001854 <HAL_GetTick>
 8003f1a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f1c:	e008      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f1e:	f7fd fc99 	bl	8001854 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e129      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f30:	4b5a      	ldr	r3, [pc, #360]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0f0      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d105      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d079      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f54:	4b52      	ldr	r3, [pc, #328]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f5a:	f7fd fc7b 	bl	8001854 <HAL_GetTick>
 8003f5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f60:	e008      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003f62:	f7fd fc77 	bl	8001854 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e107      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f74:	4b49      	ldr	r3, [pc, #292]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f80:	d0ef      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0304 	and.w	r3, r3, #4
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d020      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f8e:	4b43      	ldr	r3, [pc, #268]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f94:	0f1b      	lsrs	r3, r3, #28
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	019a      	lsls	r2, r3, #6
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	061b      	lsls	r3, r3, #24
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	071b      	lsls	r3, r3, #28
 8003fae:	493b      	ldr	r1, [pc, #236]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003fb6:	4b39      	ldr	r3, [pc, #228]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fbc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	021b      	lsls	r3, r3, #8
 8003fc8:	4934      	ldr	r1, [pc, #208]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d01e      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fdc:	4b2f      	ldr	r3, [pc, #188]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe2:	0e1b      	lsrs	r3, r3, #24
 8003fe4:	f003 030f 	and.w	r3, r3, #15
 8003fe8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	019a      	lsls	r2, r3, #6
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	061b      	lsls	r3, r3, #24
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	071b      	lsls	r3, r3, #28
 8003ffc:	4927      	ldr	r1, [pc, #156]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004004:	4b25      	ldr	r3, [pc, #148]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004006:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800400a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004012:	4922      	ldr	r1, [pc, #136]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004014:	4313      	orrs	r3, r2
 8004016:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800401a:	4b21      	ldr	r3, [pc, #132]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800401c:	2201      	movs	r2, #1
 800401e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004020:	f7fd fc18 	bl	8001854 <HAL_GetTick>
 8004024:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004026:	e008      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004028:	f7fd fc14 	bl	8001854 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d901      	bls.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e0a4      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800403a:	4b18      	ldr	r3, [pc, #96]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004042:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004046:	d1ef      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0320 	and.w	r3, r3, #32
 8004050:	2b00      	cmp	r3, #0
 8004052:	f000 808b 	beq.w	800416c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004056:	2300      	movs	r3, #0
 8004058:	60fb      	str	r3, [r7, #12]
 800405a:	4b10      	ldr	r3, [pc, #64]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800405c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405e:	4a0f      	ldr	r2, [pc, #60]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004064:	6413      	str	r3, [r2, #64]	@ 0x40
 8004066:	4b0d      	ldr	r3, [pc, #52]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004072:	4b0c      	ldr	r3, [pc, #48]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a0b      	ldr	r2, [pc, #44]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004078:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800407c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800407e:	f7fd fbe9 	bl	8001854 <HAL_GetTick>
 8004082:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004084:	e010      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004086:	f7fd fbe5 	bl	8001854 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d909      	bls.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e075      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004098:	42470068 	.word	0x42470068
 800409c:	40023800 	.word	0x40023800
 80040a0:	42470070 	.word	0x42470070
 80040a4:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80040a8:	4b38      	ldr	r3, [pc, #224]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d0e8      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040b4:	4b36      	ldr	r3, [pc, #216]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80040b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040bc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d02f      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040cc:	693a      	ldr	r2, [r7, #16]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d028      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040d2:	4b2f      	ldr	r3, [pc, #188]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80040d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040da:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040dc:	4b2d      	ldr	r3, [pc, #180]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80040de:	2201      	movs	r2, #1
 80040e0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040e2:	4b2c      	ldr	r3, [pc, #176]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80040e8:	4a29      	ldr	r2, [pc, #164]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80040ee:	4b28      	ldr	r3, [pc, #160]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80040f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d114      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80040fa:	f7fd fbab 	bl	8001854 <HAL_GetTick>
 80040fe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004100:	e00a      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004102:	f7fd fba7 	bl	8001854 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004110:	4293      	cmp	r3, r2
 8004112:	d901      	bls.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e035      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004118:	4b1d      	ldr	r3, [pc, #116]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800411a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0ee      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004128:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800412c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004130:	d10d      	bne.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004132:	4b17      	ldr	r3, [pc, #92]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800413e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004142:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004146:	4912      	ldr	r1, [pc, #72]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004148:	4313      	orrs	r3, r2
 800414a:	608b      	str	r3, [r1, #8]
 800414c:	e005      	b.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800414e:	4b10      	ldr	r3, [pc, #64]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	4a0f      	ldr	r2, [pc, #60]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004154:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004158:	6093      	str	r3, [r2, #8]
 800415a:	4b0d      	ldr	r3, [pc, #52]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800415c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004162:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004166:	490a      	ldr	r1, [pc, #40]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004168:	4313      	orrs	r3, r2
 800416a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0310 	and.w	r3, r3, #16
 8004174:	2b00      	cmp	r3, #0
 8004176:	d004      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800417e:	4b06      	ldr	r3, [pc, #24]	@ (8004198 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004180:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40007000 	.word	0x40007000
 8004190:	40023800 	.word	0x40023800
 8004194:	42470e40 	.word	0x42470e40
 8004198:	424711e0 	.word	0x424711e0

0800419c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e025      	b.n	80041fc <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d106      	bne.n	80041ca <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7fd f9ff 	bl	80015c8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2202      	movs	r2, #2
 80041ce:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	3304      	adds	r3, #4
 80041da:	4619      	mov	r1, r3
 80041dc:	4610      	mov	r0, r2
 80041de:	f000 ffd3 	bl	8005188 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6818      	ldr	r0, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	461a      	mov	r2, r3
 80041ec:	6839      	ldr	r1, [r7, #0]
 80041ee:	f001 f828 	bl	8005242 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e07b      	b.n	800430e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421a:	2b00      	cmp	r3, #0
 800421c:	d108      	bne.n	8004230 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004226:	d009      	beq.n	800423c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	61da      	str	r2, [r3, #28]
 800422e:	e005      	b.n	800423c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d106      	bne.n	800425c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7fd f872 	bl	8001340 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004272:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004284:	431a      	orrs	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800428e:	431a      	orrs	r2, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	431a      	orrs	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	431a      	orrs	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042ac:	431a      	orrs	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042c0:	ea42 0103 	orr.w	r1, r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	0c1b      	lsrs	r3, r3, #16
 80042da:	f003 0104 	and.w	r1, r3, #4
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e2:	f003 0210 	and.w	r2, r3, #16
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	69da      	ldr	r2, [r3, #28]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b082      	sub	sp, #8
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e041      	b.n	80043ac <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	d106      	bne.n	8004342 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f7fd f847 	bl	80013d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2202      	movs	r2, #2
 8004346:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3304      	adds	r3, #4
 8004352:	4619      	mov	r1, r3
 8004354:	4610      	mov	r0, r2
 8004356:	f000 fa7d 	bl	8004854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d001      	beq.n	80043cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e04e      	b.n	800446a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0201 	orr.w	r2, r2, #1
 80043e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a23      	ldr	r2, [pc, #140]	@ (8004478 <HAL_TIM_Base_Start_IT+0xc4>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d022      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x80>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043f6:	d01d      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x80>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a1f      	ldr	r2, [pc, #124]	@ (800447c <HAL_TIM_Base_Start_IT+0xc8>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d018      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x80>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a1e      	ldr	r2, [pc, #120]	@ (8004480 <HAL_TIM_Base_Start_IT+0xcc>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d013      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x80>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a1c      	ldr	r2, [pc, #112]	@ (8004484 <HAL_TIM_Base_Start_IT+0xd0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d00e      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x80>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a1b      	ldr	r2, [pc, #108]	@ (8004488 <HAL_TIM_Base_Start_IT+0xd4>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d009      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x80>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a19      	ldr	r2, [pc, #100]	@ (800448c <HAL_TIM_Base_Start_IT+0xd8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d004      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x80>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a18      	ldr	r2, [pc, #96]	@ (8004490 <HAL_TIM_Base_Start_IT+0xdc>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d111      	bne.n	8004458 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 0307 	and.w	r3, r3, #7
 800443e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2b06      	cmp	r3, #6
 8004444:	d010      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f042 0201 	orr.w	r2, r2, #1
 8004454:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004456:	e007      	b.n	8004468 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0201 	orr.w	r2, r2, #1
 8004466:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	40010000 	.word	0x40010000
 800447c:	40000400 	.word	0x40000400
 8004480:	40000800 	.word	0x40000800
 8004484:	40000c00 	.word	0x40000c00
 8004488:	40010400 	.word	0x40010400
 800448c:	40014000 	.word	0x40014000
 8004490:	40001800 	.word	0x40001800

08004494 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d020      	beq.n	80044f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d01b      	beq.n	80044f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f06f 0202 	mvn.w	r2, #2
 80044c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f999 	bl	8004816 <HAL_TIM_IC_CaptureCallback>
 80044e4:	e005      	b.n	80044f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f98b 	bl	8004802 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f99c 	bl	800482a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f003 0304 	and.w	r3, r3, #4
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d020      	beq.n	8004544 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b00      	cmp	r3, #0
 800450a:	d01b      	beq.n	8004544 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f06f 0204 	mvn.w	r2, #4
 8004514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2202      	movs	r2, #2
 800451a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f973 	bl	8004816 <HAL_TIM_IC_CaptureCallback>
 8004530:	e005      	b.n	800453e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f965 	bl	8004802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f976 	bl	800482a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	f003 0308 	and.w	r3, r3, #8
 800454a:	2b00      	cmp	r3, #0
 800454c:	d020      	beq.n	8004590 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f003 0308 	and.w	r3, r3, #8
 8004554:	2b00      	cmp	r3, #0
 8004556:	d01b      	beq.n	8004590 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f06f 0208 	mvn.w	r2, #8
 8004560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2204      	movs	r2, #4
 8004566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f94d 	bl	8004816 <HAL_TIM_IC_CaptureCallback>
 800457c:	e005      	b.n	800458a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f93f 	bl	8004802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f950 	bl	800482a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f003 0310 	and.w	r3, r3, #16
 8004596:	2b00      	cmp	r3, #0
 8004598:	d020      	beq.n	80045dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f003 0310 	and.w	r3, r3, #16
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d01b      	beq.n	80045dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f06f 0210 	mvn.w	r2, #16
 80045ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2208      	movs	r2, #8
 80045b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f927 	bl	8004816 <HAL_TIM_IC_CaptureCallback>
 80045c8:	e005      	b.n	80045d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f919 	bl	8004802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f92a 	bl	800482a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00c      	beq.n	8004600 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d007      	beq.n	8004600 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f06f 0201 	mvn.w	r2, #1
 80045f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7fc fc04 	bl	8000e08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00c      	beq.n	8004624 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004610:	2b00      	cmp	r3, #0
 8004612:	d007      	beq.n	8004624 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800461c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fae4 	bl	8004bec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00c      	beq.n	8004648 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004634:	2b00      	cmp	r3, #0
 8004636:	d007      	beq.n	8004648 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f8fb 	bl	800483e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f003 0320 	and.w	r3, r3, #32
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00c      	beq.n	800466c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f003 0320 	and.w	r3, r3, #32
 8004658:	2b00      	cmp	r3, #0
 800465a:	d007      	beq.n	800466c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f06f 0220 	mvn.w	r2, #32
 8004664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 fab6 	bl	8004bd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800466c:	bf00      	nop
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800467e:	2300      	movs	r3, #0
 8004680:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004688:	2b01      	cmp	r3, #1
 800468a:	d101      	bne.n	8004690 <HAL_TIM_ConfigClockSource+0x1c>
 800468c:	2302      	movs	r3, #2
 800468e:	e0b4      	b.n	80047fa <HAL_TIM_ConfigClockSource+0x186>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80046ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046c8:	d03e      	beq.n	8004748 <HAL_TIM_ConfigClockSource+0xd4>
 80046ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046ce:	f200 8087 	bhi.w	80047e0 <HAL_TIM_ConfigClockSource+0x16c>
 80046d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046d6:	f000 8086 	beq.w	80047e6 <HAL_TIM_ConfigClockSource+0x172>
 80046da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046de:	d87f      	bhi.n	80047e0 <HAL_TIM_ConfigClockSource+0x16c>
 80046e0:	2b70      	cmp	r3, #112	@ 0x70
 80046e2:	d01a      	beq.n	800471a <HAL_TIM_ConfigClockSource+0xa6>
 80046e4:	2b70      	cmp	r3, #112	@ 0x70
 80046e6:	d87b      	bhi.n	80047e0 <HAL_TIM_ConfigClockSource+0x16c>
 80046e8:	2b60      	cmp	r3, #96	@ 0x60
 80046ea:	d050      	beq.n	800478e <HAL_TIM_ConfigClockSource+0x11a>
 80046ec:	2b60      	cmp	r3, #96	@ 0x60
 80046ee:	d877      	bhi.n	80047e0 <HAL_TIM_ConfigClockSource+0x16c>
 80046f0:	2b50      	cmp	r3, #80	@ 0x50
 80046f2:	d03c      	beq.n	800476e <HAL_TIM_ConfigClockSource+0xfa>
 80046f4:	2b50      	cmp	r3, #80	@ 0x50
 80046f6:	d873      	bhi.n	80047e0 <HAL_TIM_ConfigClockSource+0x16c>
 80046f8:	2b40      	cmp	r3, #64	@ 0x40
 80046fa:	d058      	beq.n	80047ae <HAL_TIM_ConfigClockSource+0x13a>
 80046fc:	2b40      	cmp	r3, #64	@ 0x40
 80046fe:	d86f      	bhi.n	80047e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004700:	2b30      	cmp	r3, #48	@ 0x30
 8004702:	d064      	beq.n	80047ce <HAL_TIM_ConfigClockSource+0x15a>
 8004704:	2b30      	cmp	r3, #48	@ 0x30
 8004706:	d86b      	bhi.n	80047e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004708:	2b20      	cmp	r3, #32
 800470a:	d060      	beq.n	80047ce <HAL_TIM_ConfigClockSource+0x15a>
 800470c:	2b20      	cmp	r3, #32
 800470e:	d867      	bhi.n	80047e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004710:	2b00      	cmp	r3, #0
 8004712:	d05c      	beq.n	80047ce <HAL_TIM_ConfigClockSource+0x15a>
 8004714:	2b10      	cmp	r3, #16
 8004716:	d05a      	beq.n	80047ce <HAL_TIM_ConfigClockSource+0x15a>
 8004718:	e062      	b.n	80047e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800472a:	f000 f9b9 	bl	8004aa0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800473c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	609a      	str	r2, [r3, #8]
      break;
 8004746:	e04f      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004758:	f000 f9a2 	bl	8004aa0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689a      	ldr	r2, [r3, #8]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800476a:	609a      	str	r2, [r3, #8]
      break;
 800476c:	e03c      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800477a:	461a      	mov	r2, r3
 800477c:	f000 f916 	bl	80049ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2150      	movs	r1, #80	@ 0x50
 8004786:	4618      	mov	r0, r3
 8004788:	f000 f96f 	bl	8004a6a <TIM_ITRx_SetConfig>
      break;
 800478c:	e02c      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800479a:	461a      	mov	r2, r3
 800479c:	f000 f935 	bl	8004a0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2160      	movs	r1, #96	@ 0x60
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 f95f 	bl	8004a6a <TIM_ITRx_SetConfig>
      break;
 80047ac:	e01c      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ba:	461a      	mov	r2, r3
 80047bc:	f000 f8f6 	bl	80049ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2140      	movs	r1, #64	@ 0x40
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 f94f 	bl	8004a6a <TIM_ITRx_SetConfig>
      break;
 80047cc:	e00c      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4619      	mov	r1, r3
 80047d8:	4610      	mov	r0, r2
 80047da:	f000 f946 	bl	8004a6a <TIM_ITRx_SetConfig>
      break;
 80047de:	e003      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	73fb      	strb	r3, [r7, #15]
      break;
 80047e4:	e000      	b.n	80047e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80047e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80047f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004802:	b480      	push	{r7}
 8004804:	b083      	sub	sp, #12
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800480a:	bf00      	nop
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004816:	b480      	push	{r7}
 8004818:	b083      	sub	sp, #12
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800481e:	bf00      	nop
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800483e:	b480      	push	{r7}
 8004840:	b083      	sub	sp, #12
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
	...

08004854 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a46      	ldr	r2, [pc, #280]	@ (8004980 <TIM_Base_SetConfig+0x12c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d013      	beq.n	8004894 <TIM_Base_SetConfig+0x40>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004872:	d00f      	beq.n	8004894 <TIM_Base_SetConfig+0x40>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a43      	ldr	r2, [pc, #268]	@ (8004984 <TIM_Base_SetConfig+0x130>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d00b      	beq.n	8004894 <TIM_Base_SetConfig+0x40>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a42      	ldr	r2, [pc, #264]	@ (8004988 <TIM_Base_SetConfig+0x134>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d007      	beq.n	8004894 <TIM_Base_SetConfig+0x40>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a41      	ldr	r2, [pc, #260]	@ (800498c <TIM_Base_SetConfig+0x138>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d003      	beq.n	8004894 <TIM_Base_SetConfig+0x40>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a40      	ldr	r2, [pc, #256]	@ (8004990 <TIM_Base_SetConfig+0x13c>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d108      	bne.n	80048a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800489a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a35      	ldr	r2, [pc, #212]	@ (8004980 <TIM_Base_SetConfig+0x12c>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d02b      	beq.n	8004906 <TIM_Base_SetConfig+0xb2>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048b4:	d027      	beq.n	8004906 <TIM_Base_SetConfig+0xb2>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a32      	ldr	r2, [pc, #200]	@ (8004984 <TIM_Base_SetConfig+0x130>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d023      	beq.n	8004906 <TIM_Base_SetConfig+0xb2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a31      	ldr	r2, [pc, #196]	@ (8004988 <TIM_Base_SetConfig+0x134>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d01f      	beq.n	8004906 <TIM_Base_SetConfig+0xb2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a30      	ldr	r2, [pc, #192]	@ (800498c <TIM_Base_SetConfig+0x138>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d01b      	beq.n	8004906 <TIM_Base_SetConfig+0xb2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a2f      	ldr	r2, [pc, #188]	@ (8004990 <TIM_Base_SetConfig+0x13c>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d017      	beq.n	8004906 <TIM_Base_SetConfig+0xb2>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a2e      	ldr	r2, [pc, #184]	@ (8004994 <TIM_Base_SetConfig+0x140>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d013      	beq.n	8004906 <TIM_Base_SetConfig+0xb2>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a2d      	ldr	r2, [pc, #180]	@ (8004998 <TIM_Base_SetConfig+0x144>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d00f      	beq.n	8004906 <TIM_Base_SetConfig+0xb2>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a2c      	ldr	r2, [pc, #176]	@ (800499c <TIM_Base_SetConfig+0x148>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d00b      	beq.n	8004906 <TIM_Base_SetConfig+0xb2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a2b      	ldr	r2, [pc, #172]	@ (80049a0 <TIM_Base_SetConfig+0x14c>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d007      	beq.n	8004906 <TIM_Base_SetConfig+0xb2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a2a      	ldr	r2, [pc, #168]	@ (80049a4 <TIM_Base_SetConfig+0x150>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d003      	beq.n	8004906 <TIM_Base_SetConfig+0xb2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a29      	ldr	r2, [pc, #164]	@ (80049a8 <TIM_Base_SetConfig+0x154>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d108      	bne.n	8004918 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800490c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	4313      	orrs	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	4313      	orrs	r3, r2
 8004924:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a10      	ldr	r2, [pc, #64]	@ (8004980 <TIM_Base_SetConfig+0x12c>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d003      	beq.n	800494c <TIM_Base_SetConfig+0xf8>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a12      	ldr	r2, [pc, #72]	@ (8004990 <TIM_Base_SetConfig+0x13c>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d103      	bne.n	8004954 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	691a      	ldr	r2, [r3, #16]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b01      	cmp	r3, #1
 8004964:	d105      	bne.n	8004972 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	f023 0201 	bic.w	r2, r3, #1
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	611a      	str	r2, [r3, #16]
  }
}
 8004972:	bf00      	nop
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	40010000 	.word	0x40010000
 8004984:	40000400 	.word	0x40000400
 8004988:	40000800 	.word	0x40000800
 800498c:	40000c00 	.word	0x40000c00
 8004990:	40010400 	.word	0x40010400
 8004994:	40014000 	.word	0x40014000
 8004998:	40014400 	.word	0x40014400
 800499c:	40014800 	.word	0x40014800
 80049a0:	40001800 	.word	0x40001800
 80049a4:	40001c00 	.word	0x40001c00
 80049a8:	40002000 	.word	0x40002000

080049ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b087      	sub	sp, #28
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	f023 0201 	bic.w	r2, r3, #1
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	011b      	lsls	r3, r3, #4
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	4313      	orrs	r3, r2
 80049e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f023 030a 	bic.w	r3, r3, #10
 80049e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	621a      	str	r2, [r3, #32]
}
 80049fe:	bf00      	nop
 8004a00:	371c      	adds	r7, #28
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b087      	sub	sp, #28
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	f023 0210 	bic.w	r2, r3, #16
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	031b      	lsls	r3, r3, #12
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a46:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	011b      	lsls	r3, r3, #4
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	621a      	str	r2, [r3, #32]
}
 8004a5e:	bf00      	nop
 8004a60:	371c      	adds	r7, #28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b085      	sub	sp, #20
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
 8004a72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a82:	683a      	ldr	r2, [r7, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	f043 0307 	orr.w	r3, r3, #7
 8004a8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	609a      	str	r2, [r3, #8]
}
 8004a94:	bf00      	nop
 8004a96:	3714      	adds	r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b087      	sub	sp, #28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
 8004aac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004aba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	021a      	lsls	r2, r3, #8
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	609a      	str	r2, [r3, #8]
}
 8004ad4:	bf00      	nop
 8004ad6:	371c      	adds	r7, #28
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d101      	bne.n	8004af8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004af4:	2302      	movs	r3, #2
 8004af6:	e05a      	b.n	8004bae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2202      	movs	r2, #2
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a21      	ldr	r2, [pc, #132]	@ (8004bbc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d022      	beq.n	8004b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b44:	d01d      	beq.n	8004b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a1d      	ldr	r2, [pc, #116]	@ (8004bc0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d018      	beq.n	8004b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a1b      	ldr	r2, [pc, #108]	@ (8004bc4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d013      	beq.n	8004b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a1a      	ldr	r2, [pc, #104]	@ (8004bc8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d00e      	beq.n	8004b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a18      	ldr	r2, [pc, #96]	@ (8004bcc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d009      	beq.n	8004b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a17      	ldr	r2, [pc, #92]	@ (8004bd0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d004      	beq.n	8004b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a15      	ldr	r2, [pc, #84]	@ (8004bd4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d10c      	bne.n	8004b9c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	40010000 	.word	0x40010000
 8004bc0:	40000400 	.word	0x40000400
 8004bc4:	40000800 	.word	0x40000800
 8004bc8:	40000c00 	.word	0x40000c00
 8004bcc:	40010400 	.word	0x40010400
 8004bd0:	40014000 	.word	0x40014000
 8004bd4:	40001800 	.word	0x40001800

08004bd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e042      	b.n	8004c98 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d106      	bne.n	8004c2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7fc fbf4 	bl	8001414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2224      	movs	r2, #36	@ 0x24
 8004c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68da      	ldr	r2, [r3, #12]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f82b 	bl	8004ca0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	691a      	ldr	r2, [r3, #16]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	695a      	ldr	r2, [r3, #20]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68da      	ldr	r2, [r3, #12]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ca4:	b0c0      	sub	sp, #256	@ 0x100
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cbc:	68d9      	ldr	r1, [r3, #12]
 8004cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	ea40 0301 	orr.w	r3, r0, r1
 8004cc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cce:	689a      	ldr	r2, [r3, #8]
 8004cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004cf8:	f021 010c 	bic.w	r1, r1, #12
 8004cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d06:	430b      	orrs	r3, r1
 8004d08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d1a:	6999      	ldr	r1, [r3, #24]
 8004d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	ea40 0301 	orr.w	r3, r0, r1
 8004d26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	4b8f      	ldr	r3, [pc, #572]	@ (8004f6c <UART_SetConfig+0x2cc>)
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d005      	beq.n	8004d40 <UART_SetConfig+0xa0>
 8004d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	4b8d      	ldr	r3, [pc, #564]	@ (8004f70 <UART_SetConfig+0x2d0>)
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d104      	bne.n	8004d4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d40:	f7ff f826 	bl	8003d90 <HAL_RCC_GetPCLK2Freq>
 8004d44:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004d48:	e003      	b.n	8004d52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d4a:	f7ff f80d 	bl	8003d68 <HAL_RCC_GetPCLK1Freq>
 8004d4e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d56:	69db      	ldr	r3, [r3, #28]
 8004d58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d5c:	f040 810c 	bne.w	8004f78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d64:	2200      	movs	r2, #0
 8004d66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d6a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004d6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004d72:	4622      	mov	r2, r4
 8004d74:	462b      	mov	r3, r5
 8004d76:	1891      	adds	r1, r2, r2
 8004d78:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004d7a:	415b      	adcs	r3, r3
 8004d7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d82:	4621      	mov	r1, r4
 8004d84:	eb12 0801 	adds.w	r8, r2, r1
 8004d88:	4629      	mov	r1, r5
 8004d8a:	eb43 0901 	adc.w	r9, r3, r1
 8004d8e:	f04f 0200 	mov.w	r2, #0
 8004d92:	f04f 0300 	mov.w	r3, #0
 8004d96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004da2:	4690      	mov	r8, r2
 8004da4:	4699      	mov	r9, r3
 8004da6:	4623      	mov	r3, r4
 8004da8:	eb18 0303 	adds.w	r3, r8, r3
 8004dac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004db0:	462b      	mov	r3, r5
 8004db2:	eb49 0303 	adc.w	r3, r9, r3
 8004db6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004dc6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004dca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004dce:	460b      	mov	r3, r1
 8004dd0:	18db      	adds	r3, r3, r3
 8004dd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	eb42 0303 	adc.w	r3, r2, r3
 8004dda:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ddc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004de0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004de4:	f7fb fa02 	bl	80001ec <__aeabi_uldivmod>
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	4b61      	ldr	r3, [pc, #388]	@ (8004f74 <UART_SetConfig+0x2d4>)
 8004dee:	fba3 2302 	umull	r2, r3, r3, r2
 8004df2:	095b      	lsrs	r3, r3, #5
 8004df4:	011c      	lsls	r4, r3, #4
 8004df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e00:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004e04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004e08:	4642      	mov	r2, r8
 8004e0a:	464b      	mov	r3, r9
 8004e0c:	1891      	adds	r1, r2, r2
 8004e0e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004e10:	415b      	adcs	r3, r3
 8004e12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004e18:	4641      	mov	r1, r8
 8004e1a:	eb12 0a01 	adds.w	sl, r2, r1
 8004e1e:	4649      	mov	r1, r9
 8004e20:	eb43 0b01 	adc.w	fp, r3, r1
 8004e24:	f04f 0200 	mov.w	r2, #0
 8004e28:	f04f 0300 	mov.w	r3, #0
 8004e2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e38:	4692      	mov	sl, r2
 8004e3a:	469b      	mov	fp, r3
 8004e3c:	4643      	mov	r3, r8
 8004e3e:	eb1a 0303 	adds.w	r3, sl, r3
 8004e42:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e46:	464b      	mov	r3, r9
 8004e48:	eb4b 0303 	adc.w	r3, fp, r3
 8004e4c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e5c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004e60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004e64:	460b      	mov	r3, r1
 8004e66:	18db      	adds	r3, r3, r3
 8004e68:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	eb42 0303 	adc.w	r3, r2, r3
 8004e70:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004e76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004e7a:	f7fb f9b7 	bl	80001ec <__aeabi_uldivmod>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	460b      	mov	r3, r1
 8004e82:	4611      	mov	r1, r2
 8004e84:	4b3b      	ldr	r3, [pc, #236]	@ (8004f74 <UART_SetConfig+0x2d4>)
 8004e86:	fba3 2301 	umull	r2, r3, r3, r1
 8004e8a:	095b      	lsrs	r3, r3, #5
 8004e8c:	2264      	movs	r2, #100	@ 0x64
 8004e8e:	fb02 f303 	mul.w	r3, r2, r3
 8004e92:	1acb      	subs	r3, r1, r3
 8004e94:	00db      	lsls	r3, r3, #3
 8004e96:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004e9a:	4b36      	ldr	r3, [pc, #216]	@ (8004f74 <UART_SetConfig+0x2d4>)
 8004e9c:	fba3 2302 	umull	r2, r3, r3, r2
 8004ea0:	095b      	lsrs	r3, r3, #5
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004ea8:	441c      	add	r4, r3
 8004eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004eb4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004eb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004ebc:	4642      	mov	r2, r8
 8004ebe:	464b      	mov	r3, r9
 8004ec0:	1891      	adds	r1, r2, r2
 8004ec2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ec4:	415b      	adcs	r3, r3
 8004ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ec8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004ecc:	4641      	mov	r1, r8
 8004ece:	1851      	adds	r1, r2, r1
 8004ed0:	6339      	str	r1, [r7, #48]	@ 0x30
 8004ed2:	4649      	mov	r1, r9
 8004ed4:	414b      	adcs	r3, r1
 8004ed6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ed8:	f04f 0200 	mov.w	r2, #0
 8004edc:	f04f 0300 	mov.w	r3, #0
 8004ee0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004ee4:	4659      	mov	r1, fp
 8004ee6:	00cb      	lsls	r3, r1, #3
 8004ee8:	4651      	mov	r1, sl
 8004eea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eee:	4651      	mov	r1, sl
 8004ef0:	00ca      	lsls	r2, r1, #3
 8004ef2:	4610      	mov	r0, r2
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	4642      	mov	r2, r8
 8004efa:	189b      	adds	r3, r3, r2
 8004efc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f00:	464b      	mov	r3, r9
 8004f02:	460a      	mov	r2, r1
 8004f04:	eb42 0303 	adc.w	r3, r2, r3
 8004f08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004f18:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004f1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004f20:	460b      	mov	r3, r1
 8004f22:	18db      	adds	r3, r3, r3
 8004f24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f26:	4613      	mov	r3, r2
 8004f28:	eb42 0303 	adc.w	r3, r2, r3
 8004f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004f32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004f36:	f7fb f959 	bl	80001ec <__aeabi_uldivmod>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f74 <UART_SetConfig+0x2d4>)
 8004f40:	fba3 1302 	umull	r1, r3, r3, r2
 8004f44:	095b      	lsrs	r3, r3, #5
 8004f46:	2164      	movs	r1, #100	@ 0x64
 8004f48:	fb01 f303 	mul.w	r3, r1, r3
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	3332      	adds	r3, #50	@ 0x32
 8004f52:	4a08      	ldr	r2, [pc, #32]	@ (8004f74 <UART_SetConfig+0x2d4>)
 8004f54:	fba2 2303 	umull	r2, r3, r2, r3
 8004f58:	095b      	lsrs	r3, r3, #5
 8004f5a:	f003 0207 	and.w	r2, r3, #7
 8004f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4422      	add	r2, r4
 8004f66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f68:	e106      	b.n	8005178 <UART_SetConfig+0x4d8>
 8004f6a:	bf00      	nop
 8004f6c:	40011000 	.word	0x40011000
 8004f70:	40011400 	.word	0x40011400
 8004f74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f82:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004f86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004f8a:	4642      	mov	r2, r8
 8004f8c:	464b      	mov	r3, r9
 8004f8e:	1891      	adds	r1, r2, r2
 8004f90:	6239      	str	r1, [r7, #32]
 8004f92:	415b      	adcs	r3, r3
 8004f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f9a:	4641      	mov	r1, r8
 8004f9c:	1854      	adds	r4, r2, r1
 8004f9e:	4649      	mov	r1, r9
 8004fa0:	eb43 0501 	adc.w	r5, r3, r1
 8004fa4:	f04f 0200 	mov.w	r2, #0
 8004fa8:	f04f 0300 	mov.w	r3, #0
 8004fac:	00eb      	lsls	r3, r5, #3
 8004fae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fb2:	00e2      	lsls	r2, r4, #3
 8004fb4:	4614      	mov	r4, r2
 8004fb6:	461d      	mov	r5, r3
 8004fb8:	4643      	mov	r3, r8
 8004fba:	18e3      	adds	r3, r4, r3
 8004fbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004fc0:	464b      	mov	r3, r9
 8004fc2:	eb45 0303 	adc.w	r3, r5, r3
 8004fc6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004fd6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004fda:	f04f 0200 	mov.w	r2, #0
 8004fde:	f04f 0300 	mov.w	r3, #0
 8004fe2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004fe6:	4629      	mov	r1, r5
 8004fe8:	008b      	lsls	r3, r1, #2
 8004fea:	4621      	mov	r1, r4
 8004fec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ff0:	4621      	mov	r1, r4
 8004ff2:	008a      	lsls	r2, r1, #2
 8004ff4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004ff8:	f7fb f8f8 	bl	80001ec <__aeabi_uldivmod>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	460b      	mov	r3, r1
 8005000:	4b60      	ldr	r3, [pc, #384]	@ (8005184 <UART_SetConfig+0x4e4>)
 8005002:	fba3 2302 	umull	r2, r3, r3, r2
 8005006:	095b      	lsrs	r3, r3, #5
 8005008:	011c      	lsls	r4, r3, #4
 800500a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800500e:	2200      	movs	r2, #0
 8005010:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005014:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005018:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800501c:	4642      	mov	r2, r8
 800501e:	464b      	mov	r3, r9
 8005020:	1891      	adds	r1, r2, r2
 8005022:	61b9      	str	r1, [r7, #24]
 8005024:	415b      	adcs	r3, r3
 8005026:	61fb      	str	r3, [r7, #28]
 8005028:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800502c:	4641      	mov	r1, r8
 800502e:	1851      	adds	r1, r2, r1
 8005030:	6139      	str	r1, [r7, #16]
 8005032:	4649      	mov	r1, r9
 8005034:	414b      	adcs	r3, r1
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	f04f 0200 	mov.w	r2, #0
 800503c:	f04f 0300 	mov.w	r3, #0
 8005040:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005044:	4659      	mov	r1, fp
 8005046:	00cb      	lsls	r3, r1, #3
 8005048:	4651      	mov	r1, sl
 800504a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800504e:	4651      	mov	r1, sl
 8005050:	00ca      	lsls	r2, r1, #3
 8005052:	4610      	mov	r0, r2
 8005054:	4619      	mov	r1, r3
 8005056:	4603      	mov	r3, r0
 8005058:	4642      	mov	r2, r8
 800505a:	189b      	adds	r3, r3, r2
 800505c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005060:	464b      	mov	r3, r9
 8005062:	460a      	mov	r2, r1
 8005064:	eb42 0303 	adc.w	r3, r2, r3
 8005068:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800506c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005076:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005078:	f04f 0200 	mov.w	r2, #0
 800507c:	f04f 0300 	mov.w	r3, #0
 8005080:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005084:	4649      	mov	r1, r9
 8005086:	008b      	lsls	r3, r1, #2
 8005088:	4641      	mov	r1, r8
 800508a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800508e:	4641      	mov	r1, r8
 8005090:	008a      	lsls	r2, r1, #2
 8005092:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005096:	f7fb f8a9 	bl	80001ec <__aeabi_uldivmod>
 800509a:	4602      	mov	r2, r0
 800509c:	460b      	mov	r3, r1
 800509e:	4611      	mov	r1, r2
 80050a0:	4b38      	ldr	r3, [pc, #224]	@ (8005184 <UART_SetConfig+0x4e4>)
 80050a2:	fba3 2301 	umull	r2, r3, r3, r1
 80050a6:	095b      	lsrs	r3, r3, #5
 80050a8:	2264      	movs	r2, #100	@ 0x64
 80050aa:	fb02 f303 	mul.w	r3, r2, r3
 80050ae:	1acb      	subs	r3, r1, r3
 80050b0:	011b      	lsls	r3, r3, #4
 80050b2:	3332      	adds	r3, #50	@ 0x32
 80050b4:	4a33      	ldr	r2, [pc, #204]	@ (8005184 <UART_SetConfig+0x4e4>)
 80050b6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ba:	095b      	lsrs	r3, r3, #5
 80050bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050c0:	441c      	add	r4, r3
 80050c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050c6:	2200      	movs	r2, #0
 80050c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80050ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80050cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80050d0:	4642      	mov	r2, r8
 80050d2:	464b      	mov	r3, r9
 80050d4:	1891      	adds	r1, r2, r2
 80050d6:	60b9      	str	r1, [r7, #8]
 80050d8:	415b      	adcs	r3, r3
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050e0:	4641      	mov	r1, r8
 80050e2:	1851      	adds	r1, r2, r1
 80050e4:	6039      	str	r1, [r7, #0]
 80050e6:	4649      	mov	r1, r9
 80050e8:	414b      	adcs	r3, r1
 80050ea:	607b      	str	r3, [r7, #4]
 80050ec:	f04f 0200 	mov.w	r2, #0
 80050f0:	f04f 0300 	mov.w	r3, #0
 80050f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80050f8:	4659      	mov	r1, fp
 80050fa:	00cb      	lsls	r3, r1, #3
 80050fc:	4651      	mov	r1, sl
 80050fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005102:	4651      	mov	r1, sl
 8005104:	00ca      	lsls	r2, r1, #3
 8005106:	4610      	mov	r0, r2
 8005108:	4619      	mov	r1, r3
 800510a:	4603      	mov	r3, r0
 800510c:	4642      	mov	r2, r8
 800510e:	189b      	adds	r3, r3, r2
 8005110:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005112:	464b      	mov	r3, r9
 8005114:	460a      	mov	r2, r1
 8005116:	eb42 0303 	adc.w	r3, r2, r3
 800511a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800511c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	663b      	str	r3, [r7, #96]	@ 0x60
 8005126:	667a      	str	r2, [r7, #100]	@ 0x64
 8005128:	f04f 0200 	mov.w	r2, #0
 800512c:	f04f 0300 	mov.w	r3, #0
 8005130:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005134:	4649      	mov	r1, r9
 8005136:	008b      	lsls	r3, r1, #2
 8005138:	4641      	mov	r1, r8
 800513a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800513e:	4641      	mov	r1, r8
 8005140:	008a      	lsls	r2, r1, #2
 8005142:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005146:	f7fb f851 	bl	80001ec <__aeabi_uldivmod>
 800514a:	4602      	mov	r2, r0
 800514c:	460b      	mov	r3, r1
 800514e:	4b0d      	ldr	r3, [pc, #52]	@ (8005184 <UART_SetConfig+0x4e4>)
 8005150:	fba3 1302 	umull	r1, r3, r3, r2
 8005154:	095b      	lsrs	r3, r3, #5
 8005156:	2164      	movs	r1, #100	@ 0x64
 8005158:	fb01 f303 	mul.w	r3, r1, r3
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	011b      	lsls	r3, r3, #4
 8005160:	3332      	adds	r3, #50	@ 0x32
 8005162:	4a08      	ldr	r2, [pc, #32]	@ (8005184 <UART_SetConfig+0x4e4>)
 8005164:	fba2 2303 	umull	r2, r3, r2, r3
 8005168:	095b      	lsrs	r3, r3, #5
 800516a:	f003 020f 	and.w	r2, r3, #15
 800516e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4422      	add	r2, r4
 8005176:	609a      	str	r2, [r3, #8]
}
 8005178:	bf00      	nop
 800517a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800517e:	46bd      	mov	sp, r7
 8005180:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005184:	51eb851f 	.word	0x51eb851f

08005188 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d123      	bne.n	80051e2 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80051a2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	6851      	ldr	r1, [r2, #4]
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	6892      	ldr	r2, [r2, #8]
 80051ae:	4311      	orrs	r1, r2
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	68d2      	ldr	r2, [r2, #12]
 80051b4:	4311      	orrs	r1, r2
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	6912      	ldr	r2, [r2, #16]
 80051ba:	4311      	orrs	r1, r2
 80051bc:	683a      	ldr	r2, [r7, #0]
 80051be:	6952      	ldr	r2, [r2, #20]
 80051c0:	4311      	orrs	r1, r2
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	6992      	ldr	r2, [r2, #24]
 80051c6:	4311      	orrs	r1, r2
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	69d2      	ldr	r2, [r2, #28]
 80051cc:	4311      	orrs	r1, r2
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	6a12      	ldr	r2, [r2, #32]
 80051d2:	4311      	orrs	r1, r2
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80051d8:	430a      	orrs	r2, r1
 80051da:	431a      	orrs	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	601a      	str	r2, [r3, #0]
 80051e0:	e028      	b.n	8005234 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	69d9      	ldr	r1, [r3, #28]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	4319      	orrs	r1, r3
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f8:	430b      	orrs	r3, r1
 80051fa:	431a      	orrs	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005208:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	6851      	ldr	r1, [r2, #4]
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	6892      	ldr	r2, [r2, #8]
 8005214:	4311      	orrs	r1, r2
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	68d2      	ldr	r2, [r2, #12]
 800521a:	4311      	orrs	r1, r2
 800521c:	683a      	ldr	r2, [r7, #0]
 800521e:	6912      	ldr	r2, [r2, #16]
 8005220:	4311      	orrs	r1, r2
 8005222:	683a      	ldr	r2, [r7, #0]
 8005224:	6952      	ldr	r2, [r2, #20]
 8005226:	4311      	orrs	r1, r2
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	6992      	ldr	r2, [r2, #24]
 800522c:	430a      	orrs	r2, r1
 800522e:	431a      	orrs	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005242:	b480      	push	{r7}
 8005244:	b085      	sub	sp, #20
 8005246:	af00      	add	r7, sp, #0
 8005248:	60f8      	str	r0, [r7, #12]
 800524a:	60b9      	str	r1, [r7, #8]
 800524c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d128      	bne.n	80052a6 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	1e59      	subs	r1, r3, #1
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	3b01      	subs	r3, #1
 8005268:	011b      	lsls	r3, r3, #4
 800526a:	4319      	orrs	r1, r3
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	3b01      	subs	r3, #1
 8005272:	021b      	lsls	r3, r3, #8
 8005274:	4319      	orrs	r1, r3
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	3b01      	subs	r3, #1
 800527c:	031b      	lsls	r3, r3, #12
 800527e:	4319      	orrs	r1, r3
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	3b01      	subs	r3, #1
 8005286:	041b      	lsls	r3, r3, #16
 8005288:	4319      	orrs	r1, r3
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	3b01      	subs	r3, #1
 8005290:	051b      	lsls	r3, r3, #20
 8005292:	4319      	orrs	r1, r3
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	3b01      	subs	r3, #1
 800529a:	061b      	lsls	r3, r3, #24
 800529c:	430b      	orrs	r3, r1
 800529e:	431a      	orrs	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	609a      	str	r2, [r3, #8]
 80052a4:	e02f      	b.n	8005306 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80052ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	68d2      	ldr	r2, [r2, #12]
 80052b6:	3a01      	subs	r2, #1
 80052b8:	0311      	lsls	r1, r2, #12
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	6952      	ldr	r2, [r2, #20]
 80052be:	3a01      	subs	r2, #1
 80052c0:	0512      	lsls	r2, r2, #20
 80052c2:	430a      	orrs	r2, r1
 80052c4:	431a      	orrs	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	1e59      	subs	r1, r3, #1
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	3b01      	subs	r3, #1
 80052de:	011b      	lsls	r3, r3, #4
 80052e0:	4319      	orrs	r1, r3
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	3b01      	subs	r3, #1
 80052e8:	021b      	lsls	r3, r3, #8
 80052ea:	4319      	orrs	r1, r3
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	3b01      	subs	r3, #1
 80052f2:	041b      	lsls	r3, r3, #16
 80052f4:	4319      	orrs	r1, r3
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	3b01      	subs	r3, #1
 80052fc:	061b      	lsls	r3, r3, #24
 80052fe:	430b      	orrs	r3, r1
 8005300:	431a      	orrs	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <memset>:
 8005314:	4402      	add	r2, r0
 8005316:	4603      	mov	r3, r0
 8005318:	4293      	cmp	r3, r2
 800531a:	d100      	bne.n	800531e <memset+0xa>
 800531c:	4770      	bx	lr
 800531e:	f803 1b01 	strb.w	r1, [r3], #1
 8005322:	e7f9      	b.n	8005318 <memset+0x4>

08005324 <__libc_init_array>:
 8005324:	b570      	push	{r4, r5, r6, lr}
 8005326:	4d0d      	ldr	r5, [pc, #52]	@ (800535c <__libc_init_array+0x38>)
 8005328:	4c0d      	ldr	r4, [pc, #52]	@ (8005360 <__libc_init_array+0x3c>)
 800532a:	1b64      	subs	r4, r4, r5
 800532c:	10a4      	asrs	r4, r4, #2
 800532e:	2600      	movs	r6, #0
 8005330:	42a6      	cmp	r6, r4
 8005332:	d109      	bne.n	8005348 <__libc_init_array+0x24>
 8005334:	4d0b      	ldr	r5, [pc, #44]	@ (8005364 <__libc_init_array+0x40>)
 8005336:	4c0c      	ldr	r4, [pc, #48]	@ (8005368 <__libc_init_array+0x44>)
 8005338:	f000 f818 	bl	800536c <_init>
 800533c:	1b64      	subs	r4, r4, r5
 800533e:	10a4      	asrs	r4, r4, #2
 8005340:	2600      	movs	r6, #0
 8005342:	42a6      	cmp	r6, r4
 8005344:	d105      	bne.n	8005352 <__libc_init_array+0x2e>
 8005346:	bd70      	pop	{r4, r5, r6, pc}
 8005348:	f855 3b04 	ldr.w	r3, [r5], #4
 800534c:	4798      	blx	r3
 800534e:	3601      	adds	r6, #1
 8005350:	e7ee      	b.n	8005330 <__libc_init_array+0xc>
 8005352:	f855 3b04 	ldr.w	r3, [r5], #4
 8005356:	4798      	blx	r3
 8005358:	3601      	adds	r6, #1
 800535a:	e7f2      	b.n	8005342 <__libc_init_array+0x1e>
 800535c:	080053ac 	.word	0x080053ac
 8005360:	080053ac 	.word	0x080053ac
 8005364:	080053ac 	.word	0x080053ac
 8005368:	080053b0 	.word	0x080053b0

0800536c <_init>:
 800536c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800536e:	bf00      	nop
 8005370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005372:	bc08      	pop	{r3}
 8005374:	469e      	mov	lr, r3
 8005376:	4770      	bx	lr

08005378 <_fini>:
 8005378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800537a:	bf00      	nop
 800537c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800537e:	bc08      	pop	{r3}
 8005380:	469e      	mov	lr, r3
 8005382:	4770      	bx	lr
