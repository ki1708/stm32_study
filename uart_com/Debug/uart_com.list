
uart_com.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e74  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004024  08004024  00005024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800408c  0800408c  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  0800408c  0800408c  0000508c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004094  08004094  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004094  08004094  00005094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004098  08004098  00005098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800409c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          00000590  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005ec  200005ec  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020580  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d1c  00000000  00000000  0002660c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000f6bb  00000000  00000000  0002a328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001730  00000000  00000000  000399e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000011bf  00000000  00000000  0003b118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a408  00000000  00000000  0003c2d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000283c7  00000000  00000000  000666df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00100483  00000000  00000000  0008eaa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0018ef29  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004558  00000000  00000000  0018ef6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005d  00000000  00000000  001934c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800400c 	.word	0x0800400c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	0800400c 	.word	0x0800400c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <apInit>:

//uint32_t adc_vol = 0 ;
float adc_vol = 0 ;

void apInit(void)
{
 8000580:	b508      	push	{r3, lr}
	adcInit();
 8000582:	f000 f847 	bl	8000614 <adcInit>
	uartInit();
 8000586:	f000 f865 	bl	8000654 <uartInit>
}
 800058a:	bd08      	pop	{r3, pc}

0800058c <apMain>:

void apMain(void)
{
 800058c:	b510      	push	{r4, lr}
	uint32_t pre_time ;

	pre_time = millis();
 800058e:	f000 f8f1 	bl	8000774 <millis>
 8000592:	4604      	mov	r4, r0
 8000594:	e027      	b.n	80005e6 <apMain+0x5a>
	while(1)
	{
		if (millis() - pre_time >= 500)	// 논블락킹 코드
		{
			pre_time = millis();
 8000596:	f000 f8ed 	bl	8000774 <millis>
 800059a:	4604      	mov	r4, r0
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800059c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005a0:	4817      	ldr	r0, [pc, #92]	@ (8000600 <apMain+0x74>)
 80005a2:	f001 fdb3 	bl	800210c <HAL_GPIO_TogglePin>
			//uartWrite(_DEF_CH1, (uint8_t *)"test\n", 5); // uart test code
			//uartPrintf(_DEF_CH1,"test %d\n",millis() );	//uartprintf 구현 code
			//uartPrintf(_DEF_CH1,"adc_vol : %d.%d\n",(int)adc_vol, ((int)(adc_vol * 100)) %100 );	//uartprintf 구현 code + printf에서 float을 정수로 변경해서 출력
			uartPrintf(_DEF_CH1, "rx cnt %d\n", uartAvailable(_DEF_CH1));	//uartAvaillable 구현 확인 (입력된 버퍼갯수 출력)
 80005a6:	2000      	movs	r0, #0
 80005a8:	f000 f872 	bl	8000690 <uartAvailable>
 80005ac:	4602      	mov	r2, r0
 80005ae:	4915      	ldr	r1, [pc, #84]	@ (8000604 <apMain+0x78>)
 80005b0:	2000      	movs	r0, #0
 80005b2:	f000 f89d 	bl	80006f0 <uartPrintf>
 80005b6:	e01c      	b.n	80005f2 <apMain+0x66>
		}

		if(uartAvailable(_DEF_CH1) > 0) // 수신된 데이터있음.
		{
			uint8_t rx_data ;
			rx_data = uartRead(_DEF_CH1) ;
 80005b8:	2000      	movs	r0, #0
 80005ba:	f000 f87d 	bl	80006b8 <uartRead>
 80005be:	4602      	mov	r2, r0
			uartPrintf(_DEF_CH1, "rx data : 0x%02X (%c)\n",rx_data , rx_data ); // 0x%02X 헥사 출력
 80005c0:	4603      	mov	r3, r0
 80005c2:	4911      	ldr	r1, [pc, #68]	@ (8000608 <apMain+0x7c>)
 80005c4:	2000      	movs	r0, #0
 80005c6:	f000 f893 	bl	80006f0 <uartPrintf>
		}

		//HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
		//HAL_Delay(500);
		adc_vol = (float)adcReadVoltage(_DEF_CH1) / 100.f;
 80005ca:	2000      	movs	r0, #0
 80005cc:	f000 f838 	bl	8000640 <adcReadVoltage>
 80005d0:	ee07 0a90 	vmov	s15, r0
 80005d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005d8:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 800060c <apMain+0x80>
 80005dc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80005e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000610 <apMain+0x84>)
 80005e2:	ed83 7a00 	vstr	s14, [r3]
		if (millis() - pre_time >= 500)	// 논블락킹 코드
 80005e6:	f000 f8c5 	bl	8000774 <millis>
 80005ea:	1b03      	subs	r3, r0, r4
 80005ec:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80005f0:	d2d1      	bcs.n	8000596 <apMain+0xa>
		if(uartAvailable(_DEF_CH1) > 0) // 수신된 데이터있음.
 80005f2:	2000      	movs	r0, #0
 80005f4:	f000 f84c 	bl	8000690 <uartAvailable>
 80005f8:	2800      	cmp	r0, #0
 80005fa:	d1dd      	bne.n	80005b8 <apMain+0x2c>
 80005fc:	e7e5      	b.n	80005ca <apMain+0x3e>
 80005fe:	bf00      	nop
 8000600:	40021800 	.word	0x40021800
 8000604:	08004024 	.word	0x08004024
 8000608:	08004030 	.word	0x08004030
 800060c:	42c80000 	.word	0x42c80000
 8000610:	20000078 	.word	0x20000078

08000614 <adcInit>:
uint16_t adc_data[3];



bool adcInit(void)
{
 8000614:	b508      	push	{r3, lr}
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_data, 3);		//핸들러, 배열, 채널 수
 8000616:	2203      	movs	r2, #3
 8000618:	4902      	ldr	r1, [pc, #8]	@ (8000624 <adcInit+0x10>)
 800061a:	4803      	ldr	r0, [pc, #12]	@ (8000628 <adcInit+0x14>)
 800061c:	f001 f88c 	bl	8001738 <HAL_ADC_Start_DMA>
	return true;
}
 8000620:	2001      	movs	r0, #1
 8000622:	bd08      	pop	{r3, pc}
 8000624:	2000007c 	.word	0x2000007c
 8000628:	20000408 	.word	0x20000408

0800062c <adcRead>:
uint16_t adcRead(uint8_t ch)
{
	uint16_t cali_value = 0;
	uint16_t ret = 0;
	switch(ch)
 800062c:	b918      	cbnz	r0, 8000636 <adcRead+0xa>
	{
		case _DEF_CH1 :
			if(adc_data[ch] > cali_value)
 800062e:	4a03      	ldr	r2, [pc, #12]	@ (800063c <adcRead+0x10>)
 8000630:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
 8000634:	4770      	bx	lr
	uint16_t ret = 0;
 8000636:	2000      	movs	r0, #0
			}

		break;
	}
	return ret;
}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	2000007c 	.word	0x2000007c

08000640 <adcReadVoltage>:


uint32_t adcReadVoltage(uint8_t ch)
{
 8000640:	b508      	push	{r3, lr}
	uint32_t ret ;
	uint32_t adc_data;
	adc_data = adcRead(ch);
 8000642:	f7ff fff3 	bl	800062c <adcRead>
	ret = (330 * adc_data ) / 4096 ;	// float 안쓰고 330 (3.3v) * adc_data / 2의 12승(해상도)
 8000646:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 800064a:	fb03 f000 	mul.w	r0, r3, r0
	return ret ;
}
 800064e:	0b00      	lsrs	r0, r0, #12
 8000650:	bd08      	pop	{r3, pc}
	...

08000654 <uartInit>:
static uint16_t q_out = 0;
static uint8_t q_buf[UART_Q_BUF_MAX];
static uint8_t q_data;	//uart 인터럽트에서 처리할 1바이트짜리 임시버퍼

bool uartInit(void) //코어에서 실제로 초기화를 함.
{
 8000654:	b508      	push	{r3, lr}
	HAL_UART_Receive_IT(&huart1, &q_data, 1); // size를 1로 해야지 인터럽트가 바로바로 걸림.
 8000656:	2201      	movs	r2, #1
 8000658:	4902      	ldr	r1, [pc, #8]	@ (8000664 <uartInit+0x10>)
 800065a:	4803      	ldr	r0, [pc, #12]	@ (8000668 <uartInit+0x14>)
 800065c:	f002 ff73 	bl	8003546 <HAL_UART_Receive_IT>
	return true;
}
 8000660:	2001      	movs	r0, #1
 8000662:	bd08      	pop	{r3, pc}
 8000664:	20000082 	.word	0x20000082
 8000668:	200001bc 	.word	0x200001bc

0800066c <uartWrite>:
uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
	uint32_t ret = 0;
	HAL_StatusTypeDef hal_ret;

	switch(ch)
 800066c:	b108      	cbz	r0, 8000672 <uartWrite+0x6>
	uint32_t ret = 0;
 800066e:	2000      	movs	r0, #0
				ret = length ;	// HAL_OK일 경우가 아니면 ret은 0으로 초기화된그대로,.
			}
			break;
	}
	return ret ;
}
 8000670:	4770      	bx	lr
{
 8000672:	b510      	push	{r4, lr}
 8000674:	4614      	mov	r4, r2
			hal_ret = HAL_UART_Transmit(&huart1, p_data, length, 100); //timeout으로 100ms 주기
 8000676:	2364      	movs	r3, #100	@ 0x64
 8000678:	b292      	uxth	r2, r2
 800067a:	4804      	ldr	r0, [pc, #16]	@ (800068c <uartWrite+0x20>)
 800067c:	f002 fd15 	bl	80030aa <HAL_UART_Transmit>
			if(hal_ret == HAL_OK)
 8000680:	b108      	cbz	r0, 8000686 <uartWrite+0x1a>
	uint32_t ret = 0;
 8000682:	2000      	movs	r0, #0
}
 8000684:	bd10      	pop	{r4, pc}
				ret = length ;	// HAL_OK일 경우가 아니면 ret은 0으로 초기화된그대로,.
 8000686:	4620      	mov	r0, r4
	return ret ;
 8000688:	e7fc      	b.n	8000684 <uartWrite+0x18>
 800068a:	bf00      	nop
 800068c:	200001bc 	.word	0x200001bc

08000690 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
	uint32_t ret = 0 ;

	switch(ch)
 8000690:	b960      	cbnz	r0, 80006ac <uartAvailable+0x1c>
	{
	case _DEF_CH1:
		ret = (UART_Q_BUF_MAX + q_in - q_out ) % UART_Q_BUF_MAX ;  // 큐에 남아있는 버퍼 갯수를 리턴
 8000692:	4b07      	ldr	r3, [pc, #28]	@ (80006b0 <uartAvailable+0x20>)
 8000694:	8818      	ldrh	r0, [r3, #0]
 8000696:	f500 7080 	add.w	r0, r0, #256	@ 0x100
 800069a:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <uartAvailable+0x24>)
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	1ac0      	subs	r0, r0, r3
 80006a0:	4243      	negs	r3, r0
 80006a2:	b2c0      	uxtb	r0, r0
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	bf58      	it	pl
 80006a8:	4258      	negpl	r0, r3
		break;
 80006aa:	4770      	bx	lr
	uint32_t ret = 0 ;
 80006ac:	2000      	movs	r0, #0
	}
	return ret ;
}
 80006ae:	4770      	bx	lr
 80006b0:	20000186 	.word	0x20000186
 80006b4:	20000184 	.word	0x20000184

080006b8 <uartRead>:

uint8_t uartRead(uint8_t ch)	//버퍼를 출력하기
{
	uint8_t ret = 0 ;

	switch(ch)
 80006b8:	b980      	cbnz	r0, 80006dc <uartRead+0x24>
	{
	case _DEF_CH1:
		if(q_out != q_in)
 80006ba:	4b0a      	ldr	r3, [pc, #40]	@ (80006e4 <uartRead+0x2c>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	490a      	ldr	r1, [pc, #40]	@ (80006e8 <uartRead+0x30>)
 80006c0:	8809      	ldrh	r1, [r1, #0]
 80006c2:	428b      	cmp	r3, r1
 80006c4:	d00c      	beq.n	80006e0 <uartRead+0x28>
		{
			ret = q_buf[q_out];
 80006c6:	4a09      	ldr	r2, [pc, #36]	@ (80006ec <uartRead+0x34>)
 80006c8:	5cd0      	ldrb	r0, [r2, r3]
			q_out = (q_out + 1) % UART_Q_BUF_MAX ;
 80006ca:	3301      	adds	r3, #1
 80006cc:	425a      	negs	r2, r3
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	b2d2      	uxtb	r2, r2
 80006d2:	bf58      	it	pl
 80006d4:	4253      	negpl	r3, r2
 80006d6:	4a03      	ldr	r2, [pc, #12]	@ (80006e4 <uartRead+0x2c>)
 80006d8:	8013      	strh	r3, [r2, #0]
 80006da:	4770      	bx	lr
	uint8_t ret = 0 ;
 80006dc:	2000      	movs	r0, #0
 80006de:	4770      	bx	lr
		}
		break;
	}

	return ret ;
}
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	20000184 	.word	0x20000184
 80006e8:	20000186 	.word	0x20000186
 80006ec:	20000084 	.word	0x20000084

080006f0 <uartPrintf>:


uint32_t uartPrintf(uint8_t ch ,const char *fmt, ... ) //가변인자를 사용한 형식화 출력함수, 프로그램만들때 매우 용이
{
 80006f0:	b40e      	push	{r1, r2, r3}
 80006f2:	b510      	push	{r4, lr}
 80006f4:	b0c3      	sub	sp, #268	@ 0x10c
 80006f6:	4604      	mov	r4, r0
 80006f8:	ab45      	add	r3, sp, #276	@ 0x114
 80006fa:	f853 2b04 	ldr.w	r2, [r3], #4
	uint32_t ret = 0;

	va_list arg ;
	char print_buf[256];

	va_start(arg,fmt);
 80006fe:	9341      	str	r3, [sp, #260]	@ 0x104
	int len;
	len = vsnprintf(print_buf , 256, fmt, arg);
 8000700:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000704:	a801      	add	r0, sp, #4
 8000706:	f002 fff3 	bl	80036f0 <vsniprintf>
	va_end(arg);

	if (len > 0)
 800070a:	1e02      	subs	r2, r0, #0
 800070c:	dc05      	bgt.n	800071a <uartPrintf+0x2a>
	uint32_t ret = 0;
 800070e:	2000      	movs	r0, #0
	{
		ret = uartWrite(ch,(uint8_t *)print_buf,len);
	}

	return ret;
}
 8000710:	b043      	add	sp, #268	@ 0x10c
 8000712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000716:	b003      	add	sp, #12
 8000718:	4770      	bx	lr
		ret = uartWrite(ch,(uint8_t *)print_buf,len);
 800071a:	a901      	add	r1, sp, #4
 800071c:	4620      	mov	r0, r4
 800071e:	f7ff ffa5 	bl	800066c <uartWrite>
 8000722:	e7f5      	b.n	8000710 <uartPrintf+0x20>

08000724 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)	// 수신된데이터를 버퍼에 쓰기
{
 8000724:	b508      	push	{r3, lr}
	if(&huart1 == huart)
 8000726:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <HAL_UART_RxCpltCallback+0x3c>)
 8000728:	4283      	cmp	r3, r0
 800072a:	d000      	beq.n	800072e <HAL_UART_RxCpltCallback+0xa>
			q_buf[q_in] = q_data ;
			q_in = q_in_next ;
		}
		HAL_UART_Receive_IT(&huart1, &q_data, 1);
	}
}
 800072c:	bd08      	pop	{r3, pc}
		q_in_next = (q_in + 1) % UART_Q_BUF_MAX ;
 800072e:	4b0d      	ldr	r3, [pc, #52]	@ (8000764 <HAL_UART_RxCpltCallback+0x40>)
 8000730:	8819      	ldrh	r1, [r3, #0]
 8000732:	1c4b      	adds	r3, r1, #1
 8000734:	425a      	negs	r2, r3
 8000736:	b2db      	uxtb	r3, r3
 8000738:	b2d2      	uxtb	r2, r2
 800073a:	bf58      	it	pl
 800073c:	4253      	negpl	r3, r2
 800073e:	b29b      	uxth	r3, r3
		if(q_in_next != q_out)
 8000740:	4a09      	ldr	r2, [pc, #36]	@ (8000768 <HAL_UART_RxCpltCallback+0x44>)
 8000742:	8812      	ldrh	r2, [r2, #0]
 8000744:	429a      	cmp	r2, r3
 8000746:	d005      	beq.n	8000754 <HAL_UART_RxCpltCallback+0x30>
			q_buf[q_in] = q_data ;
 8000748:	4a08      	ldr	r2, [pc, #32]	@ (800076c <HAL_UART_RxCpltCallback+0x48>)
 800074a:	7810      	ldrb	r0, [r2, #0]
 800074c:	4a08      	ldr	r2, [pc, #32]	@ (8000770 <HAL_UART_RxCpltCallback+0x4c>)
 800074e:	5450      	strb	r0, [r2, r1]
			q_in = q_in_next ;
 8000750:	4a04      	ldr	r2, [pc, #16]	@ (8000764 <HAL_UART_RxCpltCallback+0x40>)
 8000752:	8013      	strh	r3, [r2, #0]
		HAL_UART_Receive_IT(&huart1, &q_data, 1);
 8000754:	2201      	movs	r2, #1
 8000756:	4905      	ldr	r1, [pc, #20]	@ (800076c <HAL_UART_RxCpltCallback+0x48>)
 8000758:	4801      	ldr	r0, [pc, #4]	@ (8000760 <HAL_UART_RxCpltCallback+0x3c>)
 800075a:	f002 fef4 	bl	8003546 <HAL_UART_Receive_IT>
}
 800075e:	e7e5      	b.n	800072c <HAL_UART_RxCpltCallback+0x8>
 8000760:	200001bc 	.word	0x200001bc
 8000764:	20000186 	.word	0x20000186
 8000768:	20000184 	.word	0x20000184
 800076c:	20000082 	.word	0x20000082
 8000770:	20000084 	.word	0x20000084

08000774 <millis>:
}



uint32_t millis(void)
{
 8000774:	b508      	push	{r3, lr}
	return HAL_GetTick();
 8000776:	f000 ff13 	bl	80015a0 <HAL_GetTick>
}
 800077a:	bd08      	pop	{r3, pc}

0800077c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800077c:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	9301      	str	r3, [sp, #4]
 8000782:	4b06      	ldr	r3, [pc, #24]	@ (800079c <MX_DMA_Init+0x20>)
 8000784:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000786:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800078a:	631a      	str	r2, [r3, #48]	@ 0x30
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000792:	9301      	str	r3, [sp, #4]
 8000794:	9b01      	ldr	r3, [sp, #4]

}
 8000796:	b002      	add	sp, #8
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007a4:	b08e      	sub	sp, #56	@ 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	2400      	movs	r4, #0
 80007a8:	9409      	str	r4, [sp, #36]	@ 0x24
 80007aa:	940a      	str	r4, [sp, #40]	@ 0x28
 80007ac:	940b      	str	r4, [sp, #44]	@ 0x2c
 80007ae:	940c      	str	r4, [sp, #48]	@ 0x30
 80007b0:	940d      	str	r4, [sp, #52]	@ 0x34
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	9401      	str	r4, [sp, #4]
 80007b4:	4b69      	ldr	r3, [pc, #420]	@ (800095c <MX_GPIO_Init+0x1bc>)
 80007b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007b8:	f042 0204 	orr.w	r2, r2, #4
 80007bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80007be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007c0:	f002 0204 	and.w	r2, r2, #4
 80007c4:	9201      	str	r2, [sp, #4]
 80007c6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007c8:	9402      	str	r4, [sp, #8]
 80007ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007cc:	f042 0220 	orr.w	r2, r2, #32
 80007d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80007d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007d4:	f002 0220 	and.w	r2, r2, #32
 80007d8:	9202      	str	r2, [sp, #8]
 80007da:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007dc:	9403      	str	r4, [sp, #12]
 80007de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007e0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80007e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80007e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007e8:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80007ec:	9203      	str	r2, [sp, #12]
 80007ee:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f0:	9404      	str	r4, [sp, #16]
 80007f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007f4:	f042 0201 	orr.w	r2, r2, #1
 80007f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80007fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007fc:	f002 0201 	and.w	r2, r2, #1
 8000800:	9204      	str	r2, [sp, #16]
 8000802:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000804:	9405      	str	r4, [sp, #20]
 8000806:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000808:	f042 0202 	orr.w	r2, r2, #2
 800080c:	631a      	str	r2, [r3, #48]	@ 0x30
 800080e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000810:	f002 0202 	and.w	r2, r2, #2
 8000814:	9205      	str	r2, [sp, #20]
 8000816:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000818:	9406      	str	r4, [sp, #24]
 800081a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800081c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000820:	631a      	str	r2, [r3, #48]	@ 0x30
 8000822:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000824:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8000828:	9206      	str	r2, [sp, #24]
 800082a:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800082c:	9407      	str	r4, [sp, #28]
 800082e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000830:	f042 0210 	orr.w	r2, r2, #16
 8000834:	631a      	str	r2, [r3, #48]	@ 0x30
 8000836:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000838:	f002 0210 	and.w	r2, r2, #16
 800083c:	9207      	str	r2, [sp, #28]
 800083e:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000840:	9408      	str	r4, [sp, #32]
 8000842:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000844:	f042 0208 	orr.w	r2, r2, #8
 8000848:	631a      	str	r2, [r3, #48]	@ 0x30
 800084a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084c:	f003 0308 	and.w	r3, r3, #8
 8000850:	9308      	str	r3, [sp, #32]
 8000852:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000854:	4f42      	ldr	r7, [pc, #264]	@ (8000960 <MX_GPIO_Init+0x1c0>)
 8000856:	4622      	mov	r2, r4
 8000858:	2116      	movs	r1, #22
 800085a:	4638      	mov	r0, r7
 800085c:	f001 fc50 	bl	8002100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000860:	f8df 8104 	ldr.w	r8, [pc, #260]	@ 8000968 <MX_GPIO_Init+0x1c8>
 8000864:	4622      	mov	r2, r4
 8000866:	2180      	movs	r1, #128	@ 0x80
 8000868:	4640      	mov	r0, r8
 800086a:	f001 fc49 	bl	8002100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800086e:	4e3d      	ldr	r6, [pc, #244]	@ (8000964 <MX_GPIO_Init+0x1c4>)
 8000870:	4622      	mov	r2, r4
 8000872:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000876:	4630      	mov	r0, r6
 8000878:	f001 fc42 	bl	8002100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800087c:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 800096c <MX_GPIO_Init+0x1cc>
 8000880:	4622      	mov	r2, r4
 8000882:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000886:	4648      	mov	r0, r9
 8000888:	f001 fc3a 	bl	8002100 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800088c:	2316      	movs	r3, #22
 800088e:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2501      	movs	r5, #1
 8000892:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000898:	a909      	add	r1, sp, #36	@ 0x24
 800089a:	4638      	mov	r0, r7
 800089c:	f001 fb2c 	bl	8001ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80008a0:	f248 0307 	movw	r3, #32775	@ 0x8007
 80008a4:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008a6:	f44f 1a90 	mov.w	sl, #1179648	@ 0x120000
 80008aa:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b0:	a909      	add	r1, sp, #36	@ 0x24
 80008b2:	4640      	mov	r0, r8
 80008b4:	f001 fb20 	bl	8001ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80008b8:	2380      	movs	r3, #128	@ 0x80
 80008ba:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80008c2:	a909      	add	r1, sp, #36	@ 0x24
 80008c4:	4640      	mov	r0, r8
 80008c6:	f001 fb17 	bl	8001ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80008ca:	2320      	movs	r3, #32
 80008cc:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008ce:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80008d4:	a909      	add	r1, sp, #36	@ 0x24
 80008d6:	4638      	mov	r0, r7
 80008d8:	f001 fb0e 	bl	8001ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008dc:	2304      	movs	r3, #4
 80008de:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e0:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f5a7 6780 	sub.w	r7, r7, #1024	@ 0x400
 80008e8:	a909      	add	r1, sp, #36	@ 0x24
 80008ea:	4638      	mov	r0, r7
 80008ec:	f001 fb04 	bl	8001ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80008f0:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80008f4:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f6:	2302      	movs	r3, #2
 80008f8:	930a      	str	r3, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	940c      	str	r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80008fe:	230c      	movs	r3, #12
 8000900:	930d      	str	r3, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000902:	a909      	add	r1, sp, #36	@ 0x24
 8000904:	4638      	mov	r0, r7
 8000906:	f001 faf7 	bl	8001ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800090a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800090e:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000910:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000914:	a909      	add	r1, sp, #36	@ 0x24
 8000916:	4638      	mov	r0, r7
 8000918:	f001 faee 	bl	8001ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 800091c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000920:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000922:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000926:	a909      	add	r1, sp, #36	@ 0x24
 8000928:	4630      	mov	r0, r6
 800092a:	f001 fae5 	bl	8001ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800092e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000932:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000934:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800093a:	a909      	add	r1, sp, #36	@ 0x24
 800093c:	4630      	mov	r0, r6
 800093e:	f001 fadb 	bl	8001ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000942:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000946:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000948:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800094e:	a909      	add	r1, sp, #36	@ 0x24
 8000950:	4648      	mov	r0, r9
 8000952:	f001 fad1 	bl	8001ef8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000956:	b00e      	add	sp, #56	@ 0x38
 8000958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095c:	40023800 	.word	0x40023800
 8000960:	40020800 	.word	0x40020800
 8000964:	40020c00 	.word	0x40020c00
 8000968:	40020000 	.word	0x40020000
 800096c:	40021800 	.word	0x40021800

08000970 <PeriphCommonClock_Config>:
  *         @arg @ref LL_RCC_PLLSAIDIVR_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI_ConfigDomain_LTDC(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR, uint32_t PLLDIVR)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, Source | PLLM);
 8000970:	4a12      	ldr	r2, [pc, #72]	@ (80009bc <PeriphCommonClock_Config+0x4c>)
 8000972:	6853      	ldr	r3, [r2, #4]
 8000974:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000978:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800097c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000980:	f043 0304 	orr.w	r3, r3, #4
 8000984:	6053      	str	r3, [r2, #4]
  MODIFY_REG(RCC->PLLSAICFGR, RCC_PLLSAICFGR_PLLSAIN | RCC_PLLSAICFGR_PLLSAIR, PLLN << RCC_PLLSAICFGR_PLLSAIN_Pos | PLLR);
 8000986:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
 800098a:	4b0d      	ldr	r3, [pc, #52]	@ (80009c0 <PeriphCommonClock_Config+0x50>)
 800098c:	400b      	ands	r3, r1
 800098e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000992:	f443 6348 	orr.w	r3, r3, #3200	@ 0xc80
 8000996:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_PLLSAIDIVR, PLLDIVR);
 800099a:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 800099e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80009a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  SET_BIT(RCC->CR, RCC_CR_PLLSAION);
 80009a6:	6813      	ldr	r3, [r2, #0]
 80009a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ac:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) == (RCC_CR_PLLSAIRDY));
 80009ae:	4b03      	ldr	r3, [pc, #12]	@ (80009bc <PeriphCommonClock_Config+0x4c>)
 80009b0:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_PLLSAI_IsReady() != 1)
 80009b2:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 80009b6:	d0fa      	beq.n	80009ae <PeriphCommonClock_Config+0x3e>
}
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800
 80009c0:	8fff803f 	.word	0x8fff803f

080009c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009c6:	6802      	ldr	r2, [r0, #0]
 80009c8:	4b03      	ldr	r3, [pc, #12]	@ (80009d8 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d000      	beq.n	80009d0 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ce:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 80009d0:	f000 fdda 	bl	8001588 <HAL_IncTick>
}
 80009d4:	e7fb      	b.n	80009ce <HAL_TIM_PeriodElapsedCallback+0xa>
 80009d6:	bf00      	nop
 80009d8:	40001000 	.word	0x40001000

080009dc <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009dc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009de:	e7fe      	b.n	80009de <Error_Handler+0x2>

080009e0 <MX_CRC_Init>:
{
 80009e0:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 80009e2:	4804      	ldr	r0, [pc, #16]	@ (80009f4 <MX_CRC_Init+0x14>)
 80009e4:	4b04      	ldr	r3, [pc, #16]	@ (80009f8 <MX_CRC_Init+0x18>)
 80009e6:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80009e8:	f001 f8fe 	bl	8001be8 <HAL_CRC_Init>
 80009ec:	b900      	cbnz	r0, 80009f0 <MX_CRC_Init+0x10>
}
 80009ee:	bd08      	pop	{r3, pc}
    Error_Handler();
 80009f0:	f7ff fff4 	bl	80009dc <Error_Handler>
 80009f4:	200003a0 	.word	0x200003a0
 80009f8:	40023000 	.word	0x40023000

080009fc <MX_FMC_Init>:
{
 80009fc:	b500      	push	{lr}
 80009fe:	b089      	sub	sp, #36	@ 0x24
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000a00:	2300      	movs	r3, #0
 8000a02:	9301      	str	r3, [sp, #4]
 8000a04:	9302      	str	r3, [sp, #8]
 8000a06:	9303      	str	r3, [sp, #12]
 8000a08:	9304      	str	r3, [sp, #16]
 8000a0a:	9305      	str	r3, [sp, #20]
 8000a0c:	9306      	str	r3, [sp, #24]
 8000a0e:	9307      	str	r3, [sp, #28]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a10:	4814      	ldr	r0, [pc, #80]	@ (8000a64 <MX_FMC_Init+0x68>)
 8000a12:	4a15      	ldr	r2, [pc, #84]	@ (8000a68 <MX_FMC_Init+0x6c>)
 8000a14:	6002      	str	r2, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000a16:	2201      	movs	r2, #1
 8000a18:	6042      	str	r2, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a1a:	6083      	str	r3, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a1c:	2104      	movs	r1, #4
 8000a1e:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a20:	2210      	movs	r2, #16
 8000a22:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a24:	2240      	movs	r2, #64	@ 0x40
 8000a26:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a28:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000a2c:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a2e:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a34:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000a36:	6243      	str	r3, [r0, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000a38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a3c:	6283      	str	r3, [r0, #40]	@ 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000a42:	2207      	movs	r2, #7
 8000a44:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000a46:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 7;
 8000a48:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000a4a:	2203      	movs	r2, #3
 8000a4c:	9205      	str	r2, [sp, #20]
  SdramTiming.RPDelay = 2;
 8000a4e:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 8000a50:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a52:	4469      	add	r1, sp
 8000a54:	f001 febe 	bl	80027d4 <HAL_SDRAM_Init>
 8000a58:	b910      	cbnz	r0, 8000a60 <MX_FMC_Init+0x64>
}
 8000a5a:	b009      	add	sp, #36	@ 0x24
 8000a5c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 8000a60:	f7ff ffbc 	bl	80009dc <Error_Handler>
 8000a64:	20000188 	.word	0x20000188
 8000a68:	a0000140 	.word	0xa0000140

08000a6c <MX_I2C3_Init>:
{
 8000a6c:	b508      	push	{r3, lr}
  hi2c3.Instance = I2C3;
 8000a6e:	4811      	ldr	r0, [pc, #68]	@ (8000ab4 <MX_I2C3_Init+0x48>)
 8000a70:	4b11      	ldr	r3, [pc, #68]	@ (8000ab8 <MX_I2C3_Init+0x4c>)
 8000a72:	6003      	str	r3, [r0, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000a74:	4b11      	ldr	r3, [pc, #68]	@ (8000abc <MX_I2C3_Init+0x50>)
 8000a76:	6043      	str	r3, [r0, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	6083      	str	r3, [r0, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000a7c:	60c3      	str	r3, [r0, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a7e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a82:	6102      	str	r2, [r0, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a84:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000a86:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a88:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a8a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a8c:	f001 fb48 	bl	8002120 <HAL_I2C_Init>
 8000a90:	b950      	cbnz	r0, 8000aa8 <MX_I2C3_Init+0x3c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a92:	2100      	movs	r1, #0
 8000a94:	4807      	ldr	r0, [pc, #28]	@ (8000ab4 <MX_I2C3_Init+0x48>)
 8000a96:	f001 fc21 	bl	80022dc <HAL_I2CEx_ConfigAnalogFilter>
 8000a9a:	b938      	cbnz	r0, 8000aac <MX_I2C3_Init+0x40>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4805      	ldr	r0, [pc, #20]	@ (8000ab4 <MX_I2C3_Init+0x48>)
 8000aa0:	f001 fc3e 	bl	8002320 <HAL_I2CEx_ConfigDigitalFilter>
 8000aa4:	b920      	cbnz	r0, 8000ab0 <MX_I2C3_Init+0x44>
}
 8000aa6:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000aa8:	f7ff ff98 	bl	80009dc <Error_Handler>
    Error_Handler();
 8000aac:	f7ff ff96 	bl	80009dc <Error_Handler>
    Error_Handler();
 8000ab0:	f7ff ff94 	bl	80009dc <Error_Handler>
 8000ab4:	2000034c 	.word	0x2000034c
 8000ab8:	40005c00 	.word	0x40005c00
 8000abc:	000186a0 	.word	0x000186a0

08000ac0 <MX_SPI5_Init>:
{
 8000ac0:	b508      	push	{r3, lr}
  hspi5.Instance = SPI5;
 8000ac2:	480d      	ldr	r0, [pc, #52]	@ (8000af8 <MX_SPI5_Init+0x38>)
 8000ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8000afc <MX_SPI5_Init+0x3c>)
 8000ac6:	6003      	str	r3, [r0, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000ac8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000acc:	6043      	str	r3, [r0, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	6083      	str	r3, [r0, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ad2:	60c3      	str	r3, [r0, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ad4:	6103      	str	r3, [r0, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ad6:	6143      	str	r3, [r0, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000ad8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000adc:	6182      	str	r2, [r0, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ade:	2218      	movs	r2, #24
 8000ae0:	61c2      	str	r2, [r0, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ae2:	6203      	str	r3, [r0, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ae4:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ae6:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000ae8:	230a      	movs	r3, #10
 8000aea:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000aec:	f001 fe92 	bl	8002814 <HAL_SPI_Init>
 8000af0:	b900      	cbnz	r0, 8000af4 <MX_SPI5_Init+0x34>
}
 8000af2:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000af4:	f7ff ff72 	bl	80009dc <Error_Handler>
 8000af8:	2000024c 	.word	0x2000024c
 8000afc:	40015000 	.word	0x40015000

08000b00 <MX_TIM1_Init>:
{
 8000b00:	b500      	push	{lr}
 8000b02:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b04:	2300      	movs	r3, #0
 8000b06:	9302      	str	r3, [sp, #8]
 8000b08:	9303      	str	r3, [sp, #12]
 8000b0a:	9304      	str	r3, [sp, #16]
 8000b0c:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	9301      	str	r3, [sp, #4]
  htim1.Instance = TIM1;
 8000b12:	4813      	ldr	r0, [pc, #76]	@ (8000b60 <MX_TIM1_Init+0x60>)
 8000b14:	4a13      	ldr	r2, [pc, #76]	@ (8000b64 <MX_TIM1_Init+0x64>)
 8000b16:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 0;
 8000b18:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1a:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 8000b1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b20:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b22:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b24:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b26:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b28:	f002 f866 	bl	8002bf8 <HAL_TIM_Base_Init>
 8000b2c:	b990      	cbnz	r0, 8000b54 <MX_TIM1_Init+0x54>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b32:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b34:	a902      	add	r1, sp, #8
 8000b36:	480a      	ldr	r0, [pc, #40]	@ (8000b60 <MX_TIM1_Init+0x60>)
 8000b38:	f002 f897 	bl	8002c6a <HAL_TIM_ConfigClockSource>
 8000b3c:	b960      	cbnz	r0, 8000b58 <MX_TIM1_Init+0x58>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b42:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b44:	4669      	mov	r1, sp
 8000b46:	4806      	ldr	r0, [pc, #24]	@ (8000b60 <MX_TIM1_Init+0x60>)
 8000b48:	f002 f90e 	bl	8002d68 <HAL_TIMEx_MasterConfigSynchronization>
 8000b4c:	b930      	cbnz	r0, 8000b5c <MX_TIM1_Init+0x5c>
}
 8000b4e:	b007      	add	sp, #28
 8000b50:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000b54:	f7ff ff42 	bl	80009dc <Error_Handler>
    Error_Handler();
 8000b58:	f7ff ff40 	bl	80009dc <Error_Handler>
    Error_Handler();
 8000b5c:	f7ff ff3e 	bl	80009dc <Error_Handler>
 8000b60:	20000204 	.word	0x20000204
 8000b64:	40010000 	.word	0x40010000

08000b68 <MX_USART1_UART_Init>:
{
 8000b68:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8000b6a:	480a      	ldr	r0, [pc, #40]	@ (8000b94 <MX_USART1_UART_Init+0x2c>)
 8000b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b98 <MX_USART1_UART_Init+0x30>)
 8000b6e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000b70:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000b74:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b76:	2300      	movs	r3, #0
 8000b78:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b7a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b7c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b7e:	220c      	movs	r2, #12
 8000b80:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b82:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b84:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b86:	f002 fa60 	bl	800304a <HAL_UART_Init>
 8000b8a:	b900      	cbnz	r0, 8000b8e <MX_USART1_UART_Init+0x26>
}
 8000b8c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000b8e:	f7ff ff25 	bl	80009dc <Error_Handler>
 8000b92:	bf00      	nop
 8000b94:	200001bc 	.word	0x200001bc
 8000b98:	40011000 	.word	0x40011000

08000b9c <MX_ADC1_Init>:
{
 8000b9c:	b500      	push	{lr}
 8000b9e:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	9300      	str	r3, [sp, #0]
 8000ba4:	9301      	str	r3, [sp, #4]
 8000ba6:	9302      	str	r3, [sp, #8]
 8000ba8:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 8000baa:	481e      	ldr	r0, [pc, #120]	@ (8000c24 <MX_ADC1_Init+0x88>)
 8000bac:	4a1e      	ldr	r2, [pc, #120]	@ (8000c28 <MX_ADC1_Init+0x8c>)
 8000bae:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000bb0:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bb2:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000bb8:	7602      	strb	r2, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bba:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bbe:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bc0:	491a      	ldr	r1, [pc, #104]	@ (8000c2c <MX_ADC1_Init+0x90>)
 8000bc2:	6281      	str	r1, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bc4:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000bca:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bce:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bd0:	f000 fd86 	bl	80016e0 <HAL_ADC_Init>
 8000bd4:	b9f0      	cbnz	r0, 8000c14 <MX_ADC1_Init+0x78>
  sConfig.Channel = ADC_CHANNEL_5;
 8000bd6:	2305      	movs	r3, #5
 8000bd8:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000bde:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000be0:	4669      	mov	r1, sp
 8000be2:	4810      	ldr	r0, [pc, #64]	@ (8000c24 <MX_ADC1_Init+0x88>)
 8000be4:	f000 fec2 	bl	800196c <HAL_ADC_ConfigChannel>
 8000be8:	b9b0      	cbnz	r0, 8000c18 <MX_ADC1_Init+0x7c>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000bea:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <MX_ADC1_Init+0x94>)
 8000bec:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bf2:	4669      	mov	r1, sp
 8000bf4:	480b      	ldr	r0, [pc, #44]	@ (8000c24 <MX_ADC1_Init+0x88>)
 8000bf6:	f000 feb9 	bl	800196c <HAL_ADC_ConfigChannel>
 8000bfa:	b978      	cbnz	r0, 8000c1c <MX_ADC1_Init+0x80>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000bfc:	2311      	movs	r3, #17
 8000bfe:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 8000c00:	2303      	movs	r3, #3
 8000c02:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c04:	4669      	mov	r1, sp
 8000c06:	4807      	ldr	r0, [pc, #28]	@ (8000c24 <MX_ADC1_Init+0x88>)
 8000c08:	f000 feb0 	bl	800196c <HAL_ADC_ConfigChannel>
 8000c0c:	b940      	cbnz	r0, 8000c20 <MX_ADC1_Init+0x84>
}
 8000c0e:	b005      	add	sp, #20
 8000c10:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000c14:	f7ff fee2 	bl	80009dc <Error_Handler>
    Error_Handler();
 8000c18:	f7ff fee0 	bl	80009dc <Error_Handler>
    Error_Handler();
 8000c1c:	f7ff fede 	bl	80009dc <Error_Handler>
    Error_Handler();
 8000c20:	f7ff fedc 	bl	80009dc <Error_Handler>
 8000c24:	20000408 	.word	0x20000408
 8000c28:	40012000 	.word	0x40012000
 8000c2c:	0f000001 	.word	0x0f000001
 8000c30:	10000012 	.word	0x10000012

08000c34 <MX_LTDC_Init>:
{
 8000c34:	b500      	push	{lr}
 8000c36:	b08f      	sub	sp, #60	@ 0x3c
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000c38:	2234      	movs	r2, #52	@ 0x34
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	a801      	add	r0, sp, #4
 8000c3e:	f002 fd65 	bl	800370c <memset>
  hltdc.Instance = LTDC;
 8000c42:	4825      	ldr	r0, [pc, #148]	@ (8000cd8 <MX_LTDC_Init+0xa4>)
 8000c44:	4b25      	ldr	r3, [pc, #148]	@ (8000cdc <MX_LTDC_Init+0xa8>)
 8000c46:	6003      	str	r3, [r0, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	6043      	str	r3, [r0, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000c4c:	6083      	str	r3, [r0, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c4e:	60c3      	str	r3, [r0, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c50:	6103      	str	r3, [r0, #16]
  hltdc.Init.HorizontalSync = 7;
 8000c52:	2207      	movs	r2, #7
 8000c54:	6142      	str	r2, [r0, #20]
  hltdc.Init.VerticalSync = 3;
 8000c56:	2203      	movs	r2, #3
 8000c58:	6182      	str	r2, [r0, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000c5a:	220e      	movs	r2, #14
 8000c5c:	61c2      	str	r2, [r0, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000c5e:	2205      	movs	r2, #5
 8000c60:	6202      	str	r2, [r0, #32]
  hltdc.Init.AccumulatedActiveW = 334;
 8000c62:	f44f 72a7 	mov.w	r2, #334	@ 0x14e
 8000c66:	6242      	str	r2, [r0, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 245;
 8000c68:	22f5      	movs	r2, #245	@ 0xf5
 8000c6a:	6282      	str	r2, [r0, #40]	@ 0x28
  hltdc.Init.TotalWidth = 340;
 8000c6c:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 8000c70:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 247;
 8000c72:	22f7      	movs	r2, #247	@ 0xf7
 8000c74:	6302      	str	r2, [r0, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000c76:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000c7a:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000c7e:	f880 3036 	strb.w	r3, [r0, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c82:	f001 fc45 	bl	8002510 <HAL_LTDC_Init>
 8000c86:	bb10      	cbnz	r0, 8000cce <MX_LTDC_Init+0x9a>
  pLayerCfg.WindowX0 = 0;
 8000c88:	2200      	movs	r2, #0
 8000c8a:	9201      	str	r2, [sp, #4]
  pLayerCfg.WindowX1 = 320;
 8000c8c:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8000c90:	9102      	str	r1, [sp, #8]
  pLayerCfg.WindowY0 = 0;
 8000c92:	9203      	str	r2, [sp, #12]
  pLayerCfg.WindowY1 = 240;
 8000c94:	23f0      	movs	r3, #240	@ 0xf0
 8000c96:	9304      	str	r3, [sp, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000c98:	2002      	movs	r0, #2
 8000c9a:	9005      	str	r0, [sp, #20]
  pLayerCfg.Alpha = 255;
 8000c9c:	20ff      	movs	r0, #255	@ 0xff
 8000c9e:	9006      	str	r0, [sp, #24]
  pLayerCfg.Alpha0 = 0;
 8000ca0:	9207      	str	r2, [sp, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000ca2:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8000ca6:	9008      	str	r0, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000ca8:	2007      	movs	r0, #7
 8000caa:	9009      	str	r0, [sp, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 8000cac:	920a      	str	r2, [sp, #40]	@ 0x28
  pLayerCfg.ImageWidth = 320;
 8000cae:	910b      	str	r1, [sp, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 240;
 8000cb0:	930c      	str	r3, [sp, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000cb2:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000cb6:	f88d 2035 	strb.w	r2, [sp, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000cba:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000cbe:	a901      	add	r1, sp, #4
 8000cc0:	4805      	ldr	r0, [pc, #20]	@ (8000cd8 <MX_LTDC_Init+0xa4>)
 8000cc2:	f001 fd0f 	bl	80026e4 <HAL_LTDC_ConfigLayer>
 8000cc6:	b920      	cbnz	r0, 8000cd2 <MX_LTDC_Init+0x9e>
}
 8000cc8:	b00f      	add	sp, #60	@ 0x3c
 8000cca:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000cce:	f7ff fe85 	bl	80009dc <Error_Handler>
    Error_Handler();
 8000cd2:	f7ff fe83 	bl	80009dc <Error_Handler>
 8000cd6:	bf00      	nop
 8000cd8:	200002a4 	.word	0x200002a4
 8000cdc:	40016800 	.word	0x40016800

08000ce0 <SystemClock_Config>:
{
 8000ce0:	b508      	push	{r3, lr}
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000ce2:	4a35      	ldr	r2, [pc, #212]	@ (8000db8 <SystemClock_Config+0xd8>)
 8000ce4:	6813      	ldr	r3, [r2, #0]
 8000ce6:	f023 030f 	bic.w	r3, r3, #15
 8000cea:	f043 0303 	orr.w	r3, r3, #3
 8000cee:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000cf0:	4b31      	ldr	r3, [pc, #196]	@ (8000db8 <SystemClock_Config+0xd8>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f003 030f 	and.w	r3, r3, #15
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d1f9      	bne.n	8000cf0 <SystemClock_Config+0x10>
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000cfc:	4a2f      	ldr	r2, [pc, #188]	@ (8000dbc <SystemClock_Config+0xdc>)
 8000cfe:	6813      	ldr	r3, [r2, #0]
 8000d00:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d08:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(PWR->CR, PWR_CR_ODEN);
 8000d0a:	6813      	ldr	r3, [r2, #0]
 8000d0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d10:	6013      	str	r3, [r2, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000d12:	f502 32e4 	add.w	r2, r2, #116736	@ 0x1c800
 8000d16:	6813      	ldr	r3, [r2, #0]
 8000d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d1c:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000d1e:	4b28      	ldr	r3, [pc, #160]	@ (8000dc0 <SystemClock_Config+0xe0>)
 8000d20:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_HSE_IsReady() != 1)
 8000d22:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000d26:	d0fa      	beq.n	8000d1e <SystemClock_Config+0x3e>
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000d28:	4b25      	ldr	r3, [pc, #148]	@ (8000dc0 <SystemClock_Config+0xe0>)
 8000d2a:	685a      	ldr	r2, [r3, #4]
 8000d2c:	4925      	ldr	r1, [pc, #148]	@ (8000dc4 <SystemClock_Config+0xe4>)
 8000d2e:	4011      	ands	r1, r2
 8000d30:	4a25      	ldr	r2, [pc, #148]	@ (8000dc8 <SystemClock_Config+0xe8>)
 8000d32:	430a      	orrs	r2, r1
 8000d34:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000d36:	685a      	ldr	r2, [r3, #4]
 8000d38:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8000d3c:	605a      	str	r2, [r3, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8000d44:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000d46:	4b1e      	ldr	r3, [pc, #120]	@ (8000dc0 <SystemClock_Config+0xe0>)
 8000d48:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_PLL_IsReady() != 1)
 8000d4a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000d4e:	d0fa      	beq.n	8000d46 <SystemClock_Config+0x66>
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8000d50:	4b1a      	ldr	r3, [pc, #104]	@ (8000dbc <SystemClock_Config+0xdc>)
 8000d52:	685b      	ldr	r3, [r3, #4]
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8000d54:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8000d58:	d0fa      	beq.n	8000d50 <SystemClock_Config+0x70>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000d5a:	4b19      	ldr	r3, [pc, #100]	@ (8000dc0 <SystemClock_Config+0xe0>)
 8000d5c:	689a      	ldr	r2, [r3, #8]
 8000d5e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8000d62:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000d64:	689a      	ldr	r2, [r3, #8]
 8000d66:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8000d6a:	f442 52a0 	orr.w	r2, r2, #5120	@ 0x1400
 8000d6e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000d70:	689a      	ldr	r2, [r3, #8]
 8000d72:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8000d76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000d7a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000d7c:	689a      	ldr	r2, [r3, #8]
 8000d7e:	f022 0203 	bic.w	r2, r2, #3
 8000d82:	f042 0202 	orr.w	r2, r2, #2
 8000d86:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000d88:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc0 <SystemClock_Config+0xe0>)
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	f003 030c 	and.w	r3, r3, #12
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000d90:	2b08      	cmp	r3, #8
 8000d92:	d1f9      	bne.n	8000d88 <SystemClock_Config+0xa8>
  LL_SetSystemCoreClock(96000000);
 8000d94:	480d      	ldr	r0, [pc, #52]	@ (8000dcc <SystemClock_Config+0xec>)
 8000d96:	f002 fc79 	bl	800368c <LL_SetSystemCoreClock>
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000d9a:	200f      	movs	r0, #15
 8000d9c:	f000 fb06 	bl	80013ac <HAL_InitTick>
 8000da0:	b938      	cbnz	r0, 8000db2 <SystemClock_Config+0xd2>
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8000da2:	4a07      	ldr	r2, [pc, #28]	@ (8000dc0 <SystemClock_Config+0xe0>)
 8000da4:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8000da8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000dac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
}
 8000db0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000db2:	f7ff fe13 	bl	80009dc <Error_Handler>
 8000db6:	bf00      	nop
 8000db8:	40023c00 	.word	0x40023c00
 8000dbc:	40007000 	.word	0x40007000
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	ffbf8000 	.word	0xffbf8000
 8000dc8:	00401804 	.word	0x00401804
 8000dcc:	05b8d800 	.word	0x05b8d800

08000dd0 <main>:
{
 8000dd0:	b508      	push	{r3, lr}
  HAL_Init();
 8000dd2:	f000 fbbf 	bl	8001554 <HAL_Init>
  SystemClock_Config();
 8000dd6:	f7ff ff83 	bl	8000ce0 <SystemClock_Config>
  PeriphCommonClock_Config();
 8000dda:	f7ff fdc9 	bl	8000970 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 8000dde:	f7ff fcdf 	bl	80007a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000de2:	f7ff fccb 	bl	800077c <MX_DMA_Init>
  MX_CRC_Init();
 8000de6:	f7ff fdfb 	bl	80009e0 <MX_CRC_Init>
  MX_FMC_Init();
 8000dea:	f7ff fe07 	bl	80009fc <MX_FMC_Init>
  MX_I2C3_Init();
 8000dee:	f7ff fe3d 	bl	8000a6c <MX_I2C3_Init>
  MX_SPI5_Init();
 8000df2:	f7ff fe65 	bl	8000ac0 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000df6:	f7ff fe83 	bl	8000b00 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000dfa:	f7ff feb5 	bl	8000b68 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000dfe:	f7ff fecd 	bl	8000b9c <MX_ADC1_Init>
  MX_LTDC_Init();
 8000e02:	f7ff ff17 	bl	8000c34 <MX_LTDC_Init>
  apInit();
 8000e06:	f7ff fbbb 	bl	8000580 <apInit>
  apMain(); // 안에 while문이 있음.
 8000e0a:	f7ff fbbf 	bl	800058c <apMain>
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <main+0x3e>

08000e10 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e14:	b086      	sub	sp, #24
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000e16:	2300      	movs	r3, #0
 8000e18:	9301      	str	r3, [sp, #4]
 8000e1a:	9302      	str	r3, [sp, #8]
 8000e1c:	9303      	str	r3, [sp, #12]
 8000e1e:	9304      	str	r3, [sp, #16]
 8000e20:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 8000e22:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed8 <HAL_FMC_MspInit+0xc8>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	b113      	cbz	r3, 8000e2e <HAL_FMC_MspInit+0x1e>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000e28:	b006      	add	sp, #24
 8000e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  FMC_Initialized = 1;
 8000e2e:	f04f 0801 	mov.w	r8, #1
 8000e32:	4b29      	ldr	r3, [pc, #164]	@ (8000ed8 <HAL_FMC_MspInit+0xc8>)
 8000e34:	f8c3 8000 	str.w	r8, [r3]
  __HAL_RCC_FMC_CLK_ENABLE();
 8000e38:	2600      	movs	r6, #0
 8000e3a:	9600      	str	r6, [sp, #0]
 8000e3c:	4b27      	ldr	r3, [pc, #156]	@ (8000edc <HAL_FMC_MspInit+0xcc>)
 8000e3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e40:	ea42 0208 	orr.w	r2, r2, r8
 8000e44:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e48:	ea03 0308 	and.w	r3, r3, r8
 8000e4c:	9300      	str	r3, [sp, #0]
 8000e4e:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000e50:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000e54:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2702      	movs	r7, #2
 8000e58:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5a:	2503      	movs	r5, #3
 8000e5c:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e5e:	240c      	movs	r4, #12
 8000e60:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e62:	a901      	add	r1, sp, #4
 8000e64:	481e      	ldr	r0, [pc, #120]	@ (8000ee0 <HAL_FMC_MspInit+0xd0>)
 8000e66:	f001 f847 	bl	8001ef8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000e6a:	f8cd 8004 	str.w	r8, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e72:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e74:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000e76:	a901      	add	r1, sp, #4
 8000e78:	481a      	ldr	r0, [pc, #104]	@ (8000ee4 <HAL_FMC_MspInit+0xd4>)
 8000e7a:	f001 f83d 	bl	8001ef8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000e7e:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000e82:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e88:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e8a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e8c:	a901      	add	r1, sp, #4
 8000e8e:	4816      	ldr	r0, [pc, #88]	@ (8000ee8 <HAL_FMC_MspInit+0xd8>)
 8000e90:	f001 f832 	bl	8001ef8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000e94:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000e98:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ea0:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ea2:	a901      	add	r1, sp, #4
 8000ea4:	4811      	ldr	r0, [pc, #68]	@ (8000eec <HAL_FMC_MspInit+0xdc>)
 8000ea6:	f001 f827 	bl	8001ef8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000eaa:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000eae:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb4:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000eb6:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eb8:	a901      	add	r1, sp, #4
 8000eba:	480d      	ldr	r0, [pc, #52]	@ (8000ef0 <HAL_FMC_MspInit+0xe0>)
 8000ebc:	f001 f81c 	bl	8001ef8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000ec0:	2360      	movs	r3, #96	@ 0x60
 8000ec2:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec8:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000eca:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ecc:	a901      	add	r1, sp, #4
 8000ece:	4809      	ldr	r0, [pc, #36]	@ (8000ef4 <HAL_FMC_MspInit+0xe4>)
 8000ed0:	f001 f812 	bl	8001ef8 <HAL_GPIO_Init>
 8000ed4:	e7a8      	b.n	8000e28 <HAL_FMC_MspInit+0x18>
 8000ed6:	bf00      	nop
 8000ed8:	20000450 	.word	0x20000450
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40021400 	.word	0x40021400
 8000ee4:	40020800 	.word	0x40020800
 8000ee8:	40021800 	.word	0x40021800
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	40020c00 	.word	0x40020c00
 8000ef4:	40020400 	.word	0x40020400

08000ef8 <HAL_MspInit>:
{
 8000ef8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efa:	2100      	movs	r1, #0
 8000efc:	9100      	str	r1, [sp, #0]
 8000efe:	4b0b      	ldr	r3, [pc, #44]	@ (8000f2c <HAL_MspInit+0x34>)
 8000f00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000f02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000f06:	645a      	str	r2, [r3, #68]	@ 0x44
 8000f08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000f0a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000f0e:	9200      	str	r2, [sp, #0]
 8000f10:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f12:	9101      	str	r1, [sp, #4]
 8000f14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f16:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000f1a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f22:	9301      	str	r3, [sp, #4]
 8000f24:	9b01      	ldr	r3, [sp, #4]
}
 8000f26:	b002      	add	sp, #8
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40023800 	.word	0x40023800

08000f30 <HAL_ADC_MspInit>:
{
 8000f30:	b530      	push	{r4, r5, lr}
 8000f32:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	2300      	movs	r3, #0
 8000f36:	9303      	str	r3, [sp, #12]
 8000f38:	9304      	str	r3, [sp, #16]
 8000f3a:	9305      	str	r3, [sp, #20]
 8000f3c:	9306      	str	r3, [sp, #24]
 8000f3e:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 8000f40:	6802      	ldr	r2, [r0, #0]
 8000f42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000f46:	f503 3390 	add.w	r3, r3, #73728	@ 0x12000
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d001      	beq.n	8000f52 <HAL_ADC_MspInit+0x22>
}
 8000f4e:	b009      	add	sp, #36	@ 0x24
 8000f50:	bd30      	pop	{r4, r5, pc}
 8000f52:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f54:	2500      	movs	r5, #0
 8000f56:	9501      	str	r5, [sp, #4]
 8000f58:	f503 338c 	add.w	r3, r3, #71680	@ 0x11800
 8000f5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000f5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000f62:	645a      	str	r2, [r3, #68]	@ 0x44
 8000f64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000f66:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8000f6a:	9201      	str	r2, [sp, #4]
 8000f6c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	9502      	str	r5, [sp, #8]
 8000f70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f72:	f042 0201 	orr.w	r2, r2, #1
 8000f76:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	9302      	str	r3, [sp, #8]
 8000f80:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f82:	2320      	movs	r3, #32
 8000f84:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f86:	2303      	movs	r3, #3
 8000f88:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8a:	a903      	add	r1, sp, #12
 8000f8c:	4810      	ldr	r0, [pc, #64]	@ (8000fd0 <HAL_ADC_MspInit+0xa0>)
 8000f8e:	f000 ffb3 	bl	8001ef8 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8000f92:	4810      	ldr	r0, [pc, #64]	@ (8000fd4 <HAL_ADC_MspInit+0xa4>)
 8000f94:	4b10      	ldr	r3, [pc, #64]	@ (8000fd8 <HAL_ADC_MspInit+0xa8>)
 8000f96:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f98:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f9a:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f9c:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fa2:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fa4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000fa8:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000faa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fae:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fb0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fb4:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fb6:	6205      	str	r5, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fb8:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fba:	f000 fea5 	bl	8001d08 <HAL_DMA_Init>
 8000fbe:	b918      	cbnz	r0, 8000fc8 <HAL_ADC_MspInit+0x98>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000fc0:	4b04      	ldr	r3, [pc, #16]	@ (8000fd4 <HAL_ADC_MspInit+0xa4>)
 8000fc2:	63a3      	str	r3, [r4, #56]	@ 0x38
 8000fc4:	639c      	str	r4, [r3, #56]	@ 0x38
}
 8000fc6:	e7c2      	b.n	8000f4e <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 8000fc8:	f7ff fd08 	bl	80009dc <Error_Handler>
 8000fcc:	e7f8      	b.n	8000fc0 <HAL_ADC_MspInit+0x90>
 8000fce:	bf00      	nop
 8000fd0:	40020000 	.word	0x40020000
 8000fd4:	200003a8 	.word	0x200003a8
 8000fd8:	40026410 	.word	0x40026410

08000fdc <HAL_CRC_MspInit>:
  if(hcrc->Instance==CRC)
 8000fdc:	6802      	ldr	r2, [r0, #0]
 8000fde:	4b09      	ldr	r3, [pc, #36]	@ (8001004 <HAL_CRC_MspInit+0x28>)
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d000      	beq.n	8000fe6 <HAL_CRC_MspInit+0xa>
 8000fe4:	4770      	bx	lr
{
 8000fe6:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 8000fe8:	2300      	movs	r3, #0
 8000fea:	9301      	str	r3, [sp, #4]
 8000fec:	4b06      	ldr	r3, [pc, #24]	@ (8001008 <HAL_CRC_MspInit+0x2c>)
 8000fee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ff0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000ff4:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ffc:	9301      	str	r3, [sp, #4]
 8000ffe:	9b01      	ldr	r3, [sp, #4]
}
 8001000:	b002      	add	sp, #8
 8001002:	4770      	bx	lr
 8001004:	40023000 	.word	0x40023000
 8001008:	40023800 	.word	0x40023800

0800100c <HAL_I2C_MspInit>:
{
 800100c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001010:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001012:	2300      	movs	r3, #0
 8001014:	9303      	str	r3, [sp, #12]
 8001016:	9304      	str	r3, [sp, #16]
 8001018:	9305      	str	r3, [sp, #20]
 800101a:	9306      	str	r3, [sp, #24]
 800101c:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C3)
 800101e:	6802      	ldr	r2, [r0, #0]
 8001020:	4b20      	ldr	r3, [pc, #128]	@ (80010a4 <HAL_I2C_MspInit+0x98>)
 8001022:	429a      	cmp	r2, r3
 8001024:	d002      	beq.n	800102c <HAL_I2C_MspInit+0x20>
}
 8001026:	b008      	add	sp, #32
 8001028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800102c:	2500      	movs	r5, #0
 800102e:	9500      	str	r5, [sp, #0]
 8001030:	4c1d      	ldr	r4, [pc, #116]	@ (80010a8 <HAL_I2C_MspInit+0x9c>)
 8001032:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001034:	f043 0304 	orr.w	r3, r3, #4
 8001038:	6323      	str	r3, [r4, #48]	@ 0x30
 800103a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800103c:	f003 0304 	and.w	r3, r3, #4
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001044:	9501      	str	r5, [sp, #4]
 8001046:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6323      	str	r3, [r4, #48]	@ 0x30
 800104e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	9301      	str	r3, [sp, #4]
 8001056:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001058:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800105c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800105e:	f04f 0812 	mov.w	r8, #18
 8001062:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001066:	2701      	movs	r7, #1
 8001068:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800106a:	2604      	movs	r6, #4
 800106c:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800106e:	a903      	add	r1, sp, #12
 8001070:	480e      	ldr	r0, [pc, #56]	@ (80010ac <HAL_I2C_MspInit+0xa0>)
 8001072:	f000 ff41 	bl	8001ef8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001076:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800107a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800107c:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001080:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001084:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001086:	a903      	add	r1, sp, #12
 8001088:	4809      	ldr	r0, [pc, #36]	@ (80010b0 <HAL_I2C_MspInit+0xa4>)
 800108a:	f000 ff35 	bl	8001ef8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800108e:	9502      	str	r5, [sp, #8]
 8001090:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001092:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001096:	6423      	str	r3, [r4, #64]	@ 0x40
 8001098:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800109a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800109e:	9302      	str	r3, [sp, #8]
 80010a0:	9b02      	ldr	r3, [sp, #8]
}
 80010a2:	e7c0      	b.n	8001026 <HAL_I2C_MspInit+0x1a>
 80010a4:	40005c00 	.word	0x40005c00
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020800 	.word	0x40020800
 80010b0:	40020000 	.word	0x40020000

080010b4 <HAL_LTDC_MspInit>:
{
 80010b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010b8:	b08c      	sub	sp, #48	@ 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ba:	2300      	movs	r3, #0
 80010bc:	9307      	str	r3, [sp, #28]
 80010be:	9308      	str	r3, [sp, #32]
 80010c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80010c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80010c4:	930b      	str	r3, [sp, #44]	@ 0x2c
  if(hltdc->Instance==LTDC)
 80010c6:	6802      	ldr	r2, [r0, #0]
 80010c8:	4b6a      	ldr	r3, [pc, #424]	@ (8001274 <HAL_LTDC_MspInit+0x1c0>)
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d002      	beq.n	80010d4 <HAL_LTDC_MspInit+0x20>
}
 80010ce:	b00c      	add	sp, #48	@ 0x30
 80010d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RCC_LTDC_CLK_ENABLE();
 80010d4:	2400      	movs	r4, #0
 80010d6:	9400      	str	r4, [sp, #0]
 80010d8:	f503 4350 	add.w	r3, r3, #53248	@ 0xd000
 80010dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80010de:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80010e2:	645a      	str	r2, [r3, #68]	@ 0x44
 80010e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80010e6:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 80010ea:	9200      	str	r2, [sp, #0]
 80010ec:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010ee:	9401      	str	r4, [sp, #4]
 80010f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80010f2:	f042 0220 	orr.w	r2, r2, #32
 80010f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80010f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80010fa:	f002 0220 	and.w	r2, r2, #32
 80010fe:	9201      	str	r2, [sp, #4]
 8001100:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	9402      	str	r4, [sp, #8]
 8001104:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001106:	f042 0201 	orr.w	r2, r2, #1
 800110a:	631a      	str	r2, [r3, #48]	@ 0x30
 800110c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800110e:	f002 0201 	and.w	r2, r2, #1
 8001112:	9202      	str	r2, [sp, #8]
 8001114:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001116:	9403      	str	r4, [sp, #12]
 8001118:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800111a:	f042 0202 	orr.w	r2, r2, #2
 800111e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001120:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001122:	f002 0202 	and.w	r2, r2, #2
 8001126:	9203      	str	r2, [sp, #12]
 8001128:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800112a:	9404      	str	r4, [sp, #16]
 800112c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800112e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001132:	631a      	str	r2, [r3, #48]	@ 0x30
 8001134:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001136:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800113a:	9204      	str	r2, [sp, #16]
 800113c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800113e:	9405      	str	r4, [sp, #20]
 8001140:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001142:	f042 0204 	orr.w	r2, r2, #4
 8001146:	631a      	str	r2, [r3, #48]	@ 0x30
 8001148:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800114a:	f002 0204 	and.w	r2, r2, #4
 800114e:	9205      	str	r2, [sp, #20]
 8001150:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001152:	9406      	str	r4, [sp, #24]
 8001154:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001156:	f042 0208 	orr.w	r2, r2, #8
 800115a:	631a      	str	r2, [r3, #48]	@ 0x30
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	f003 0308 	and.w	r3, r3, #8
 8001162:	9306      	str	r3, [sp, #24]
 8001164:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001166:	f44f 6a80 	mov.w	sl, #1024	@ 0x400
 800116a:	f8cd a01c 	str.w	sl, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2502      	movs	r5, #2
 8001170:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001172:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001174:	260e      	movs	r6, #14
 8001176:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001178:	a907      	add	r1, sp, #28
 800117a:	483f      	ldr	r0, [pc, #252]	@ (8001278 <HAL_LTDC_MspInit+0x1c4>)
 800117c:	f000 febc 	bl	8001ef8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001180:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001184:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800118a:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800118c:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118e:	a907      	add	r1, sp, #28
 8001190:	483a      	ldr	r0, [pc, #232]	@ (800127c <HAL_LTDC_MspInit+0x1c8>)
 8001192:	f000 feb1 	bl	8001ef8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001196:	2303      	movs	r3, #3
 8001198:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800119e:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80011a0:	f04f 0809 	mov.w	r8, #9
 80011a4:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a8:	4f35      	ldr	r7, [pc, #212]	@ (8001280 <HAL_LTDC_MspInit+0x1cc>)
 80011aa:	a907      	add	r1, sp, #28
 80011ac:	4638      	mov	r0, r7
 80011ae:	f000 fea3 	bl	8001ef8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80011b2:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80011b6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011bc:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011be:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c0:	a907      	add	r1, sp, #28
 80011c2:	4638      	mov	r0, r7
 80011c4:	f000 fe98 	bl	8001ef8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80011c8:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80011cc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d2:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011d4:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011d6:	f507 57a0 	add.w	r7, r7, #5120	@ 0x1400
 80011da:	a907      	add	r1, sp, #28
 80011dc:	4638      	mov	r0, r7
 80011de:	f000 fe8b 	bl	8001ef8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin;
 80011e2:	23c0      	movs	r3, #192	@ 0xc0
 80011e4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ea:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011ec:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ee:	f8df 9094 	ldr.w	r9, [pc, #148]	@ 8001284 <HAL_LTDC_MspInit+0x1d0>
 80011f2:	a907      	add	r1, sp, #28
 80011f4:	4648      	mov	r0, r9
 80011f6:	f000 fe7f 	bl	8001ef8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = R2_Pin;
 80011fa:	f8cd a01c 	str.w	sl, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	940a      	str	r4, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001204:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(R2_GPIO_Port, &GPIO_InitStruct);
 8001206:	a907      	add	r1, sp, #28
 8001208:	4648      	mov	r0, r9
 800120a:	f000 fe75 	bl	8001ef8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = G7_Pin;
 800120e:	2308      	movs	r3, #8
 8001210:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001212:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001216:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001218:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(G7_GPIO_Port, &GPIO_InitStruct);
 800121a:	f509 6980 	add.w	r9, r9, #1024	@ 0x400
 800121e:	a907      	add	r1, sp, #28
 8001220:	4648      	mov	r0, r9
 8001222:	f000 fe69 	bl	8001ef8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = B2_Pin;
 8001226:	2340      	movs	r3, #64	@ 0x40
 8001228:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	940a      	str	r4, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001230:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8001232:	a907      	add	r1, sp, #28
 8001234:	4648      	mov	r0, r9
 8001236:	f000 fe5f 	bl	8001ef8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800123a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800123e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001244:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001246:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800124a:	a907      	add	r1, sp, #28
 800124c:	4638      	mov	r0, r7
 800124e:	f000 fe53 	bl	8001ef8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001252:	4622      	mov	r2, r4
 8001254:	4621      	mov	r1, r4
 8001256:	2058      	movs	r0, #88	@ 0x58
 8001258:	f000 fcb2 	bl	8001bc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800125c:	2058      	movs	r0, #88	@ 0x58
 800125e:	f000 fcbf 	bl	8001be0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 8001262:	4622      	mov	r2, r4
 8001264:	4621      	mov	r1, r4
 8001266:	2059      	movs	r0, #89	@ 0x59
 8001268:	f000 fcaa 	bl	8001bc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 800126c:	2059      	movs	r0, #89	@ 0x59
 800126e:	f000 fcb7 	bl	8001be0 <HAL_NVIC_EnableIRQ>
}
 8001272:	e72c      	b.n	80010ce <HAL_LTDC_MspInit+0x1a>
 8001274:	40016800 	.word	0x40016800
 8001278:	40021400 	.word	0x40021400
 800127c:	40020000 	.word	0x40020000
 8001280:	40020400 	.word	0x40020400
 8001284:	40020800 	.word	0x40020800

08001288 <HAL_SPI_MspInit>:
{
 8001288:	b500      	push	{lr}
 800128a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	2300      	movs	r3, #0
 800128e:	9303      	str	r3, [sp, #12]
 8001290:	9304      	str	r3, [sp, #16]
 8001292:	9305      	str	r3, [sp, #20]
 8001294:	9306      	str	r3, [sp, #24]
 8001296:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI5)
 8001298:	6802      	ldr	r2, [r0, #0]
 800129a:	4b14      	ldr	r3, [pc, #80]	@ (80012ec <HAL_SPI_MspInit+0x64>)
 800129c:	429a      	cmp	r2, r3
 800129e:	d002      	beq.n	80012a6 <HAL_SPI_MspInit+0x1e>
}
 80012a0:	b009      	add	sp, #36	@ 0x24
 80012a2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI5_CLK_ENABLE();
 80012a6:	2100      	movs	r1, #0
 80012a8:	9101      	str	r1, [sp, #4]
 80012aa:	f503 4368 	add.w	r3, r3, #59392	@ 0xe800
 80012ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80012b0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80012b4:	645a      	str	r2, [r3, #68]	@ 0x44
 80012b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80012b8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80012bc:	9201      	str	r2, [sp, #4]
 80012be:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012c0:	9102      	str	r1, [sp, #8]
 80012c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012c4:	f042 0220 	orr.w	r2, r2, #32
 80012c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80012ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012cc:	f003 0320 	and.w	r3, r3, #32
 80012d0:	9302      	str	r3, [sp, #8]
 80012d2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80012d4:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80012d8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80012de:	2305      	movs	r3, #5
 80012e0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012e2:	a903      	add	r1, sp, #12
 80012e4:	4802      	ldr	r0, [pc, #8]	@ (80012f0 <HAL_SPI_MspInit+0x68>)
 80012e6:	f000 fe07 	bl	8001ef8 <HAL_GPIO_Init>
}
 80012ea:	e7d9      	b.n	80012a0 <HAL_SPI_MspInit+0x18>
 80012ec:	40015000 	.word	0x40015000
 80012f0:	40021400 	.word	0x40021400

080012f4 <HAL_TIM_Base_MspInit>:
  if(htim_base->Instance==TIM1)
 80012f4:	6802      	ldr	r2, [r0, #0]
 80012f6:	4b09      	ldr	r3, [pc, #36]	@ (800131c <HAL_TIM_Base_MspInit+0x28>)
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d000      	beq.n	80012fe <HAL_TIM_Base_MspInit+0xa>
 80012fc:	4770      	bx	lr
{
 80012fe:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001300:	2300      	movs	r3, #0
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <HAL_TIM_Base_MspInit+0x2c>)
 8001306:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001308:	f042 0201 	orr.w	r2, r2, #1
 800130c:	645a      	str	r2, [r3, #68]	@ 0x44
 800130e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	9301      	str	r3, [sp, #4]
 8001316:	9b01      	ldr	r3, [sp, #4]
}
 8001318:	b002      	add	sp, #8
 800131a:	4770      	bx	lr
 800131c:	40010000 	.word	0x40010000
 8001320:	40023800 	.word	0x40023800

08001324 <HAL_UART_MspInit>:
{
 8001324:	b510      	push	{r4, lr}
 8001326:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	2300      	movs	r3, #0
 800132a:	9303      	str	r3, [sp, #12]
 800132c:	9304      	str	r3, [sp, #16]
 800132e:	9305      	str	r3, [sp, #20]
 8001330:	9306      	str	r3, [sp, #24]
 8001332:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8001334:	6802      	ldr	r2, [r0, #0]
 8001336:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800133a:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 800133e:	429a      	cmp	r2, r3
 8001340:	d001      	beq.n	8001346 <HAL_UART_MspInit+0x22>
}
 8001342:	b008      	add	sp, #32
 8001344:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001346:	2400      	movs	r4, #0
 8001348:	9401      	str	r4, [sp, #4]
 800134a:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 800134e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001350:	f042 0210 	orr.w	r2, r2, #16
 8001354:	645a      	str	r2, [r3, #68]	@ 0x44
 8001356:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001358:	f002 0210 	and.w	r2, r2, #16
 800135c:	9201      	str	r2, [sp, #4]
 800135e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001360:	9402      	str	r4, [sp, #8]
 8001362:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001364:	f042 0201 	orr.w	r2, r2, #1
 8001368:	631a      	str	r2, [r3, #48]	@ 0x30
 800136a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	9302      	str	r3, [sp, #8]
 8001372:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001374:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001378:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137e:	2303      	movs	r3, #3
 8001380:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001382:	2307      	movs	r3, #7
 8001384:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001386:	a903      	add	r1, sp, #12
 8001388:	4805      	ldr	r0, [pc, #20]	@ (80013a0 <HAL_UART_MspInit+0x7c>)
 800138a:	f000 fdb5 	bl	8001ef8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800138e:	4622      	mov	r2, r4
 8001390:	4621      	mov	r1, r4
 8001392:	2025      	movs	r0, #37	@ 0x25
 8001394:	f000 fc14 	bl	8001bc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001398:	2025      	movs	r0, #37	@ 0x25
 800139a:	f000 fc21 	bl	8001be0 <HAL_NVIC_EnableIRQ>
}
 800139e:	e7d0      	b.n	8001342 <HAL_UART_MspInit+0x1e>
 80013a0:	40020000 	.word	0x40020000

080013a4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80013a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80013a6:	f7ff fd33 	bl	8000e10 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80013aa:	bd08      	pop	{r3, pc}

080013ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ac:	b530      	push	{r4, r5, lr}
 80013ae:	b089      	sub	sp, #36	@ 0x24
 80013b0:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	9301      	str	r3, [sp, #4]
 80013b6:	4b21      	ldr	r3, [pc, #132]	@ (800143c <HAL_InitTick+0x90>)
 80013b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013ba:	f042 0210 	orr.w	r2, r2, #16
 80013be:	641a      	str	r2, [r3, #64]	@ 0x40
 80013c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c2:	f003 0310 	and.w	r3, r3, #16
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	9b01      	ldr	r3, [sp, #4]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013ca:	a902      	add	r1, sp, #8
 80013cc:	a803      	add	r0, sp, #12
 80013ce:	f001 f9e3 	bl	8002798 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013d2:	9b06      	ldr	r3, [sp, #24]
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013d4:	b9cb      	cbnz	r3, 800140a <HAL_InitTick+0x5e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013d6:	f001 f9bf 	bl	8002758 <HAL_RCC_GetPCLK1Freq>
 80013da:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013dc:	4a18      	ldr	r2, [pc, #96]	@ (8001440 <HAL_InitTick+0x94>)
 80013de:	fba2 2303 	umull	r2, r3, r2, r3
 80013e2:	0c9b      	lsrs	r3, r3, #18
 80013e4:	3b01      	subs	r3, #1

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013e6:	4817      	ldr	r0, [pc, #92]	@ (8001444 <HAL_InitTick+0x98>)
 80013e8:	4a17      	ldr	r2, [pc, #92]	@ (8001448 <HAL_InitTick+0x9c>)
 80013ea:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013ec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013f0:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013f2:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f8:	6083      	str	r3, [r0, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fa:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80013fc:	f001 fbfc 	bl	8002bf8 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8001400:	4605      	mov	r5, r0
 8001402:	b130      	cbz	r0, 8001412 <HAL_InitTick+0x66>
    }
  }

 /* Return function status */
  return status;
}
 8001404:	4628      	mov	r0, r5
 8001406:	b009      	add	sp, #36	@ 0x24
 8001408:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800140a:	f001 f9a5 	bl	8002758 <HAL_RCC_GetPCLK1Freq>
 800140e:	0043      	lsls	r3, r0, #1
 8001410:	e7e4      	b.n	80013dc <HAL_InitTick+0x30>
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001412:	480c      	ldr	r0, [pc, #48]	@ (8001444 <HAL_InitTick+0x98>)
 8001414:	f001 fa8c 	bl	8002930 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8001418:	4605      	mov	r5, r0
 800141a:	2800      	cmp	r0, #0
 800141c:	d1f2      	bne.n	8001404 <HAL_InitTick+0x58>
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800141e:	2036      	movs	r0, #54	@ 0x36
 8001420:	f000 fbde 	bl	8001be0 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001424:	2c0f      	cmp	r4, #15
 8001426:	d901      	bls.n	800142c <HAL_InitTick+0x80>
        status = HAL_ERROR;
 8001428:	2501      	movs	r5, #1
 800142a:	e7eb      	b.n	8001404 <HAL_InitTick+0x58>
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800142c:	2200      	movs	r2, #0
 800142e:	4621      	mov	r1, r4
 8001430:	2036      	movs	r0, #54	@ 0x36
 8001432:	f000 fbc5 	bl	8001bc0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001436:	4b05      	ldr	r3, [pc, #20]	@ (800144c <HAL_InitTick+0xa0>)
 8001438:	601c      	str	r4, [r3, #0]
 800143a:	e7e3      	b.n	8001404 <HAL_InitTick+0x58>
 800143c:	40023800 	.word	0x40023800
 8001440:	431bde83 	.word	0x431bde83
 8001444:	20000454 	.word	0x20000454
 8001448:	40001000 	.word	0x40001000
 800144c:	20000008 	.word	0x20000008

08001450 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001450:	e7fe      	b.n	8001450 <NMI_Handler>

08001452 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001452:	e7fe      	b.n	8001452 <HardFault_Handler>

08001454 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <MemManage_Handler>

08001456 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001456:	e7fe      	b.n	8001456 <BusFault_Handler>

08001458 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001458:	e7fe      	b.n	8001458 <UsageFault_Handler>

0800145a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800145a:	4770      	bx	lr

0800145c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800145c:	4770      	bx	lr

0800145e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145e:	4770      	bx	lr

08001460 <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001460:	4770      	bx	lr
	...

08001464 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001464:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001466:	4802      	ldr	r0, [pc, #8]	@ (8001470 <USART1_IRQHandler+0xc>)
 8001468:	f001 ff10 	bl	800328c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800146c:	bd08      	pop	{r3, pc}
 800146e:	bf00      	nop
 8001470:	200001bc 	.word	0x200001bc

08001474 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001474:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001476:	4802      	ldr	r0, [pc, #8]	@ (8001480 <TIM6_DAC_IRQHandler+0xc>)
 8001478:	f001 faa2 	bl	80029c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800147c:	bd08      	pop	{r3, pc}
 800147e:	bf00      	nop
 8001480:	20000454 	.word	0x20000454

08001484 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001484:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001486:	4802      	ldr	r0, [pc, #8]	@ (8001490 <LTDC_IRQHandler+0xc>)
 8001488:	f001 f8bf 	bl	800260a <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800148c:	bd08      	pop	{r3, pc}
 800148e:	bf00      	nop
 8001490:	200002a4 	.word	0x200002a4

08001494 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC global error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 8001494:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001496:	4802      	ldr	r0, [pc, #8]	@ (80014a0 <LTDC_ER_IRQHandler+0xc>)
 8001498:	f001 f8b7 	bl	800260a <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 800149c:	bd08      	pop	{r3, pc}
 800149e:	bf00      	nop
 80014a0:	200002a4 	.word	0x200002a4

080014a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014a4:	b510      	push	{r4, lr}
 80014a6:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014a8:	4a0c      	ldr	r2, [pc, #48]	@ (80014dc <_sbrk+0x38>)
 80014aa:	490d      	ldr	r1, [pc, #52]	@ (80014e0 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014ac:	480d      	ldr	r0, [pc, #52]	@ (80014e4 <_sbrk+0x40>)
 80014ae:	6800      	ldr	r0, [r0, #0]
 80014b0:	b140      	cbz	r0, 80014c4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014b2:	480c      	ldr	r0, [pc, #48]	@ (80014e4 <_sbrk+0x40>)
 80014b4:	6800      	ldr	r0, [r0, #0]
 80014b6:	4403      	add	r3, r0
 80014b8:	1a52      	subs	r2, r2, r1
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d806      	bhi.n	80014cc <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80014be:	4a09      	ldr	r2, [pc, #36]	@ (80014e4 <_sbrk+0x40>)
 80014c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80014c2:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80014c4:	4807      	ldr	r0, [pc, #28]	@ (80014e4 <_sbrk+0x40>)
 80014c6:	4c08      	ldr	r4, [pc, #32]	@ (80014e8 <_sbrk+0x44>)
 80014c8:	6004      	str	r4, [r0, #0]
 80014ca:	e7f2      	b.n	80014b2 <_sbrk+0xe>
    errno = ENOMEM;
 80014cc:	f002 f926 	bl	800371c <__errno>
 80014d0:	230c      	movs	r3, #12
 80014d2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80014d4:	f04f 30ff 	mov.w	r0, #4294967295
 80014d8:	e7f3      	b.n	80014c2 <_sbrk+0x1e>
 80014da:	bf00      	nop
 80014dc:	20030000 	.word	0x20030000
 80014e0:	00000400 	.word	0x00000400
 80014e4:	2000049c 	.word	0x2000049c
 80014e8:	200005f0 	.word	0x200005f0

080014ec <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014ec:	4a03      	ldr	r2, [pc, #12]	@ (80014fc <SystemInit+0x10>)
 80014ee:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80014f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014f6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014fa:	4770      	bx	lr
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001500:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001538 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001504:	f7ff fff2 	bl	80014ec <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001508:	480c      	ldr	r0, [pc, #48]	@ (800153c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800150a:	490d      	ldr	r1, [pc, #52]	@ (8001540 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800150c:	4a0d      	ldr	r2, [pc, #52]	@ (8001544 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001510:	e002      	b.n	8001518 <LoopCopyDataInit>

08001512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001516:	3304      	adds	r3, #4

08001518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800151c:	d3f9      	bcc.n	8001512 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800151e:	4a0a      	ldr	r2, [pc, #40]	@ (8001548 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001520:	4c0a      	ldr	r4, [pc, #40]	@ (800154c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001524:	e001      	b.n	800152a <LoopFillZerobss>

08001526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001528:	3204      	adds	r2, #4

0800152a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800152c:	d3fb      	bcc.n	8001526 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800152e:	f002 f8fb 	bl	8003728 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001532:	f7ff fc4d 	bl	8000dd0 <main>
  bx  lr    
 8001536:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001538:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800153c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001540:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001544:	0800409c 	.word	0x0800409c
  ldr r2, =_sbss
 8001548:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800154c:	200005ec 	.word	0x200005ec

08001550 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001550:	e7fe      	b.n	8001550 <ADC_IRQHandler>
	...

08001554 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001554:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001556:	4b0b      	ldr	r3, [pc, #44]	@ (8001584 <HAL_Init+0x30>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800155e:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001566:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800156e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001570:	2003      	movs	r0, #3
 8001572:	f000 fb13 	bl	8001b9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001576:	200f      	movs	r0, #15
 8001578:	f7ff ff18 	bl	80013ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800157c:	f7ff fcbc 	bl	8000ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001580:	2000      	movs	r0, #0
 8001582:	bd08      	pop	{r3, pc}
 8001584:	40023c00 	.word	0x40023c00

08001588 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001588:	4a03      	ldr	r2, [pc, #12]	@ (8001598 <HAL_IncTick+0x10>)
 800158a:	6811      	ldr	r1, [r2, #0]
 800158c:	4b03      	ldr	r3, [pc, #12]	@ (800159c <HAL_IncTick+0x14>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	440b      	add	r3, r1
 8001592:	6013      	str	r3, [r2, #0]
}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	200004a0 	.word	0x200004a0
 800159c:	20000004 	.word	0x20000004

080015a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80015a0:	4b01      	ldr	r3, [pc, #4]	@ (80015a8 <HAL_GetTick+0x8>)
 80015a2:	6818      	ldr	r0, [r3, #0]
}
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	200004a0 	.word	0x200004a0

080015ac <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015ac:	4b4a      	ldr	r3, [pc, #296]	@ (80016d8 <ADC_Init+0x12c>)
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80015b4:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	6841      	ldr	r1, [r0, #4]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015be:	6802      	ldr	r2, [r0, #0]
 80015c0:	6853      	ldr	r3, [r2, #4]
 80015c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015c6:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015c8:	6802      	ldr	r2, [r0, #0]
 80015ca:	6853      	ldr	r3, [r2, #4]
 80015cc:	6901      	ldr	r1, [r0, #16]
 80015ce:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80015d2:	6053      	str	r3, [r2, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015d4:	6802      	ldr	r2, [r0, #0]
 80015d6:	6853      	ldr	r3, [r2, #4]
 80015d8:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80015dc:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015de:	6802      	ldr	r2, [r0, #0]
 80015e0:	6853      	ldr	r3, [r2, #4]
 80015e2:	6881      	ldr	r1, [r0, #8]
 80015e4:	430b      	orrs	r3, r1
 80015e6:	6053      	str	r3, [r2, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015e8:	6802      	ldr	r2, [r0, #0]
 80015ea:	6893      	ldr	r3, [r2, #8]
 80015ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80015f0:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015f2:	6802      	ldr	r2, [r0, #0]
 80015f4:	6893      	ldr	r3, [r2, #8]
 80015f6:	68c1      	ldr	r1, [r0, #12]
 80015f8:	430b      	orrs	r3, r1
 80015fa:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015fc:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80015fe:	4b37      	ldr	r3, [pc, #220]	@ (80016dc <ADC_Init+0x130>)
 8001600:	429a      	cmp	r2, r3
 8001602:	d057      	beq.n	80016b4 <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001604:	6802      	ldr	r2, [r0, #0]
 8001606:	6893      	ldr	r3, [r2, #8]
 8001608:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800160c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800160e:	6802      	ldr	r2, [r0, #0]
 8001610:	6893      	ldr	r3, [r2, #8]
 8001612:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8001614:	430b      	orrs	r3, r1
 8001616:	6093      	str	r3, [r2, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001618:	6802      	ldr	r2, [r0, #0]
 800161a:	6893      	ldr	r3, [r2, #8]
 800161c:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8001620:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001622:	6802      	ldr	r2, [r0, #0]
 8001624:	6893      	ldr	r3, [r2, #8]
 8001626:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8001628:	430b      	orrs	r3, r1
 800162a:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800162c:	6802      	ldr	r2, [r0, #0]
 800162e:	6893      	ldr	r3, [r2, #8]
 8001630:	f023 0302 	bic.w	r3, r3, #2
 8001634:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001636:	6802      	ldr	r2, [r0, #0]
 8001638:	6893      	ldr	r3, [r2, #8]
 800163a:	7e01      	ldrb	r1, [r0, #24]
 800163c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8001640:	6093      	str	r3, [r2, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001642:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d03f      	beq.n	80016ca <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800164a:	6802      	ldr	r2, [r0, #0]
 800164c:	6853      	ldr	r3, [r2, #4]
 800164e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001652:	6053      	str	r3, [r2, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001654:	6802      	ldr	r2, [r0, #0]
 8001656:	6853      	ldr	r3, [r2, #4]
 8001658:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800165c:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800165e:	6801      	ldr	r1, [r0, #0]
 8001660:	684b      	ldr	r3, [r1, #4]
 8001662:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8001664:	3a01      	subs	r2, #1
 8001666:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800166a:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800166c:	6802      	ldr	r2, [r0, #0]
 800166e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8001670:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8001674:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001676:	6801      	ldr	r1, [r0, #0]
 8001678:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800167a:	69c2      	ldr	r2, [r0, #28]
 800167c:	3a01      	subs	r2, #1
 800167e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8001682:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001684:	6802      	ldr	r2, [r0, #0]
 8001686:	6893      	ldr	r3, [r2, #8]
 8001688:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800168c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800168e:	6802      	ldr	r2, [r0, #0]
 8001690:	6893      	ldr	r3, [r2, #8]
 8001692:	f890 1030 	ldrb.w	r1, [r0, #48]	@ 0x30
 8001696:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 800169a:	6093      	str	r3, [r2, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800169c:	6802      	ldr	r2, [r0, #0]
 800169e:	6893      	ldr	r3, [r2, #8]
 80016a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80016a4:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016a6:	6802      	ldr	r2, [r0, #0]
 80016a8:	6893      	ldr	r3, [r2, #8]
 80016aa:	6941      	ldr	r1, [r0, #20]
 80016ac:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80016b0:	6093      	str	r3, [r2, #8]
}
 80016b2:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016b4:	6802      	ldr	r2, [r0, #0]
 80016b6:	6893      	ldr	r3, [r2, #8]
 80016b8:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80016bc:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016be:	6802      	ldr	r2, [r0, #0]
 80016c0:	6893      	ldr	r3, [r2, #8]
 80016c2:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80016c6:	6093      	str	r3, [r2, #8]
 80016c8:	e7b0      	b.n	800162c <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016ca:	6802      	ldr	r2, [r0, #0]
 80016cc:	6853      	ldr	r3, [r2, #4]
 80016ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80016d2:	6053      	str	r3, [r2, #4]
 80016d4:	e7ca      	b.n	800166c <ADC_Init+0xc0>
 80016d6:	bf00      	nop
 80016d8:	40012300 	.word	0x40012300
 80016dc:	0f000001 	.word	0x0f000001

080016e0 <HAL_ADC_Init>:
  if (hadc == NULL)
 80016e0:	b338      	cbz	r0, 8001732 <HAL_ADC_Init+0x52>
{
 80016e2:	b510      	push	{r4, lr}
 80016e4:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016e6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80016e8:	b143      	cbz	r3, 80016fc <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016ea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80016ec:	f013 0f10 	tst.w	r3, #16
 80016f0:	d00b      	beq.n	800170a <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 80016f2:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80016f4:	2300      	movs	r3, #0
 80016f6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80016fa:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 80016fc:	f7ff fc18 	bl	8000f30 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001700:	2300      	movs	r3, #0
 8001702:	6463      	str	r3, [r4, #68]	@ 0x44
    hadc->Lock = HAL_UNLOCKED;
 8001704:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 8001708:	e7ef      	b.n	80016ea <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 800170a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800170c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001710:	f023 0302 	bic.w	r3, r3, #2
 8001714:	f043 0302 	orr.w	r3, r3, #2
 8001718:	6423      	str	r3, [r4, #64]	@ 0x40
    ADC_Init(hadc);
 800171a:	4620      	mov	r0, r4
 800171c:	f7ff ff46 	bl	80015ac <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8001720:	2000      	movs	r0, #0
 8001722:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001724:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001726:	f023 0303 	bic.w	r3, r3, #3
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	6423      	str	r3, [r4, #64]	@ 0x40
 8001730:	e7e0      	b.n	80016f4 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8001732:	2001      	movs	r0, #1
}
 8001734:	4770      	bx	lr
	...

08001738 <HAL_ADC_Start_DMA>:
{
 8001738:	b510      	push	{r4, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 800173e:	2200      	movs	r2, #0
 8001740:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001742:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8001746:	2a01      	cmp	r2, #1
 8001748:	f000 80ae 	beq.w	80018a8 <HAL_ADC_Start_DMA+0x170>
 800174c:	4604      	mov	r4, r0
 800174e:	2201      	movs	r2, #1
 8001750:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001754:	6802      	ldr	r2, [r0, #0]
 8001756:	6890      	ldr	r0, [r2, #8]
 8001758:	f010 0f01 	tst.w	r0, #1
 800175c:	d113      	bne.n	8001786 <HAL_ADC_Start_DMA+0x4e>
    __HAL_ADC_ENABLE(hadc);
 800175e:	6890      	ldr	r0, [r2, #8]
 8001760:	f040 0001 	orr.w	r0, r0, #1
 8001764:	6090      	str	r0, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001766:	4a53      	ldr	r2, [pc, #332]	@ (80018b4 <HAL_ADC_Start_DMA+0x17c>)
 8001768:	6810      	ldr	r0, [r2, #0]
 800176a:	4a53      	ldr	r2, [pc, #332]	@ (80018b8 <HAL_ADC_Start_DMA+0x180>)
 800176c:	fba2 2000 	umull	r2, r0, r2, r0
 8001770:	0c80      	lsrs	r0, r0, #18
 8001772:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001776:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 8001778:	e002      	b.n	8001780 <HAL_ADC_Start_DMA+0x48>
      counter--;
 800177a:	9801      	ldr	r0, [sp, #4]
 800177c:	3801      	subs	r0, #1
 800177e:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 8001780:	9801      	ldr	r0, [sp, #4]
 8001782:	2800      	cmp	r0, #0
 8001784:	d1f9      	bne.n	800177a <HAL_ADC_Start_DMA+0x42>
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001786:	6822      	ldr	r2, [r4, #0]
 8001788:	6890      	ldr	r0, [r2, #8]
 800178a:	f410 7f80 	tst.w	r0, #256	@ 0x100
 800178e:	d003      	beq.n	8001798 <HAL_ADC_Start_DMA+0x60>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001790:	6890      	ldr	r0, [r2, #8]
 8001792:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 8001796:	6090      	str	r0, [r2, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001798:	6822      	ldr	r2, [r4, #0]
 800179a:	6890      	ldr	r0, [r2, #8]
 800179c:	f010 0f01 	tst.w	r0, #1
 80017a0:	d077      	beq.n	8001892 <HAL_ADC_Start_DMA+0x15a>
    ADC_STATE_CLR_SET(hadc->State,
 80017a2:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80017a4:	f420 60e0 	bic.w	r0, r0, #1792	@ 0x700
 80017a8:	f020 0001 	bic.w	r0, r0, #1
 80017ac:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 80017b0:	6420      	str	r0, [r4, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017b2:	6852      	ldr	r2, [r2, #4]
 80017b4:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80017b8:	d005      	beq.n	80017c6 <HAL_ADC_Start_DMA+0x8e>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017ba:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80017bc:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80017c0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80017c4:	6422      	str	r2, [r4, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017c6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80017c8:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 80017cc:	d036      	beq.n	800183c <HAL_ADC_Start_DMA+0x104>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017ce:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80017d0:	f022 0206 	bic.w	r2, r2, #6
 80017d4:	6462      	str	r2, [r4, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 80017d6:	2200      	movs	r2, #0
 80017d8:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80017dc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80017de:	4837      	ldr	r0, [pc, #220]	@ (80018bc <HAL_ADC_Start_DMA+0x184>)
 80017e0:	63d0      	str	r0, [r2, #60]	@ 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80017e2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80017e4:	4836      	ldr	r0, [pc, #216]	@ (80018c0 <HAL_ADC_Start_DMA+0x188>)
 80017e6:	6410      	str	r0, [r2, #64]	@ 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80017e8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80017ea:	4836      	ldr	r0, [pc, #216]	@ (80018c4 <HAL_ADC_Start_DMA+0x18c>)
 80017ec:	64d0      	str	r0, [r2, #76]	@ 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80017ee:	6822      	ldr	r2, [r4, #0]
 80017f0:	f06f 0022 	mvn.w	r0, #34	@ 0x22
 80017f4:	6010      	str	r0, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80017f6:	6820      	ldr	r0, [r4, #0]
 80017f8:	6842      	ldr	r2, [r0, #4]
 80017fa:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80017fe:	6042      	str	r2, [r0, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001800:	6820      	ldr	r0, [r4, #0]
 8001802:	6882      	ldr	r2, [r0, #8]
 8001804:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001808:	6082      	str	r2, [r0, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800180a:	6820      	ldr	r0, [r4, #0]
 800180c:	460a      	mov	r2, r1
 800180e:	f100 014c 	add.w	r1, r0, #76	@ 0x4c
 8001812:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001814:	f000 fade 	bl	8001dd4 <HAL_DMA_Start_IT>
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001818:	4b2b      	ldr	r3, [pc, #172]	@ (80018c8 <HAL_ADC_Start_DMA+0x190>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f013 0f1f 	tst.w	r3, #31
 8001820:	d127      	bne.n	8001872 <HAL_ADC_Start_DMA+0x13a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001822:	6823      	ldr	r3, [r4, #0]
 8001824:	4a29      	ldr	r2, [pc, #164]	@ (80018cc <HAL_ADC_Start_DMA+0x194>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d011      	beq.n	800184e <HAL_ADC_Start_DMA+0x116>
 800182a:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 800182e:	4293      	cmp	r3, r2
 8001830:	d007      	beq.n	8001842 <HAL_ADC_Start_DMA+0x10a>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001832:	4a27      	ldr	r2, [pc, #156]	@ (80018d0 <HAL_ADC_Start_DMA+0x198>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d014      	beq.n	8001862 <HAL_ADC_Start_DMA+0x12a>
  return HAL_OK;
 8001838:	2000      	movs	r0, #0
 800183a:	e033      	b.n	80018a4 <HAL_ADC_Start_DMA+0x16c>
      ADC_CLEAR_ERRORCODE(hadc);
 800183c:	2200      	movs	r2, #0
 800183e:	6462      	str	r2, [r4, #68]	@ 0x44
 8001840:	e7c9      	b.n	80017d6 <HAL_ADC_Start_DMA+0x9e>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001842:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 8001846:	6852      	ldr	r2, [r2, #4]
 8001848:	f012 0f1f 	tst.w	r2, #31
 800184c:	d1f1      	bne.n	8001832 <HAL_ADC_Start_DMA+0xfa>
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001854:	d12a      	bne.n	80018ac <HAL_ADC_Start_DMA+0x174>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800185c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800185e:	2000      	movs	r0, #0
 8001860:	e020      	b.n	80018a4 <HAL_ADC_Start_DMA+0x16c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001862:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8001866:	6852      	ldr	r2, [r2, #4]
 8001868:	f012 0f10 	tst.w	r2, #16
 800186c:	d0ef      	beq.n	800184e <HAL_ADC_Start_DMA+0x116>
  return HAL_OK;
 800186e:	2000      	movs	r0, #0
 8001870:	e018      	b.n	80018a4 <HAL_ADC_Start_DMA+0x16c>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001872:	6823      	ldr	r3, [r4, #0]
 8001874:	4a15      	ldr	r2, [pc, #84]	@ (80018cc <HAL_ADC_Start_DMA+0x194>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d001      	beq.n	800187e <HAL_ADC_Start_DMA+0x146>
  return HAL_OK;
 800187a:	2000      	movs	r0, #0
 800187c:	e012      	b.n	80018a4 <HAL_ADC_Start_DMA+0x16c>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800187e:	689a      	ldr	r2, [r3, #8]
 8001880:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001884:	d114      	bne.n	80018b0 <HAL_ADC_Start_DMA+0x178>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800188c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800188e:	2000      	movs	r0, #0
 8001890:	e008      	b.n	80018a4 <HAL_ADC_Start_DMA+0x16c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001892:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001894:	f043 0310 	orr.w	r3, r3, #16
 8001898:	6423      	str	r3, [r4, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800189a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6463      	str	r3, [r4, #68]	@ 0x44
  return HAL_OK;
 80018a2:	2000      	movs	r0, #0
}
 80018a4:	b002      	add	sp, #8
 80018a6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80018a8:	2002      	movs	r0, #2
 80018aa:	e7fb      	b.n	80018a4 <HAL_ADC_Start_DMA+0x16c>
  return HAL_OK;
 80018ac:	2000      	movs	r0, #0
 80018ae:	e7f9      	b.n	80018a4 <HAL_ADC_Start_DMA+0x16c>
 80018b0:	2000      	movs	r0, #0
 80018b2:	e7f7      	b.n	80018a4 <HAL_ADC_Start_DMA+0x16c>
 80018b4:	20000000 	.word	0x20000000
 80018b8:	431bde83 	.word	0x431bde83
 80018bc:	080018fb 	.word	0x080018fb
 80018c0:	080018d9 	.word	0x080018d9
 80018c4:	080018e5 	.word	0x080018e5
 80018c8:	40012300 	.word	0x40012300
 80018cc:	40012000 	.word	0x40012000
 80018d0:	40012200 	.word	0x40012200

080018d4 <HAL_ADC_ConvCpltCallback>:
}
 80018d4:	4770      	bx	lr

080018d6 <HAL_ADC_ConvHalfCpltCallback>:
}
 80018d6:	4770      	bx	lr

080018d8 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80018d8:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80018da:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 80018dc:	f7ff fffb 	bl	80018d6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018e0:	bd08      	pop	{r3, pc}

080018e2 <HAL_ADC_ErrorCallback>:
}
 80018e2:	4770      	bx	lr

080018e4 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80018e4:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018e6:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80018e8:	2340      	movs	r3, #64	@ 0x40
 80018ea:	6403      	str	r3, [r0, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80018ec:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80018ee:	f043 0304 	orr.w	r3, r3, #4
 80018f2:	6443      	str	r3, [r0, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80018f4:	f7ff fff5 	bl	80018e2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018f8:	bd08      	pop	{r3, pc}

080018fa <ADC_DMAConvCplt>:
{
 80018fa:	b508      	push	{r3, lr}
 80018fc:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018fe:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001900:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001902:	f012 0f50 	tst.w	r2, #80	@ 0x50
 8001906:	d125      	bne.n	8001954 <ADC_DMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001908:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800190a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800190e:	6403      	str	r3, [r0, #64]	@ 0x40
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001910:	6803      	ldr	r3, [r0, #0]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001918:	d119      	bne.n	800194e <ADC_DMAConvCplt+0x54>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800191a:	7e02      	ldrb	r2, [r0, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800191c:	b9ba      	cbnz	r2, 800194e <ADC_DMAConvCplt+0x54>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800191e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001920:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 8001924:	d003      	beq.n	800192e <ADC_DMAConvCplt+0x34>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001926:	689a      	ldr	r2, [r3, #8]
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001928:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800192c:	d10f      	bne.n	800194e <ADC_DMAConvCplt+0x54>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	f022 0220 	bic.w	r2, r2, #32
 8001934:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001936:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001938:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800193c:	6403      	str	r3, [r0, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800193e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001940:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8001944:	d103      	bne.n	800194e <ADC_DMAConvCplt+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001946:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6403      	str	r3, [r0, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800194e:	f7ff ffc1 	bl	80018d4 <HAL_ADC_ConvCpltCallback>
}
 8001952:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001954:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001956:	f012 0f10 	tst.w	r2, #16
 800195a:	d104      	bne.n	8001966 <ADC_DMAConvCplt+0x6c>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800195c:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 800195e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001960:	4618      	mov	r0, r3
 8001962:	4790      	blx	r2
}
 8001964:	e7f5      	b.n	8001952 <ADC_DMAConvCplt+0x58>
      HAL_ADC_ErrorCallback(hadc);
 8001966:	f7ff ffbc 	bl	80018e2 <HAL_ADC_ErrorCallback>
 800196a:	e7f2      	b.n	8001952 <ADC_DMAConvCplt+0x58>

0800196c <HAL_ADC_ConfigChannel>:
{
 800196c:	b430      	push	{r4, r5}
 800196e:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8001970:	2200      	movs	r2, #0
 8001972:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001974:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8001978:	2a01      	cmp	r2, #1
 800197a:	f000 80c0 	beq.w	8001afe <HAL_ADC_ConfigChannel+0x192>
 800197e:	4603      	mov	r3, r0
 8001980:	2201      	movs	r2, #1
 8001982:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001986:	680a      	ldr	r2, [r1, #0]
 8001988:	2a09      	cmp	r2, #9
 800198a:	d940      	bls.n	8001a0e <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800198c:	6804      	ldr	r4, [r0, #0]
 800198e:	68e0      	ldr	r0, [r4, #12]
 8001990:	b292      	uxth	r2, r2
 8001992:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001996:	3a1e      	subs	r2, #30
 8001998:	f04f 0c07 	mov.w	ip, #7
 800199c:	fa0c f202 	lsl.w	r2, ip, r2
 80019a0:	ea20 0202 	bic.w	r2, r0, r2
 80019a4:	60e2      	str	r2, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019a6:	681c      	ldr	r4, [r3, #0]
 80019a8:	68e0      	ldr	r0, [r4, #12]
 80019aa:	880a      	ldrh	r2, [r1, #0]
 80019ac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80019b0:	3a1e      	subs	r2, #30
 80019b2:	688d      	ldr	r5, [r1, #8]
 80019b4:	fa05 f202 	lsl.w	r2, r5, r2
 80019b8:	4302      	orrs	r2, r0
 80019ba:	60e2      	str	r2, [r4, #12]
  if (sConfig->Rank < 7U)
 80019bc:	684a      	ldr	r2, [r1, #4]
 80019be:	2a06      	cmp	r2, #6
 80019c0:	d83c      	bhi.n	8001a3c <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019c2:	681c      	ldr	r4, [r3, #0]
 80019c4:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80019c6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80019ca:	3a05      	subs	r2, #5
 80019cc:	f04f 0c1f 	mov.w	ip, #31
 80019d0:	fa0c f202 	lsl.w	r2, ip, r2
 80019d4:	ea20 0202 	bic.w	r2, r0, r2
 80019d8:	6362      	str	r2, [r4, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019da:	681c      	ldr	r4, [r3, #0]
 80019dc:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80019de:	684a      	ldr	r2, [r1, #4]
 80019e0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80019e4:	3a05      	subs	r2, #5
 80019e6:	f8b1 c000 	ldrh.w	ip, [r1]
 80019ea:	fa0c f202 	lsl.w	r2, ip, r2
 80019ee:	4302      	orrs	r2, r0
 80019f0:	6362      	str	r2, [r4, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019f2:	6818      	ldr	r0, [r3, #0]
 80019f4:	4a43      	ldr	r2, [pc, #268]	@ (8001b04 <HAL_ADC_ConfigChannel+0x198>)
 80019f6:	4290      	cmp	r0, r2
 80019f8:	d050      	beq.n	8001a9c <HAL_ADC_ConfigChannel+0x130>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019fa:	6818      	ldr	r0, [r3, #0]
 80019fc:	4a41      	ldr	r2, [pc, #260]	@ (8001b04 <HAL_ADC_ConfigChannel+0x198>)
 80019fe:	4290      	cmp	r0, r2
 8001a00:	d059      	beq.n	8001ab6 <HAL_ADC_ConfigChannel+0x14a>
  __HAL_UNLOCK(hadc);
 8001a02:	2000      	movs	r0, #0
 8001a04:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 8001a08:	b002      	add	sp, #8
 8001a0a:	bc30      	pop	{r4, r5}
 8001a0c:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a0e:	6804      	ldr	r4, [r0, #0]
 8001a10:	6920      	ldr	r0, [r4, #16]
 8001a12:	b292      	uxth	r2, r2
 8001a14:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001a18:	f04f 0c07 	mov.w	ip, #7
 8001a1c:	fa0c f202 	lsl.w	r2, ip, r2
 8001a20:	ea20 0202 	bic.w	r2, r0, r2
 8001a24:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a26:	681c      	ldr	r4, [r3, #0]
 8001a28:	6920      	ldr	r0, [r4, #16]
 8001a2a:	880a      	ldrh	r2, [r1, #0]
 8001a2c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001a30:	688d      	ldr	r5, [r1, #8]
 8001a32:	fa05 f202 	lsl.w	r2, r5, r2
 8001a36:	4302      	orrs	r2, r0
 8001a38:	6122      	str	r2, [r4, #16]
 8001a3a:	e7bf      	b.n	80019bc <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 8001a3c:	2a0c      	cmp	r2, #12
 8001a3e:	d816      	bhi.n	8001a6e <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a40:	681d      	ldr	r5, [r3, #0]
 8001a42:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8001a44:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001a48:	3a23      	subs	r2, #35	@ 0x23
 8001a4a:	241f      	movs	r4, #31
 8001a4c:	fa04 f202 	lsl.w	r2, r4, r2
 8001a50:	ea20 0202 	bic.w	r2, r0, r2
 8001a54:	632a      	str	r2, [r5, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a56:	681d      	ldr	r5, [r3, #0]
 8001a58:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8001a5a:	684a      	ldr	r2, [r1, #4]
 8001a5c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001a60:	3a23      	subs	r2, #35	@ 0x23
 8001a62:	880c      	ldrh	r4, [r1, #0]
 8001a64:	fa04 f202 	lsl.w	r2, r4, r2
 8001a68:	4302      	orrs	r2, r0
 8001a6a:	632a      	str	r2, [r5, #48]	@ 0x30
 8001a6c:	e7c1      	b.n	80019f2 <HAL_ADC_ConfigChannel+0x86>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a6e:	681d      	ldr	r5, [r3, #0]
 8001a70:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001a72:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001a76:	3a41      	subs	r2, #65	@ 0x41
 8001a78:	241f      	movs	r4, #31
 8001a7a:	fa04 f202 	lsl.w	r2, r4, r2
 8001a7e:	ea20 0202 	bic.w	r2, r0, r2
 8001a82:	62ea      	str	r2, [r5, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a84:	681d      	ldr	r5, [r3, #0]
 8001a86:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001a88:	684a      	ldr	r2, [r1, #4]
 8001a8a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001a8e:	3a41      	subs	r2, #65	@ 0x41
 8001a90:	880c      	ldrh	r4, [r1, #0]
 8001a92:	fa04 f202 	lsl.w	r2, r4, r2
 8001a96:	4302      	orrs	r2, r0
 8001a98:	62ea      	str	r2, [r5, #44]	@ 0x2c
 8001a9a:	e7aa      	b.n	80019f2 <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a9c:	680a      	ldr	r2, [r1, #0]
 8001a9e:	2a12      	cmp	r2, #18
 8001aa0:	d1ab      	bne.n	80019fa <HAL_ADC_ConfigChannel+0x8e>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001aa2:	4a19      	ldr	r2, [pc, #100]	@ (8001b08 <HAL_ADC_ConfigChannel+0x19c>)
 8001aa4:	6850      	ldr	r0, [r2, #4]
 8001aa6:	f420 0000 	bic.w	r0, r0, #8388608	@ 0x800000
 8001aaa:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001aac:	6850      	ldr	r0, [r2, #4]
 8001aae:	f440 0080 	orr.w	r0, r0, #4194304	@ 0x400000
 8001ab2:	6050      	str	r0, [r2, #4]
 8001ab4:	e7a1      	b.n	80019fa <HAL_ADC_ConfigChannel+0x8e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ab6:	680a      	ldr	r2, [r1, #0]
 8001ab8:	4814      	ldr	r0, [pc, #80]	@ (8001b0c <HAL_ADC_ConfigChannel+0x1a0>)
 8001aba:	4282      	cmp	r2, r0
 8001abc:	d001      	beq.n	8001ac2 <HAL_ADC_ConfigChannel+0x156>
 8001abe:	2a11      	cmp	r2, #17
 8001ac0:	d19f      	bne.n	8001a02 <HAL_ADC_ConfigChannel+0x96>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001ac2:	4a11      	ldr	r2, [pc, #68]	@ (8001b08 <HAL_ADC_ConfigChannel+0x19c>)
 8001ac4:	6850      	ldr	r0, [r2, #4]
 8001ac6:	f420 0080 	bic.w	r0, r0, #4194304	@ 0x400000
 8001aca:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001acc:	6850      	ldr	r0, [r2, #4]
 8001ace:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001ad2:	6050      	str	r0, [r2, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ad4:	6809      	ldr	r1, [r1, #0]
 8001ad6:	4a0d      	ldr	r2, [pc, #52]	@ (8001b0c <HAL_ADC_ConfigChannel+0x1a0>)
 8001ad8:	4291      	cmp	r1, r2
 8001ada:	d192      	bne.n	8001a02 <HAL_ADC_ConfigChannel+0x96>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001adc:	4a0c      	ldr	r2, [pc, #48]	@ (8001b10 <HAL_ADC_ConfigChannel+0x1a4>)
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	490c      	ldr	r1, [pc, #48]	@ (8001b14 <HAL_ADC_ConfigChannel+0x1a8>)
 8001ae2:	fba1 1202 	umull	r1, r2, r1, r2
 8001ae6:	0c92      	lsrs	r2, r2, #18
 8001ae8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001aec:	0052      	lsls	r2, r2, #1
 8001aee:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 8001af0:	9a01      	ldr	r2, [sp, #4]
 8001af2:	2a00      	cmp	r2, #0
 8001af4:	d085      	beq.n	8001a02 <HAL_ADC_ConfigChannel+0x96>
        counter--;
 8001af6:	9a01      	ldr	r2, [sp, #4]
 8001af8:	3a01      	subs	r2, #1
 8001afa:	9201      	str	r2, [sp, #4]
 8001afc:	e7f8      	b.n	8001af0 <HAL_ADC_ConfigChannel+0x184>
  __HAL_LOCK(hadc);
 8001afe:	2002      	movs	r0, #2
 8001b00:	e782      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x9c>
 8001b02:	bf00      	nop
 8001b04:	40012000 	.word	0x40012000
 8001b08:	40012300 	.word	0x40012300
 8001b0c:	10000012 	.word	0x10000012
 8001b10:	20000000 	.word	0x20000000
 8001b14:	431bde83 	.word	0x431bde83

08001b18 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8001b18:	2800      	cmp	r0, #0
 8001b1a:	db07      	blt.n	8001b2c <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b1c:	f000 021f 	and.w	r2, r0, #31
 8001b20:	0940      	lsrs	r0, r0, #5
 8001b22:	2301      	movs	r3, #1
 8001b24:	4093      	lsls	r3, r2
 8001b26:	4a02      	ldr	r2, [pc, #8]	@ (8001b30 <__NVIC_EnableIRQ+0x18>)
 8001b28:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	e000e100 	.word	0xe000e100

08001b34 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001b34:	2800      	cmp	r0, #0
 8001b36:	db08      	blt.n	8001b4a <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b38:	0109      	lsls	r1, r1, #4
 8001b3a:	b2c9      	uxtb	r1, r1
 8001b3c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001b40:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001b44:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001b48:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4a:	f000 000f 	and.w	r0, r0, #15
 8001b4e:	0109      	lsls	r1, r1, #4
 8001b50:	b2c9      	uxtb	r1, r1
 8001b52:	4b01      	ldr	r3, [pc, #4]	@ (8001b58 <__NVIC_SetPriority+0x24>)
 8001b54:	5419      	strb	r1, [r3, r0]
  }
}
 8001b56:	4770      	bx	lr
 8001b58:	e000ed14 	.word	0xe000ed14

08001b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b5c:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b5e:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b62:	f1c0 0c07 	rsb	ip, r0, #7
 8001b66:	f1bc 0f04 	cmp.w	ip, #4
 8001b6a:	bf28      	it	cs
 8001b6c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b70:	1d03      	adds	r3, r0, #4
 8001b72:	2b06      	cmp	r3, #6
 8001b74:	d90f      	bls.n	8001b96 <NVIC_EncodePriority+0x3a>
 8001b76:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b78:	f04f 3eff 	mov.w	lr, #4294967295
 8001b7c:	fa0e f00c 	lsl.w	r0, lr, ip
 8001b80:	ea21 0100 	bic.w	r1, r1, r0
 8001b84:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b86:	fa0e fe03 	lsl.w	lr, lr, r3
 8001b8a:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8001b8e:	ea41 0002 	orr.w	r0, r1, r2
 8001b92:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b96:	2300      	movs	r3, #0
 8001b98:	e7ee      	b.n	8001b78 <NVIC_EncodePriority+0x1c>
	...

08001b9c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b9c:	4a07      	ldr	r2, [pc, #28]	@ (8001bbc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001b9e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ba0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001ba4:	041b      	lsls	r3, r3, #16
 8001ba6:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ba8:	0200      	lsls	r0, r0, #8
 8001baa:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bae:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001bb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001bb8:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001bba:	4770      	bx	lr
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bc0:	b510      	push	{r4, lr}
 8001bc2:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc4:	4b05      	ldr	r3, [pc, #20]	@ (8001bdc <HAL_NVIC_SetPriority+0x1c>)
 8001bc6:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bc8:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001bcc:	f7ff ffc6 	bl	8001b5c <NVIC_EncodePriority>
 8001bd0:	4601      	mov	r1, r0
 8001bd2:	4620      	mov	r0, r4
 8001bd4:	f7ff ffae 	bl	8001b34 <__NVIC_SetPriority>
}
 8001bd8:	bd10      	pop	{r4, pc}
 8001bda:	bf00      	nop
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001be2:	f7ff ff99 	bl	8001b18 <__NVIC_EnableIRQ>
}
 8001be6:	bd08      	pop	{r3, pc}

08001be8 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001be8:	b158      	cbz	r0, 8001c02 <HAL_CRC_Init+0x1a>
{
 8001bea:	b510      	push	{r4, lr}
 8001bec:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001bee:	7943      	ldrb	r3, [r0, #5]
 8001bf0:	b11b      	cbz	r3, 8001bfa <HAL_CRC_Init+0x12>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8001bf6:	2000      	movs	r0, #0
}
 8001bf8:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8001bfa:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8001bfc:	f7ff f9ee 	bl	8000fdc <HAL_CRC_MspInit>
 8001c00:	e7f7      	b.n	8001bf2 <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 8001c02:	2001      	movs	r0, #1
}
 8001c04:	4770      	bx	lr

08001c06 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c06:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c08:	6805      	ldr	r5, [r0, #0]
 8001c0a:	682c      	ldr	r4, [r5, #0]
 8001c0c:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 8001c10:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c12:	6804      	ldr	r4, [r0, #0]
 8001c14:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c16:	6883      	ldr	r3, [r0, #8]
 8001c18:	2b40      	cmp	r3, #64	@ 0x40
 8001c1a:	d005      	beq.n	8001c28 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8001c1c:	6803      	ldr	r3, [r0, #0]
 8001c1e:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8001c20:	6803      	ldr	r3, [r0, #0]
 8001c22:	60da      	str	r2, [r3, #12]
  }
}
 8001c24:	bc30      	pop	{r4, r5}
 8001c26:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8001c28:	6803      	ldr	r3, [r0, #0]
 8001c2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8001c2c:	6803      	ldr	r3, [r0, #0]
 8001c2e:	60d9      	str	r1, [r3, #12]
 8001c30:	e7f8      	b.n	8001c24 <DMA_SetConfig+0x1e>
	...

08001c34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c34:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c36:	6803      	ldr	r3, [r0, #0]
 8001c38:	b2d9      	uxtb	r1, r3
 8001c3a:	3910      	subs	r1, #16
 8001c3c:	4a0c      	ldr	r2, [pc, #48]	@ (8001c70 <DMA_CalcBaseAndBitshift+0x3c>)
 8001c3e:	fba2 4201 	umull	r4, r2, r2, r1
 8001c42:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c44:	4c0b      	ldr	r4, [pc, #44]	@ (8001c74 <DMA_CalcBaseAndBitshift+0x40>)
 8001c46:	5ca2      	ldrb	r2, [r4, r2]
 8001c48:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001c4a:	295f      	cmp	r1, #95	@ 0x5f
 8001c4c:	d909      	bls.n	8001c62 <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c4e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001c52:	f023 0303 	bic.w	r3, r3, #3
 8001c56:	3304      	adds	r3, #4
 8001c58:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001c5a:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8001c5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c60:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c62:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001c66:	f023 0303 	bic.w	r3, r3, #3
 8001c6a:	6583      	str	r3, [r0, #88]	@ 0x58
 8001c6c:	e7f5      	b.n	8001c5a <DMA_CalcBaseAndBitshift+0x26>
 8001c6e:	bf00      	nop
 8001c70:	aaaaaaab 	.word	0xaaaaaaab
 8001c74:	08004050 	.word	0x08004050

08001c78 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c78:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c7a:	6982      	ldr	r2, [r0, #24]
 8001c7c:	b992      	cbnz	r2, 8001ca4 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d00a      	beq.n	8001c98 <DMA_CheckFifoParam+0x20>
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d002      	beq.n	8001c8c <DMA_CheckFifoParam+0x14>
 8001c86:	b10b      	cbz	r3, 8001c8c <DMA_CheckFifoParam+0x14>
 8001c88:	2000      	movs	r0, #0
 8001c8a:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c8c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001c8e:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001c92:	d128      	bne.n	8001ce6 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8001c94:	2000      	movs	r0, #0
 8001c96:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c98:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001c9a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001c9e:	d024      	beq.n	8001cea <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ca4:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8001ca8:	d009      	beq.n	8001cbe <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d925      	bls.n	8001cfa <DMA_CheckFifoParam+0x82>
 8001cae:	2b03      	cmp	r3, #3
 8001cb0:	d125      	bne.n	8001cfe <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cb2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001cb4:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001cb8:	d123      	bne.n	8001d02 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8001cba:	2000      	movs	r0, #0
 8001cbc:	4770      	bx	lr
    switch (tmp)
 8001cbe:	2b03      	cmp	r3, #3
 8001cc0:	d803      	bhi.n	8001cca <DMA_CheckFifoParam+0x52>
 8001cc2:	e8df f003 	tbb	[pc, r3]
 8001cc6:	0414      	.short	0x0414
 8001cc8:	0a14      	.short	0x0a14
 8001cca:	2000      	movs	r0, #0
 8001ccc:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cce:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001cd0:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001cd4:	d10d      	bne.n	8001cf2 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cda:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001cdc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001ce0:	d009      	beq.n	8001cf6 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	4770      	bx	lr
        status = HAL_ERROR;
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	4770      	bx	lr
        status = HAL_ERROR;
 8001cea:	2001      	movs	r0, #1
 8001cec:	4770      	bx	lr
      status = HAL_ERROR;
 8001cee:	2001      	movs	r0, #1
 8001cf0:	4770      	bx	lr
        status = HAL_ERROR;
 8001cf2:	2001      	movs	r0, #1
 8001cf4:	4770      	bx	lr
        status = HAL_ERROR;
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	4770      	bx	lr
      status = HAL_ERROR;
 8001cfa:	2001      	movs	r0, #1
 8001cfc:	4770      	bx	lr
    switch (tmp)
 8001cfe:	2000      	movs	r0, #0
 8001d00:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8001d02:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001d04:	4770      	bx	lr
	...

08001d08 <HAL_DMA_Init>:
{
 8001d08:	b570      	push	{r4, r5, r6, lr}
 8001d0a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001d0c:	f7ff fc48 	bl	80015a0 <HAL_GetTick>
  if(hdma == NULL)
 8001d10:	2c00      	cmp	r4, #0
 8001d12:	d05b      	beq.n	8001dcc <HAL_DMA_Init+0xc4>
 8001d14:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d16:	2302      	movs	r3, #2
 8001d18:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8001d22:	6822      	ldr	r2, [r4, #0]
 8001d24:	6813      	ldr	r3, [r2, #0]
 8001d26:	f023 0301 	bic.w	r3, r3, #1
 8001d2a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d2c:	6823      	ldr	r3, [r4, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	f012 0f01 	tst.w	r2, #1
 8001d34:	d00a      	beq.n	8001d4c <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d36:	f7ff fc33 	bl	80015a0 <HAL_GetTick>
 8001d3a:	1b43      	subs	r3, r0, r5
 8001d3c:	2b05      	cmp	r3, #5
 8001d3e:	d9f5      	bls.n	8001d2c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d40:	2320      	movs	r3, #32
 8001d42:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d44:	2003      	movs	r0, #3
 8001d46:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8001d4a:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8001d4c:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d4e:	4920      	ldr	r1, [pc, #128]	@ (8001dd0 <HAL_DMA_Init+0xc8>)
 8001d50:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d52:	6862      	ldr	r2, [r4, #4]
 8001d54:	68a0      	ldr	r0, [r4, #8]
 8001d56:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d58:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d5a:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d5c:	6920      	ldr	r0, [r4, #16]
 8001d5e:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d60:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d62:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d64:	69a0      	ldr	r0, [r4, #24]
 8001d66:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d68:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d6a:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d6c:	6a20      	ldr	r0, [r4, #32]
 8001d6e:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d70:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d72:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001d74:	2904      	cmp	r1, #4
 8001d76:	d01e      	beq.n	8001db6 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8001d78:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001d7a:	6826      	ldr	r6, [r4, #0]
 8001d7c:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d7e:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8001d82:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001d84:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	d107      	bne.n	8001d9a <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8001d8a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001d8c:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d8e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001d90:	b11b      	cbz	r3, 8001d9a <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d92:	4620      	mov	r0, r4
 8001d94:	f7ff ff70 	bl	8001c78 <DMA_CheckFifoParam>
 8001d98:	b990      	cbnz	r0, 8001dc0 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8001d9a:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	f7ff ff49 	bl	8001c34 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001da2:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001da4:	233f      	movs	r3, #63	@ 0x3f
 8001da6:	4093      	lsls	r3, r2
 8001da8:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001daa:	2000      	movs	r0, #0
 8001dac:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001dae:	2301      	movs	r3, #1
 8001db0:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8001db4:	e7c9      	b.n	8001d4a <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001db6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001db8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8001dba:	4301      	orrs	r1, r0
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	e7db      	b.n	8001d78 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dc0:	2340      	movs	r3, #64	@ 0x40
 8001dc2:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 8001dca:	e7be      	b.n	8001d4a <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001dcc:	2001      	movs	r0, #1
 8001dce:	e7bc      	b.n	8001d4a <HAL_DMA_Init+0x42>
 8001dd0:	f010803f 	.word	0xf010803f

08001dd4 <HAL_DMA_Start_IT>:
{
 8001dd4:	b538      	push	{r3, r4, r5, lr}
 8001dd6:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dd8:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8001dda:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8001dde:	2801      	cmp	r0, #1
 8001de0:	d02b      	beq.n	8001e3a <HAL_DMA_Start_IT+0x66>
 8001de2:	2001      	movs	r0, #1
 8001de4:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001de8:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8001dec:	b2c0      	uxtb	r0, r0
 8001dee:	2801      	cmp	r0, #1
 8001df0:	d004      	beq.n	8001dfc <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8001df2:	2300      	movs	r3, #0
 8001df4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 8001df8:	2002      	movs	r0, #2
}
 8001dfa:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dfc:	2002      	movs	r0, #2
 8001dfe:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e02:	2000      	movs	r0, #0
 8001e04:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e06:	4620      	mov	r0, r4
 8001e08:	f7ff fefd 	bl	8001c06 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e0c:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001e0e:	233f      	movs	r3, #63	@ 0x3f
 8001e10:	4093      	lsls	r3, r2
 8001e12:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e14:	6822      	ldr	r2, [r4, #0]
 8001e16:	6813      	ldr	r3, [r2, #0]
 8001e18:	f043 0316 	orr.w	r3, r3, #22
 8001e1c:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001e1e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001e20:	b123      	cbz	r3, 8001e2c <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e22:	6822      	ldr	r2, [r4, #0]
 8001e24:	6813      	ldr	r3, [r2, #0]
 8001e26:	f043 0308 	orr.w	r3, r3, #8
 8001e2a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001e2c:	6822      	ldr	r2, [r4, #0]
 8001e2e:	6813      	ldr	r3, [r2, #0]
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e36:	2000      	movs	r0, #0
 8001e38:	e7df      	b.n	8001dfa <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8001e3a:	2002      	movs	r0, #2
 8001e3c:	e7dd      	b.n	8001dfa <HAL_DMA_Start_IT+0x26>

08001e3e <HAL_DMA_Abort>:
{
 8001e3e:	b570      	push	{r4, r5, r6, lr}
 8001e40:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e42:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 8001e44:	f7ff fbac 	bl	80015a0 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e48:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d006      	beq.n	8001e60 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e52:	2380      	movs	r3, #128	@ 0x80
 8001e54:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8001e56:	2300      	movs	r3, #0
 8001e58:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8001e5c:	2001      	movs	r0, #1
}
 8001e5e:	bd70      	pop	{r4, r5, r6, pc}
 8001e60:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e62:	6822      	ldr	r2, [r4, #0]
 8001e64:	6813      	ldr	r3, [r2, #0]
 8001e66:	f023 0316 	bic.w	r3, r3, #22
 8001e6a:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e6c:	6822      	ldr	r2, [r4, #0]
 8001e6e:	6953      	ldr	r3, [r2, #20]
 8001e70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001e74:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e76:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001e78:	b1e3      	cbz	r3, 8001eb4 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e7a:	6822      	ldr	r2, [r4, #0]
 8001e7c:	6813      	ldr	r3, [r2, #0]
 8001e7e:	f023 0308 	bic.w	r3, r3, #8
 8001e82:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001e84:	6822      	ldr	r2, [r4, #0]
 8001e86:	6813      	ldr	r3, [r2, #0]
 8001e88:	f023 0301 	bic.w	r3, r3, #1
 8001e8c:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e8e:	6823      	ldr	r3, [r4, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f013 0f01 	tst.w	r3, #1
 8001e96:	d011      	beq.n	8001ebc <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e98:	f7ff fb82 	bl	80015a0 <HAL_GetTick>
 8001e9c:	1b43      	subs	r3, r0, r5
 8001e9e:	2b05      	cmp	r3, #5
 8001ea0:	d9f5      	bls.n	8001e8e <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ea2:	2320      	movs	r3, #32
 8001ea4:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ea6:	2003      	movs	r0, #3
 8001ea8:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8001eac:	2300      	movs	r3, #0
 8001eae:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        return HAL_TIMEOUT;
 8001eb2:	e7d4      	b.n	8001e5e <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eb4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1df      	bne.n	8001e7a <HAL_DMA_Abort+0x3c>
 8001eba:	e7e3      	b.n	8001e84 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ebc:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001ebe:	233f      	movs	r3, #63	@ 0x3f
 8001ec0:	4093      	lsls	r3, r2
 8001ec2:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8001eca:	2000      	movs	r0, #0
 8001ecc:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  return HAL_OK;
 8001ed0:	e7c5      	b.n	8001e5e <HAL_DMA_Abort+0x20>

08001ed2 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ed2:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d003      	beq.n	8001ee4 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001edc:	2380      	movs	r3, #128	@ 0x80
 8001ede:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ee4:	2305      	movs	r3, #5
 8001ee6:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8001eea:	6802      	ldr	r2, [r0, #0]
 8001eec:	6813      	ldr	r3, [r2, #0]
 8001eee:	f023 0301 	bic.w	r3, r3, #1
 8001ef2:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001ef4:	2000      	movs	r0, #0
}
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ef8:	2300      	movs	r3, #0
 8001efa:	2b0f      	cmp	r3, #15
 8001efc:	f200 80f6 	bhi.w	80020ec <HAL_GPIO_Init+0x1f4>
{
 8001f00:	b570      	push	{r4, r5, r6, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	e066      	b.n	8001fd4 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f06:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f08:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001f0c:	2403      	movs	r4, #3
 8001f0e:	fa04 f40e 	lsl.w	r4, r4, lr
 8001f12:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f16:	68cc      	ldr	r4, [r1, #12]
 8001f18:	fa04 f40e 	lsl.w	r4, r4, lr
 8001f1c:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001f1e:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f20:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f22:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f26:	684a      	ldr	r2, [r1, #4]
 8001f28:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001f2c:	409a      	lsls	r2, r3
 8001f2e:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001f30:	6042      	str	r2, [r0, #4]
 8001f32:	e05d      	b.n	8001ff0 <HAL_GPIO_Init+0xf8>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f34:	08dc      	lsrs	r4, r3, #3
 8001f36:	3408      	adds	r4, #8
 8001f38:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f3c:	f003 0507 	and.w	r5, r3, #7
 8001f40:	00ad      	lsls	r5, r5, #2
 8001f42:	f04f 0e0f 	mov.w	lr, #15
 8001f46:	fa0e fe05 	lsl.w	lr, lr, r5
 8001f4a:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f4e:	690a      	ldr	r2, [r1, #16]
 8001f50:	40aa      	lsls	r2, r5
 8001f52:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001f56:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001f5a:	e05d      	b.n	8002018 <HAL_GPIO_Init+0x120>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f5c:	2209      	movs	r2, #9
 8001f5e:	e000      	b.n	8001f62 <HAL_GPIO_Init+0x6a>
 8001f60:	2200      	movs	r2, #0
 8001f62:	fa02 f20e 	lsl.w	r2, r2, lr
 8001f66:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f68:	3402      	adds	r4, #2
 8001f6a:	4d61      	ldr	r5, [pc, #388]	@ (80020f0 <HAL_GPIO_Init+0x1f8>)
 8001f6c:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f70:	4a60      	ldr	r2, [pc, #384]	@ (80020f4 <HAL_GPIO_Init+0x1fc>)
 8001f72:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001f74:	ea6f 020c 	mvn.w	r2, ip
 8001f78:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f7c:	684e      	ldr	r6, [r1, #4]
 8001f7e:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8001f82:	d001      	beq.n	8001f88 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8001f84:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001f88:	4c5a      	ldr	r4, [pc, #360]	@ (80020f4 <HAL_GPIO_Init+0x1fc>)
 8001f8a:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001f8c:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001f8e:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f92:	684e      	ldr	r6, [r1, #4]
 8001f94:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8001f98:	d001      	beq.n	8001f9e <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8001f9a:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001f9e:	4c55      	ldr	r4, [pc, #340]	@ (80020f4 <HAL_GPIO_Init+0x1fc>)
 8001fa0:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8001fa2:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001fa4:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fa8:	684e      	ldr	r6, [r1, #4]
 8001faa:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8001fae:	d001      	beq.n	8001fb4 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001fb0:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001fb4:	4c4f      	ldr	r4, [pc, #316]	@ (80020f4 <HAL_GPIO_Init+0x1fc>)
 8001fb6:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fb8:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001fba:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fbc:	684d      	ldr	r5, [r1, #4]
 8001fbe:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8001fc2:	d001      	beq.n	8001fc8 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8001fc4:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001fc8:	4c4a      	ldr	r4, [pc, #296]	@ (80020f4 <HAL_GPIO_Init+0x1fc>)
 8001fca:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fcc:	3301      	adds	r3, #1
 8001fce:	2b0f      	cmp	r3, #15
 8001fd0:	f200 808a 	bhi.w	80020e8 <HAL_GPIO_Init+0x1f0>
    ioposition = 0x01U << position;
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fd8:	680c      	ldr	r4, [r1, #0]
 8001fda:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001fde:	ea32 0404 	bics.w	r4, r2, r4
 8001fe2:	d1f3      	bne.n	8001fcc <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fe4:	684c      	ldr	r4, [r1, #4]
 8001fe6:	f004 0403 	and.w	r4, r4, #3
 8001fea:	3c01      	subs	r4, #1
 8001fec:	2c01      	cmp	r4, #1
 8001fee:	d98a      	bls.n	8001f06 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ff0:	684a      	ldr	r2, [r1, #4]
 8001ff2:	f002 0203 	and.w	r2, r2, #3
 8001ff6:	2a03      	cmp	r2, #3
 8001ff8:	d009      	beq.n	800200e <HAL_GPIO_Init+0x116>
        temp = GPIOx->PUPDR;
 8001ffa:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ffc:	005d      	lsls	r5, r3, #1
 8001ffe:	2203      	movs	r2, #3
 8002000:	40aa      	lsls	r2, r5
 8002002:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002006:	688a      	ldr	r2, [r1, #8]
 8002008:	40aa      	lsls	r2, r5
 800200a:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 800200c:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800200e:	684a      	ldr	r2, [r1, #4]
 8002010:	f002 0203 	and.w	r2, r2, #3
 8002014:	2a02      	cmp	r2, #2
 8002016:	d08d      	beq.n	8001f34 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8002018:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800201a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800201e:	2203      	movs	r2, #3
 8002020:	fa02 f20e 	lsl.w	r2, r2, lr
 8002024:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002028:	684a      	ldr	r2, [r1, #4]
 800202a:	f002 0203 	and.w	r2, r2, #3
 800202e:	fa02 f20e 	lsl.w	r2, r2, lr
 8002032:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8002034:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002036:	684a      	ldr	r2, [r1, #4]
 8002038:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 800203c:	d0c6      	beq.n	8001fcc <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800203e:	2200      	movs	r2, #0
 8002040:	9201      	str	r2, [sp, #4]
 8002042:	4a2d      	ldr	r2, [pc, #180]	@ (80020f8 <HAL_GPIO_Init+0x200>)
 8002044:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8002046:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 800204a:	6454      	str	r4, [r2, #68]	@ 0x44
 800204c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800204e:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002052:	9201      	str	r2, [sp, #4]
 8002054:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002056:	089c      	lsrs	r4, r3, #2
 8002058:	1ca5      	adds	r5, r4, #2
 800205a:	4a25      	ldr	r2, [pc, #148]	@ (80020f0 <HAL_GPIO_Init+0x1f8>)
 800205c:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002060:	f003 0e03 	and.w	lr, r3, #3
 8002064:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002068:	220f      	movs	r2, #15
 800206a:	fa02 f20e 	lsl.w	r2, r2, lr
 800206e:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002072:	4a22      	ldr	r2, [pc, #136]	@ (80020fc <HAL_GPIO_Init+0x204>)
 8002074:	4290      	cmp	r0, r2
 8002076:	f43f af73 	beq.w	8001f60 <HAL_GPIO_Init+0x68>
 800207a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800207e:	4290      	cmp	r0, r2
 8002080:	d022      	beq.n	80020c8 <HAL_GPIO_Init+0x1d0>
 8002082:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002086:	4290      	cmp	r0, r2
 8002088:	d020      	beq.n	80020cc <HAL_GPIO_Init+0x1d4>
 800208a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800208e:	4290      	cmp	r0, r2
 8002090:	d01e      	beq.n	80020d0 <HAL_GPIO_Init+0x1d8>
 8002092:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002096:	4290      	cmp	r0, r2
 8002098:	d01c      	beq.n	80020d4 <HAL_GPIO_Init+0x1dc>
 800209a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800209e:	4290      	cmp	r0, r2
 80020a0:	d01a      	beq.n	80020d8 <HAL_GPIO_Init+0x1e0>
 80020a2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80020a6:	4290      	cmp	r0, r2
 80020a8:	d018      	beq.n	80020dc <HAL_GPIO_Init+0x1e4>
 80020aa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80020ae:	4290      	cmp	r0, r2
 80020b0:	d016      	beq.n	80020e0 <HAL_GPIO_Init+0x1e8>
 80020b2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80020b6:	4290      	cmp	r0, r2
 80020b8:	d014      	beq.n	80020e4 <HAL_GPIO_Init+0x1ec>
 80020ba:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80020be:	4290      	cmp	r0, r2
 80020c0:	f43f af4c 	beq.w	8001f5c <HAL_GPIO_Init+0x64>
 80020c4:	220a      	movs	r2, #10
 80020c6:	e74c      	b.n	8001f62 <HAL_GPIO_Init+0x6a>
 80020c8:	2201      	movs	r2, #1
 80020ca:	e74a      	b.n	8001f62 <HAL_GPIO_Init+0x6a>
 80020cc:	2202      	movs	r2, #2
 80020ce:	e748      	b.n	8001f62 <HAL_GPIO_Init+0x6a>
 80020d0:	2203      	movs	r2, #3
 80020d2:	e746      	b.n	8001f62 <HAL_GPIO_Init+0x6a>
 80020d4:	2204      	movs	r2, #4
 80020d6:	e744      	b.n	8001f62 <HAL_GPIO_Init+0x6a>
 80020d8:	2205      	movs	r2, #5
 80020da:	e742      	b.n	8001f62 <HAL_GPIO_Init+0x6a>
 80020dc:	2206      	movs	r2, #6
 80020de:	e740      	b.n	8001f62 <HAL_GPIO_Init+0x6a>
 80020e0:	2207      	movs	r2, #7
 80020e2:	e73e      	b.n	8001f62 <HAL_GPIO_Init+0x6a>
 80020e4:	2208      	movs	r2, #8
 80020e6:	e73c      	b.n	8001f62 <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 80020e8:	b002      	add	sp, #8
 80020ea:	bd70      	pop	{r4, r5, r6, pc}
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40013800 	.word	0x40013800
 80020f4:	40013c00 	.word	0x40013c00
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40020000 	.word	0x40020000

08002100 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002100:	b10a      	cbz	r2, 8002106 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002102:	6181      	str	r1, [r0, #24]
 8002104:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002106:	0409      	lsls	r1, r1, #16
 8002108:	6181      	str	r1, [r0, #24]
  }
}
 800210a:	4770      	bx	lr

0800210c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800210c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800210e:	ea01 0203 	and.w	r2, r1, r3
 8002112:	ea21 0103 	bic.w	r1, r1, r3
 8002116:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800211a:	6181      	str	r1, [r0, #24]
}
 800211c:	4770      	bx	lr
	...

08002120 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002120:	2800      	cmp	r0, #0
 8002122:	f000 80cc 	beq.w	80022be <HAL_I2C_Init+0x19e>
{
 8002126:	b570      	push	{r4, r5, r6, lr}
 8002128:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800212a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800212e:	2b00      	cmp	r3, #0
 8002130:	d077      	beq.n	8002222 <HAL_I2C_Init+0x102>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002132:	2324      	movs	r3, #36	@ 0x24
 8002134:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002138:	6822      	ldr	r2, [r4, #0]
 800213a:	6813      	ldr	r3, [r2, #0]
 800213c:	f023 0301 	bic.w	r3, r3, #1
 8002140:	6013      	str	r3, [r2, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002142:	6822      	ldr	r2, [r4, #0]
 8002144:	6813      	ldr	r3, [r2, #0]
 8002146:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800214a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800214c:	6822      	ldr	r2, [r4, #0]
 800214e:	6813      	ldr	r3, [r2, #0]
 8002150:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002154:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002156:	f000 faff 	bl	8002758 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800215a:	6862      	ldr	r2, [r4, #4]
 800215c:	4b5a      	ldr	r3, [pc, #360]	@ (80022c8 <HAL_I2C_Init+0x1a8>)
 800215e:	429a      	cmp	r2, r3
 8002160:	d864      	bhi.n	800222c <HAL_I2C_Init+0x10c>
 8002162:	4b5a      	ldr	r3, [pc, #360]	@ (80022cc <HAL_I2C_Init+0x1ac>)
 8002164:	4298      	cmp	r0, r3
 8002166:	bf8c      	ite	hi
 8002168:	2300      	movhi	r3, #0
 800216a:	2301      	movls	r3, #1
 800216c:	2b00      	cmp	r3, #0
 800216e:	f040 80a8 	bne.w	80022c2 <HAL_I2C_Init+0x1a2>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002172:	4957      	ldr	r1, [pc, #348]	@ (80022d0 <HAL_I2C_Init+0x1b0>)
 8002174:	fba1 3100 	umull	r3, r1, r1, r0
 8002178:	0c8b      	lsrs	r3, r1, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800217a:	6825      	ldr	r5, [r4, #0]
 800217c:	686a      	ldr	r2, [r5, #4]
 800217e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002182:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8002186:	606a      	str	r2, [r5, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002188:	6821      	ldr	r1, [r4, #0]
 800218a:	6a0a      	ldr	r2, [r1, #32]
 800218c:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002190:	6866      	ldr	r6, [r4, #4]
 8002192:	4d4d      	ldr	r5, [pc, #308]	@ (80022c8 <HAL_I2C_Init+0x1a8>)
 8002194:	42ae      	cmp	r6, r5
 8002196:	d84f      	bhi.n	8002238 <HAL_I2C_Init+0x118>
 8002198:	3301      	adds	r3, #1
 800219a:	4313      	orrs	r3, r2
 800219c:	620b      	str	r3, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800219e:	6821      	ldr	r1, [r4, #0]
 80021a0:	69ca      	ldr	r2, [r1, #28]
 80021a2:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 80021a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80021aa:	6865      	ldr	r5, [r4, #4]
 80021ac:	4b46      	ldr	r3, [pc, #280]	@ (80022c8 <HAL_I2C_Init+0x1a8>)
 80021ae:	429d      	cmp	r5, r3
 80021b0:	d84c      	bhi.n	800224c <HAL_I2C_Init+0x12c>
 80021b2:	1e43      	subs	r3, r0, #1
 80021b4:	006d      	lsls	r5, r5, #1
 80021b6:	fbb3 f3f5 	udiv	r3, r3, r5
 80021ba:	3301      	adds	r3, #1
 80021bc:	f640 70fc 	movw	r0, #4092	@ 0xffc
 80021c0:	4203      	tst	r3, r0
 80021c2:	d078      	beq.n	80022b6 <HAL_I2C_Init+0x196>
 80021c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c8:	431a      	orrs	r2, r3
 80021ca:	61ca      	str	r2, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021cc:	6821      	ldr	r1, [r4, #0]
 80021ce:	680b      	ldr	r3, [r1, #0]
 80021d0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80021d4:	69e2      	ldr	r2, [r4, #28]
 80021d6:	6a20      	ldr	r0, [r4, #32]
 80021d8:	4302      	orrs	r2, r0
 80021da:	4313      	orrs	r3, r2
 80021dc:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021de:	6821      	ldr	r1, [r4, #0]
 80021e0:	688b      	ldr	r3, [r1, #8]
 80021e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80021e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80021ea:	6922      	ldr	r2, [r4, #16]
 80021ec:	68e0      	ldr	r0, [r4, #12]
 80021ee:	4302      	orrs	r2, r0
 80021f0:	4313      	orrs	r3, r2
 80021f2:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021f4:	6821      	ldr	r1, [r4, #0]
 80021f6:	68cb      	ldr	r3, [r1, #12]
 80021f8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80021fc:	6962      	ldr	r2, [r4, #20]
 80021fe:	69a0      	ldr	r0, [r4, #24]
 8002200:	4302      	orrs	r2, r0
 8002202:	4313      	orrs	r3, r2
 8002204:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002206:	6822      	ldr	r2, [r4, #0]
 8002208:	6813      	ldr	r3, [r2, #0]
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002210:	2000      	movs	r0, #0
 8002212:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002214:	2320      	movs	r3, #32
 8002216:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800221a:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800221c:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e

  return HAL_OK;
}
 8002220:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002222:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8002226:	f7fe fef1 	bl	800100c <HAL_I2C_MspInit>
 800222a:	e782      	b.n	8002132 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800222c:	4b29      	ldr	r3, [pc, #164]	@ (80022d4 <HAL_I2C_Init+0x1b4>)
 800222e:	4298      	cmp	r0, r3
 8002230:	bf8c      	ite	hi
 8002232:	2300      	movhi	r3, #0
 8002234:	2301      	movls	r3, #1
 8002236:	e799      	b.n	800216c <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002238:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 800223c:	fb05 f303 	mul.w	r3, r5, r3
 8002240:	4d25      	ldr	r5, [pc, #148]	@ (80022d8 <HAL_I2C_Init+0x1b8>)
 8002242:	fba5 5303 	umull	r5, r3, r5, r3
 8002246:	099b      	lsrs	r3, r3, #6
 8002248:	3301      	adds	r3, #1
 800224a:	e7a6      	b.n	800219a <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800224c:	68a6      	ldr	r6, [r4, #8]
 800224e:	b9be      	cbnz	r6, 8002280 <HAL_I2C_Init+0x160>
 8002250:	1e43      	subs	r3, r0, #1
 8002252:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8002256:	fbb3 f3fc 	udiv	r3, r3, ip
 800225a:	3301      	adds	r3, #1
 800225c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002260:	fab3 f383 	clz	r3, r3
 8002264:	095b      	lsrs	r3, r3, #5
 8002266:	bb43      	cbnz	r3, 80022ba <HAL_I2C_Init+0x19a>
 8002268:	b9c6      	cbnz	r6, 800229c <HAL_I2C_Init+0x17c>
 800226a:	1e43      	subs	r3, r0, #1
 800226c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002270:	fbb3 f3f5 	udiv	r3, r3, r5
 8002274:	3301      	adds	r3, #1
 8002276:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800227a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800227e:	e7a3      	b.n	80021c8 <HAL_I2C_Init+0xa8>
 8002280:	1e43      	subs	r3, r0, #1
 8002282:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8002286:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 800228a:	fbb3 f3fc 	udiv	r3, r3, ip
 800228e:	3301      	adds	r3, #1
 8002290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002294:	fab3 f383 	clz	r3, r3
 8002298:	095b      	lsrs	r3, r3, #5
 800229a:	e7e4      	b.n	8002266 <HAL_I2C_Init+0x146>
 800229c:	1e43      	subs	r3, r0, #1
 800229e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80022a2:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80022a6:	fbb3 f3f5 	udiv	r3, r3, r5
 80022aa:	3301      	adds	r3, #1
 80022ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022b4:	e788      	b.n	80021c8 <HAL_I2C_Init+0xa8>
 80022b6:	2304      	movs	r3, #4
 80022b8:	e786      	b.n	80021c8 <HAL_I2C_Init+0xa8>
 80022ba:	2301      	movs	r3, #1
 80022bc:	e784      	b.n	80021c8 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 80022be:	2001      	movs	r0, #1
}
 80022c0:	4770      	bx	lr
    return HAL_ERROR;
 80022c2:	2001      	movs	r0, #1
 80022c4:	e7ac      	b.n	8002220 <HAL_I2C_Init+0x100>
 80022c6:	bf00      	nop
 80022c8:	000186a0 	.word	0x000186a0
 80022cc:	001e847f 	.word	0x001e847f
 80022d0:	431bde83 	.word	0x431bde83
 80022d4:	003d08ff 	.word	0x003d08ff
 80022d8:	10624dd3 	.word	0x10624dd3

080022dc <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022dc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b20      	cmp	r3, #32
 80022e4:	d001      	beq.n	80022ea <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80022e6:	2002      	movs	r0, #2
  }
}
 80022e8:	4770      	bx	lr
    hi2c->State = HAL_I2C_STATE_BUSY;
 80022ea:	2324      	movs	r3, #36	@ 0x24
 80022ec:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    __HAL_I2C_DISABLE(hi2c);
 80022f0:	6802      	ldr	r2, [r0, #0]
 80022f2:	6813      	ldr	r3, [r2, #0]
 80022f4:	f023 0301 	bic.w	r3, r3, #1
 80022f8:	6013      	str	r3, [r2, #0]
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80022fa:	6802      	ldr	r2, [r0, #0]
 80022fc:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 80022fe:	f023 0310 	bic.w	r3, r3, #16
 8002302:	6253      	str	r3, [r2, #36]	@ 0x24
    hi2c->Instance->FLTR |= AnalogFilter;
 8002304:	6802      	ldr	r2, [r0, #0]
 8002306:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8002308:	430b      	orrs	r3, r1
 800230a:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_I2C_ENABLE(hi2c);
 800230c:	6802      	ldr	r2, [r0, #0]
 800230e:	6813      	ldr	r3, [r2, #0]
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002316:	2320      	movs	r3, #32
 8002318:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    return HAL_OK;
 800231c:	2000      	movs	r0, #0
 800231e:	4770      	bx	lr

08002320 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002320:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b20      	cmp	r3, #32
 8002328:	d001      	beq.n	800232e <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800232a:	2002      	movs	r0, #2
  }
}
 800232c:	4770      	bx	lr
    hi2c->State = HAL_I2C_STATE_BUSY;
 800232e:	2324      	movs	r3, #36	@ 0x24
 8002330:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    __HAL_I2C_DISABLE(hi2c);
 8002334:	6802      	ldr	r2, [r0, #0]
 8002336:	6813      	ldr	r3, [r2, #0]
 8002338:	f023 0301 	bic.w	r3, r3, #1
 800233c:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->FLTR;
 800233e:	6802      	ldr	r2, [r0, #0]
 8002340:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8002342:	b29b      	uxth	r3, r3
    tmpreg &= ~(I2C_FLTR_DNF);
 8002344:	f023 030f 	bic.w	r3, r3, #15
    tmpreg |= DigitalFilter;
 8002348:	4319      	orrs	r1, r3
 800234a:	b289      	uxth	r1, r1
    hi2c->Instance->FLTR = tmpreg;
 800234c:	6251      	str	r1, [r2, #36]	@ 0x24
    __HAL_I2C_ENABLE(hi2c);
 800234e:	6802      	ldr	r2, [r0, #0]
 8002350:	6813      	ldr	r3, [r2, #0]
 8002352:	f043 0301 	orr.w	r3, r3, #1
 8002356:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002358:	2320      	movs	r3, #32
 800235a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    return HAL_OK;
 800235e:	2000      	movs	r0, #0
 8002360:	4770      	bx	lr

08002362 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002362:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002364:	684d      	ldr	r5, [r1, #4]
 8002366:	6803      	ldr	r3, [r0, #0]
 8002368:	68dc      	ldr	r4, [r3, #12]
 800236a:	f3c4 440b 	ubfx	r4, r4, #16, #12
 800236e:	4425      	add	r5, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002370:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
 8002374:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8002378:	f8d3 4088 	ldr.w	r4, [r3, #136]	@ 0x88
 800237c:	f404 4470 	and.w	r4, r4, #61440	@ 0xf000
 8002380:	f8c3 4088 	str.w	r4, [r3, #136]	@ 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002384:	680b      	ldr	r3, [r1, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002386:	6804      	ldr	r4, [r0, #0]
 8002388:	68e6      	ldr	r6, [r4, #12]
 800238a:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800238e:	4433      	add	r3, r6
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002390:	3301      	adds	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002392:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002396:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800239a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800239e:	68cd      	ldr	r5, [r1, #12]
 80023a0:	6803      	ldr	r3, [r0, #0]
 80023a2:	68dc      	ldr	r4, [r3, #12]
 80023a4:	f3c4 040a 	ubfx	r4, r4, #0, #11
 80023a8:	4425      	add	r5, r4
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80023aa:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80023ae:	f8d3 408c 	ldr.w	r4, [r3, #140]	@ 0x8c
 80023b2:	f404 4470 	and.w	r4, r4, #61440	@ 0xf000
 80023b6:	f8c3 408c 	str.w	r4, [r3, #140]	@ 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80023ba:	688b      	ldr	r3, [r1, #8]
 80023bc:	6804      	ldr	r4, [r0, #0]
 80023be:	68e6      	ldr	r6, [r4, #12]
 80023c0:	f3c6 060a 	ubfx	r6, r6, #0, #11
 80023c4:	4433      	add	r3, r6
 80023c6:	3301      	adds	r3, #1
 80023c8:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 80023cc:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80023d0:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80023d4:	6803      	ldr	r3, [r0, #0]
 80023d6:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80023da:	f8d3 4094 	ldr.w	r4, [r3, #148]	@ 0x94
 80023de:	f024 0407 	bic.w	r4, r4, #7
 80023e2:	f8c3 4094 	str.w	r4, [r3, #148]	@ 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80023e6:	6803      	ldr	r3, [r0, #0]
 80023e8:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80023ec:	690c      	ldr	r4, [r1, #16]
 80023ee:	f8c3 4094 	str.w	r4, [r3, #148]	@ 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80023f2:	f891 e031 	ldrb.w	lr, [r1, #49]	@ 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80023f6:	f891 5032 	ldrb.w	r5, [r1, #50]	@ 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80023fa:	698e      	ldr	r6, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80023fc:	6803      	ldr	r3, [r0, #0]
 80023fe:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8002402:	f8d3 409c 	ldr.w	r4, [r3, #156]	@ 0x9c
 8002406:	2400      	movs	r4, #0
 8002408:	f8c3 409c 	str.w	r4, [r3, #156]	@ 0x9c
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800240c:	f891 3030 	ldrb.w	r3, [r1, #48]	@ 0x30
 8002410:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 8002414:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8002418:	6805      	ldr	r5, [r0, #0]
 800241a:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 800241e:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8002422:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002426:	6803      	ldr	r3, [r0, #0]
 8002428:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800242c:	f8d3 5098 	ldr.w	r5, [r3, #152]	@ 0x98
 8002430:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 8002434:	f8c3 5098 	str.w	r5, [r3, #152]	@ 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002438:	6803      	ldr	r3, [r0, #0]
 800243a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800243e:	694d      	ldr	r5, [r1, #20]
 8002440:	f8c3 5098 	str.w	r5, [r3, #152]	@ 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002444:	6803      	ldr	r3, [r0, #0]
 8002446:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800244a:	f8d3 50a0 	ldr.w	r5, [r3, #160]	@ 0xa0
 800244e:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 8002452:	f025 0507 	bic.w	r5, r5, #7
 8002456:	f8c3 50a0 	str.w	r5, [r3, #160]	@ 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800245a:	6a0d      	ldr	r5, [r1, #32]
 800245c:	6803      	ldr	r3, [r0, #0]
 800245e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8002462:	69ce      	ldr	r6, [r1, #28]
 8002464:	4335      	orrs	r5, r6
 8002466:	f8c3 50a0 	str.w	r5, [r3, #160]	@ 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800246a:	6803      	ldr	r3, [r0, #0]
 800246c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8002470:	f8d3 50ac 	ldr.w	r5, [r3, #172]	@ 0xac
 8002474:	f8c3 40ac 	str.w	r4, [r3, #172]	@ 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002478:	6803      	ldr	r3, [r0, #0]
 800247a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800247e:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8002480:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002484:	690a      	ldr	r2, [r1, #16]
 8002486:	b182      	cbz	r2, 80024aa <LTDC_SetConfig+0x148>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002488:	1e53      	subs	r3, r2, #1
 800248a:	2b06      	cmp	r3, #6
 800248c:	d805      	bhi.n	800249a <LTDC_SetConfig+0x138>
 800248e:	e8df f003 	tbb	[pc, r3]
 8002492:	0d3c      	.short	0x0d3c
 8002494:	04040608 	.word	0x04040608
 8002498:	0a          	.byte	0x0a
 8002499:	00          	.byte	0x00
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800249a:	2201      	movs	r2, #1
 800249c:	e006      	b.n	80024ac <LTDC_SetConfig+0x14a>
 800249e:	2202      	movs	r2, #2
 80024a0:	e004      	b.n	80024ac <LTDC_SetConfig+0x14a>
 80024a2:	2202      	movs	r2, #2
 80024a4:	e002      	b.n	80024ac <LTDC_SetConfig+0x14a>
 80024a6:	2202      	movs	r2, #2
 80024a8:	e000      	b.n	80024ac <LTDC_SetConfig+0x14a>
    tmp = 4U;
 80024aa:	2204      	movs	r2, #4
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80024ac:	6803      	ldr	r3, [r0, #0]
 80024ae:	4463      	add	r3, ip
 80024b0:	f8d3 40b0 	ldr.w	r4, [r3, #176]	@ 0xb0
 80024b4:	f004 24e0 	and.w	r4, r4, #3758153728	@ 0xe000e000
 80024b8:	f8c3 40b0 	str.w	r4, [r3, #176]	@ 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80024bc:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80024be:	fb02 f403 	mul.w	r4, r2, r3
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80024c2:	684b      	ldr	r3, [r1, #4]
 80024c4:	680d      	ldr	r5, [r1, #0]
 80024c6:	1b5b      	subs	r3, r3, r5
 80024c8:	fb02 f303 	mul.w	r3, r2, r3
 80024cc:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80024ce:	6802      	ldr	r2, [r0, #0]
 80024d0:	4462      	add	r2, ip
 80024d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80024d6:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80024da:	6803      	ldr	r3, [r0, #0]
 80024dc:	4463      	add	r3, ip
 80024de:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80024e2:	f422 62ff 	bic.w	r2, r2, #2040	@ 0x7f8
 80024e6:	f022 0207 	bic.w	r2, r2, #7
 80024ea:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80024ee:	6803      	ldr	r3, [r0, #0]
 80024f0:	4463      	add	r3, ip
 80024f2:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80024f4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80024f8:	6803      	ldr	r3, [r0, #0]
 80024fa:	4463      	add	r3, ip
 80024fc:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002500:	f042 0201 	orr.w	r2, r2, #1
 8002504:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 8002508:	bd70      	pop	{r4, r5, r6, pc}
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800250a:	2203      	movs	r2, #3
 800250c:	e7ce      	b.n	80024ac <LTDC_SetConfig+0x14a>
	...

08002510 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8002510:	2800      	cmp	r0, #0
 8002512:	d072      	beq.n	80025fa <HAL_LTDC_Init+0xea>
{
 8002514:	b538      	push	{r3, r4, r5, lr}
 8002516:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002518:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 800251c:	2b00      	cmp	r3, #0
 800251e:	d067      	beq.n	80025f0 <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002520:	2302      	movs	r3, #2
 8002522:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002526:	6822      	ldr	r2, [r4, #0]
 8002528:	6993      	ldr	r3, [r2, #24]
 800252a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800252e:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002530:	6821      	ldr	r1, [r4, #0]
 8002532:	698a      	ldr	r2, [r1, #24]
 8002534:	6863      	ldr	r3, [r4, #4]
 8002536:	68a0      	ldr	r0, [r4, #8]
 8002538:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800253a:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800253c:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800253e:	6920      	ldr	r0, [r4, #16]
 8002540:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002542:	4313      	orrs	r3, r2
 8002544:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002546:	6821      	ldr	r1, [r4, #0]
 8002548:	688a      	ldr	r2, [r1, #8]
 800254a:	4b2d      	ldr	r3, [pc, #180]	@ (8002600 <HAL_LTDC_Init+0xf0>)
 800254c:	401a      	ands	r2, r3
 800254e:	608a      	str	r2, [r1, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002550:	6820      	ldr	r0, [r4, #0]
 8002552:	6882      	ldr	r2, [r0, #8]
 8002554:	69a1      	ldr	r1, [r4, #24]
 8002556:	6965      	ldr	r5, [r4, #20]
 8002558:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800255c:	430a      	orrs	r2, r1
 800255e:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002560:	6821      	ldr	r1, [r4, #0]
 8002562:	68ca      	ldr	r2, [r1, #12]
 8002564:	401a      	ands	r2, r3
 8002566:	60ca      	str	r2, [r1, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002568:	6820      	ldr	r0, [r4, #0]
 800256a:	68c2      	ldr	r2, [r0, #12]
 800256c:	6a21      	ldr	r1, [r4, #32]
 800256e:	69e5      	ldr	r5, [r4, #28]
 8002570:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8002574:	430a      	orrs	r2, r1
 8002576:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002578:	6821      	ldr	r1, [r4, #0]
 800257a:	690a      	ldr	r2, [r1, #16]
 800257c:	401a      	ands	r2, r3
 800257e:	610a      	str	r2, [r1, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002580:	6820      	ldr	r0, [r4, #0]
 8002582:	6902      	ldr	r2, [r0, #16]
 8002584:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002586:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8002588:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800258c:	430a      	orrs	r2, r1
 800258e:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002590:	6821      	ldr	r1, [r4, #0]
 8002592:	694a      	ldr	r2, [r1, #20]
 8002594:	4013      	ands	r3, r2
 8002596:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002598:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800259a:	6821      	ldr	r1, [r4, #0]
 800259c:	694b      	ldr	r3, [r1, #20]
 800259e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80025a0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80025a4:	4313      	orrs	r3, r2
 80025a6:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80025a8:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80025ac:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 80025b0:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80025b2:	6821      	ldr	r1, [r4, #0]
 80025b4:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80025b6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80025ba:	62ca      	str	r2, [r1, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80025bc:	6821      	ldr	r1, [r4, #0]
 80025be:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80025c0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80025c4:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 80025c8:	4303      	orrs	r3, r0
 80025ca:	4313      	orrs	r3, r2
 80025cc:	62cb      	str	r3, [r1, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80025ce:	6822      	ldr	r2, [r4, #0]
 80025d0:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80025d2:	f043 0306 	orr.w	r3, r3, #6
 80025d6:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80025d8:	6822      	ldr	r2, [r4, #0]
 80025da:	6993      	ldr	r3, [r2, #24]
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80025e2:	2000      	movs	r0, #0
 80025e4:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80025e8:	2301      	movs	r3, #1
 80025ea:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 80025ee:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 80025f0:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 80025f4:	f7fe fd5e 	bl	80010b4 <HAL_LTDC_MspInit>
 80025f8:	e792      	b.n	8002520 <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 80025fa:	2001      	movs	r0, #1
}
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	f000f800 	.word	0xf000f800

08002604 <HAL_LTDC_ErrorCallback>:
}
 8002604:	4770      	bx	lr

08002606 <HAL_LTDC_LineEventCallback>:
}
 8002606:	4770      	bx	lr

08002608 <HAL_LTDC_ReloadEventCallback>:
}
 8002608:	4770      	bx	lr

0800260a <HAL_LTDC_IRQHandler>:
{
 800260a:	b570      	push	{r4, r5, r6, lr}
 800260c:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800260e:	6803      	ldr	r3, [r0, #0]
 8002610:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8002612:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8002614:	f015 0f04 	tst.w	r5, #4
 8002618:	d002      	beq.n	8002620 <HAL_LTDC_IRQHandler+0x16>
 800261a:	f016 0f04 	tst.w	r6, #4
 800261e:	d112      	bne.n	8002646 <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8002620:	f015 0f02 	tst.w	r5, #2
 8002624:	d002      	beq.n	800262c <HAL_LTDC_IRQHandler+0x22>
 8002626:	f016 0f02 	tst.w	r6, #2
 800262a:	d121      	bne.n	8002670 <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800262c:	f015 0f01 	tst.w	r5, #1
 8002630:	d002      	beq.n	8002638 <HAL_LTDC_IRQHandler+0x2e>
 8002632:	f016 0f01 	tst.w	r6, #1
 8002636:	d132      	bne.n	800269e <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8002638:	f015 0f08 	tst.w	r5, #8
 800263c:	d002      	beq.n	8002644 <HAL_LTDC_IRQHandler+0x3a>
 800263e:	f016 0f08 	tst.w	r6, #8
 8002642:	d13d      	bne.n	80026c0 <HAL_LTDC_IRQHandler+0xb6>
}
 8002644:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8002646:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002648:	f022 0204 	bic.w	r2, r2, #4
 800264c:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800264e:	6803      	ldr	r3, [r0, #0]
 8002650:	2204      	movs	r2, #4
 8002652:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8002654:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002660:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8002664:	2300      	movs	r3, #0
 8002666:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800266a:	f7ff ffcb 	bl	8002604 <HAL_LTDC_ErrorCallback>
 800266e:	e7d7      	b.n	8002620 <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8002670:	6822      	ldr	r2, [r4, #0]
 8002672:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8002674:	f023 0302 	bic.w	r3, r3, #2
 8002678:	6353      	str	r3, [r2, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800267a:	6823      	ldr	r3, [r4, #0]
 800267c:	2202      	movs	r2, #2
 800267e:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8002680:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8002684:	4313      	orrs	r3, r2
 8002686:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800268a:	2304      	movs	r3, #4
 800268c:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8002690:	2300      	movs	r3, #0
 8002692:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8002696:	4620      	mov	r0, r4
 8002698:	f7ff ffb4 	bl	8002604 <HAL_LTDC_ErrorCallback>
 800269c:	e7c6      	b.n	800262c <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800269e:	6822      	ldr	r2, [r4, #0]
 80026a0:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80026a2:	f023 0301 	bic.w	r3, r3, #1
 80026a6:	6353      	str	r3, [r2, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80026a8:	6822      	ldr	r2, [r4, #0]
 80026aa:	2301      	movs	r3, #1
 80026ac:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80026ae:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 80026b2:	2300      	movs	r3, #0
 80026b4:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 80026b8:	4620      	mov	r0, r4
 80026ba:	f7ff ffa4 	bl	8002606 <HAL_LTDC_LineEventCallback>
 80026be:	e7bb      	b.n	8002638 <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80026c0:	6822      	ldr	r2, [r4, #0]
 80026c2:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80026c4:	f023 0308 	bic.w	r3, r3, #8
 80026c8:	6353      	str	r3, [r2, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80026ca:	6823      	ldr	r3, [r4, #0]
 80026cc:	2208      	movs	r2, #8
 80026ce:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80026d0:	2301      	movs	r3, #1
 80026d2:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 80026d6:	2300      	movs	r3, #0
 80026d8:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 80026dc:	4620      	mov	r0, r4
 80026de:	f7ff ff93 	bl	8002608 <HAL_LTDC_ReloadEventCallback>
}
 80026e2:	e7af      	b.n	8002644 <HAL_LTDC_IRQHandler+0x3a>

080026e4 <HAL_LTDC_ConfigLayer>:
{
 80026e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 80026e6:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d02c      	beq.n	8002748 <HAL_LTDC_ConfigLayer+0x64>
 80026ee:	4604      	mov	r4, r0
 80026f0:	460d      	mov	r5, r1
 80026f2:	4616      	mov	r6, r2
 80026f4:	2701      	movs	r7, #1
 80026f6:	f880 70a0 	strb.w	r7, [r0, #160]	@ 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80026fa:	2302      	movs	r3, #2
 80026fc:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002700:	f04f 0c34 	mov.w	ip, #52	@ 0x34
 8002704:	fb0c 0c02 	mla	ip, ip, r2, r0
 8002708:	f10c 0c38 	add.w	ip, ip, #56	@ 0x38
 800270c:	468e      	mov	lr, r1
 800270e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002712:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002716:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800271a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800271e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002722:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002726:	f8de 3000 	ldr.w	r3, [lr]
 800272a:	f8cc 3000 	str.w	r3, [ip]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800272e:	4632      	mov	r2, r6
 8002730:	4629      	mov	r1, r5
 8002732:	4620      	mov	r0, r4
 8002734:	f7ff fe15 	bl	8002362 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002738:	6823      	ldr	r3, [r4, #0]
 800273a:	625f      	str	r7, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800273c:	f884 70a1 	strb.w	r7, [r4, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8002740:	2000      	movs	r0, #0
 8002742:	f884 00a0 	strb.w	r0, [r4, #160]	@ 0xa0
}
 8002746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 8002748:	2002      	movs	r0, #2
 800274a:	e7fc      	b.n	8002746 <HAL_LTDC_ConfigLayer+0x62>

0800274c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800274c:	4b01      	ldr	r3, [pc, #4]	@ (8002754 <HAL_RCC_GetHCLKFreq+0x8>)
 800274e:	6818      	ldr	r0, [r3, #0]
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	20000000 	.word	0x20000000

08002758 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002758:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800275a:	f7ff fff7 	bl	800274c <HAL_RCC_GetHCLKFreq>
 800275e:	4b04      	ldr	r3, [pc, #16]	@ (8002770 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002766:	4a03      	ldr	r2, [pc, #12]	@ (8002774 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002768:	5cd3      	ldrb	r3, [r2, r3]
}
 800276a:	40d8      	lsrs	r0, r3
 800276c:	bd08      	pop	{r3, pc}
 800276e:	bf00      	nop
 8002770:	40023800 	.word	0x40023800
 8002774:	08004048 	.word	0x08004048

08002778 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002778:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800277a:	f7ff ffe7 	bl	800274c <HAL_RCC_GetHCLKFreq>
 800277e:	4b04      	ldr	r3, [pc, #16]	@ (8002790 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002786:	4a03      	ldr	r2, [pc, #12]	@ (8002794 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002788:	5cd3      	ldrb	r3, [r2, r3]
}
 800278a:	40d8      	lsrs	r0, r3
 800278c:	bd08      	pop	{r3, pc}
 800278e:	bf00      	nop
 8002790:	40023800 	.word	0x40023800
 8002794:	08004048 	.word	0x08004048

08002798 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002798:	230f      	movs	r3, #15
 800279a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800279c:	4b0b      	ldr	r3, [pc, #44]	@ (80027cc <HAL_RCC_GetClockConfig+0x34>)
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	f002 0203 	and.w	r2, r2, #3
 80027a4:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 80027ac:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 80027b4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	08db      	lsrs	r3, r3, #3
 80027ba:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80027be:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027c0:	4b03      	ldr	r3, [pc, #12]	@ (80027d0 <HAL_RCC_GetClockConfig+0x38>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 030f 	and.w	r3, r3, #15
 80027c8:	600b      	str	r3, [r1, #0]
}
 80027ca:	4770      	bx	lr
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40023c00 	.word	0x40023c00

080027d4 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80027d4:	b1e0      	cbz	r0, 8002810 <HAL_SDRAM_Init+0x3c>
{
 80027d6:	b538      	push	{r3, r4, r5, lr}
 80027d8:	460d      	mov	r5, r1
 80027da:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80027dc:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80027e0:	b18b      	cbz	r3, 8002806 <HAL_SDRAM_Init+0x32>
    HAL_SDRAM_MspInit(hsdram);
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80027e2:	2302      	movs	r3, #2
 80027e4:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80027e8:	4621      	mov	r1, r4
 80027ea:	f851 0b04 	ldr.w	r0, [r1], #4
 80027ee:	f000 febd 	bl	800356c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80027f2:	6862      	ldr	r2, [r4, #4]
 80027f4:	4629      	mov	r1, r5
 80027f6:	6820      	ldr	r0, [r4, #0]
 80027f8:	f000 fef4 	bl	80035e4 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80027fc:	2301      	movs	r3, #1
 80027fe:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  return HAL_OK;
 8002802:	2000      	movs	r0, #0
}
 8002804:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8002806:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800280a:	f7fe fdcb 	bl	80013a4 <HAL_SDRAM_MspInit>
 800280e:	e7e8      	b.n	80027e2 <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 8002810:	2001      	movs	r0, #1
}
 8002812:	4770      	bx	lr

08002814 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002814:	2800      	cmp	r0, #0
 8002816:	d05a      	beq.n	80028ce <HAL_SPI_Init+0xba>
{
 8002818:	b510      	push	{r4, lr}
 800281a:	4604      	mov	r4, r0
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800281c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800281e:	b933      	cbnz	r3, 800282e <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002820:	6843      	ldr	r3, [r0, #4]
 8002822:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002826:	d005      	beq.n	8002834 <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002828:	2300      	movs	r3, #0
 800282a:	61c3      	str	r3, [r0, #28]
 800282c:	e002      	b.n	8002834 <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800282e:	2300      	movs	r3, #0
 8002830:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002832:	6143      	str	r3, [r0, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002834:	2300      	movs	r3, #0
 8002836:	62a3      	str	r3, [r4, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002838:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 800283c:	2b00      	cmp	r3, #0
 800283e:	d040      	beq.n	80028c2 <HAL_SPI_Init+0xae>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002840:	2302      	movs	r3, #2
 8002842:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002846:	6822      	ldr	r2, [r4, #0]
 8002848:	6813      	ldr	r3, [r2, #0]
 800284a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800284e:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002850:	6863      	ldr	r3, [r4, #4]
 8002852:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8002856:	68a2      	ldr	r2, [r4, #8]
 8002858:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 800285c:	4313      	orrs	r3, r2
 800285e:	68e2      	ldr	r2, [r4, #12]
 8002860:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002864:	4313      	orrs	r3, r2
 8002866:	6922      	ldr	r2, [r4, #16]
 8002868:	f002 0202 	and.w	r2, r2, #2
 800286c:	4313      	orrs	r3, r2
 800286e:	6962      	ldr	r2, [r4, #20]
 8002870:	f002 0201 	and.w	r2, r2, #1
 8002874:	4313      	orrs	r3, r2
 8002876:	69a2      	ldr	r2, [r4, #24]
 8002878:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 800287c:	4313      	orrs	r3, r2
 800287e:	69e2      	ldr	r2, [r4, #28]
 8002880:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8002884:	4313      	orrs	r3, r2
 8002886:	6a22      	ldr	r2, [r4, #32]
 8002888:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800288c:	4313      	orrs	r3, r2
 800288e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002890:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002894:	6821      	ldr	r1, [r4, #0]
 8002896:	4313      	orrs	r3, r2
 8002898:	600b      	str	r3, [r1, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800289a:	8b63      	ldrh	r3, [r4, #26]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80028a2:	f002 0210 	and.w	r2, r2, #16
 80028a6:	6821      	ldr	r1, [r4, #0]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028ac:	6822      	ldr	r2, [r4, #0]
 80028ae:	69d3      	ldr	r3, [r2, #28]
 80028b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80028b4:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028b6:	2000      	movs	r0, #0
 80028b8:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80028ba:	2301      	movs	r3, #1
 80028bc:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51

  return HAL_OK;
}
 80028c0:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80028c2:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 80028c6:	4620      	mov	r0, r4
 80028c8:	f7fe fcde 	bl	8001288 <HAL_SPI_MspInit>
 80028cc:	e7b8      	b.n	8002840 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 80028ce:	2001      	movs	r0, #1
}
 80028d0:	4770      	bx	lr

080028d2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028d2:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028d4:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028d6:	6a04      	ldr	r4, [r0, #32]
 80028d8:	f024 0401 	bic.w	r4, r4, #1
 80028dc:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028de:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028e0:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028e4:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028e8:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80028ec:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028ee:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80028f0:	6203      	str	r3, [r0, #32]
}
 80028f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028f8:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80028fa:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028fc:	6a04      	ldr	r4, [r0, #32]
 80028fe:	f024 0410 	bic.w	r4, r4, #16
 8002902:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002904:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002906:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800290a:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800290e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002912:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002916:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002918:	6203      	str	r3, [r0, #32]
}
 800291a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800291e:	4770      	bx	lr

08002920 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002920:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002926:	430b      	orrs	r3, r1
 8002928:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800292c:	6083      	str	r3, [r0, #8]
}
 800292e:	4770      	bx	lr

08002930 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002930:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b01      	cmp	r3, #1
 8002938:	d137      	bne.n	80029aa <HAL_TIM_Base_Start_IT+0x7a>
  htim->State = HAL_TIM_STATE_BUSY;
 800293a:	2302      	movs	r3, #2
 800293c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002940:	6802      	ldr	r2, [r0, #0]
 8002942:	68d3      	ldr	r3, [r2, #12]
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800294a:	6803      	ldr	r3, [r0, #0]
 800294c:	4a19      	ldr	r2, [pc, #100]	@ (80029b4 <HAL_TIM_Base_Start_IT+0x84>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d020      	beq.n	8002994 <HAL_TIM_Base_Start_IT+0x64>
 8002952:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002956:	d01d      	beq.n	8002994 <HAL_TIM_Base_Start_IT+0x64>
 8002958:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800295c:	4293      	cmp	r3, r2
 800295e:	d019      	beq.n	8002994 <HAL_TIM_Base_Start_IT+0x64>
 8002960:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002964:	4293      	cmp	r3, r2
 8002966:	d015      	beq.n	8002994 <HAL_TIM_Base_Start_IT+0x64>
 8002968:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800296c:	4293      	cmp	r3, r2
 800296e:	d011      	beq.n	8002994 <HAL_TIM_Base_Start_IT+0x64>
 8002970:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002974:	4293      	cmp	r3, r2
 8002976:	d00d      	beq.n	8002994 <HAL_TIM_Base_Start_IT+0x64>
 8002978:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800297c:	4293      	cmp	r3, r2
 800297e:	d009      	beq.n	8002994 <HAL_TIM_Base_Start_IT+0x64>
 8002980:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002984:	4293      	cmp	r3, r2
 8002986:	d005      	beq.n	8002994 <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	f042 0201 	orr.w	r2, r2, #1
 800298e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002990:	2000      	movs	r0, #0
 8002992:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800299a:	2a06      	cmp	r2, #6
 800299c:	d007      	beq.n	80029ae <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	f042 0201 	orr.w	r2, r2, #1
 80029a4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80029a6:	2000      	movs	r0, #0
 80029a8:	4770      	bx	lr
    return HAL_ERROR;
 80029aa:	2001      	movs	r0, #1
 80029ac:	4770      	bx	lr
  return HAL_OK;
 80029ae:	2000      	movs	r0, #0
}
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40010000 	.word	0x40010000

080029b8 <HAL_TIM_OC_DelayElapsedCallback>:
}
 80029b8:	4770      	bx	lr

080029ba <HAL_TIM_IC_CaptureCallback>:
}
 80029ba:	4770      	bx	lr

080029bc <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80029bc:	4770      	bx	lr

080029be <HAL_TIM_TriggerCallback>:
}
 80029be:	4770      	bx	lr

080029c0 <HAL_TIM_IRQHandler>:
{
 80029c0:	b570      	push	{r4, r5, r6, lr}
 80029c2:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 80029c4:	6803      	ldr	r3, [r0, #0]
 80029c6:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80029c8:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80029ca:	f015 0f02 	tst.w	r5, #2
 80029ce:	d010      	beq.n	80029f2 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80029d0:	f016 0f02 	tst.w	r6, #2
 80029d4:	d00d      	beq.n	80029f2 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80029d6:	f06f 0202 	mvn.w	r2, #2
 80029da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029dc:	2301      	movs	r3, #1
 80029de:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029e0:	6803      	ldr	r3, [r0, #0]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	f013 0f03 	tst.w	r3, #3
 80029e8:	d05e      	beq.n	8002aa8 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 80029ea:	f7ff ffe6 	bl	80029ba <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ee:	2300      	movs	r3, #0
 80029f0:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80029f2:	f015 0f04 	tst.w	r5, #4
 80029f6:	d012      	beq.n	8002a1e <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80029f8:	f016 0f04 	tst.w	r6, #4
 80029fc:	d00f      	beq.n	8002a1e <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80029fe:	6823      	ldr	r3, [r4, #0]
 8002a00:	f06f 0204 	mvn.w	r2, #4
 8002a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a06:	2302      	movs	r3, #2
 8002a08:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a0a:	6823      	ldr	r3, [r4, #0]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8002a12:	d04f      	beq.n	8002ab4 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8002a14:	4620      	mov	r0, r4
 8002a16:	f7ff ffd0 	bl	80029ba <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a1e:	f015 0f08 	tst.w	r5, #8
 8002a22:	d012      	beq.n	8002a4a <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a24:	f016 0f08 	tst.w	r6, #8
 8002a28:	d00f      	beq.n	8002a4a <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a2a:	6823      	ldr	r3, [r4, #0]
 8002a2c:	f06f 0208 	mvn.w	r2, #8
 8002a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a32:	2304      	movs	r3, #4
 8002a34:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a36:	6823      	ldr	r3, [r4, #0]
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	f013 0f03 	tst.w	r3, #3
 8002a3e:	d040      	beq.n	8002ac2 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8002a40:	4620      	mov	r0, r4
 8002a42:	f7ff ffba 	bl	80029ba <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a46:	2300      	movs	r3, #0
 8002a48:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a4a:	f015 0f10 	tst.w	r5, #16
 8002a4e:	d012      	beq.n	8002a76 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a50:	f016 0f10 	tst.w	r6, #16
 8002a54:	d00f      	beq.n	8002a76 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a56:	6823      	ldr	r3, [r4, #0]
 8002a58:	f06f 0210 	mvn.w	r2, #16
 8002a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a5e:	2308      	movs	r3, #8
 8002a60:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a62:	6823      	ldr	r3, [r4, #0]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8002a6a:	d031      	beq.n	8002ad0 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8002a6c:	4620      	mov	r0, r4
 8002a6e:	f7ff ffa4 	bl	80029ba <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a72:	2300      	movs	r3, #0
 8002a74:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a76:	f015 0f01 	tst.w	r5, #1
 8002a7a:	d002      	beq.n	8002a82 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a7c:	f016 0f01 	tst.w	r6, #1
 8002a80:	d12d      	bne.n	8002ade <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a82:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8002a86:	d002      	beq.n	8002a8e <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a88:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8002a8c:	d12f      	bne.n	8002aee <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a8e:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8002a92:	d002      	beq.n	8002a9a <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a94:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8002a98:	d131      	bne.n	8002afe <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a9a:	f015 0f20 	tst.w	r5, #32
 8002a9e:	d002      	beq.n	8002aa6 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002aa0:	f016 0f20 	tst.w	r6, #32
 8002aa4:	d133      	bne.n	8002b0e <HAL_TIM_IRQHandler+0x14e>
}
 8002aa6:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa8:	f7ff ff86 	bl	80029b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aac:	4620      	mov	r0, r4
 8002aae:	f7ff ff85 	bl	80029bc <HAL_TIM_PWM_PulseFinishedCallback>
 8002ab2:	e79c      	b.n	80029ee <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab4:	4620      	mov	r0, r4
 8002ab6:	f7ff ff7f 	bl	80029b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aba:	4620      	mov	r0, r4
 8002abc:	f7ff ff7e 	bl	80029bc <HAL_TIM_PWM_PulseFinishedCallback>
 8002ac0:	e7ab      	b.n	8002a1a <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ac2:	4620      	mov	r0, r4
 8002ac4:	f7ff ff78 	bl	80029b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac8:	4620      	mov	r0, r4
 8002aca:	f7ff ff77 	bl	80029bc <HAL_TIM_PWM_PulseFinishedCallback>
 8002ace:	e7ba      	b.n	8002a46 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	f7ff ff71 	bl	80029b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad6:	4620      	mov	r0, r4
 8002ad8:	f7ff ff70 	bl	80029bc <HAL_TIM_PWM_PulseFinishedCallback>
 8002adc:	e7c9      	b.n	8002a72 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ade:	6823      	ldr	r3, [r4, #0]
 8002ae0:	f06f 0201 	mvn.w	r2, #1
 8002ae4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ae6:	4620      	mov	r0, r4
 8002ae8:	f7fd ff6c 	bl	80009c4 <HAL_TIM_PeriodElapsedCallback>
 8002aec:	e7c9      	b.n	8002a82 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002aee:	6823      	ldr	r3, [r4, #0]
 8002af0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002af4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002af6:	4620      	mov	r0, r4
 8002af8:	f000 f97d 	bl	8002df6 <HAL_TIMEx_BreakCallback>
 8002afc:	e7c7      	b.n	8002a8e <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002afe:	6823      	ldr	r3, [r4, #0]
 8002b00:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b04:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002b06:	4620      	mov	r0, r4
 8002b08:	f7ff ff59 	bl	80029be <HAL_TIM_TriggerCallback>
 8002b0c:	e7c5      	b.n	8002a9a <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b0e:	6823      	ldr	r3, [r4, #0]
 8002b10:	f06f 0220 	mvn.w	r2, #32
 8002b14:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002b16:	4620      	mov	r0, r4
 8002b18:	f000 f96c 	bl	8002df4 <HAL_TIMEx_CommutCallback>
}
 8002b1c:	e7c3      	b.n	8002aa6 <HAL_TIM_IRQHandler+0xe6>
	...

08002b20 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002b20:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b22:	4a34      	ldr	r2, [pc, #208]	@ (8002bf4 <TIM_Base_SetConfig+0xd4>)
 8002b24:	4290      	cmp	r0, r2
 8002b26:	d012      	beq.n	8002b4e <TIM_Base_SetConfig+0x2e>
 8002b28:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002b2c:	d00f      	beq.n	8002b4e <TIM_Base_SetConfig+0x2e>
 8002b2e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002b32:	4290      	cmp	r0, r2
 8002b34:	d00b      	beq.n	8002b4e <TIM_Base_SetConfig+0x2e>
 8002b36:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002b3a:	4290      	cmp	r0, r2
 8002b3c:	d007      	beq.n	8002b4e <TIM_Base_SetConfig+0x2e>
 8002b3e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002b42:	4290      	cmp	r0, r2
 8002b44:	d003      	beq.n	8002b4e <TIM_Base_SetConfig+0x2e>
 8002b46:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002b4a:	4290      	cmp	r0, r2
 8002b4c:	d103      	bne.n	8002b56 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002b52:	684a      	ldr	r2, [r1, #4]
 8002b54:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b56:	4a27      	ldr	r2, [pc, #156]	@ (8002bf4 <TIM_Base_SetConfig+0xd4>)
 8002b58:	4290      	cmp	r0, r2
 8002b5a:	d02a      	beq.n	8002bb2 <TIM_Base_SetConfig+0x92>
 8002b5c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002b60:	d027      	beq.n	8002bb2 <TIM_Base_SetConfig+0x92>
 8002b62:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002b66:	4290      	cmp	r0, r2
 8002b68:	d023      	beq.n	8002bb2 <TIM_Base_SetConfig+0x92>
 8002b6a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002b6e:	4290      	cmp	r0, r2
 8002b70:	d01f      	beq.n	8002bb2 <TIM_Base_SetConfig+0x92>
 8002b72:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002b76:	4290      	cmp	r0, r2
 8002b78:	d01b      	beq.n	8002bb2 <TIM_Base_SetConfig+0x92>
 8002b7a:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002b7e:	4290      	cmp	r0, r2
 8002b80:	d017      	beq.n	8002bb2 <TIM_Base_SetConfig+0x92>
 8002b82:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8002b86:	4290      	cmp	r0, r2
 8002b88:	d013      	beq.n	8002bb2 <TIM_Base_SetConfig+0x92>
 8002b8a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002b8e:	4290      	cmp	r0, r2
 8002b90:	d00f      	beq.n	8002bb2 <TIM_Base_SetConfig+0x92>
 8002b92:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002b96:	4290      	cmp	r0, r2
 8002b98:	d00b      	beq.n	8002bb2 <TIM_Base_SetConfig+0x92>
 8002b9a:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8002b9e:	4290      	cmp	r0, r2
 8002ba0:	d007      	beq.n	8002bb2 <TIM_Base_SetConfig+0x92>
 8002ba2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002ba6:	4290      	cmp	r0, r2
 8002ba8:	d003      	beq.n	8002bb2 <TIM_Base_SetConfig+0x92>
 8002baa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002bae:	4290      	cmp	r0, r2
 8002bb0:	d103      	bne.n	8002bba <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bb6:	68ca      	ldr	r2, [r1, #12]
 8002bb8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bbe:	694a      	ldr	r2, [r1, #20]
 8002bc0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002bc2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bc4:	688b      	ldr	r3, [r1, #8]
 8002bc6:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002bc8:	680b      	ldr	r3, [r1, #0]
 8002bca:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bcc:	4b09      	ldr	r3, [pc, #36]	@ (8002bf4 <TIM_Base_SetConfig+0xd4>)
 8002bce:	4298      	cmp	r0, r3
 8002bd0:	d003      	beq.n	8002bda <TIM_Base_SetConfig+0xba>
 8002bd2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002bd6:	4298      	cmp	r0, r3
 8002bd8:	d101      	bne.n	8002bde <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 8002bda:	690b      	ldr	r3, [r1, #16]
 8002bdc:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002bde:	2301      	movs	r3, #1
 8002be0:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002be2:	6903      	ldr	r3, [r0, #16]
 8002be4:	f013 0f01 	tst.w	r3, #1
 8002be8:	d003      	beq.n	8002bf2 <TIM_Base_SetConfig+0xd2>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002bea:	6903      	ldr	r3, [r0, #16]
 8002bec:	f023 0301 	bic.w	r3, r3, #1
 8002bf0:	6103      	str	r3, [r0, #16]
}
 8002bf2:	4770      	bx	lr
 8002bf4:	40010000 	.word	0x40010000

08002bf8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002bf8:	b340      	cbz	r0, 8002c4c <HAL_TIM_Base_Init+0x54>
{
 8002bfa:	b510      	push	{r4, lr}
 8002bfc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002bfe:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002c02:	b1f3      	cbz	r3, 8002c42 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002c04:	2302      	movs	r3, #2
 8002c06:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c0a:	4621      	mov	r1, r4
 8002c0c:	f851 0b04 	ldr.w	r0, [r1], #4
 8002c10:	f7ff ff86 	bl	8002b20 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c14:	2301      	movs	r3, #1
 8002c16:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c1a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002c1e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002c22:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002c26:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c2a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002c2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002c32:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002c36:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002c3a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8002c3e:	2000      	movs	r0, #0
}
 8002c40:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002c42:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002c46:	f7fe fb55 	bl	80012f4 <HAL_TIM_Base_MspInit>
 8002c4a:	e7db      	b.n	8002c04 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002c4c:	2001      	movs	r0, #1
}
 8002c4e:	4770      	bx	lr

08002c50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c50:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c52:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c54:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c58:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c62:	6082      	str	r2, [r0, #8]
}
 8002c64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002c6a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d078      	beq.n	8002d64 <HAL_TIM_ConfigClockSource+0xfa>
{
 8002c72:	b510      	push	{r4, lr}
 8002c74:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002c76:	2301      	movs	r3, #1
 8002c78:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002c82:	6802      	ldr	r2, [r0, #0]
 8002c84:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c8a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002c8e:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002c90:	680b      	ldr	r3, [r1, #0]
 8002c92:	2b60      	cmp	r3, #96	@ 0x60
 8002c94:	d04c      	beq.n	8002d30 <HAL_TIM_ConfigClockSource+0xc6>
 8002c96:	d829      	bhi.n	8002cec <HAL_TIM_ConfigClockSource+0x82>
 8002c98:	2b40      	cmp	r3, #64	@ 0x40
 8002c9a:	d054      	beq.n	8002d46 <HAL_TIM_ConfigClockSource+0xdc>
 8002c9c:	d90c      	bls.n	8002cb8 <HAL_TIM_ConfigClockSource+0x4e>
 8002c9e:	2b50      	cmp	r3, #80	@ 0x50
 8002ca0:	d122      	bne.n	8002ce8 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ca2:	68ca      	ldr	r2, [r1, #12]
 8002ca4:	6849      	ldr	r1, [r1, #4]
 8002ca6:	6800      	ldr	r0, [r0, #0]
 8002ca8:	f7ff fe13 	bl	80028d2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cac:	2150      	movs	r1, #80	@ 0x50
 8002cae:	6820      	ldr	r0, [r4, #0]
 8002cb0:	f7ff fe36 	bl	8002920 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002cb4:	2000      	movs	r0, #0
      break;
 8002cb6:	e005      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002cb8:	2b20      	cmp	r3, #32
 8002cba:	d00d      	beq.n	8002cd8 <HAL_TIM_ConfigClockSource+0x6e>
 8002cbc:	d909      	bls.n	8002cd2 <HAL_TIM_ConfigClockSource+0x68>
 8002cbe:	2b30      	cmp	r3, #48	@ 0x30
 8002cc0:	d00a      	beq.n	8002cd8 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 8002cc2:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8002cca:	2300      	movs	r3, #0
 8002ccc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002cd0:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8002cd2:	b10b      	cbz	r3, 8002cd8 <HAL_TIM_ConfigClockSource+0x6e>
 8002cd4:	2b10      	cmp	r3, #16
 8002cd6:	d105      	bne.n	8002ce4 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cd8:	4619      	mov	r1, r3
 8002cda:	6820      	ldr	r0, [r4, #0]
 8002cdc:	f7ff fe20 	bl	8002920 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002ce0:	2000      	movs	r0, #0
      break;
 8002ce2:	e7ef      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8002ce4:	2001      	movs	r0, #1
 8002ce6:	e7ed      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x5a>
 8002ce8:	2001      	movs	r0, #1
 8002cea:	e7eb      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002cec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cf0:	d034      	beq.n	8002d5c <HAL_TIM_ConfigClockSource+0xf2>
 8002cf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cf6:	d10c      	bne.n	8002d12 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8002cf8:	68cb      	ldr	r3, [r1, #12]
 8002cfa:	684a      	ldr	r2, [r1, #4]
 8002cfc:	6889      	ldr	r1, [r1, #8]
 8002cfe:	6800      	ldr	r0, [r0, #0]
 8002d00:	f7ff ffa6 	bl	8002c50 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d04:	6822      	ldr	r2, [r4, #0]
 8002d06:	6893      	ldr	r3, [r2, #8]
 8002d08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d0c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002d0e:	2000      	movs	r0, #0
      break;
 8002d10:	e7d8      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002d12:	2b70      	cmp	r3, #112	@ 0x70
 8002d14:	d124      	bne.n	8002d60 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8002d16:	68cb      	ldr	r3, [r1, #12]
 8002d18:	684a      	ldr	r2, [r1, #4]
 8002d1a:	6889      	ldr	r1, [r1, #8]
 8002d1c:	6800      	ldr	r0, [r0, #0]
 8002d1e:	f7ff ff97 	bl	8002c50 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d22:	6822      	ldr	r2, [r4, #0]
 8002d24:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d26:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002d2a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002d2c:	2000      	movs	r0, #0
      break;
 8002d2e:	e7c9      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d30:	68ca      	ldr	r2, [r1, #12]
 8002d32:	6849      	ldr	r1, [r1, #4]
 8002d34:	6800      	ldr	r0, [r0, #0]
 8002d36:	f7ff fddf 	bl	80028f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d3a:	2160      	movs	r1, #96	@ 0x60
 8002d3c:	6820      	ldr	r0, [r4, #0]
 8002d3e:	f7ff fdef 	bl	8002920 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002d42:	2000      	movs	r0, #0
      break;
 8002d44:	e7be      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d46:	68ca      	ldr	r2, [r1, #12]
 8002d48:	6849      	ldr	r1, [r1, #4]
 8002d4a:	6800      	ldr	r0, [r0, #0]
 8002d4c:	f7ff fdc1 	bl	80028d2 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d50:	2140      	movs	r1, #64	@ 0x40
 8002d52:	6820      	ldr	r0, [r4, #0]
 8002d54:	f7ff fde4 	bl	8002920 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002d58:	2000      	movs	r0, #0
      break;
 8002d5a:	e7b3      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	e7b1      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8002d60:	2001      	movs	r0, #1
 8002d62:	e7af      	b.n	8002cc4 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8002d64:	2002      	movs	r0, #2
}
 8002d66:	4770      	bx	lr

08002d68 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d68:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8002d6c:	2a01      	cmp	r2, #1
 8002d6e:	d03d      	beq.n	8002dec <HAL_TIMEx_MasterConfigSynchronization+0x84>
{
 8002d70:	b410      	push	{r4}
 8002d72:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8002d74:	2201      	movs	r2, #1
 8002d76:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d80:	6802      	ldr	r2, [r0, #0]
 8002d82:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d84:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d86:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d8a:	6808      	ldr	r0, [r1, #0]
 8002d8c:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d90:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	4816      	ldr	r0, [pc, #88]	@ (8002df0 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8002d96:	4282      	cmp	r2, r0
 8002d98:	d01a      	beq.n	8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002d9a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002d9e:	d017      	beq.n	8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002da0:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8002da4:	4282      	cmp	r2, r0
 8002da6:	d013      	beq.n	8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002da8:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8002dac:	4282      	cmp	r2, r0
 8002dae:	d00f      	beq.n	8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002db0:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8002db4:	4282      	cmp	r2, r0
 8002db6:	d00b      	beq.n	8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002db8:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 8002dbc:	4282      	cmp	r2, r0
 8002dbe:	d007      	beq.n	8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002dc0:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 8002dc4:	4282      	cmp	r2, r0
 8002dc6:	d003      	beq.n	8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002dc8:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8002dcc:	4282      	cmp	r2, r0
 8002dce:	d104      	bne.n	8002dda <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dd0:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dd4:	6849      	ldr	r1, [r1, #4]
 8002dd6:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dd8:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002de0:	2000      	movs	r0, #0
 8002de2:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8002de6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002dea:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002dec:	2002      	movs	r0, #2
}
 8002dee:	4770      	bx	lr
 8002df0:	40010000 	.word	0x40010000

08002df4 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002df4:	4770      	bx	lr

08002df6 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002df6:	4770      	bx	lr

08002df8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002df8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dfa:	f102 030c 	add.w	r3, r2, #12
 8002dfe:	e853 3f00 	ldrex	r3, [r3]
 8002e02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e06:	320c      	adds	r2, #12
 8002e08:	e842 3100 	strex	r1, r3, [r2]
 8002e0c:	2900      	cmp	r1, #0
 8002e0e:	d1f3      	bne.n	8002df8 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e10:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e12:	f102 0314 	add.w	r3, r2, #20
 8002e16:	e853 3f00 	ldrex	r3, [r3]
 8002e1a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1e:	3214      	adds	r2, #20
 8002e20:	e842 3100 	strex	r1, r3, [r2]
 8002e24:	2900      	cmp	r1, #0
 8002e26:	d1f3      	bne.n	8002e10 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e28:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d005      	beq.n	8002e3a <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e2e:	2320      	movs	r3, #32
 8002e30:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e34:	2300      	movs	r3, #0
 8002e36:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8002e38:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e3a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e3c:	f102 030c 	add.w	r3, r2, #12
 8002e40:	e853 3f00 	ldrex	r3, [r3]
 8002e44:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e48:	320c      	adds	r2, #12
 8002e4a:	e842 3100 	strex	r1, r3, [r2]
 8002e4e:	2900      	cmp	r1, #0
 8002e50:	d1f3      	bne.n	8002e3a <UART_EndRxTransfer+0x42>
 8002e52:	e7ec      	b.n	8002e2e <UART_EndRxTransfer+0x36>

08002e54 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e54:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b21      	cmp	r3, #33	@ 0x21
 8002e5c:	d001      	beq.n	8002e62 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002e5e:	2002      	movs	r0, #2
  }
}
 8002e60:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e62:	6883      	ldr	r3, [r0, #8]
 8002e64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e68:	d017      	beq.n	8002e9a <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e6a:	6a03      	ldr	r3, [r0, #32]
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	6202      	str	r2, [r0, #32]
 8002e70:	781a      	ldrb	r2, [r3, #0]
 8002e72:	6803      	ldr	r3, [r0, #0]
 8002e74:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8002e76:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8002e80:	b94b      	cbnz	r3, 8002e96 <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e82:	6802      	ldr	r2, [r0, #0]
 8002e84:	68d3      	ldr	r3, [r2, #12]
 8002e86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e8a:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e8c:	6802      	ldr	r2, [r0, #0]
 8002e8e:	68d3      	ldr	r3, [r2, #12]
 8002e90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e94:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8002e96:	2000      	movs	r0, #0
 8002e98:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e9a:	6903      	ldr	r3, [r0, #16]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1e4      	bne.n	8002e6a <UART_Transmit_IT+0x16>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002ea0:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ea2:	881b      	ldrh	r3, [r3, #0]
 8002ea4:	6802      	ldr	r2, [r0, #0]
 8002ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eaa:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8002eac:	6a03      	ldr	r3, [r0, #32]
 8002eae:	3302      	adds	r3, #2
 8002eb0:	6203      	str	r3, [r0, #32]
 8002eb2:	e7e0      	b.n	8002e76 <UART_Transmit_IT+0x22>

08002eb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002eb4:	b510      	push	{r4, lr}
 8002eb6:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002eb8:	6802      	ldr	r2, [r0, #0]
 8002eba:	6913      	ldr	r3, [r2, #16]
 8002ebc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002ec0:	68c1      	ldr	r1, [r0, #12]
 8002ec2:	430b      	orrs	r3, r1
 8002ec4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ec6:	6883      	ldr	r3, [r0, #8]
 8002ec8:	6902      	ldr	r2, [r0, #16]
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	6943      	ldr	r3, [r0, #20]
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	69c3      	ldr	r3, [r0, #28]
 8002ed2:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002ed4:	6801      	ldr	r1, [r0, #0]
 8002ed6:	68cb      	ldr	r3, [r1, #12]
 8002ed8:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002edc:	f023 030c 	bic.w	r3, r3, #12
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ee4:	6802      	ldr	r2, [r0, #0]
 8002ee6:	6953      	ldr	r3, [r2, #20]
 8002ee8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002eec:	6981      	ldr	r1, [r0, #24]
 8002eee:	430b      	orrs	r3, r1
 8002ef0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ef2:	6803      	ldr	r3, [r0, #0]
 8002ef4:	4a31      	ldr	r2, [pc, #196]	@ (8002fbc <UART_SetConfig+0x108>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d006      	beq.n	8002f08 <UART_SetConfig+0x54>
 8002efa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d002      	beq.n	8002f08 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f02:	f7ff fc29 	bl	8002758 <HAL_RCC_GetPCLK1Freq>
 8002f06:	e001      	b.n	8002f0c <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f08:	f7ff fc36 	bl	8002778 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f0c:	69e3      	ldr	r3, [r4, #28]
 8002f0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f12:	d029      	beq.n	8002f68 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f14:	2100      	movs	r1, #0
 8002f16:	1803      	adds	r3, r0, r0
 8002f18:	4149      	adcs	r1, r1
 8002f1a:	181b      	adds	r3, r3, r0
 8002f1c:	f141 0100 	adc.w	r1, r1, #0
 8002f20:	00c9      	lsls	r1, r1, #3
 8002f22:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	1818      	adds	r0, r3, r0
 8002f2a:	6863      	ldr	r3, [r4, #4]
 8002f2c:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002f30:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8002f34:	f141 0100 	adc.w	r1, r1, #0
 8002f38:	f7fd f9aa 	bl	8000290 <__aeabi_uldivmod>
 8002f3c:	4a20      	ldr	r2, [pc, #128]	@ (8002fc0 <UART_SetConfig+0x10c>)
 8002f3e:	fba2 3100 	umull	r3, r1, r2, r0
 8002f42:	0949      	lsrs	r1, r1, #5
 8002f44:	2364      	movs	r3, #100	@ 0x64
 8002f46:	fb03 0311 	mls	r3, r3, r1, r0
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	3332      	adds	r3, #50	@ 0x32
 8002f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f52:	095b      	lsrs	r3, r3, #5
 8002f54:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002f58:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002f5c:	f003 030f 	and.w	r3, r3, #15
 8002f60:	6821      	ldr	r1, [r4, #0]
 8002f62:	4413      	add	r3, r2
 8002f64:	608b      	str	r3, [r1, #8]
  }
}
 8002f66:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f68:	2300      	movs	r3, #0
 8002f6a:	1802      	adds	r2, r0, r0
 8002f6c:	eb43 0103 	adc.w	r1, r3, r3
 8002f70:	1812      	adds	r2, r2, r0
 8002f72:	f141 0100 	adc.w	r1, r1, #0
 8002f76:	00c9      	lsls	r1, r1, #3
 8002f78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f7c:	00d2      	lsls	r2, r2, #3
 8002f7e:	1810      	adds	r0, r2, r0
 8002f80:	f141 0100 	adc.w	r1, r1, #0
 8002f84:	6862      	ldr	r2, [r4, #4]
 8002f86:	1892      	adds	r2, r2, r2
 8002f88:	415b      	adcs	r3, r3
 8002f8a:	f7fd f981 	bl	8000290 <__aeabi_uldivmod>
 8002f8e:	4a0c      	ldr	r2, [pc, #48]	@ (8002fc0 <UART_SetConfig+0x10c>)
 8002f90:	fba2 3100 	umull	r3, r1, r2, r0
 8002f94:	0949      	lsrs	r1, r1, #5
 8002f96:	2364      	movs	r3, #100	@ 0x64
 8002f98:	fb03 0311 	mls	r3, r3, r1, r0
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	3332      	adds	r3, #50	@ 0x32
 8002fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa4:	095b      	lsrs	r3, r3, #5
 8002fa6:	005a      	lsls	r2, r3, #1
 8002fa8:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8002fac:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	6821      	ldr	r1, [r4, #0]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	608b      	str	r3, [r1, #8]
 8002fba:	e7d4      	b.n	8002f66 <UART_SetConfig+0xb2>
 8002fbc:	40011000 	.word	0x40011000
 8002fc0:	51eb851f 	.word	0x51eb851f

08002fc4 <UART_WaitOnFlagUntilTimeout>:
{
 8002fc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	4605      	mov	r5, r0
 8002fcc:	460e      	mov	r6, r1
 8002fce:	4617      	mov	r7, r2
 8002fd0:	4699      	mov	r9, r3
 8002fd2:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fd6:	682b      	ldr	r3, [r5, #0]
 8002fd8:	681c      	ldr	r4, [r3, #0]
 8002fda:	ea36 0404 	bics.w	r4, r6, r4
 8002fde:	bf0c      	ite	eq
 8002fe0:	2401      	moveq	r4, #1
 8002fe2:	2400      	movne	r4, #0
 8002fe4:	42bc      	cmp	r4, r7
 8002fe6:	d128      	bne.n	800303a <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8002fe8:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002fec:	d0f3      	beq.n	8002fd6 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fee:	f7fe fad7 	bl	80015a0 <HAL_GetTick>
 8002ff2:	eba0 0009 	sub.w	r0, r0, r9
 8002ff6:	4540      	cmp	r0, r8
 8002ff8:	d823      	bhi.n	8003042 <UART_WaitOnFlagUntilTimeout+0x7e>
 8002ffa:	f1b8 0f00 	cmp.w	r8, #0
 8002ffe:	d022      	beq.n	8003046 <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003000:	682b      	ldr	r3, [r5, #0]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	f012 0f04 	tst.w	r2, #4
 8003008:	d0e5      	beq.n	8002fd6 <UART_WaitOnFlagUntilTimeout+0x12>
 800300a:	2e80      	cmp	r6, #128	@ 0x80
 800300c:	d0e3      	beq.n	8002fd6 <UART_WaitOnFlagUntilTimeout+0x12>
 800300e:	2e40      	cmp	r6, #64	@ 0x40
 8003010:	d0e1      	beq.n	8002fd6 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	f012 0f08 	tst.w	r2, #8
 8003018:	d0dd      	beq.n	8002fd6 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 800301a:	2400      	movs	r4, #0
 800301c:	9401      	str	r4, [sp, #4]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	9201      	str	r2, [sp, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	9301      	str	r3, [sp, #4]
 8003026:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8003028:	4628      	mov	r0, r5
 800302a:	f7ff fee5 	bl	8002df8 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800302e:	2308      	movs	r3, #8
 8003030:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8003032:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8003036:	2001      	movs	r0, #1
 8003038:	e000      	b.n	800303c <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 800303a:	2000      	movs	r0, #0
}
 800303c:	b003      	add	sp, #12
 800303e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8003042:	2003      	movs	r0, #3
 8003044:	e7fa      	b.n	800303c <UART_WaitOnFlagUntilTimeout+0x78>
 8003046:	2003      	movs	r0, #3
 8003048:	e7f8      	b.n	800303c <UART_WaitOnFlagUntilTimeout+0x78>

0800304a <HAL_UART_Init>:
  if (huart == NULL)
 800304a:	b360      	cbz	r0, 80030a6 <HAL_UART_Init+0x5c>
{
 800304c:	b510      	push	{r4, lr}
 800304e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003050:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003054:	b313      	cbz	r3, 800309c <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8003056:	2324      	movs	r3, #36	@ 0x24
 8003058:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 800305c:	6822      	ldr	r2, [r4, #0]
 800305e:	68d3      	ldr	r3, [r2, #12]
 8003060:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003064:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003066:	4620      	mov	r0, r4
 8003068:	f7ff ff24 	bl	8002eb4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800306c:	6822      	ldr	r2, [r4, #0]
 800306e:	6913      	ldr	r3, [r2, #16]
 8003070:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8003074:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003076:	6822      	ldr	r2, [r4, #0]
 8003078:	6953      	ldr	r3, [r2, #20]
 800307a:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 800307e:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8003080:	6822      	ldr	r2, [r4, #0]
 8003082:	68d3      	ldr	r3, [r2, #12]
 8003084:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003088:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800308a:	2000      	movs	r0, #0
 800308c:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800308e:	2320      	movs	r3, #32
 8003090:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003094:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003098:	6360      	str	r0, [r4, #52]	@ 0x34
}
 800309a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800309c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 80030a0:	f7fe f940 	bl	8001324 <HAL_UART_MspInit>
 80030a4:	e7d7      	b.n	8003056 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80030a6:	2001      	movs	r0, #1
}
 80030a8:	4770      	bx	lr

080030aa <HAL_UART_Transmit>:
{
 80030aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80030b2:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b20      	cmp	r3, #32
 80030ba:	d156      	bne.n	800316a <HAL_UART_Transmit+0xc0>
 80030bc:	4604      	mov	r4, r0
 80030be:	460d      	mov	r5, r1
 80030c0:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80030c2:	2900      	cmp	r1, #0
 80030c4:	d055      	beq.n	8003172 <HAL_UART_Transmit+0xc8>
 80030c6:	b90a      	cbnz	r2, 80030cc <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 80030c8:	2001      	movs	r0, #1
 80030ca:	e04f      	b.n	800316c <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030cc:	2300      	movs	r3, #0
 80030ce:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030d0:	2321      	movs	r3, #33	@ 0x21
 80030d2:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 80030d6:	f7fe fa63 	bl	80015a0 <HAL_GetTick>
 80030da:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80030dc:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 80030e0:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030e4:	68a3      	ldr	r3, [r4, #8]
 80030e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030ea:	d002      	beq.n	80030f2 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 80030ec:	f04f 0800 	mov.w	r8, #0
 80030f0:	e014      	b.n	800311c <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030f2:	6923      	ldr	r3, [r4, #16]
 80030f4:	b32b      	cbz	r3, 8003142 <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 80030f6:	f04f 0800 	mov.w	r8, #0
 80030fa:	e00f      	b.n	800311c <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 80030fc:	2320      	movs	r3, #32
 80030fe:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8003102:	2003      	movs	r0, #3
 8003104:	e032      	b.n	800316c <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003106:	f838 3b02 	ldrh.w	r3, [r8], #2
 800310a:	6822      	ldr	r2, [r4, #0]
 800310c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003110:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8003112:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8003114:	b292      	uxth	r2, r2
 8003116:	3a01      	subs	r2, #1
 8003118:	b292      	uxth	r2, r2
 800311a:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800311c:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 800311e:	b29b      	uxth	r3, r3
 8003120:	b193      	cbz	r3, 8003148 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003122:	9600      	str	r6, [sp, #0]
 8003124:	463b      	mov	r3, r7
 8003126:	2200      	movs	r2, #0
 8003128:	2180      	movs	r1, #128	@ 0x80
 800312a:	4620      	mov	r0, r4
 800312c:	f7ff ff4a 	bl	8002fc4 <UART_WaitOnFlagUntilTimeout>
 8003130:	2800      	cmp	r0, #0
 8003132:	d1e3      	bne.n	80030fc <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8003134:	2d00      	cmp	r5, #0
 8003136:	d0e6      	beq.n	8003106 <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003138:	f815 2b01 	ldrb.w	r2, [r5], #1
 800313c:	6823      	ldr	r3, [r4, #0]
 800313e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003140:	e7e7      	b.n	8003112 <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8003142:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8003144:	2500      	movs	r5, #0
 8003146:	e7e9      	b.n	800311c <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003148:	9600      	str	r6, [sp, #0]
 800314a:	463b      	mov	r3, r7
 800314c:	2200      	movs	r2, #0
 800314e:	2140      	movs	r1, #64	@ 0x40
 8003150:	4620      	mov	r0, r4
 8003152:	f7ff ff37 	bl	8002fc4 <UART_WaitOnFlagUntilTimeout>
 8003156:	b918      	cbnz	r0, 8003160 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8003158:	2320      	movs	r3, #32
 800315a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 800315e:	e005      	b.n	800316c <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8003160:	2320      	movs	r3, #32
 8003162:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8003166:	2003      	movs	r0, #3
 8003168:	e000      	b.n	800316c <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 800316a:	2002      	movs	r0, #2
}
 800316c:	b002      	add	sp, #8
 800316e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8003172:	2001      	movs	r0, #1
 8003174:	e7fa      	b.n	800316c <HAL_UART_Transmit+0xc2>

08003176 <HAL_UART_TxCpltCallback>:
}
 8003176:	4770      	bx	lr

08003178 <UART_EndTransmit_IT>:
{
 8003178:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800317a:	6801      	ldr	r1, [r0, #0]
 800317c:	68ca      	ldr	r2, [r1, #12]
 800317e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003182:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003184:	2220      	movs	r2, #32
 8003186:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 800318a:	f7ff fff4 	bl	8003176 <HAL_UART_TxCpltCallback>
}
 800318e:	2000      	movs	r0, #0
 8003190:	bd08      	pop	{r3, pc}

08003192 <HAL_UART_ErrorCallback>:
}
 8003192:	4770      	bx	lr

08003194 <UART_DMAAbortOnError>:
{
 8003194:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003196:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 8003198:	2300      	movs	r3, #0
 800319a:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800319c:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 800319e:	f7ff fff8 	bl	8003192 <HAL_UART_ErrorCallback>
}
 80031a2:	bd08      	pop	{r3, pc}

080031a4 <HAL_UARTEx_RxEventCallback>:
}
 80031a4:	4770      	bx	lr

080031a6 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031a6:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b22      	cmp	r3, #34	@ 0x22
 80031ae:	d169      	bne.n	8003284 <UART_Receive_IT+0xde>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031b0:	6883      	ldr	r3, [r0, #8]
 80031b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031b6:	d04f      	beq.n	8003258 <UART_Receive_IT+0xb2>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80031b8:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031be:	d004      	beq.n	80031ca <UART_Receive_IT+0x24>
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d156      	bne.n	8003272 <UART_Receive_IT+0xcc>
 80031c4:	6903      	ldr	r3, [r0, #16]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d153      	bne.n	8003272 <UART_Receive_IT+0xcc>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031ca:	6803      	ldr	r3, [r0, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 80031d0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80031d2:	3301      	adds	r3, #1
 80031d4:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 80031d6:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 80031d8:	b29b      	uxth	r3, r3
 80031da:	3b01      	subs	r3, #1
 80031dc:	b29b      	uxth	r3, r3
 80031de:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d151      	bne.n	8003288 <UART_Receive_IT+0xe2>
{
 80031e4:	b500      	push	{lr}
 80031e6:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80031e8:	6802      	ldr	r2, [r0, #0]
 80031ea:	68d3      	ldr	r3, [r2, #12]
 80031ec:	f023 0320 	bic.w	r3, r3, #32
 80031f0:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80031f2:	6802      	ldr	r2, [r0, #0]
 80031f4:	68d3      	ldr	r3, [r2, #12]
 80031f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031fa:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80031fc:	6802      	ldr	r2, [r0, #0]
 80031fe:	6953      	ldr	r3, [r2, #20]
 8003200:	f023 0301 	bic.w	r3, r3, #1
 8003204:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003206:	2320      	movs	r3, #32
 8003208:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800320c:	2300      	movs	r3, #0
 800320e:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003210:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003212:	2b01      	cmp	r3, #1
 8003214:	d133      	bne.n	800327e <UART_Receive_IT+0xd8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003216:	2300      	movs	r3, #0
 8003218:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800321a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321c:	f102 030c 	add.w	r3, r2, #12
 8003220:	e853 3f00 	ldrex	r3, [r3]
 8003224:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003228:	320c      	adds	r2, #12
 800322a:	e842 3100 	strex	r1, r3, [r2]
 800322e:	2900      	cmp	r1, #0
 8003230:	d1f3      	bne.n	800321a <UART_Receive_IT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003232:	6803      	ldr	r3, [r0, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	f012 0f10 	tst.w	r2, #16
 800323a:	d006      	beq.n	800324a <UART_Receive_IT+0xa4>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800323c:	2200      	movs	r2, #0
 800323e:	9201      	str	r2, [sp, #4]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	9201      	str	r2, [sp, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	9301      	str	r3, [sp, #4]
 8003248:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800324a:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800324c:	f7ff ffaa 	bl	80031a4 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8003250:	2000      	movs	r0, #0
}
 8003252:	b003      	add	sp, #12
 8003254:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003258:	6902      	ldr	r2, [r0, #16]
 800325a:	2a00      	cmp	r2, #0
 800325c:	d1ac      	bne.n	80031b8 <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800325e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003260:	6803      	ldr	r3, [r0, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003268:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800326a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800326c:	3302      	adds	r3, #2
 800326e:	6283      	str	r3, [r0, #40]	@ 0x28
 8003270:	e7b1      	b.n	80031d6 <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003272:	6803      	ldr	r3, [r0, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800327a:	7013      	strb	r3, [r2, #0]
 800327c:	e7a8      	b.n	80031d0 <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 800327e:	f7fd fa51 	bl	8000724 <HAL_UART_RxCpltCallback>
 8003282:	e7e5      	b.n	8003250 <UART_Receive_IT+0xaa>
    return HAL_BUSY;
 8003284:	2002      	movs	r0, #2
 8003286:	4770      	bx	lr
    return HAL_OK;
 8003288:	2000      	movs	r0, #0
}
 800328a:	4770      	bx	lr

0800328c <HAL_UART_IRQHandler>:
{
 800328c:	b510      	push	{r4, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003292:	6802      	ldr	r2, [r0, #0]
 8003294:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003296:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003298:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 800329a:	f013 0f0f 	tst.w	r3, #15
 800329e:	d109      	bne.n	80032b4 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032a0:	f013 0f20 	tst.w	r3, #32
 80032a4:	d00c      	beq.n	80032c0 <HAL_UART_IRQHandler+0x34>
 80032a6:	f010 0f20 	tst.w	r0, #32
 80032aa:	d009      	beq.n	80032c0 <HAL_UART_IRQHandler+0x34>
      UART_Receive_IT(huart);
 80032ac:	4620      	mov	r0, r4
 80032ae:	f7ff ff7a 	bl	80031a6 <UART_Receive_IT>
      return;
 80032b2:	e016      	b.n	80032e2 <HAL_UART_IRQHandler+0x56>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80032b4:	f011 0101 	ands.w	r1, r1, #1
 80032b8:	d115      	bne.n	80032e6 <HAL_UART_IRQHandler+0x5a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80032ba:	f410 7f90 	tst.w	r0, #288	@ 0x120
 80032be:	d112      	bne.n	80032e6 <HAL_UART_IRQHandler+0x5a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032c0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80032c2:	2901      	cmp	r1, #1
 80032c4:	d079      	beq.n	80033ba <HAL_UART_IRQHandler+0x12e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032c6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80032ca:	d003      	beq.n	80032d4 <HAL_UART_IRQHandler+0x48>
 80032cc:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80032d0:	f040 8114 	bne.w	80034fc <HAL_UART_IRQHandler+0x270>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032d4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80032d8:	d003      	beq.n	80032e2 <HAL_UART_IRQHandler+0x56>
 80032da:	f010 0f40 	tst.w	r0, #64	@ 0x40
 80032de:	f040 8111 	bne.w	8003504 <HAL_UART_IRQHandler+0x278>
}
 80032e2:	b002      	add	sp, #8
 80032e4:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80032e6:	f013 0f01 	tst.w	r3, #1
 80032ea:	d006      	beq.n	80032fa <HAL_UART_IRQHandler+0x6e>
 80032ec:	f410 7f80 	tst.w	r0, #256	@ 0x100
 80032f0:	d003      	beq.n	80032fa <HAL_UART_IRQHandler+0x6e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032f2:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80032f4:	f042 0201 	orr.w	r2, r2, #1
 80032f8:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032fa:	f013 0f04 	tst.w	r3, #4
 80032fe:	d004      	beq.n	800330a <HAL_UART_IRQHandler+0x7e>
 8003300:	b119      	cbz	r1, 800330a <HAL_UART_IRQHandler+0x7e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003302:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003304:	f042 0202 	orr.w	r2, r2, #2
 8003308:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800330a:	f013 0f02 	tst.w	r3, #2
 800330e:	d004      	beq.n	800331a <HAL_UART_IRQHandler+0x8e>
 8003310:	b119      	cbz	r1, 800331a <HAL_UART_IRQHandler+0x8e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003312:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003314:	f042 0204 	orr.w	r2, r2, #4
 8003318:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800331a:	f013 0f08 	tst.w	r3, #8
 800331e:	d007      	beq.n	8003330 <HAL_UART_IRQHandler+0xa4>
 8003320:	f010 0f20 	tst.w	r0, #32
 8003324:	d100      	bne.n	8003328 <HAL_UART_IRQHandler+0x9c>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003326:	b119      	cbz	r1, 8003330 <HAL_UART_IRQHandler+0xa4>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003328:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800332a:	f042 0208 	orr.w	r2, r2, #8
 800332e:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003330:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003332:	2a00      	cmp	r2, #0
 8003334:	d0d5      	beq.n	80032e2 <HAL_UART_IRQHandler+0x56>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003336:	f013 0f20 	tst.w	r3, #32
 800333a:	d002      	beq.n	8003342 <HAL_UART_IRQHandler+0xb6>
 800333c:	f010 0f20 	tst.w	r0, #32
 8003340:	d129      	bne.n	8003396 <HAL_UART_IRQHandler+0x10a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003342:	6823      	ldr	r3, [r4, #0]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800334a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800334c:	f012 0f08 	tst.w	r2, #8
 8003350:	d100      	bne.n	8003354 <HAL_UART_IRQHandler+0xc8>
 8003352:	b363      	cbz	r3, 80033ae <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 8003354:	4620      	mov	r0, r4
 8003356:	f7ff fd4f 	bl	8002df8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800335a:	6823      	ldr	r3, [r4, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003362:	d020      	beq.n	80033a6 <HAL_UART_IRQHandler+0x11a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003364:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003366:	f102 0314 	add.w	r3, r2, #20
 800336a:	e853 3f00 	ldrex	r3, [r3]
 800336e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003372:	3214      	adds	r2, #20
 8003374:	e842 3100 	strex	r1, r3, [r2]
 8003378:	2900      	cmp	r1, #0
 800337a:	d1f3      	bne.n	8003364 <HAL_UART_IRQHandler+0xd8>
          if (huart->hdmarx != NULL)
 800337c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800337e:	b173      	cbz	r3, 800339e <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003380:	4a62      	ldr	r2, [pc, #392]	@ (800350c <HAL_UART_IRQHandler+0x280>)
 8003382:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003384:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003386:	f7fe fda4 	bl	8001ed2 <HAL_DMA_Abort_IT>
 800338a:	2800      	cmp	r0, #0
 800338c:	d0a9      	beq.n	80032e2 <HAL_UART_IRQHandler+0x56>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800338e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003390:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8003392:	4798      	blx	r3
 8003394:	e7a5      	b.n	80032e2 <HAL_UART_IRQHandler+0x56>
        UART_Receive_IT(huart);
 8003396:	4620      	mov	r0, r4
 8003398:	f7ff ff05 	bl	80031a6 <UART_Receive_IT>
 800339c:	e7d1      	b.n	8003342 <HAL_UART_IRQHandler+0xb6>
            HAL_UART_ErrorCallback(huart);
 800339e:	4620      	mov	r0, r4
 80033a0:	f7ff fef7 	bl	8003192 <HAL_UART_ErrorCallback>
 80033a4:	e79d      	b.n	80032e2 <HAL_UART_IRQHandler+0x56>
          HAL_UART_ErrorCallback(huart);
 80033a6:	4620      	mov	r0, r4
 80033a8:	f7ff fef3 	bl	8003192 <HAL_UART_ErrorCallback>
 80033ac:	e799      	b.n	80032e2 <HAL_UART_IRQHandler+0x56>
        HAL_UART_ErrorCallback(huart);
 80033ae:	4620      	mov	r0, r4
 80033b0:	f7ff feef 	bl	8003192 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033b4:	2300      	movs	r3, #0
 80033b6:	6463      	str	r3, [r4, #68]	@ 0x44
    return;
 80033b8:	e793      	b.n	80032e2 <HAL_UART_IRQHandler+0x56>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80033ba:	f013 0f10 	tst.w	r3, #16
 80033be:	d082      	beq.n	80032c6 <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80033c0:	f010 0f10 	tst.w	r0, #16
 80033c4:	f43f af7f 	beq.w	80032c6 <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033c8:	2300      	movs	r3, #0
 80033ca:	9301      	str	r3, [sp, #4]
 80033cc:	6813      	ldr	r3, [r2, #0]
 80033ce:	9301      	str	r3, [sp, #4]
 80033d0:	6853      	ldr	r3, [r2, #4]
 80033d2:	9301      	str	r3, [sp, #4]
 80033d4:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d6:	6953      	ldr	r3, [r2, #20]
 80033d8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80033dc:	d052      	beq.n	8003484 <HAL_UART_IRQHandler+0x1f8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033de:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80033e0:	6813      	ldr	r3, [r2, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f43f af7b 	beq.w	80032e2 <HAL_UART_IRQHandler+0x56>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033ec:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80033ee:	4299      	cmp	r1, r3
 80033f0:	f67f af77 	bls.w	80032e2 <HAL_UART_IRQHandler+0x56>
        huart->RxXferCount = nb_remaining_rx_data;
 80033f4:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033f6:	69d3      	ldr	r3, [r2, #28]
 80033f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033fc:	d037      	beq.n	800346e <HAL_UART_IRQHandler+0x1e2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033fe:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003400:	f102 030c 	add.w	r3, r2, #12
 8003404:	e853 3f00 	ldrex	r3, [r3]
 8003408:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340c:	320c      	adds	r2, #12
 800340e:	e842 3100 	strex	r1, r3, [r2]
 8003412:	2900      	cmp	r1, #0
 8003414:	d1f3      	bne.n	80033fe <HAL_UART_IRQHandler+0x172>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003416:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003418:	f102 0314 	add.w	r3, r2, #20
 800341c:	e853 3f00 	ldrex	r3, [r3]
 8003420:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003424:	3214      	adds	r2, #20
 8003426:	e842 3100 	strex	r1, r3, [r2]
 800342a:	2900      	cmp	r1, #0
 800342c:	d1f3      	bne.n	8003416 <HAL_UART_IRQHandler+0x18a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800342e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003430:	f102 0314 	add.w	r3, r2, #20
 8003434:	e853 3f00 	ldrex	r3, [r3]
 8003438:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343c:	3214      	adds	r2, #20
 800343e:	e842 3100 	strex	r1, r3, [r2]
 8003442:	2900      	cmp	r1, #0
 8003444:	d1f3      	bne.n	800342e <HAL_UART_IRQHandler+0x1a2>
          huart->RxState = HAL_UART_STATE_READY;
 8003446:	2320      	movs	r3, #32
 8003448:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800344c:	2300      	movs	r3, #0
 800344e:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003450:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003452:	f102 030c 	add.w	r3, r2, #12
 8003456:	e853 3f00 	ldrex	r3, [r3]
 800345a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800345e:	320c      	adds	r2, #12
 8003460:	e842 3100 	strex	r1, r3, [r2]
 8003464:	2900      	cmp	r1, #0
 8003466:	d1f3      	bne.n	8003450 <HAL_UART_IRQHandler+0x1c4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003468:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800346a:	f7fe fce8 	bl	8001e3e <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800346e:	2302      	movs	r3, #2
 8003470:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003472:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8003474:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8003476:	b29b      	uxth	r3, r3
 8003478:	1ac9      	subs	r1, r1, r3
 800347a:	b289      	uxth	r1, r1
 800347c:	4620      	mov	r0, r4
 800347e:	f7ff fe91 	bl	80031a4 <HAL_UARTEx_RxEventCallback>
      return;
 8003482:	e72e      	b.n	80032e2 <HAL_UART_IRQHandler+0x56>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003484:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8003486:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8003488:	b29b      	uxth	r3, r3
 800348a:	1ac9      	subs	r1, r1, r3
 800348c:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800348e:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8003490:	b29b      	uxth	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	f43f af25 	beq.w	80032e2 <HAL_UART_IRQHandler+0x56>
          && (nb_rx_data > 0U))
 8003498:	2900      	cmp	r1, #0
 800349a:	f43f af22 	beq.w	80032e2 <HAL_UART_IRQHandler+0x56>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800349e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a0:	f102 030c 	add.w	r3, r2, #12
 80034a4:	e853 3f00 	ldrex	r3, [r3]
 80034a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ac:	320c      	adds	r2, #12
 80034ae:	e842 3000 	strex	r0, r3, [r2]
 80034b2:	2800      	cmp	r0, #0
 80034b4:	d1f3      	bne.n	800349e <HAL_UART_IRQHandler+0x212>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b8:	f102 0314 	add.w	r3, r2, #20
 80034bc:	e853 3f00 	ldrex	r3, [r3]
 80034c0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c4:	3214      	adds	r2, #20
 80034c6:	e842 3000 	strex	r0, r3, [r2]
 80034ca:	2800      	cmp	r0, #0
 80034cc:	d1f3      	bne.n	80034b6 <HAL_UART_IRQHandler+0x22a>
        huart->RxState = HAL_UART_STATE_READY;
 80034ce:	2320      	movs	r3, #32
 80034d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034d4:	2300      	movs	r3, #0
 80034d6:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034d8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034da:	f102 030c 	add.w	r3, r2, #12
 80034de:	e853 3f00 	ldrex	r3, [r3]
 80034e2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e6:	320c      	adds	r2, #12
 80034e8:	e842 3000 	strex	r0, r3, [r2]
 80034ec:	2800      	cmp	r0, #0
 80034ee:	d1f3      	bne.n	80034d8 <HAL_UART_IRQHandler+0x24c>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034f0:	2302      	movs	r3, #2
 80034f2:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034f4:	4620      	mov	r0, r4
 80034f6:	f7ff fe55 	bl	80031a4 <HAL_UARTEx_RxEventCallback>
      return;
 80034fa:	e6f2      	b.n	80032e2 <HAL_UART_IRQHandler+0x56>
    UART_Transmit_IT(huart);
 80034fc:	4620      	mov	r0, r4
 80034fe:	f7ff fca9 	bl	8002e54 <UART_Transmit_IT>
    return;
 8003502:	e6ee      	b.n	80032e2 <HAL_UART_IRQHandler+0x56>
    UART_EndTransmit_IT(huart);
 8003504:	4620      	mov	r0, r4
 8003506:	f7ff fe37 	bl	8003178 <UART_EndTransmit_IT>
    return;
 800350a:	e6ea      	b.n	80032e2 <HAL_UART_IRQHandler+0x56>
 800350c:	08003195 	.word	0x08003195

08003510 <UART_Start_Receive_IT>:
  huart->pRxBuffPtr = pData;
 8003510:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003512:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003514:	85c2      	strh	r2, [r0, #46]	@ 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003516:	2300      	movs	r3, #0
 8003518:	6443      	str	r3, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800351a:	2322      	movs	r3, #34	@ 0x22
 800351c:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003520:	6903      	ldr	r3, [r0, #16]
 8003522:	b123      	cbz	r3, 800352e <UART_Start_Receive_IT+0x1e>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003524:	6802      	ldr	r2, [r0, #0]
 8003526:	68d3      	ldr	r3, [r2, #12]
 8003528:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800352c:	60d3      	str	r3, [r2, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800352e:	6802      	ldr	r2, [r0, #0]
 8003530:	6953      	ldr	r3, [r2, #20]
 8003532:	f043 0301 	orr.w	r3, r3, #1
 8003536:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003538:	6802      	ldr	r2, [r0, #0]
 800353a:	68d3      	ldr	r3, [r2, #12]
 800353c:	f043 0320 	orr.w	r3, r3, #32
 8003540:	60d3      	str	r3, [r2, #12]
}
 8003542:	2000      	movs	r0, #0
 8003544:	4770      	bx	lr

08003546 <HAL_UART_Receive_IT>:
{
 8003546:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8003548:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b20      	cmp	r3, #32
 8003550:	d108      	bne.n	8003564 <HAL_UART_Receive_IT+0x1e>
    if ((pData == NULL) || (Size == 0U))
 8003552:	b149      	cbz	r1, 8003568 <HAL_UART_Receive_IT+0x22>
 8003554:	b90a      	cbnz	r2, 800355a <HAL_UART_Receive_IT+0x14>
      return HAL_ERROR;
 8003556:	2001      	movs	r0, #1
}
 8003558:	bd08      	pop	{r3, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800355a:	2300      	movs	r3, #0
 800355c:	6303      	str	r3, [r0, #48]	@ 0x30
    return (UART_Start_Receive_IT(huart, pData, Size));
 800355e:	f7ff ffd7 	bl	8003510 <UART_Start_Receive_IT>
 8003562:	e7f9      	b.n	8003558 <HAL_UART_Receive_IT+0x12>
    return HAL_BUSY;
 8003564:	2002      	movs	r0, #2
 8003566:	e7f7      	b.n	8003558 <HAL_UART_Receive_IT+0x12>
      return HAL_ERROR;
 8003568:	2001      	movs	r0, #1
 800356a:	e7f5      	b.n	8003558 <HAL_UART_Receive_IT+0x12>

0800356c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800356c:	b410      	push	{r4}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800356e:	680b      	ldr	r3, [r1, #0]
 8003570:	b9db      	cbnz	r3, 80035aa <FMC_SDRAM_Init+0x3e>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8003572:	6802      	ldr	r2, [r0, #0]
 8003574:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 8003578:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800357c:	684b      	ldr	r3, [r1, #4]
 800357e:	688c      	ldr	r4, [r1, #8]
 8003580:	4323      	orrs	r3, r4
 8003582:	68cc      	ldr	r4, [r1, #12]
 8003584:	4323      	orrs	r3, r4
 8003586:	690c      	ldr	r4, [r1, #16]
 8003588:	4323      	orrs	r3, r4
 800358a:	694c      	ldr	r4, [r1, #20]
 800358c:	4323      	orrs	r3, r4
 800358e:	698c      	ldr	r4, [r1, #24]
 8003590:	4323      	orrs	r3, r4
 8003592:	69cc      	ldr	r4, [r1, #28]
 8003594:	4323      	orrs	r3, r4
 8003596:	6a0c      	ldr	r4, [r1, #32]
 8003598:	4323      	orrs	r3, r4
 800359a:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800359c:	430b      	orrs	r3, r1
 800359e:	431a      	orrs	r2, r3
 80035a0:	6002      	str	r2, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 80035a2:	2000      	movs	r0, #0
 80035a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80035a8:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80035aa:	6803      	ldr	r3, [r0, #0]
 80035ac:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 80035b0:	69ca      	ldr	r2, [r1, #28]
 80035b2:	6a0c      	ldr	r4, [r1, #32]
 80035b4:	4322      	orrs	r2, r4
 80035b6:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 80035b8:	4322      	orrs	r2, r4
 80035ba:	4313      	orrs	r3, r2
 80035bc:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80035be:	6842      	ldr	r2, [r0, #4]
 80035c0:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 80035c4:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 80035c8:	684b      	ldr	r3, [r1, #4]
 80035ca:	688c      	ldr	r4, [r1, #8]
 80035cc:	4323      	orrs	r3, r4
 80035ce:	68cc      	ldr	r4, [r1, #12]
 80035d0:	4323      	orrs	r3, r4
 80035d2:	690c      	ldr	r4, [r1, #16]
 80035d4:	4323      	orrs	r3, r4
 80035d6:	694c      	ldr	r4, [r1, #20]
 80035d8:	4323      	orrs	r3, r4
 80035da:	6989      	ldr	r1, [r1, #24]
 80035dc:	430b      	orrs	r3, r1
 80035de:	431a      	orrs	r2, r3
 80035e0:	6042      	str	r2, [r0, #4]
 80035e2:	e7de      	b.n	80035a2 <FMC_SDRAM_Init+0x36>

080035e4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80035e4:	b410      	push	{r4}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80035e6:	bb3a      	cbnz	r2, 8003638 <FMC_SDRAM_Timing_Init+0x54>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80035e8:	6882      	ldr	r2, [r0, #8]
 80035ea:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 80035ee:	680b      	ldr	r3, [r1, #0]
 80035f0:	3b01      	subs	r3, #1
 80035f2:	684c      	ldr	r4, [r1, #4]
 80035f4:	f104 3cff 	add.w	ip, r4, #4294967295
 80035f8:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 80035fc:	688c      	ldr	r4, [r1, #8]
 80035fe:	f104 3cff 	add.w	ip, r4, #4294967295
 8003602:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8003606:	68cc      	ldr	r4, [r1, #12]
 8003608:	f104 3cff 	add.w	ip, r4, #4294967295
 800360c:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 8003610:	690c      	ldr	r4, [r1, #16]
 8003612:	f104 3cff 	add.w	ip, r4, #4294967295
 8003616:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800361a:	694c      	ldr	r4, [r1, #20]
 800361c:	f104 3cff 	add.w	ip, r4, #4294967295
 8003620:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 8003624:	6989      	ldr	r1, [r1, #24]
 8003626:	3901      	subs	r1, #1
 8003628:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800362c:	4313      	orrs	r3, r2
 800362e:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8003630:	2000      	movs	r0, #0
 8003632:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003636:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8003638:	6883      	ldr	r3, [r0, #8]
 800363a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800363e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003642:	68ca      	ldr	r2, [r1, #12]
 8003644:	f102 3cff 	add.w	ip, r2, #4294967295
 8003648:	694a      	ldr	r2, [r1, #20]
 800364a:	3a01      	subs	r2, #1
 800364c:	0512      	lsls	r2, r2, #20
 800364e:	ea42 320c 	orr.w	r2, r2, ip, lsl #12
 8003652:	4313      	orrs	r3, r2
 8003654:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8003656:	68c2      	ldr	r2, [r0, #12]
 8003658:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800365c:	680b      	ldr	r3, [r1, #0]
 800365e:	3b01      	subs	r3, #1
 8003660:	684c      	ldr	r4, [r1, #4]
 8003662:	f104 3cff 	add.w	ip, r4, #4294967295
 8003666:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 800366a:	688c      	ldr	r4, [r1, #8]
 800366c:	f104 3cff 	add.w	ip, r4, #4294967295
 8003670:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8003674:	690c      	ldr	r4, [r1, #16]
 8003676:	f104 3cff 	add.w	ip, r4, #4294967295
 800367a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800367e:	6989      	ldr	r1, [r1, #24]
 8003680:	3901      	subs	r1, #1
 8003682:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003686:	4313      	orrs	r3, r2
 8003688:	60c3      	str	r3, [r0, #12]
 800368a:	e7d1      	b.n	8003630 <FMC_SDRAM_Timing_Init+0x4c>

0800368c <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800368c:	4b01      	ldr	r3, [pc, #4]	@ (8003694 <LL_SetSystemCoreClock+0x8>)
 800368e:	6018      	str	r0, [r3, #0]
}
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	20000000 	.word	0x20000000

08003698 <_vsniprintf_r>:
 8003698:	b530      	push	{r4, r5, lr}
 800369a:	4614      	mov	r4, r2
 800369c:	2c00      	cmp	r4, #0
 800369e:	b09b      	sub	sp, #108	@ 0x6c
 80036a0:	4605      	mov	r5, r0
 80036a2:	461a      	mov	r2, r3
 80036a4:	da05      	bge.n	80036b2 <_vsniprintf_r+0x1a>
 80036a6:	238b      	movs	r3, #139	@ 0x8b
 80036a8:	6003      	str	r3, [r0, #0]
 80036aa:	f04f 30ff 	mov.w	r0, #4294967295
 80036ae:	b01b      	add	sp, #108	@ 0x6c
 80036b0:	bd30      	pop	{r4, r5, pc}
 80036b2:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80036b6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80036ba:	bf14      	ite	ne
 80036bc:	f104 33ff 	addne.w	r3, r4, #4294967295
 80036c0:	4623      	moveq	r3, r4
 80036c2:	9302      	str	r3, [sp, #8]
 80036c4:	9305      	str	r3, [sp, #20]
 80036c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80036ca:	9100      	str	r1, [sp, #0]
 80036cc:	9104      	str	r1, [sp, #16]
 80036ce:	f8ad 300e 	strh.w	r3, [sp, #14]
 80036d2:	4669      	mov	r1, sp
 80036d4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80036d6:	f000 f9a1 	bl	8003a1c <_svfiprintf_r>
 80036da:	1c43      	adds	r3, r0, #1
 80036dc:	bfbc      	itt	lt
 80036de:	238b      	movlt	r3, #139	@ 0x8b
 80036e0:	602b      	strlt	r3, [r5, #0]
 80036e2:	2c00      	cmp	r4, #0
 80036e4:	d0e3      	beq.n	80036ae <_vsniprintf_r+0x16>
 80036e6:	9b00      	ldr	r3, [sp, #0]
 80036e8:	2200      	movs	r2, #0
 80036ea:	701a      	strb	r2, [r3, #0]
 80036ec:	e7df      	b.n	80036ae <_vsniprintf_r+0x16>
	...

080036f0 <vsniprintf>:
 80036f0:	b507      	push	{r0, r1, r2, lr}
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	4613      	mov	r3, r2
 80036f6:	460a      	mov	r2, r1
 80036f8:	4601      	mov	r1, r0
 80036fa:	4803      	ldr	r0, [pc, #12]	@ (8003708 <vsniprintf+0x18>)
 80036fc:	6800      	ldr	r0, [r0, #0]
 80036fe:	f7ff ffcb 	bl	8003698 <_vsniprintf_r>
 8003702:	b003      	add	sp, #12
 8003704:	f85d fb04 	ldr.w	pc, [sp], #4
 8003708:	2000000c 	.word	0x2000000c

0800370c <memset>:
 800370c:	4402      	add	r2, r0
 800370e:	4603      	mov	r3, r0
 8003710:	4293      	cmp	r3, r2
 8003712:	d100      	bne.n	8003716 <memset+0xa>
 8003714:	4770      	bx	lr
 8003716:	f803 1b01 	strb.w	r1, [r3], #1
 800371a:	e7f9      	b.n	8003710 <memset+0x4>

0800371c <__errno>:
 800371c:	4b01      	ldr	r3, [pc, #4]	@ (8003724 <__errno+0x8>)
 800371e:	6818      	ldr	r0, [r3, #0]
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	2000000c 	.word	0x2000000c

08003728 <__libc_init_array>:
 8003728:	b570      	push	{r4, r5, r6, lr}
 800372a:	4d0d      	ldr	r5, [pc, #52]	@ (8003760 <__libc_init_array+0x38>)
 800372c:	4c0d      	ldr	r4, [pc, #52]	@ (8003764 <__libc_init_array+0x3c>)
 800372e:	1b64      	subs	r4, r4, r5
 8003730:	10a4      	asrs	r4, r4, #2
 8003732:	2600      	movs	r6, #0
 8003734:	42a6      	cmp	r6, r4
 8003736:	d109      	bne.n	800374c <__libc_init_array+0x24>
 8003738:	4d0b      	ldr	r5, [pc, #44]	@ (8003768 <__libc_init_array+0x40>)
 800373a:	4c0c      	ldr	r4, [pc, #48]	@ (800376c <__libc_init_array+0x44>)
 800373c:	f000 fc66 	bl	800400c <_init>
 8003740:	1b64      	subs	r4, r4, r5
 8003742:	10a4      	asrs	r4, r4, #2
 8003744:	2600      	movs	r6, #0
 8003746:	42a6      	cmp	r6, r4
 8003748:	d105      	bne.n	8003756 <__libc_init_array+0x2e>
 800374a:	bd70      	pop	{r4, r5, r6, pc}
 800374c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003750:	4798      	blx	r3
 8003752:	3601      	adds	r6, #1
 8003754:	e7ee      	b.n	8003734 <__libc_init_array+0xc>
 8003756:	f855 3b04 	ldr.w	r3, [r5], #4
 800375a:	4798      	blx	r3
 800375c:	3601      	adds	r6, #1
 800375e:	e7f2      	b.n	8003746 <__libc_init_array+0x1e>
 8003760:	08004094 	.word	0x08004094
 8003764:	08004094 	.word	0x08004094
 8003768:	08004094 	.word	0x08004094
 800376c:	08004098 	.word	0x08004098

08003770 <__retarget_lock_acquire_recursive>:
 8003770:	4770      	bx	lr

08003772 <__retarget_lock_release_recursive>:
 8003772:	4770      	bx	lr

08003774 <_free_r>:
 8003774:	b538      	push	{r3, r4, r5, lr}
 8003776:	4605      	mov	r5, r0
 8003778:	2900      	cmp	r1, #0
 800377a:	d041      	beq.n	8003800 <_free_r+0x8c>
 800377c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003780:	1f0c      	subs	r4, r1, #4
 8003782:	2b00      	cmp	r3, #0
 8003784:	bfb8      	it	lt
 8003786:	18e4      	addlt	r4, r4, r3
 8003788:	f000 f8e0 	bl	800394c <__malloc_lock>
 800378c:	4a1d      	ldr	r2, [pc, #116]	@ (8003804 <_free_r+0x90>)
 800378e:	6813      	ldr	r3, [r2, #0]
 8003790:	b933      	cbnz	r3, 80037a0 <_free_r+0x2c>
 8003792:	6063      	str	r3, [r4, #4]
 8003794:	6014      	str	r4, [r2, #0]
 8003796:	4628      	mov	r0, r5
 8003798:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800379c:	f000 b8dc 	b.w	8003958 <__malloc_unlock>
 80037a0:	42a3      	cmp	r3, r4
 80037a2:	d908      	bls.n	80037b6 <_free_r+0x42>
 80037a4:	6820      	ldr	r0, [r4, #0]
 80037a6:	1821      	adds	r1, r4, r0
 80037a8:	428b      	cmp	r3, r1
 80037aa:	bf01      	itttt	eq
 80037ac:	6819      	ldreq	r1, [r3, #0]
 80037ae:	685b      	ldreq	r3, [r3, #4]
 80037b0:	1809      	addeq	r1, r1, r0
 80037b2:	6021      	streq	r1, [r4, #0]
 80037b4:	e7ed      	b.n	8003792 <_free_r+0x1e>
 80037b6:	461a      	mov	r2, r3
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	b10b      	cbz	r3, 80037c0 <_free_r+0x4c>
 80037bc:	42a3      	cmp	r3, r4
 80037be:	d9fa      	bls.n	80037b6 <_free_r+0x42>
 80037c0:	6811      	ldr	r1, [r2, #0]
 80037c2:	1850      	adds	r0, r2, r1
 80037c4:	42a0      	cmp	r0, r4
 80037c6:	d10b      	bne.n	80037e0 <_free_r+0x6c>
 80037c8:	6820      	ldr	r0, [r4, #0]
 80037ca:	4401      	add	r1, r0
 80037cc:	1850      	adds	r0, r2, r1
 80037ce:	4283      	cmp	r3, r0
 80037d0:	6011      	str	r1, [r2, #0]
 80037d2:	d1e0      	bne.n	8003796 <_free_r+0x22>
 80037d4:	6818      	ldr	r0, [r3, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	6053      	str	r3, [r2, #4]
 80037da:	4408      	add	r0, r1
 80037dc:	6010      	str	r0, [r2, #0]
 80037de:	e7da      	b.n	8003796 <_free_r+0x22>
 80037e0:	d902      	bls.n	80037e8 <_free_r+0x74>
 80037e2:	230c      	movs	r3, #12
 80037e4:	602b      	str	r3, [r5, #0]
 80037e6:	e7d6      	b.n	8003796 <_free_r+0x22>
 80037e8:	6820      	ldr	r0, [r4, #0]
 80037ea:	1821      	adds	r1, r4, r0
 80037ec:	428b      	cmp	r3, r1
 80037ee:	bf04      	itt	eq
 80037f0:	6819      	ldreq	r1, [r3, #0]
 80037f2:	685b      	ldreq	r3, [r3, #4]
 80037f4:	6063      	str	r3, [r4, #4]
 80037f6:	bf04      	itt	eq
 80037f8:	1809      	addeq	r1, r1, r0
 80037fa:	6021      	streq	r1, [r4, #0]
 80037fc:	6054      	str	r4, [r2, #4]
 80037fe:	e7ca      	b.n	8003796 <_free_r+0x22>
 8003800:	bd38      	pop	{r3, r4, r5, pc}
 8003802:	bf00      	nop
 8003804:	200005e8 	.word	0x200005e8

08003808 <sbrk_aligned>:
 8003808:	b570      	push	{r4, r5, r6, lr}
 800380a:	4e0f      	ldr	r6, [pc, #60]	@ (8003848 <sbrk_aligned+0x40>)
 800380c:	460c      	mov	r4, r1
 800380e:	6831      	ldr	r1, [r6, #0]
 8003810:	4605      	mov	r5, r0
 8003812:	b911      	cbnz	r1, 800381a <sbrk_aligned+0x12>
 8003814:	f000 fba6 	bl	8003f64 <_sbrk_r>
 8003818:	6030      	str	r0, [r6, #0]
 800381a:	4621      	mov	r1, r4
 800381c:	4628      	mov	r0, r5
 800381e:	f000 fba1 	bl	8003f64 <_sbrk_r>
 8003822:	1c43      	adds	r3, r0, #1
 8003824:	d103      	bne.n	800382e <sbrk_aligned+0x26>
 8003826:	f04f 34ff 	mov.w	r4, #4294967295
 800382a:	4620      	mov	r0, r4
 800382c:	bd70      	pop	{r4, r5, r6, pc}
 800382e:	1cc4      	adds	r4, r0, #3
 8003830:	f024 0403 	bic.w	r4, r4, #3
 8003834:	42a0      	cmp	r0, r4
 8003836:	d0f8      	beq.n	800382a <sbrk_aligned+0x22>
 8003838:	1a21      	subs	r1, r4, r0
 800383a:	4628      	mov	r0, r5
 800383c:	f000 fb92 	bl	8003f64 <_sbrk_r>
 8003840:	3001      	adds	r0, #1
 8003842:	d1f2      	bne.n	800382a <sbrk_aligned+0x22>
 8003844:	e7ef      	b.n	8003826 <sbrk_aligned+0x1e>
 8003846:	bf00      	nop
 8003848:	200005e4 	.word	0x200005e4

0800384c <_malloc_r>:
 800384c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003850:	1ccd      	adds	r5, r1, #3
 8003852:	f025 0503 	bic.w	r5, r5, #3
 8003856:	3508      	adds	r5, #8
 8003858:	2d0c      	cmp	r5, #12
 800385a:	bf38      	it	cc
 800385c:	250c      	movcc	r5, #12
 800385e:	2d00      	cmp	r5, #0
 8003860:	4606      	mov	r6, r0
 8003862:	db01      	blt.n	8003868 <_malloc_r+0x1c>
 8003864:	42a9      	cmp	r1, r5
 8003866:	d904      	bls.n	8003872 <_malloc_r+0x26>
 8003868:	230c      	movs	r3, #12
 800386a:	6033      	str	r3, [r6, #0]
 800386c:	2000      	movs	r0, #0
 800386e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003872:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003948 <_malloc_r+0xfc>
 8003876:	f000 f869 	bl	800394c <__malloc_lock>
 800387a:	f8d8 3000 	ldr.w	r3, [r8]
 800387e:	461c      	mov	r4, r3
 8003880:	bb44      	cbnz	r4, 80038d4 <_malloc_r+0x88>
 8003882:	4629      	mov	r1, r5
 8003884:	4630      	mov	r0, r6
 8003886:	f7ff ffbf 	bl	8003808 <sbrk_aligned>
 800388a:	1c43      	adds	r3, r0, #1
 800388c:	4604      	mov	r4, r0
 800388e:	d158      	bne.n	8003942 <_malloc_r+0xf6>
 8003890:	f8d8 4000 	ldr.w	r4, [r8]
 8003894:	4627      	mov	r7, r4
 8003896:	2f00      	cmp	r7, #0
 8003898:	d143      	bne.n	8003922 <_malloc_r+0xd6>
 800389a:	2c00      	cmp	r4, #0
 800389c:	d04b      	beq.n	8003936 <_malloc_r+0xea>
 800389e:	6823      	ldr	r3, [r4, #0]
 80038a0:	4639      	mov	r1, r7
 80038a2:	4630      	mov	r0, r6
 80038a4:	eb04 0903 	add.w	r9, r4, r3
 80038a8:	f000 fb5c 	bl	8003f64 <_sbrk_r>
 80038ac:	4581      	cmp	r9, r0
 80038ae:	d142      	bne.n	8003936 <_malloc_r+0xea>
 80038b0:	6821      	ldr	r1, [r4, #0]
 80038b2:	1a6d      	subs	r5, r5, r1
 80038b4:	4629      	mov	r1, r5
 80038b6:	4630      	mov	r0, r6
 80038b8:	f7ff ffa6 	bl	8003808 <sbrk_aligned>
 80038bc:	3001      	adds	r0, #1
 80038be:	d03a      	beq.n	8003936 <_malloc_r+0xea>
 80038c0:	6823      	ldr	r3, [r4, #0]
 80038c2:	442b      	add	r3, r5
 80038c4:	6023      	str	r3, [r4, #0]
 80038c6:	f8d8 3000 	ldr.w	r3, [r8]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	bb62      	cbnz	r2, 8003928 <_malloc_r+0xdc>
 80038ce:	f8c8 7000 	str.w	r7, [r8]
 80038d2:	e00f      	b.n	80038f4 <_malloc_r+0xa8>
 80038d4:	6822      	ldr	r2, [r4, #0]
 80038d6:	1b52      	subs	r2, r2, r5
 80038d8:	d420      	bmi.n	800391c <_malloc_r+0xd0>
 80038da:	2a0b      	cmp	r2, #11
 80038dc:	d917      	bls.n	800390e <_malloc_r+0xc2>
 80038de:	1961      	adds	r1, r4, r5
 80038e0:	42a3      	cmp	r3, r4
 80038e2:	6025      	str	r5, [r4, #0]
 80038e4:	bf18      	it	ne
 80038e6:	6059      	strne	r1, [r3, #4]
 80038e8:	6863      	ldr	r3, [r4, #4]
 80038ea:	bf08      	it	eq
 80038ec:	f8c8 1000 	streq.w	r1, [r8]
 80038f0:	5162      	str	r2, [r4, r5]
 80038f2:	604b      	str	r3, [r1, #4]
 80038f4:	4630      	mov	r0, r6
 80038f6:	f000 f82f 	bl	8003958 <__malloc_unlock>
 80038fa:	f104 000b 	add.w	r0, r4, #11
 80038fe:	1d23      	adds	r3, r4, #4
 8003900:	f020 0007 	bic.w	r0, r0, #7
 8003904:	1ac2      	subs	r2, r0, r3
 8003906:	bf1c      	itt	ne
 8003908:	1a1b      	subne	r3, r3, r0
 800390a:	50a3      	strne	r3, [r4, r2]
 800390c:	e7af      	b.n	800386e <_malloc_r+0x22>
 800390e:	6862      	ldr	r2, [r4, #4]
 8003910:	42a3      	cmp	r3, r4
 8003912:	bf0c      	ite	eq
 8003914:	f8c8 2000 	streq.w	r2, [r8]
 8003918:	605a      	strne	r2, [r3, #4]
 800391a:	e7eb      	b.n	80038f4 <_malloc_r+0xa8>
 800391c:	4623      	mov	r3, r4
 800391e:	6864      	ldr	r4, [r4, #4]
 8003920:	e7ae      	b.n	8003880 <_malloc_r+0x34>
 8003922:	463c      	mov	r4, r7
 8003924:	687f      	ldr	r7, [r7, #4]
 8003926:	e7b6      	b.n	8003896 <_malloc_r+0x4a>
 8003928:	461a      	mov	r2, r3
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	42a3      	cmp	r3, r4
 800392e:	d1fb      	bne.n	8003928 <_malloc_r+0xdc>
 8003930:	2300      	movs	r3, #0
 8003932:	6053      	str	r3, [r2, #4]
 8003934:	e7de      	b.n	80038f4 <_malloc_r+0xa8>
 8003936:	230c      	movs	r3, #12
 8003938:	6033      	str	r3, [r6, #0]
 800393a:	4630      	mov	r0, r6
 800393c:	f000 f80c 	bl	8003958 <__malloc_unlock>
 8003940:	e794      	b.n	800386c <_malloc_r+0x20>
 8003942:	6005      	str	r5, [r0, #0]
 8003944:	e7d6      	b.n	80038f4 <_malloc_r+0xa8>
 8003946:	bf00      	nop
 8003948:	200005e8 	.word	0x200005e8

0800394c <__malloc_lock>:
 800394c:	4801      	ldr	r0, [pc, #4]	@ (8003954 <__malloc_lock+0x8>)
 800394e:	f7ff bf0f 	b.w	8003770 <__retarget_lock_acquire_recursive>
 8003952:	bf00      	nop
 8003954:	200005e0 	.word	0x200005e0

08003958 <__malloc_unlock>:
 8003958:	4801      	ldr	r0, [pc, #4]	@ (8003960 <__malloc_unlock+0x8>)
 800395a:	f7ff bf0a 	b.w	8003772 <__retarget_lock_release_recursive>
 800395e:	bf00      	nop
 8003960:	200005e0 	.word	0x200005e0

08003964 <__ssputs_r>:
 8003964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003968:	688e      	ldr	r6, [r1, #8]
 800396a:	461f      	mov	r7, r3
 800396c:	42be      	cmp	r6, r7
 800396e:	680b      	ldr	r3, [r1, #0]
 8003970:	4682      	mov	sl, r0
 8003972:	460c      	mov	r4, r1
 8003974:	4690      	mov	r8, r2
 8003976:	d82d      	bhi.n	80039d4 <__ssputs_r+0x70>
 8003978:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800397c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003980:	d026      	beq.n	80039d0 <__ssputs_r+0x6c>
 8003982:	6965      	ldr	r5, [r4, #20]
 8003984:	6909      	ldr	r1, [r1, #16]
 8003986:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800398a:	eba3 0901 	sub.w	r9, r3, r1
 800398e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003992:	1c7b      	adds	r3, r7, #1
 8003994:	444b      	add	r3, r9
 8003996:	106d      	asrs	r5, r5, #1
 8003998:	429d      	cmp	r5, r3
 800399a:	bf38      	it	cc
 800399c:	461d      	movcc	r5, r3
 800399e:	0553      	lsls	r3, r2, #21
 80039a0:	d527      	bpl.n	80039f2 <__ssputs_r+0x8e>
 80039a2:	4629      	mov	r1, r5
 80039a4:	f7ff ff52 	bl	800384c <_malloc_r>
 80039a8:	4606      	mov	r6, r0
 80039aa:	b360      	cbz	r0, 8003a06 <__ssputs_r+0xa2>
 80039ac:	6921      	ldr	r1, [r4, #16]
 80039ae:	464a      	mov	r2, r9
 80039b0:	f000 fae8 	bl	8003f84 <memcpy>
 80039b4:	89a3      	ldrh	r3, [r4, #12]
 80039b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80039ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039be:	81a3      	strh	r3, [r4, #12]
 80039c0:	6126      	str	r6, [r4, #16]
 80039c2:	6165      	str	r5, [r4, #20]
 80039c4:	444e      	add	r6, r9
 80039c6:	eba5 0509 	sub.w	r5, r5, r9
 80039ca:	6026      	str	r6, [r4, #0]
 80039cc:	60a5      	str	r5, [r4, #8]
 80039ce:	463e      	mov	r6, r7
 80039d0:	42be      	cmp	r6, r7
 80039d2:	d900      	bls.n	80039d6 <__ssputs_r+0x72>
 80039d4:	463e      	mov	r6, r7
 80039d6:	6820      	ldr	r0, [r4, #0]
 80039d8:	4632      	mov	r2, r6
 80039da:	4641      	mov	r1, r8
 80039dc:	f000 faa8 	bl	8003f30 <memmove>
 80039e0:	68a3      	ldr	r3, [r4, #8]
 80039e2:	1b9b      	subs	r3, r3, r6
 80039e4:	60a3      	str	r3, [r4, #8]
 80039e6:	6823      	ldr	r3, [r4, #0]
 80039e8:	4433      	add	r3, r6
 80039ea:	6023      	str	r3, [r4, #0]
 80039ec:	2000      	movs	r0, #0
 80039ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039f2:	462a      	mov	r2, r5
 80039f4:	f000 fad4 	bl	8003fa0 <_realloc_r>
 80039f8:	4606      	mov	r6, r0
 80039fa:	2800      	cmp	r0, #0
 80039fc:	d1e0      	bne.n	80039c0 <__ssputs_r+0x5c>
 80039fe:	6921      	ldr	r1, [r4, #16]
 8003a00:	4650      	mov	r0, sl
 8003a02:	f7ff feb7 	bl	8003774 <_free_r>
 8003a06:	230c      	movs	r3, #12
 8003a08:	f8ca 3000 	str.w	r3, [sl]
 8003a0c:	89a3      	ldrh	r3, [r4, #12]
 8003a0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a12:	81a3      	strh	r3, [r4, #12]
 8003a14:	f04f 30ff 	mov.w	r0, #4294967295
 8003a18:	e7e9      	b.n	80039ee <__ssputs_r+0x8a>
	...

08003a1c <_svfiprintf_r>:
 8003a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a20:	4698      	mov	r8, r3
 8003a22:	898b      	ldrh	r3, [r1, #12]
 8003a24:	061b      	lsls	r3, r3, #24
 8003a26:	b09d      	sub	sp, #116	@ 0x74
 8003a28:	4607      	mov	r7, r0
 8003a2a:	460d      	mov	r5, r1
 8003a2c:	4614      	mov	r4, r2
 8003a2e:	d510      	bpl.n	8003a52 <_svfiprintf_r+0x36>
 8003a30:	690b      	ldr	r3, [r1, #16]
 8003a32:	b973      	cbnz	r3, 8003a52 <_svfiprintf_r+0x36>
 8003a34:	2140      	movs	r1, #64	@ 0x40
 8003a36:	f7ff ff09 	bl	800384c <_malloc_r>
 8003a3a:	6028      	str	r0, [r5, #0]
 8003a3c:	6128      	str	r0, [r5, #16]
 8003a3e:	b930      	cbnz	r0, 8003a4e <_svfiprintf_r+0x32>
 8003a40:	230c      	movs	r3, #12
 8003a42:	603b      	str	r3, [r7, #0]
 8003a44:	f04f 30ff 	mov.w	r0, #4294967295
 8003a48:	b01d      	add	sp, #116	@ 0x74
 8003a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a4e:	2340      	movs	r3, #64	@ 0x40
 8003a50:	616b      	str	r3, [r5, #20]
 8003a52:	2300      	movs	r3, #0
 8003a54:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a56:	2320      	movs	r3, #32
 8003a58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003a5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a60:	2330      	movs	r3, #48	@ 0x30
 8003a62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003c00 <_svfiprintf_r+0x1e4>
 8003a66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003a6a:	f04f 0901 	mov.w	r9, #1
 8003a6e:	4623      	mov	r3, r4
 8003a70:	469a      	mov	sl, r3
 8003a72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a76:	b10a      	cbz	r2, 8003a7c <_svfiprintf_r+0x60>
 8003a78:	2a25      	cmp	r2, #37	@ 0x25
 8003a7a:	d1f9      	bne.n	8003a70 <_svfiprintf_r+0x54>
 8003a7c:	ebba 0b04 	subs.w	fp, sl, r4
 8003a80:	d00b      	beq.n	8003a9a <_svfiprintf_r+0x7e>
 8003a82:	465b      	mov	r3, fp
 8003a84:	4622      	mov	r2, r4
 8003a86:	4629      	mov	r1, r5
 8003a88:	4638      	mov	r0, r7
 8003a8a:	f7ff ff6b 	bl	8003964 <__ssputs_r>
 8003a8e:	3001      	adds	r0, #1
 8003a90:	f000 80a7 	beq.w	8003be2 <_svfiprintf_r+0x1c6>
 8003a94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003a96:	445a      	add	r2, fp
 8003a98:	9209      	str	r2, [sp, #36]	@ 0x24
 8003a9a:	f89a 3000 	ldrb.w	r3, [sl]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 809f 	beq.w	8003be2 <_svfiprintf_r+0x1c6>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8003aaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003aae:	f10a 0a01 	add.w	sl, sl, #1
 8003ab2:	9304      	str	r3, [sp, #16]
 8003ab4:	9307      	str	r3, [sp, #28]
 8003ab6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003aba:	931a      	str	r3, [sp, #104]	@ 0x68
 8003abc:	4654      	mov	r4, sl
 8003abe:	2205      	movs	r2, #5
 8003ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ac4:	484e      	ldr	r0, [pc, #312]	@ (8003c00 <_svfiprintf_r+0x1e4>)
 8003ac6:	f7fc fb93 	bl	80001f0 <memchr>
 8003aca:	9a04      	ldr	r2, [sp, #16]
 8003acc:	b9d8      	cbnz	r0, 8003b06 <_svfiprintf_r+0xea>
 8003ace:	06d0      	lsls	r0, r2, #27
 8003ad0:	bf44      	itt	mi
 8003ad2:	2320      	movmi	r3, #32
 8003ad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ad8:	0711      	lsls	r1, r2, #28
 8003ada:	bf44      	itt	mi
 8003adc:	232b      	movmi	r3, #43	@ 0x2b
 8003ade:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ae2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ae6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ae8:	d015      	beq.n	8003b16 <_svfiprintf_r+0xfa>
 8003aea:	9a07      	ldr	r2, [sp, #28]
 8003aec:	4654      	mov	r4, sl
 8003aee:	2000      	movs	r0, #0
 8003af0:	f04f 0c0a 	mov.w	ip, #10
 8003af4:	4621      	mov	r1, r4
 8003af6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003afa:	3b30      	subs	r3, #48	@ 0x30
 8003afc:	2b09      	cmp	r3, #9
 8003afe:	d94b      	bls.n	8003b98 <_svfiprintf_r+0x17c>
 8003b00:	b1b0      	cbz	r0, 8003b30 <_svfiprintf_r+0x114>
 8003b02:	9207      	str	r2, [sp, #28]
 8003b04:	e014      	b.n	8003b30 <_svfiprintf_r+0x114>
 8003b06:	eba0 0308 	sub.w	r3, r0, r8
 8003b0a:	fa09 f303 	lsl.w	r3, r9, r3
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	9304      	str	r3, [sp, #16]
 8003b12:	46a2      	mov	sl, r4
 8003b14:	e7d2      	b.n	8003abc <_svfiprintf_r+0xa0>
 8003b16:	9b03      	ldr	r3, [sp, #12]
 8003b18:	1d19      	adds	r1, r3, #4
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	9103      	str	r1, [sp, #12]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	bfbb      	ittet	lt
 8003b22:	425b      	neglt	r3, r3
 8003b24:	f042 0202 	orrlt.w	r2, r2, #2
 8003b28:	9307      	strge	r3, [sp, #28]
 8003b2a:	9307      	strlt	r3, [sp, #28]
 8003b2c:	bfb8      	it	lt
 8003b2e:	9204      	strlt	r2, [sp, #16]
 8003b30:	7823      	ldrb	r3, [r4, #0]
 8003b32:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b34:	d10a      	bne.n	8003b4c <_svfiprintf_r+0x130>
 8003b36:	7863      	ldrb	r3, [r4, #1]
 8003b38:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b3a:	d132      	bne.n	8003ba2 <_svfiprintf_r+0x186>
 8003b3c:	9b03      	ldr	r3, [sp, #12]
 8003b3e:	1d1a      	adds	r2, r3, #4
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	9203      	str	r2, [sp, #12]
 8003b44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003b48:	3402      	adds	r4, #2
 8003b4a:	9305      	str	r3, [sp, #20]
 8003b4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003c10 <_svfiprintf_r+0x1f4>
 8003b50:	7821      	ldrb	r1, [r4, #0]
 8003b52:	2203      	movs	r2, #3
 8003b54:	4650      	mov	r0, sl
 8003b56:	f7fc fb4b 	bl	80001f0 <memchr>
 8003b5a:	b138      	cbz	r0, 8003b6c <_svfiprintf_r+0x150>
 8003b5c:	9b04      	ldr	r3, [sp, #16]
 8003b5e:	eba0 000a 	sub.w	r0, r0, sl
 8003b62:	2240      	movs	r2, #64	@ 0x40
 8003b64:	4082      	lsls	r2, r0
 8003b66:	4313      	orrs	r3, r2
 8003b68:	3401      	adds	r4, #1
 8003b6a:	9304      	str	r3, [sp, #16]
 8003b6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b70:	4824      	ldr	r0, [pc, #144]	@ (8003c04 <_svfiprintf_r+0x1e8>)
 8003b72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003b76:	2206      	movs	r2, #6
 8003b78:	f7fc fb3a 	bl	80001f0 <memchr>
 8003b7c:	2800      	cmp	r0, #0
 8003b7e:	d036      	beq.n	8003bee <_svfiprintf_r+0x1d2>
 8003b80:	4b21      	ldr	r3, [pc, #132]	@ (8003c08 <_svfiprintf_r+0x1ec>)
 8003b82:	bb1b      	cbnz	r3, 8003bcc <_svfiprintf_r+0x1b0>
 8003b84:	9b03      	ldr	r3, [sp, #12]
 8003b86:	3307      	adds	r3, #7
 8003b88:	f023 0307 	bic.w	r3, r3, #7
 8003b8c:	3308      	adds	r3, #8
 8003b8e:	9303      	str	r3, [sp, #12]
 8003b90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b92:	4433      	add	r3, r6
 8003b94:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b96:	e76a      	b.n	8003a6e <_svfiprintf_r+0x52>
 8003b98:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b9c:	460c      	mov	r4, r1
 8003b9e:	2001      	movs	r0, #1
 8003ba0:	e7a8      	b.n	8003af4 <_svfiprintf_r+0xd8>
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	3401      	adds	r4, #1
 8003ba6:	9305      	str	r3, [sp, #20]
 8003ba8:	4619      	mov	r1, r3
 8003baa:	f04f 0c0a 	mov.w	ip, #10
 8003bae:	4620      	mov	r0, r4
 8003bb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bb4:	3a30      	subs	r2, #48	@ 0x30
 8003bb6:	2a09      	cmp	r2, #9
 8003bb8:	d903      	bls.n	8003bc2 <_svfiprintf_r+0x1a6>
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0c6      	beq.n	8003b4c <_svfiprintf_r+0x130>
 8003bbe:	9105      	str	r1, [sp, #20]
 8003bc0:	e7c4      	b.n	8003b4c <_svfiprintf_r+0x130>
 8003bc2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bc6:	4604      	mov	r4, r0
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e7f0      	b.n	8003bae <_svfiprintf_r+0x192>
 8003bcc:	ab03      	add	r3, sp, #12
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	462a      	mov	r2, r5
 8003bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8003c0c <_svfiprintf_r+0x1f0>)
 8003bd4:	a904      	add	r1, sp, #16
 8003bd6:	4638      	mov	r0, r7
 8003bd8:	f3af 8000 	nop.w
 8003bdc:	1c42      	adds	r2, r0, #1
 8003bde:	4606      	mov	r6, r0
 8003be0:	d1d6      	bne.n	8003b90 <_svfiprintf_r+0x174>
 8003be2:	89ab      	ldrh	r3, [r5, #12]
 8003be4:	065b      	lsls	r3, r3, #25
 8003be6:	f53f af2d 	bmi.w	8003a44 <_svfiprintf_r+0x28>
 8003bea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003bec:	e72c      	b.n	8003a48 <_svfiprintf_r+0x2c>
 8003bee:	ab03      	add	r3, sp, #12
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	462a      	mov	r2, r5
 8003bf4:	4b05      	ldr	r3, [pc, #20]	@ (8003c0c <_svfiprintf_r+0x1f0>)
 8003bf6:	a904      	add	r1, sp, #16
 8003bf8:	4638      	mov	r0, r7
 8003bfa:	f000 f879 	bl	8003cf0 <_printf_i>
 8003bfe:	e7ed      	b.n	8003bdc <_svfiprintf_r+0x1c0>
 8003c00:	08004058 	.word	0x08004058
 8003c04:	08004062 	.word	0x08004062
 8003c08:	00000000 	.word	0x00000000
 8003c0c:	08003965 	.word	0x08003965
 8003c10:	0800405e 	.word	0x0800405e

08003c14 <_printf_common>:
 8003c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c18:	4616      	mov	r6, r2
 8003c1a:	4698      	mov	r8, r3
 8003c1c:	688a      	ldr	r2, [r1, #8]
 8003c1e:	690b      	ldr	r3, [r1, #16]
 8003c20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c24:	4293      	cmp	r3, r2
 8003c26:	bfb8      	it	lt
 8003c28:	4613      	movlt	r3, r2
 8003c2a:	6033      	str	r3, [r6, #0]
 8003c2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003c30:	4607      	mov	r7, r0
 8003c32:	460c      	mov	r4, r1
 8003c34:	b10a      	cbz	r2, 8003c3a <_printf_common+0x26>
 8003c36:	3301      	adds	r3, #1
 8003c38:	6033      	str	r3, [r6, #0]
 8003c3a:	6823      	ldr	r3, [r4, #0]
 8003c3c:	0699      	lsls	r1, r3, #26
 8003c3e:	bf42      	ittt	mi
 8003c40:	6833      	ldrmi	r3, [r6, #0]
 8003c42:	3302      	addmi	r3, #2
 8003c44:	6033      	strmi	r3, [r6, #0]
 8003c46:	6825      	ldr	r5, [r4, #0]
 8003c48:	f015 0506 	ands.w	r5, r5, #6
 8003c4c:	d106      	bne.n	8003c5c <_printf_common+0x48>
 8003c4e:	f104 0a19 	add.w	sl, r4, #25
 8003c52:	68e3      	ldr	r3, [r4, #12]
 8003c54:	6832      	ldr	r2, [r6, #0]
 8003c56:	1a9b      	subs	r3, r3, r2
 8003c58:	42ab      	cmp	r3, r5
 8003c5a:	dc26      	bgt.n	8003caa <_printf_common+0x96>
 8003c5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003c60:	6822      	ldr	r2, [r4, #0]
 8003c62:	3b00      	subs	r3, #0
 8003c64:	bf18      	it	ne
 8003c66:	2301      	movne	r3, #1
 8003c68:	0692      	lsls	r2, r2, #26
 8003c6a:	d42b      	bmi.n	8003cc4 <_printf_common+0xb0>
 8003c6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003c70:	4641      	mov	r1, r8
 8003c72:	4638      	mov	r0, r7
 8003c74:	47c8      	blx	r9
 8003c76:	3001      	adds	r0, #1
 8003c78:	d01e      	beq.n	8003cb8 <_printf_common+0xa4>
 8003c7a:	6823      	ldr	r3, [r4, #0]
 8003c7c:	6922      	ldr	r2, [r4, #16]
 8003c7e:	f003 0306 	and.w	r3, r3, #6
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	bf02      	ittt	eq
 8003c86:	68e5      	ldreq	r5, [r4, #12]
 8003c88:	6833      	ldreq	r3, [r6, #0]
 8003c8a:	1aed      	subeq	r5, r5, r3
 8003c8c:	68a3      	ldr	r3, [r4, #8]
 8003c8e:	bf0c      	ite	eq
 8003c90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c94:	2500      	movne	r5, #0
 8003c96:	4293      	cmp	r3, r2
 8003c98:	bfc4      	itt	gt
 8003c9a:	1a9b      	subgt	r3, r3, r2
 8003c9c:	18ed      	addgt	r5, r5, r3
 8003c9e:	2600      	movs	r6, #0
 8003ca0:	341a      	adds	r4, #26
 8003ca2:	42b5      	cmp	r5, r6
 8003ca4:	d11a      	bne.n	8003cdc <_printf_common+0xc8>
 8003ca6:	2000      	movs	r0, #0
 8003ca8:	e008      	b.n	8003cbc <_printf_common+0xa8>
 8003caa:	2301      	movs	r3, #1
 8003cac:	4652      	mov	r2, sl
 8003cae:	4641      	mov	r1, r8
 8003cb0:	4638      	mov	r0, r7
 8003cb2:	47c8      	blx	r9
 8003cb4:	3001      	adds	r0, #1
 8003cb6:	d103      	bne.n	8003cc0 <_printf_common+0xac>
 8003cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cc0:	3501      	adds	r5, #1
 8003cc2:	e7c6      	b.n	8003c52 <_printf_common+0x3e>
 8003cc4:	18e1      	adds	r1, r4, r3
 8003cc6:	1c5a      	adds	r2, r3, #1
 8003cc8:	2030      	movs	r0, #48	@ 0x30
 8003cca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003cce:	4422      	add	r2, r4
 8003cd0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003cd4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003cd8:	3302      	adds	r3, #2
 8003cda:	e7c7      	b.n	8003c6c <_printf_common+0x58>
 8003cdc:	2301      	movs	r3, #1
 8003cde:	4622      	mov	r2, r4
 8003ce0:	4641      	mov	r1, r8
 8003ce2:	4638      	mov	r0, r7
 8003ce4:	47c8      	blx	r9
 8003ce6:	3001      	adds	r0, #1
 8003ce8:	d0e6      	beq.n	8003cb8 <_printf_common+0xa4>
 8003cea:	3601      	adds	r6, #1
 8003cec:	e7d9      	b.n	8003ca2 <_printf_common+0x8e>
	...

08003cf0 <_printf_i>:
 8003cf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cf4:	7e0f      	ldrb	r7, [r1, #24]
 8003cf6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003cf8:	2f78      	cmp	r7, #120	@ 0x78
 8003cfa:	4691      	mov	r9, r2
 8003cfc:	4680      	mov	r8, r0
 8003cfe:	460c      	mov	r4, r1
 8003d00:	469a      	mov	sl, r3
 8003d02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003d06:	d807      	bhi.n	8003d18 <_printf_i+0x28>
 8003d08:	2f62      	cmp	r7, #98	@ 0x62
 8003d0a:	d80a      	bhi.n	8003d22 <_printf_i+0x32>
 8003d0c:	2f00      	cmp	r7, #0
 8003d0e:	f000 80d2 	beq.w	8003eb6 <_printf_i+0x1c6>
 8003d12:	2f58      	cmp	r7, #88	@ 0x58
 8003d14:	f000 80b9 	beq.w	8003e8a <_printf_i+0x19a>
 8003d18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003d20:	e03a      	b.n	8003d98 <_printf_i+0xa8>
 8003d22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003d26:	2b15      	cmp	r3, #21
 8003d28:	d8f6      	bhi.n	8003d18 <_printf_i+0x28>
 8003d2a:	a101      	add	r1, pc, #4	@ (adr r1, 8003d30 <_printf_i+0x40>)
 8003d2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d30:	08003d89 	.word	0x08003d89
 8003d34:	08003d9d 	.word	0x08003d9d
 8003d38:	08003d19 	.word	0x08003d19
 8003d3c:	08003d19 	.word	0x08003d19
 8003d40:	08003d19 	.word	0x08003d19
 8003d44:	08003d19 	.word	0x08003d19
 8003d48:	08003d9d 	.word	0x08003d9d
 8003d4c:	08003d19 	.word	0x08003d19
 8003d50:	08003d19 	.word	0x08003d19
 8003d54:	08003d19 	.word	0x08003d19
 8003d58:	08003d19 	.word	0x08003d19
 8003d5c:	08003e9d 	.word	0x08003e9d
 8003d60:	08003dc7 	.word	0x08003dc7
 8003d64:	08003e57 	.word	0x08003e57
 8003d68:	08003d19 	.word	0x08003d19
 8003d6c:	08003d19 	.word	0x08003d19
 8003d70:	08003ebf 	.word	0x08003ebf
 8003d74:	08003d19 	.word	0x08003d19
 8003d78:	08003dc7 	.word	0x08003dc7
 8003d7c:	08003d19 	.word	0x08003d19
 8003d80:	08003d19 	.word	0x08003d19
 8003d84:	08003e5f 	.word	0x08003e5f
 8003d88:	6833      	ldr	r3, [r6, #0]
 8003d8a:	1d1a      	adds	r2, r3, #4
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6032      	str	r2, [r6, #0]
 8003d90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e09d      	b.n	8003ed8 <_printf_i+0x1e8>
 8003d9c:	6833      	ldr	r3, [r6, #0]
 8003d9e:	6820      	ldr	r0, [r4, #0]
 8003da0:	1d19      	adds	r1, r3, #4
 8003da2:	6031      	str	r1, [r6, #0]
 8003da4:	0606      	lsls	r6, r0, #24
 8003da6:	d501      	bpl.n	8003dac <_printf_i+0xbc>
 8003da8:	681d      	ldr	r5, [r3, #0]
 8003daa:	e003      	b.n	8003db4 <_printf_i+0xc4>
 8003dac:	0645      	lsls	r5, r0, #25
 8003dae:	d5fb      	bpl.n	8003da8 <_printf_i+0xb8>
 8003db0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003db4:	2d00      	cmp	r5, #0
 8003db6:	da03      	bge.n	8003dc0 <_printf_i+0xd0>
 8003db8:	232d      	movs	r3, #45	@ 0x2d
 8003dba:	426d      	negs	r5, r5
 8003dbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003dc0:	4859      	ldr	r0, [pc, #356]	@ (8003f28 <_printf_i+0x238>)
 8003dc2:	230a      	movs	r3, #10
 8003dc4:	e011      	b.n	8003dea <_printf_i+0xfa>
 8003dc6:	6821      	ldr	r1, [r4, #0]
 8003dc8:	6833      	ldr	r3, [r6, #0]
 8003dca:	0608      	lsls	r0, r1, #24
 8003dcc:	f853 5b04 	ldr.w	r5, [r3], #4
 8003dd0:	d402      	bmi.n	8003dd8 <_printf_i+0xe8>
 8003dd2:	0649      	lsls	r1, r1, #25
 8003dd4:	bf48      	it	mi
 8003dd6:	b2ad      	uxthmi	r5, r5
 8003dd8:	2f6f      	cmp	r7, #111	@ 0x6f
 8003dda:	4853      	ldr	r0, [pc, #332]	@ (8003f28 <_printf_i+0x238>)
 8003ddc:	6033      	str	r3, [r6, #0]
 8003dde:	bf14      	ite	ne
 8003de0:	230a      	movne	r3, #10
 8003de2:	2308      	moveq	r3, #8
 8003de4:	2100      	movs	r1, #0
 8003de6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003dea:	6866      	ldr	r6, [r4, #4]
 8003dec:	60a6      	str	r6, [r4, #8]
 8003dee:	2e00      	cmp	r6, #0
 8003df0:	bfa2      	ittt	ge
 8003df2:	6821      	ldrge	r1, [r4, #0]
 8003df4:	f021 0104 	bicge.w	r1, r1, #4
 8003df8:	6021      	strge	r1, [r4, #0]
 8003dfa:	b90d      	cbnz	r5, 8003e00 <_printf_i+0x110>
 8003dfc:	2e00      	cmp	r6, #0
 8003dfe:	d04b      	beq.n	8003e98 <_printf_i+0x1a8>
 8003e00:	4616      	mov	r6, r2
 8003e02:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e06:	fb03 5711 	mls	r7, r3, r1, r5
 8003e0a:	5dc7      	ldrb	r7, [r0, r7]
 8003e0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e10:	462f      	mov	r7, r5
 8003e12:	42bb      	cmp	r3, r7
 8003e14:	460d      	mov	r5, r1
 8003e16:	d9f4      	bls.n	8003e02 <_printf_i+0x112>
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d10b      	bne.n	8003e34 <_printf_i+0x144>
 8003e1c:	6823      	ldr	r3, [r4, #0]
 8003e1e:	07df      	lsls	r7, r3, #31
 8003e20:	d508      	bpl.n	8003e34 <_printf_i+0x144>
 8003e22:	6923      	ldr	r3, [r4, #16]
 8003e24:	6861      	ldr	r1, [r4, #4]
 8003e26:	4299      	cmp	r1, r3
 8003e28:	bfde      	ittt	le
 8003e2a:	2330      	movle	r3, #48	@ 0x30
 8003e2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003e34:	1b92      	subs	r2, r2, r6
 8003e36:	6122      	str	r2, [r4, #16]
 8003e38:	f8cd a000 	str.w	sl, [sp]
 8003e3c:	464b      	mov	r3, r9
 8003e3e:	aa03      	add	r2, sp, #12
 8003e40:	4621      	mov	r1, r4
 8003e42:	4640      	mov	r0, r8
 8003e44:	f7ff fee6 	bl	8003c14 <_printf_common>
 8003e48:	3001      	adds	r0, #1
 8003e4a:	d14a      	bne.n	8003ee2 <_printf_i+0x1f2>
 8003e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e50:	b004      	add	sp, #16
 8003e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e56:	6823      	ldr	r3, [r4, #0]
 8003e58:	f043 0320 	orr.w	r3, r3, #32
 8003e5c:	6023      	str	r3, [r4, #0]
 8003e5e:	4833      	ldr	r0, [pc, #204]	@ (8003f2c <_printf_i+0x23c>)
 8003e60:	2778      	movs	r7, #120	@ 0x78
 8003e62:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003e66:	6823      	ldr	r3, [r4, #0]
 8003e68:	6831      	ldr	r1, [r6, #0]
 8003e6a:	061f      	lsls	r7, r3, #24
 8003e6c:	f851 5b04 	ldr.w	r5, [r1], #4
 8003e70:	d402      	bmi.n	8003e78 <_printf_i+0x188>
 8003e72:	065f      	lsls	r7, r3, #25
 8003e74:	bf48      	it	mi
 8003e76:	b2ad      	uxthmi	r5, r5
 8003e78:	6031      	str	r1, [r6, #0]
 8003e7a:	07d9      	lsls	r1, r3, #31
 8003e7c:	bf44      	itt	mi
 8003e7e:	f043 0320 	orrmi.w	r3, r3, #32
 8003e82:	6023      	strmi	r3, [r4, #0]
 8003e84:	b11d      	cbz	r5, 8003e8e <_printf_i+0x19e>
 8003e86:	2310      	movs	r3, #16
 8003e88:	e7ac      	b.n	8003de4 <_printf_i+0xf4>
 8003e8a:	4827      	ldr	r0, [pc, #156]	@ (8003f28 <_printf_i+0x238>)
 8003e8c:	e7e9      	b.n	8003e62 <_printf_i+0x172>
 8003e8e:	6823      	ldr	r3, [r4, #0]
 8003e90:	f023 0320 	bic.w	r3, r3, #32
 8003e94:	6023      	str	r3, [r4, #0]
 8003e96:	e7f6      	b.n	8003e86 <_printf_i+0x196>
 8003e98:	4616      	mov	r6, r2
 8003e9a:	e7bd      	b.n	8003e18 <_printf_i+0x128>
 8003e9c:	6833      	ldr	r3, [r6, #0]
 8003e9e:	6825      	ldr	r5, [r4, #0]
 8003ea0:	6961      	ldr	r1, [r4, #20]
 8003ea2:	1d18      	adds	r0, r3, #4
 8003ea4:	6030      	str	r0, [r6, #0]
 8003ea6:	062e      	lsls	r6, r5, #24
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	d501      	bpl.n	8003eb0 <_printf_i+0x1c0>
 8003eac:	6019      	str	r1, [r3, #0]
 8003eae:	e002      	b.n	8003eb6 <_printf_i+0x1c6>
 8003eb0:	0668      	lsls	r0, r5, #25
 8003eb2:	d5fb      	bpl.n	8003eac <_printf_i+0x1bc>
 8003eb4:	8019      	strh	r1, [r3, #0]
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	6123      	str	r3, [r4, #16]
 8003eba:	4616      	mov	r6, r2
 8003ebc:	e7bc      	b.n	8003e38 <_printf_i+0x148>
 8003ebe:	6833      	ldr	r3, [r6, #0]
 8003ec0:	1d1a      	adds	r2, r3, #4
 8003ec2:	6032      	str	r2, [r6, #0]
 8003ec4:	681e      	ldr	r6, [r3, #0]
 8003ec6:	6862      	ldr	r2, [r4, #4]
 8003ec8:	2100      	movs	r1, #0
 8003eca:	4630      	mov	r0, r6
 8003ecc:	f7fc f990 	bl	80001f0 <memchr>
 8003ed0:	b108      	cbz	r0, 8003ed6 <_printf_i+0x1e6>
 8003ed2:	1b80      	subs	r0, r0, r6
 8003ed4:	6060      	str	r0, [r4, #4]
 8003ed6:	6863      	ldr	r3, [r4, #4]
 8003ed8:	6123      	str	r3, [r4, #16]
 8003eda:	2300      	movs	r3, #0
 8003edc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ee0:	e7aa      	b.n	8003e38 <_printf_i+0x148>
 8003ee2:	6923      	ldr	r3, [r4, #16]
 8003ee4:	4632      	mov	r2, r6
 8003ee6:	4649      	mov	r1, r9
 8003ee8:	4640      	mov	r0, r8
 8003eea:	47d0      	blx	sl
 8003eec:	3001      	adds	r0, #1
 8003eee:	d0ad      	beq.n	8003e4c <_printf_i+0x15c>
 8003ef0:	6823      	ldr	r3, [r4, #0]
 8003ef2:	079b      	lsls	r3, r3, #30
 8003ef4:	d413      	bmi.n	8003f1e <_printf_i+0x22e>
 8003ef6:	68e0      	ldr	r0, [r4, #12]
 8003ef8:	9b03      	ldr	r3, [sp, #12]
 8003efa:	4298      	cmp	r0, r3
 8003efc:	bfb8      	it	lt
 8003efe:	4618      	movlt	r0, r3
 8003f00:	e7a6      	b.n	8003e50 <_printf_i+0x160>
 8003f02:	2301      	movs	r3, #1
 8003f04:	4632      	mov	r2, r6
 8003f06:	4649      	mov	r1, r9
 8003f08:	4640      	mov	r0, r8
 8003f0a:	47d0      	blx	sl
 8003f0c:	3001      	adds	r0, #1
 8003f0e:	d09d      	beq.n	8003e4c <_printf_i+0x15c>
 8003f10:	3501      	adds	r5, #1
 8003f12:	68e3      	ldr	r3, [r4, #12]
 8003f14:	9903      	ldr	r1, [sp, #12]
 8003f16:	1a5b      	subs	r3, r3, r1
 8003f18:	42ab      	cmp	r3, r5
 8003f1a:	dcf2      	bgt.n	8003f02 <_printf_i+0x212>
 8003f1c:	e7eb      	b.n	8003ef6 <_printf_i+0x206>
 8003f1e:	2500      	movs	r5, #0
 8003f20:	f104 0619 	add.w	r6, r4, #25
 8003f24:	e7f5      	b.n	8003f12 <_printf_i+0x222>
 8003f26:	bf00      	nop
 8003f28:	08004069 	.word	0x08004069
 8003f2c:	0800407a 	.word	0x0800407a

08003f30 <memmove>:
 8003f30:	4288      	cmp	r0, r1
 8003f32:	b510      	push	{r4, lr}
 8003f34:	eb01 0402 	add.w	r4, r1, r2
 8003f38:	d902      	bls.n	8003f40 <memmove+0x10>
 8003f3a:	4284      	cmp	r4, r0
 8003f3c:	4623      	mov	r3, r4
 8003f3e:	d807      	bhi.n	8003f50 <memmove+0x20>
 8003f40:	1e43      	subs	r3, r0, #1
 8003f42:	42a1      	cmp	r1, r4
 8003f44:	d008      	beq.n	8003f58 <memmove+0x28>
 8003f46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f4e:	e7f8      	b.n	8003f42 <memmove+0x12>
 8003f50:	4402      	add	r2, r0
 8003f52:	4601      	mov	r1, r0
 8003f54:	428a      	cmp	r2, r1
 8003f56:	d100      	bne.n	8003f5a <memmove+0x2a>
 8003f58:	bd10      	pop	{r4, pc}
 8003f5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f62:	e7f7      	b.n	8003f54 <memmove+0x24>

08003f64 <_sbrk_r>:
 8003f64:	b538      	push	{r3, r4, r5, lr}
 8003f66:	4d06      	ldr	r5, [pc, #24]	@ (8003f80 <_sbrk_r+0x1c>)
 8003f68:	2300      	movs	r3, #0
 8003f6a:	4604      	mov	r4, r0
 8003f6c:	4608      	mov	r0, r1
 8003f6e:	602b      	str	r3, [r5, #0]
 8003f70:	f7fd fa98 	bl	80014a4 <_sbrk>
 8003f74:	1c43      	adds	r3, r0, #1
 8003f76:	d102      	bne.n	8003f7e <_sbrk_r+0x1a>
 8003f78:	682b      	ldr	r3, [r5, #0]
 8003f7a:	b103      	cbz	r3, 8003f7e <_sbrk_r+0x1a>
 8003f7c:	6023      	str	r3, [r4, #0]
 8003f7e:	bd38      	pop	{r3, r4, r5, pc}
 8003f80:	200005dc 	.word	0x200005dc

08003f84 <memcpy>:
 8003f84:	440a      	add	r2, r1
 8003f86:	4291      	cmp	r1, r2
 8003f88:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f8c:	d100      	bne.n	8003f90 <memcpy+0xc>
 8003f8e:	4770      	bx	lr
 8003f90:	b510      	push	{r4, lr}
 8003f92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f9a:	4291      	cmp	r1, r2
 8003f9c:	d1f9      	bne.n	8003f92 <memcpy+0xe>
 8003f9e:	bd10      	pop	{r4, pc}

08003fa0 <_realloc_r>:
 8003fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fa4:	4680      	mov	r8, r0
 8003fa6:	4615      	mov	r5, r2
 8003fa8:	460c      	mov	r4, r1
 8003faa:	b921      	cbnz	r1, 8003fb6 <_realloc_r+0x16>
 8003fac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fb0:	4611      	mov	r1, r2
 8003fb2:	f7ff bc4b 	b.w	800384c <_malloc_r>
 8003fb6:	b92a      	cbnz	r2, 8003fc4 <_realloc_r+0x24>
 8003fb8:	f7ff fbdc 	bl	8003774 <_free_r>
 8003fbc:	2400      	movs	r4, #0
 8003fbe:	4620      	mov	r0, r4
 8003fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fc4:	f000 f81a 	bl	8003ffc <_malloc_usable_size_r>
 8003fc8:	4285      	cmp	r5, r0
 8003fca:	4606      	mov	r6, r0
 8003fcc:	d802      	bhi.n	8003fd4 <_realloc_r+0x34>
 8003fce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003fd2:	d8f4      	bhi.n	8003fbe <_realloc_r+0x1e>
 8003fd4:	4629      	mov	r1, r5
 8003fd6:	4640      	mov	r0, r8
 8003fd8:	f7ff fc38 	bl	800384c <_malloc_r>
 8003fdc:	4607      	mov	r7, r0
 8003fde:	2800      	cmp	r0, #0
 8003fe0:	d0ec      	beq.n	8003fbc <_realloc_r+0x1c>
 8003fe2:	42b5      	cmp	r5, r6
 8003fe4:	462a      	mov	r2, r5
 8003fe6:	4621      	mov	r1, r4
 8003fe8:	bf28      	it	cs
 8003fea:	4632      	movcs	r2, r6
 8003fec:	f7ff ffca 	bl	8003f84 <memcpy>
 8003ff0:	4621      	mov	r1, r4
 8003ff2:	4640      	mov	r0, r8
 8003ff4:	f7ff fbbe 	bl	8003774 <_free_r>
 8003ff8:	463c      	mov	r4, r7
 8003ffa:	e7e0      	b.n	8003fbe <_realloc_r+0x1e>

08003ffc <_malloc_usable_size_r>:
 8003ffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004000:	1f18      	subs	r0, r3, #4
 8004002:	2b00      	cmp	r3, #0
 8004004:	bfbc      	itt	lt
 8004006:	580b      	ldrlt	r3, [r1, r0]
 8004008:	18c0      	addlt	r0, r0, r3
 800400a:	4770      	bx	lr

0800400c <_init>:
 800400c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800400e:	bf00      	nop
 8004010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004012:	bc08      	pop	{r3}
 8004014:	469e      	mov	lr, r3
 8004016:	4770      	bx	lr

08004018 <_fini>:
 8004018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800401a:	bf00      	nop
 800401c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800401e:	bc08      	pop	{r3}
 8004020:	469e      	mov	lr, r3
 8004022:	4770      	bx	lr
