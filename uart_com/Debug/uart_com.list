
uart_com.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b2c  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003cd8  08003cd8  00004cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d00  08003d00  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d00  08003d00  00004d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d08  08003d08  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d08  08003d08  00004d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d0c  08003d0c  00004d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003d10  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          00000340  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000034c  2000034c  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f8cc  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003995  00000000  00000000  00024908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000f38c  00000000  00000000  0002829d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016f0  00000000  00000000  00037630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001193  00000000  00000000  00038d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000275d6  00000000  00000000  00039eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00026ebf  00000000  00000000  00061489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000eec1e  00000000  00000000  00088348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00176f66  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003fc0  00000000  00000000  00176fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005d  00000000  00000000  0017af6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003cc0 	.word	0x08003cc0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08003cc0 	.word	0x08003cc0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <apInit>:

//uint32_t adc_vol = 0 ;
float adc_vol = 0 ;

void apInit(void)
{
 80004dc:	b508      	push	{r3, lr}
	adcInit();
 80004de:	f000 f831 	bl	8000544 <adcInit>
}
 80004e2:	bd08      	pop	{r3, pc}

080004e4 <apMain>:

void apMain(void)
{
 80004e4:	b510      	push	{r4, lr}
	uint32_t pre_time ;

	pre_time = millis();
 80004e6:	f000 f85f 	bl	80005a8 <millis>
 80004ea:	4604      	mov	r4, r0
 80004ec:	e01a      	b.n	8000524 <apMain+0x40>
	while(1)
	{
		if (millis() - pre_time >= 500)	// 논블락킹 코드
		{
			pre_time = millis();
 80004ee:	f000 f85b 	bl	80005a8 <millis>
 80004f2:	4604      	mov	r4, r0
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80004f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004f8:	480e      	ldr	r0, [pc, #56]	@ (8000534 <apMain+0x50>)
 80004fa:	f001 fcc5 	bl	8001e88 <HAL_GPIO_TogglePin>
			uartWrite(_DEF_CH1, (uint8_t *)"test\n", 5);
 80004fe:	2205      	movs	r2, #5
 8000500:	490d      	ldr	r1, [pc, #52]	@ (8000538 <apMain+0x54>)
 8000502:	2000      	movs	r0, #0
 8000504:	f000 f83e 	bl	8000584 <uartWrite>


		//HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
		//HAL_Delay(500);

		adc_vol = (float)adcReadVoltage(_DEF_CH1) / 100.f;
 8000508:	2000      	movs	r0, #0
 800050a:	f000 f831 	bl	8000570 <adcReadVoltage>
 800050e:	ee07 0a90 	vmov	s15, r0
 8000512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000516:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800053c <apMain+0x58>
 800051a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800051e:	4b08      	ldr	r3, [pc, #32]	@ (8000540 <apMain+0x5c>)
 8000520:	ed83 7a00 	vstr	s14, [r3]
		if (millis() - pre_time >= 500)	// 논블락킹 코드
 8000524:	f000 f840 	bl	80005a8 <millis>
 8000528:	1b03      	subs	r3, r0, r4
 800052a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800052e:	d2de      	bcs.n	80004ee <apMain+0xa>
 8000530:	e7ea      	b.n	8000508 <apMain+0x24>
 8000532:	bf00      	nop
 8000534:	40021800 	.word	0x40021800
 8000538:	08003cd8 	.word	0x08003cd8
 800053c:	42c80000 	.word	0x42c80000
 8000540:	20000028 	.word	0x20000028

08000544 <adcInit>:
uint16_t adc_data[3];



bool adcInit(void)
{
 8000544:	b508      	push	{r3, lr}
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_data, 3);		//핸들러, 배열, 채널 수
 8000546:	2203      	movs	r2, #3
 8000548:	4902      	ldr	r1, [pc, #8]	@ (8000554 <adcInit+0x10>)
 800054a:	4803      	ldr	r0, [pc, #12]	@ (8000558 <adcInit+0x14>)
 800054c:	f000 ffb2 	bl	80014b4 <HAL_ADC_Start_DMA>
	return true;
}
 8000550:	2001      	movs	r0, #1
 8000552:	bd08      	pop	{r3, pc}
 8000554:	2000002c 	.word	0x2000002c
 8000558:	200002b4 	.word	0x200002b4

0800055c <adcRead>:
uint16_t adcRead(uint8_t ch)
{
	uint16_t cali_value = 0;
	uint16_t ret = 0;
	switch(ch)
 800055c:	b918      	cbnz	r0, 8000566 <adcRead+0xa>
	{
		case _DEF_CH1 :
			if(adc_data[ch] > cali_value)
 800055e:	4a03      	ldr	r2, [pc, #12]	@ (800056c <adcRead+0x10>)
 8000560:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
 8000564:	4770      	bx	lr
	uint16_t ret = 0;
 8000566:	2000      	movs	r0, #0
			}

		break;
	}
	return ret;
}
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	2000002c 	.word	0x2000002c

08000570 <adcReadVoltage>:


uint32_t adcReadVoltage(uint8_t ch)
{
 8000570:	b508      	push	{r3, lr}
	uint32_t ret ;
	uint32_t adc_data;
	adc_data = adcRead(ch);
 8000572:	f7ff fff3 	bl	800055c <adcRead>
	ret = (330 * adc_data ) / 4096 ;	// float 안쓰고 330 (3.3v) * adc_data / 2의 12승(해상도)
 8000576:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 800057a:	fb03 f000 	mul.w	r0, r3, r0
	return ret ;
}
 800057e:	0b00      	lsrs	r0, r0, #12
 8000580:	bd08      	pop	{r3, pc}
	...

08000584 <uartWrite>:
uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
	uint32_t ret = 0;
	HAL_StatusTypeDef hal_ret;

	switch(ch)
 8000584:	b108      	cbz	r0, 800058a <uartWrite+0x6>
	uint32_t ret = 0;
 8000586:	2000      	movs	r0, #0




	return ret ;
}
 8000588:	4770      	bx	lr
{
 800058a:	b510      	push	{r4, lr}
 800058c:	4614      	mov	r4, r2
			hal_ret = HAL_UART_Transmit(&huart1, p_data, length, 100); //timeout으로 100ms 주기
 800058e:	2364      	movs	r3, #100	@ 0x64
 8000590:	b292      	uxth	r2, r2
 8000592:	4804      	ldr	r0, [pc, #16]	@ (80005a4 <uartWrite+0x20>)
 8000594:	f003 f8a3 	bl	80036de <HAL_UART_Transmit>
			if(hal_ret == HAL_OK)
 8000598:	b108      	cbz	r0, 800059e <uartWrite+0x1a>
	uint32_t ret = 0;
 800059a:	2000      	movs	r0, #0
}
 800059c:	bd10      	pop	{r4, pc}
				ret = length ;	// HAL_OK일 경우가 아니면 ret은 0으로 초기화된그대로,.
 800059e:	4620      	mov	r0, r4
	return ret ;
 80005a0:	e7fc      	b.n	800059c <uartWrite+0x18>
 80005a2:	bf00      	nop
 80005a4:	20000068 	.word	0x20000068

080005a8 <millis>:
}



uint32_t millis(void)
{
 80005a8:	b508      	push	{r3, lr}
	return HAL_GetTick();
 80005aa:	f000 feb7 	bl	800131c <HAL_GetTick>
}
 80005ae:	bd08      	pop	{r3, pc}

080005b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005b0:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <MX_DMA_Init+0x20>)
 80005b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005ba:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80005be:	631a      	str	r2, [r3, #48]	@ 0x30
 80005c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	9b01      	ldr	r3, [sp, #4]

}
 80005ca:	b002      	add	sp, #8
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	40023800 	.word	0x40023800

080005d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005d8:	b08e      	sub	sp, #56	@ 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005da:	2400      	movs	r4, #0
 80005dc:	9409      	str	r4, [sp, #36]	@ 0x24
 80005de:	940a      	str	r4, [sp, #40]	@ 0x28
 80005e0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80005e2:	940c      	str	r4, [sp, #48]	@ 0x30
 80005e4:	940d      	str	r4, [sp, #52]	@ 0x34
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e6:	9401      	str	r4, [sp, #4]
 80005e8:	4b69      	ldr	r3, [pc, #420]	@ (8000790 <MX_GPIO_Init+0x1bc>)
 80005ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005ec:	f042 0204 	orr.w	r2, r2, #4
 80005f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80005f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80005f4:	f002 0204 	and.w	r2, r2, #4
 80005f8:	9201      	str	r2, [sp, #4]
 80005fa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005fc:	9402      	str	r4, [sp, #8]
 80005fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000600:	f042 0220 	orr.w	r2, r2, #32
 8000604:	631a      	str	r2, [r3, #48]	@ 0x30
 8000606:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000608:	f002 0220 	and.w	r2, r2, #32
 800060c:	9202      	str	r2, [sp, #8]
 800060e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000610:	9403      	str	r4, [sp, #12]
 8000612:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000614:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000618:	631a      	str	r2, [r3, #48]	@ 0x30
 800061a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800061c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000620:	9203      	str	r2, [sp, #12]
 8000622:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000624:	9404      	str	r4, [sp, #16]
 8000626:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000628:	f042 0201 	orr.w	r2, r2, #1
 800062c:	631a      	str	r2, [r3, #48]	@ 0x30
 800062e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000630:	f002 0201 	and.w	r2, r2, #1
 8000634:	9204      	str	r2, [sp, #16]
 8000636:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000638:	9405      	str	r4, [sp, #20]
 800063a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800063c:	f042 0202 	orr.w	r2, r2, #2
 8000640:	631a      	str	r2, [r3, #48]	@ 0x30
 8000642:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000644:	f002 0202 	and.w	r2, r2, #2
 8000648:	9205      	str	r2, [sp, #20]
 800064a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800064c:	9406      	str	r4, [sp, #24]
 800064e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000650:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000654:	631a      	str	r2, [r3, #48]	@ 0x30
 8000656:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000658:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800065c:	9206      	str	r2, [sp, #24]
 800065e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000660:	9407      	str	r4, [sp, #28]
 8000662:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000664:	f042 0210 	orr.w	r2, r2, #16
 8000668:	631a      	str	r2, [r3, #48]	@ 0x30
 800066a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800066c:	f002 0210 	and.w	r2, r2, #16
 8000670:	9207      	str	r2, [sp, #28]
 8000672:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000674:	9408      	str	r4, [sp, #32]
 8000676:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000678:	f042 0208 	orr.w	r2, r2, #8
 800067c:	631a      	str	r2, [r3, #48]	@ 0x30
 800067e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000680:	f003 0308 	and.w	r3, r3, #8
 8000684:	9308      	str	r3, [sp, #32]
 8000686:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000688:	4f42      	ldr	r7, [pc, #264]	@ (8000794 <MX_GPIO_Init+0x1c0>)
 800068a:	4622      	mov	r2, r4
 800068c:	2116      	movs	r1, #22
 800068e:	4638      	mov	r0, r7
 8000690:	f001 fbf4 	bl	8001e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000694:	f8df 8104 	ldr.w	r8, [pc, #260]	@ 800079c <MX_GPIO_Init+0x1c8>
 8000698:	4622      	mov	r2, r4
 800069a:	2180      	movs	r1, #128	@ 0x80
 800069c:	4640      	mov	r0, r8
 800069e:	f001 fbed 	bl	8001e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80006a2:	4e3d      	ldr	r6, [pc, #244]	@ (8000798 <MX_GPIO_Init+0x1c4>)
 80006a4:	4622      	mov	r2, r4
 80006a6:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80006aa:	4630      	mov	r0, r6
 80006ac:	f001 fbe6 	bl	8001e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80006b0:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 80007a0 <MX_GPIO_Init+0x1cc>
 80006b4:	4622      	mov	r2, r4
 80006b6:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80006ba:	4648      	mov	r0, r9
 80006bc:	f001 fbde 	bl	8001e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80006c0:	2316      	movs	r3, #22
 80006c2:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c4:	2501      	movs	r5, #1
 80006c6:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006cc:	a909      	add	r1, sp, #36	@ 0x24
 80006ce:	4638      	mov	r0, r7
 80006d0:	f001 fad0 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80006d4:	f248 0307 	movw	r3, #32775	@ 0x8007
 80006d8:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006da:	f44f 1a90 	mov.w	sl, #1179648	@ 0x120000
 80006de:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e4:	a909      	add	r1, sp, #36	@ 0x24
 80006e6:	4640      	mov	r0, r8
 80006e8:	f001 fac4 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80006ec:	2380      	movs	r3, #128	@ 0x80
 80006ee:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f0:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f4:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80006f6:	a909      	add	r1, sp, #36	@ 0x24
 80006f8:	4640      	mov	r0, r8
 80006fa:	f001 fabb 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80006fe:	2320      	movs	r3, #32
 8000700:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000702:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000708:	a909      	add	r1, sp, #36	@ 0x24
 800070a:	4638      	mov	r0, r7
 800070c:	f001 fab2 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000710:	2304      	movs	r3, #4
 8000712:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000714:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000718:	f5a7 6780 	sub.w	r7, r7, #1024	@ 0x400
 800071c:	a909      	add	r1, sp, #36	@ 0x24
 800071e:	4638      	mov	r0, r7
 8000720:	f001 faa8 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000724:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8000728:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072a:	2302      	movs	r3, #2
 800072c:	930a      	str	r3, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	940c      	str	r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000732:	230c      	movs	r3, #12
 8000734:	930d      	str	r3, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000736:	a909      	add	r1, sp, #36	@ 0x24
 8000738:	4638      	mov	r0, r7
 800073a:	f001 fa9b 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800073e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000742:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000744:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000748:	a909      	add	r1, sp, #36	@ 0x24
 800074a:	4638      	mov	r0, r7
 800074c:	f001 fa92 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000750:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000754:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000756:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800075a:	a909      	add	r1, sp, #36	@ 0x24
 800075c:	4630      	mov	r0, r6
 800075e:	f001 fa89 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000762:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000766:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000768:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800076e:	a909      	add	r1, sp, #36	@ 0x24
 8000770:	4630      	mov	r0, r6
 8000772:	f001 fa7f 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000776:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800077a:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000782:	a909      	add	r1, sp, #36	@ 0x24
 8000784:	4648      	mov	r0, r9
 8000786:	f001 fa75 	bl	8001c74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800078a:	b00e      	add	sp, #56	@ 0x38
 800078c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000790:	40023800 	.word	0x40023800
 8000794:	40020800 	.word	0x40020800
 8000798:	40020c00 	.word	0x40020c00
 800079c:	40020000 	.word	0x40020000
 80007a0:	40021800 	.word	0x40021800

080007a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007a6:	6802      	ldr	r2, [r0, #0]
 80007a8:	4b03      	ldr	r3, [pc, #12]	@ (80007b8 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d000      	beq.n	80007b0 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ae:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 80007b0:	f000 fda8 	bl	8001304 <HAL_IncTick>
}
 80007b4:	e7fb      	b.n	80007ae <HAL_TIM_PeriodElapsedCallback+0xa>
 80007b6:	bf00      	nop
 80007b8:	40001000 	.word	0x40001000

080007bc <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007bc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007be:	e7fe      	b.n	80007be <Error_Handler+0x2>

080007c0 <MX_CRC_Init>:
{
 80007c0:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 80007c2:	4804      	ldr	r0, [pc, #16]	@ (80007d4 <MX_CRC_Init+0x14>)
 80007c4:	4b04      	ldr	r3, [pc, #16]	@ (80007d8 <MX_CRC_Init+0x18>)
 80007c6:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007c8:	f001 f8cc 	bl	8001964 <HAL_CRC_Init>
 80007cc:	b900      	cbnz	r0, 80007d0 <MX_CRC_Init+0x10>
}
 80007ce:	bd08      	pop	{r3, pc}
    Error_Handler();
 80007d0:	f7ff fff4 	bl	80007bc <Error_Handler>
 80007d4:	2000024c 	.word	0x2000024c
 80007d8:	40023000 	.word	0x40023000

080007dc <MX_FMC_Init>:
{
 80007dc:	b500      	push	{lr}
 80007de:	b089      	sub	sp, #36	@ 0x24
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80007e0:	2300      	movs	r3, #0
 80007e2:	9301      	str	r3, [sp, #4]
 80007e4:	9302      	str	r3, [sp, #8]
 80007e6:	9303      	str	r3, [sp, #12]
 80007e8:	9304      	str	r3, [sp, #16]
 80007ea:	9305      	str	r3, [sp, #20]
 80007ec:	9306      	str	r3, [sp, #24]
 80007ee:	9307      	str	r3, [sp, #28]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80007f0:	4814      	ldr	r0, [pc, #80]	@ (8000844 <MX_FMC_Init+0x68>)
 80007f2:	4a15      	ldr	r2, [pc, #84]	@ (8000848 <MX_FMC_Init+0x6c>)
 80007f4:	6002      	str	r2, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80007f6:	2201      	movs	r2, #1
 80007f8:	6042      	str	r2, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80007fa:	6083      	str	r3, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80007fc:	2104      	movs	r1, #4
 80007fe:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000800:	2210      	movs	r2, #16
 8000802:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000804:	2240      	movs	r2, #64	@ 0x40
 8000806:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000808:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800080c:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800080e:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000810:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000814:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000816:	6243      	str	r3, [r0, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000818:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800081c:	6283      	str	r3, [r0, #40]	@ 0x28
  SdramTiming.LoadToActiveDelay = 2;
 800081e:	2302      	movs	r3, #2
 8000820:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000822:	2207      	movs	r2, #7
 8000824:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000826:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 7;
 8000828:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800082a:	2203      	movs	r2, #3
 800082c:	9205      	str	r2, [sp, #20]
  SdramTiming.RPDelay = 2;
 800082e:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 8000830:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000832:	4469      	add	r1, sp
 8000834:	f002 fae8 	bl	8002e08 <HAL_SDRAM_Init>
 8000838:	b910      	cbnz	r0, 8000840 <MX_FMC_Init+0x64>
}
 800083a:	b009      	add	sp, #36	@ 0x24
 800083c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 8000840:	f7ff ffbc 	bl	80007bc <Error_Handler>
 8000844:	20000034 	.word	0x20000034
 8000848:	a0000140 	.word	0xa0000140

0800084c <MX_I2C3_Init>:
{
 800084c:	b508      	push	{r3, lr}
  hi2c3.Instance = I2C3;
 800084e:	4811      	ldr	r0, [pc, #68]	@ (8000894 <MX_I2C3_Init+0x48>)
 8000850:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <MX_I2C3_Init+0x4c>)
 8000852:	6003      	str	r3, [r0, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000854:	4b11      	ldr	r3, [pc, #68]	@ (800089c <MX_I2C3_Init+0x50>)
 8000856:	6043      	str	r3, [r0, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000858:	2300      	movs	r3, #0
 800085a:	6083      	str	r3, [r0, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800085c:	60c3      	str	r3, [r0, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800085e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000862:	6102      	str	r2, [r0, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000864:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000866:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000868:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800086a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800086c:	f001 fb16 	bl	8001e9c <HAL_I2C_Init>
 8000870:	b950      	cbnz	r0, 8000888 <MX_I2C3_Init+0x3c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000872:	2100      	movs	r1, #0
 8000874:	4807      	ldr	r0, [pc, #28]	@ (8000894 <MX_I2C3_Init+0x48>)
 8000876:	f001 fbef 	bl	8002058 <HAL_I2CEx_ConfigAnalogFilter>
 800087a:	b938      	cbnz	r0, 800088c <MX_I2C3_Init+0x40>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800087c:	2100      	movs	r1, #0
 800087e:	4805      	ldr	r0, [pc, #20]	@ (8000894 <MX_I2C3_Init+0x48>)
 8000880:	f001 fc0c 	bl	800209c <HAL_I2CEx_ConfigDigitalFilter>
 8000884:	b920      	cbnz	r0, 8000890 <MX_I2C3_Init+0x44>
}
 8000886:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000888:	f7ff ff98 	bl	80007bc <Error_Handler>
    Error_Handler();
 800088c:	f7ff ff96 	bl	80007bc <Error_Handler>
    Error_Handler();
 8000890:	f7ff ff94 	bl	80007bc <Error_Handler>
 8000894:	200001f8 	.word	0x200001f8
 8000898:	40005c00 	.word	0x40005c00
 800089c:	000186a0 	.word	0x000186a0

080008a0 <MX_SPI5_Init>:
{
 80008a0:	b508      	push	{r3, lr}
  hspi5.Instance = SPI5;
 80008a2:	480d      	ldr	r0, [pc, #52]	@ (80008d8 <MX_SPI5_Init+0x38>)
 80008a4:	4b0d      	ldr	r3, [pc, #52]	@ (80008dc <MX_SPI5_Init+0x3c>)
 80008a6:	6003      	str	r3, [r0, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80008a8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80008ac:	6043      	str	r3, [r0, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80008ae:	2300      	movs	r3, #0
 80008b0:	6083      	str	r3, [r0, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80008b2:	60c3      	str	r3, [r0, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008b4:	6103      	str	r3, [r0, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b6:	6143      	str	r3, [r0, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80008b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008bc:	6182      	str	r2, [r0, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008be:	2218      	movs	r2, #24
 80008c0:	61c2      	str	r2, [r0, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008c2:	6203      	str	r3, [r0, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80008c4:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c6:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80008c8:	230a      	movs	r3, #10
 80008ca:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80008cc:	f002 fabc 	bl	8002e48 <HAL_SPI_Init>
 80008d0:	b900      	cbnz	r0, 80008d4 <MX_SPI5_Init+0x34>
}
 80008d2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80008d4:	f7ff ff72 	bl	80007bc <Error_Handler>
 80008d8:	200000f8 	.word	0x200000f8
 80008dc:	40015000 	.word	0x40015000

080008e0 <MX_TIM1_Init>:
{
 80008e0:	b500      	push	{lr}
 80008e2:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008e4:	2300      	movs	r3, #0
 80008e6:	9302      	str	r3, [sp, #8]
 80008e8:	9303      	str	r3, [sp, #12]
 80008ea:	9304      	str	r3, [sp, #16]
 80008ec:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	9301      	str	r3, [sp, #4]
  htim1.Instance = TIM1;
 80008f2:	4813      	ldr	r0, [pc, #76]	@ (8000940 <MX_TIM1_Init+0x60>)
 80008f4:	4a13      	ldr	r2, [pc, #76]	@ (8000944 <MX_TIM1_Init+0x64>)
 80008f6:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 0;
 80008f8:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fa:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 80008fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000900:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000902:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8000904:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000906:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000908:	f002 fc90 	bl	800322c <HAL_TIM_Base_Init>
 800090c:	b990      	cbnz	r0, 8000934 <MX_TIM1_Init+0x54>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800090e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000912:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000914:	a902      	add	r1, sp, #8
 8000916:	480a      	ldr	r0, [pc, #40]	@ (8000940 <MX_TIM1_Init+0x60>)
 8000918:	f002 fcc1 	bl	800329e <HAL_TIM_ConfigClockSource>
 800091c:	b960      	cbnz	r0, 8000938 <MX_TIM1_Init+0x58>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091e:	2300      	movs	r3, #0
 8000920:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000922:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000924:	4669      	mov	r1, sp
 8000926:	4806      	ldr	r0, [pc, #24]	@ (8000940 <MX_TIM1_Init+0x60>)
 8000928:	f002 fd38 	bl	800339c <HAL_TIMEx_MasterConfigSynchronization>
 800092c:	b930      	cbnz	r0, 800093c <MX_TIM1_Init+0x5c>
}
 800092e:	b007      	add	sp, #28
 8000930:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000934:	f7ff ff42 	bl	80007bc <Error_Handler>
    Error_Handler();
 8000938:	f7ff ff40 	bl	80007bc <Error_Handler>
    Error_Handler();
 800093c:	f7ff ff3e 	bl	80007bc <Error_Handler>
 8000940:	200000b0 	.word	0x200000b0
 8000944:	40010000 	.word	0x40010000

08000948 <MX_USART1_UART_Init>:
{
 8000948:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 800094a:	480a      	ldr	r0, [pc, #40]	@ (8000974 <MX_USART1_UART_Init+0x2c>)
 800094c:	4b0a      	ldr	r3, [pc, #40]	@ (8000978 <MX_USART1_UART_Init+0x30>)
 800094e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000950:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000954:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	2300      	movs	r3, #0
 8000958:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800095a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800095c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800095e:	220c      	movs	r2, #12
 8000960:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000962:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000966:	f002 fe8a 	bl	800367e <HAL_UART_Init>
 800096a:	b900      	cbnz	r0, 800096e <MX_USART1_UART_Init+0x26>
}
 800096c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800096e:	f7ff ff25 	bl	80007bc <Error_Handler>
 8000972:	bf00      	nop
 8000974:	20000068 	.word	0x20000068
 8000978:	40011000 	.word	0x40011000

0800097c <MX_ADC1_Init>:
{
 800097c:	b500      	push	{lr}
 800097e:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8000980:	2300      	movs	r3, #0
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	9301      	str	r3, [sp, #4]
 8000986:	9302      	str	r3, [sp, #8]
 8000988:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 800098a:	481e      	ldr	r0, [pc, #120]	@ (8000a04 <MX_ADC1_Init+0x88>)
 800098c:	4a1e      	ldr	r2, [pc, #120]	@ (8000a08 <MX_ADC1_Init+0x8c>)
 800098e:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000990:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000992:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000994:	2201      	movs	r2, #1
 8000996:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000998:	7602      	strb	r2, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800099a:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800099e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009a0:	491a      	ldr	r1, [pc, #104]	@ (8000a0c <MX_ADC1_Init+0x90>)
 80009a2:	6281      	str	r1, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009a4:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 3;
 80009a6:	2303      	movs	r3, #3
 80009a8:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009aa:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009ae:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009b0:	f000 fd54 	bl	800145c <HAL_ADC_Init>
 80009b4:	b9f0      	cbnz	r0, 80009f4 <MX_ADC1_Init+0x78>
  sConfig.Channel = ADC_CHANNEL_5;
 80009b6:	2305      	movs	r3, #5
 80009b8:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 80009ba:	2301      	movs	r3, #1
 80009bc:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80009be:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c0:	4669      	mov	r1, sp
 80009c2:	4810      	ldr	r0, [pc, #64]	@ (8000a04 <MX_ADC1_Init+0x88>)
 80009c4:	f000 fe90 	bl	80016e8 <HAL_ADC_ConfigChannel>
 80009c8:	b9b0      	cbnz	r0, 80009f8 <MX_ADC1_Init+0x7c>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80009ca:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <MX_ADC1_Init+0x94>)
 80009cc:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 80009ce:	2302      	movs	r3, #2
 80009d0:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d2:	4669      	mov	r1, sp
 80009d4:	480b      	ldr	r0, [pc, #44]	@ (8000a04 <MX_ADC1_Init+0x88>)
 80009d6:	f000 fe87 	bl	80016e8 <HAL_ADC_ConfigChannel>
 80009da:	b978      	cbnz	r0, 80009fc <MX_ADC1_Init+0x80>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80009dc:	2311      	movs	r3, #17
 80009de:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 80009e0:	2303      	movs	r3, #3
 80009e2:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009e4:	4669      	mov	r1, sp
 80009e6:	4807      	ldr	r0, [pc, #28]	@ (8000a04 <MX_ADC1_Init+0x88>)
 80009e8:	f000 fe7e 	bl	80016e8 <HAL_ADC_ConfigChannel>
 80009ec:	b940      	cbnz	r0, 8000a00 <MX_ADC1_Init+0x84>
}
 80009ee:	b005      	add	sp, #20
 80009f0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80009f4:	f7ff fee2 	bl	80007bc <Error_Handler>
    Error_Handler();
 80009f8:	f7ff fee0 	bl	80007bc <Error_Handler>
    Error_Handler();
 80009fc:	f7ff fede 	bl	80007bc <Error_Handler>
    Error_Handler();
 8000a00:	f7ff fedc 	bl	80007bc <Error_Handler>
 8000a04:	200002b4 	.word	0x200002b4
 8000a08:	40012000 	.word	0x40012000
 8000a0c:	0f000001 	.word	0x0f000001
 8000a10:	10000012 	.word	0x10000012

08000a14 <MX_LTDC_Init>:
{
 8000a14:	b500      	push	{lr}
 8000a16:	b08f      	sub	sp, #60	@ 0x3c
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000a18:	2234      	movs	r2, #52	@ 0x34
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	a801      	add	r0, sp, #4
 8000a1e:	f003 f923 	bl	8003c68 <memset>
  hltdc.Instance = LTDC;
 8000a22:	4825      	ldr	r0, [pc, #148]	@ (8000ab8 <MX_LTDC_Init+0xa4>)
 8000a24:	4b25      	ldr	r3, [pc, #148]	@ (8000abc <MX_LTDC_Init+0xa8>)
 8000a26:	6003      	str	r3, [r0, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	6043      	str	r3, [r0, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000a2c:	6083      	str	r3, [r0, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000a2e:	60c3      	str	r3, [r0, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000a30:	6103      	str	r3, [r0, #16]
  hltdc.Init.HorizontalSync = 7;
 8000a32:	2207      	movs	r2, #7
 8000a34:	6142      	str	r2, [r0, #20]
  hltdc.Init.VerticalSync = 3;
 8000a36:	2203      	movs	r2, #3
 8000a38:	6182      	str	r2, [r0, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000a3a:	220e      	movs	r2, #14
 8000a3c:	61c2      	str	r2, [r0, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000a3e:	2205      	movs	r2, #5
 8000a40:	6202      	str	r2, [r0, #32]
  hltdc.Init.AccumulatedActiveW = 334;
 8000a42:	f44f 72a7 	mov.w	r2, #334	@ 0x14e
 8000a46:	6242      	str	r2, [r0, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 245;
 8000a48:	22f5      	movs	r2, #245	@ 0xf5
 8000a4a:	6282      	str	r2, [r0, #40]	@ 0x28
  hltdc.Init.TotalWidth = 340;
 8000a4c:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 8000a50:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 247;
 8000a52:	22f7      	movs	r2, #247	@ 0xf7
 8000a54:	6302      	str	r2, [r0, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000a56:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000a5a:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000a5e:	f880 3036 	strb.w	r3, [r0, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000a62:	f001 fc13 	bl	800228c <HAL_LTDC_Init>
 8000a66:	bb10      	cbnz	r0, 8000aae <MX_LTDC_Init+0x9a>
  pLayerCfg.WindowX0 = 0;
 8000a68:	2200      	movs	r2, #0
 8000a6a:	9201      	str	r2, [sp, #4]
  pLayerCfg.WindowX1 = 320;
 8000a6c:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8000a70:	9102      	str	r1, [sp, #8]
  pLayerCfg.WindowY0 = 0;
 8000a72:	9203      	str	r2, [sp, #12]
  pLayerCfg.WindowY1 = 240;
 8000a74:	23f0      	movs	r3, #240	@ 0xf0
 8000a76:	9304      	str	r3, [sp, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000a78:	2002      	movs	r0, #2
 8000a7a:	9005      	str	r0, [sp, #20]
  pLayerCfg.Alpha = 255;
 8000a7c:	20ff      	movs	r0, #255	@ 0xff
 8000a7e:	9006      	str	r0, [sp, #24]
  pLayerCfg.Alpha0 = 0;
 8000a80:	9207      	str	r2, [sp, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000a82:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8000a86:	9008      	str	r0, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000a88:	2007      	movs	r0, #7
 8000a8a:	9009      	str	r0, [sp, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 8000a8c:	920a      	str	r2, [sp, #40]	@ 0x28
  pLayerCfg.ImageWidth = 320;
 8000a8e:	910b      	str	r1, [sp, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 240;
 8000a90:	930c      	str	r3, [sp, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000a92:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000a96:	f88d 2035 	strb.w	r2, [sp, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000a9a:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000a9e:	a901      	add	r1, sp, #4
 8000aa0:	4805      	ldr	r0, [pc, #20]	@ (8000ab8 <MX_LTDC_Init+0xa4>)
 8000aa2:	f001 fcdd 	bl	8002460 <HAL_LTDC_ConfigLayer>
 8000aa6:	b920      	cbnz	r0, 8000ab2 <MX_LTDC_Init+0x9e>
}
 8000aa8:	b00f      	add	sp, #60	@ 0x3c
 8000aaa:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000aae:	f7ff fe85 	bl	80007bc <Error_Handler>
    Error_Handler();
 8000ab2:	f7ff fe83 	bl	80007bc <Error_Handler>
 8000ab6:	bf00      	nop
 8000ab8:	20000150 	.word	0x20000150
 8000abc:	40016800 	.word	0x40016800

08000ac0 <SystemClock_Config>:
{
 8000ac0:	b500      	push	{lr}
 8000ac2:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac4:	2230      	movs	r2, #48	@ 0x30
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	a808      	add	r0, sp, #32
 8000aca:	f003 f8cd 	bl	8003c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ace:	2300      	movs	r3, #0
 8000ad0:	9303      	str	r3, [sp, #12]
 8000ad2:	9304      	str	r3, [sp, #16]
 8000ad4:	9305      	str	r3, [sp, #20]
 8000ad6:	9306      	str	r3, [sp, #24]
 8000ad8:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	9301      	str	r3, [sp, #4]
 8000adc:	4a21      	ldr	r2, [pc, #132]	@ (8000b64 <SystemClock_Config+0xa4>)
 8000ade:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000ae0:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8000ae4:	6411      	str	r1, [r2, #64]	@ 0x40
 8000ae6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000ae8:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000aec:	9201      	str	r2, [sp, #4]
 8000aee:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000af0:	9302      	str	r3, [sp, #8]
 8000af2:	4a1d      	ldr	r2, [pc, #116]	@ (8000b68 <SystemClock_Config+0xa8>)
 8000af4:	6813      	ldr	r3, [r2, #0]
 8000af6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000afa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000afe:	6013      	str	r3, [r2, #0]
 8000b00:	6813      	ldr	r3, [r2, #0]
 8000b02:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b06:	9302      	str	r3, [sp, #8]
 8000b08:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b0e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b12:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b14:	2202      	movs	r2, #2
 8000b16:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b18:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b1c:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b1e:	2304      	movs	r3, #4
 8000b20:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000b22:	2160      	movs	r1, #96	@ 0x60
 8000b24:	9111      	str	r1, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b26:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b28:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b2a:	a808      	add	r0, sp, #32
 8000b2c:	f001 fccc 	bl	80024c8 <HAL_RCC_OscConfig>
 8000b30:	b998      	cbnz	r0, 8000b5a <SystemClock_Config+0x9a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b32:	230f      	movs	r3, #15
 8000b34:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b36:	2302      	movs	r3, #2
 8000b38:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b3e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b42:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b48:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b4a:	2103      	movs	r1, #3
 8000b4c:	a803      	add	r0, sp, #12
 8000b4e:	f001 ff25 	bl	800299c <HAL_RCC_ClockConfig>
 8000b52:	b920      	cbnz	r0, 8000b5e <SystemClock_Config+0x9e>
}
 8000b54:	b015      	add	sp, #84	@ 0x54
 8000b56:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000b5a:	f7ff fe2f 	bl	80007bc <Error_Handler>
    Error_Handler();
 8000b5e:	f7ff fe2d 	bl	80007bc <Error_Handler>
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40007000 	.word	0x40007000

08000b6c <main>:
{
 8000b6c:	b508      	push	{r3, lr}
  HAL_Init();
 8000b6e:	f000 fbaf 	bl	80012d0 <HAL_Init>
  SystemClock_Config();
 8000b72:	f7ff ffa5 	bl	8000ac0 <SystemClock_Config>
  MX_GPIO_Init();
 8000b76:	f7ff fd2d 	bl	80005d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b7a:	f7ff fd19 	bl	80005b0 <MX_DMA_Init>
  MX_CRC_Init();
 8000b7e:	f7ff fe1f 	bl	80007c0 <MX_CRC_Init>
  MX_FMC_Init();
 8000b82:	f7ff fe2b 	bl	80007dc <MX_FMC_Init>
  MX_I2C3_Init();
 8000b86:	f7ff fe61 	bl	800084c <MX_I2C3_Init>
  MX_SPI5_Init();
 8000b8a:	f7ff fe89 	bl	80008a0 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000b8e:	f7ff fea7 	bl	80008e0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000b92:	f7ff fed9 	bl	8000948 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000b96:	f7ff fef1 	bl	800097c <MX_ADC1_Init>
  MX_LTDC_Init();
 8000b9a:	f7ff ff3b 	bl	8000a14 <MX_LTDC_Init>
  apInit();
 8000b9e:	f7ff fc9d 	bl	80004dc <apInit>
  apMain(); // 안에 while문이 있음.
 8000ba2:	f7ff fc9f 	bl	80004e4 <apMain>
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <main+0x3a>

08000ba8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bac:	b086      	sub	sp, #24
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000bae:	2300      	movs	r3, #0
 8000bb0:	9301      	str	r3, [sp, #4]
 8000bb2:	9302      	str	r3, [sp, #8]
 8000bb4:	9303      	str	r3, [sp, #12]
 8000bb6:	9304      	str	r3, [sp, #16]
 8000bb8:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 8000bba:	4b2d      	ldr	r3, [pc, #180]	@ (8000c70 <HAL_FMC_MspInit+0xc8>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	b113      	cbz	r3, 8000bc6 <HAL_FMC_MspInit+0x1e>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000bc0:	b006      	add	sp, #24
 8000bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  FMC_Initialized = 1;
 8000bc6:	f04f 0801 	mov.w	r8, #1
 8000bca:	4b29      	ldr	r3, [pc, #164]	@ (8000c70 <HAL_FMC_MspInit+0xc8>)
 8000bcc:	f8c3 8000 	str.w	r8, [r3]
  __HAL_RCC_FMC_CLK_ENABLE();
 8000bd0:	2600      	movs	r6, #0
 8000bd2:	9600      	str	r6, [sp, #0]
 8000bd4:	4b27      	ldr	r3, [pc, #156]	@ (8000c74 <HAL_FMC_MspInit+0xcc>)
 8000bd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000bd8:	ea42 0208 	orr.w	r2, r2, r8
 8000bdc:	639a      	str	r2, [r3, #56]	@ 0x38
 8000bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000be0:	ea03 0308 	and.w	r3, r3, r8
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000be8:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000bec:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2702      	movs	r7, #2
 8000bf0:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf2:	2503      	movs	r5, #3
 8000bf4:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bf6:	240c      	movs	r4, #12
 8000bf8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bfa:	a901      	add	r1, sp, #4
 8000bfc:	481e      	ldr	r0, [pc, #120]	@ (8000c78 <HAL_FMC_MspInit+0xd0>)
 8000bfe:	f001 f839 	bl	8001c74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000c02:	f8cd 8004 	str.w	r8, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c0c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	a901      	add	r1, sp, #4
 8000c10:	481a      	ldr	r0, [pc, #104]	@ (8000c7c <HAL_FMC_MspInit+0xd4>)
 8000c12:	f001 f82f 	bl	8001c74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000c16:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000c1a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c20:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c22:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c24:	a901      	add	r1, sp, #4
 8000c26:	4816      	ldr	r0, [pc, #88]	@ (8000c80 <HAL_FMC_MspInit+0xd8>)
 8000c28:	f001 f824 	bl	8001c74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000c2c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000c30:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c38:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c3a:	a901      	add	r1, sp, #4
 8000c3c:	4811      	ldr	r0, [pc, #68]	@ (8000c84 <HAL_FMC_MspInit+0xdc>)
 8000c3e:	f001 f819 	bl	8001c74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000c42:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000c46:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4c:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c4e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c50:	a901      	add	r1, sp, #4
 8000c52:	480d      	ldr	r0, [pc, #52]	@ (8000c88 <HAL_FMC_MspInit+0xe0>)
 8000c54:	f001 f80e 	bl	8001c74 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000c58:	2360      	movs	r3, #96	@ 0x60
 8000c5a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c60:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c62:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c64:	a901      	add	r1, sp, #4
 8000c66:	4809      	ldr	r0, [pc, #36]	@ (8000c8c <HAL_FMC_MspInit+0xe4>)
 8000c68:	f001 f804 	bl	8001c74 <HAL_GPIO_Init>
 8000c6c:	e7a8      	b.n	8000bc0 <HAL_FMC_MspInit+0x18>
 8000c6e:	bf00      	nop
 8000c70:	200002fc 	.word	0x200002fc
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40021400 	.word	0x40021400
 8000c7c:	40020800 	.word	0x40020800
 8000c80:	40021800 	.word	0x40021800
 8000c84:	40021000 	.word	0x40021000
 8000c88:	40020c00 	.word	0x40020c00
 8000c8c:	40020400 	.word	0x40020400

08000c90 <HAL_MspInit>:
{
 8000c90:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c92:	2100      	movs	r1, #0
 8000c94:	9100      	str	r1, [sp, #0]
 8000c96:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc4 <HAL_MspInit+0x34>)
 8000c98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000c9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000c9e:	645a      	str	r2, [r3, #68]	@ 0x44
 8000ca0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000ca2:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000ca6:	9200      	str	r2, [sp, #0]
 8000ca8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000caa:	9101      	str	r1, [sp, #4]
 8000cac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cae:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000cb2:	641a      	str	r2, [r3, #64]	@ 0x40
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cba:	9301      	str	r3, [sp, #4]
 8000cbc:	9b01      	ldr	r3, [sp, #4]
}
 8000cbe:	b002      	add	sp, #8
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	40023800 	.word	0x40023800

08000cc8 <HAL_ADC_MspInit>:
{
 8000cc8:	b530      	push	{r4, r5, lr}
 8000cca:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	2300      	movs	r3, #0
 8000cce:	9303      	str	r3, [sp, #12]
 8000cd0:	9304      	str	r3, [sp, #16]
 8000cd2:	9305      	str	r3, [sp, #20]
 8000cd4:	9306      	str	r3, [sp, #24]
 8000cd6:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 8000cd8:	6802      	ldr	r2, [r0, #0]
 8000cda:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000cde:	f503 3390 	add.w	r3, r3, #73728	@ 0x12000
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d001      	beq.n	8000cea <HAL_ADC_MspInit+0x22>
}
 8000ce6:	b009      	add	sp, #36	@ 0x24
 8000ce8:	bd30      	pop	{r4, r5, pc}
 8000cea:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cec:	2500      	movs	r5, #0
 8000cee:	9501      	str	r5, [sp, #4]
 8000cf0:	f503 338c 	add.w	r3, r3, #71680	@ 0x11800
 8000cf4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000cf6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000cfa:	645a      	str	r2, [r3, #68]	@ 0x44
 8000cfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000cfe:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8000d02:	9201      	str	r2, [sp, #4]
 8000d04:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	9502      	str	r5, [sp, #8]
 8000d08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d0a:	f042 0201 	orr.w	r2, r2, #1
 8000d0e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	9302      	str	r3, [sp, #8]
 8000d18:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d1a:	2320      	movs	r3, #32
 8000d1c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	a903      	add	r1, sp, #12
 8000d24:	4810      	ldr	r0, [pc, #64]	@ (8000d68 <HAL_ADC_MspInit+0xa0>)
 8000d26:	f000 ffa5 	bl	8001c74 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8000d2a:	4810      	ldr	r0, [pc, #64]	@ (8000d6c <HAL_ADC_MspInit+0xa4>)
 8000d2c:	4b10      	ldr	r3, [pc, #64]	@ (8000d70 <HAL_ADC_MspInit+0xa8>)
 8000d2e:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d30:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d32:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d34:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d3a:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d3c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d40:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d46:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d4c:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d4e:	6205      	str	r5, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d50:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d52:	f000 fe97 	bl	8001a84 <HAL_DMA_Init>
 8000d56:	b918      	cbnz	r0, 8000d60 <HAL_ADC_MspInit+0x98>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d58:	4b04      	ldr	r3, [pc, #16]	@ (8000d6c <HAL_ADC_MspInit+0xa4>)
 8000d5a:	63a3      	str	r3, [r4, #56]	@ 0x38
 8000d5c:	639c      	str	r4, [r3, #56]	@ 0x38
}
 8000d5e:	e7c2      	b.n	8000ce6 <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 8000d60:	f7ff fd2c 	bl	80007bc <Error_Handler>
 8000d64:	e7f8      	b.n	8000d58 <HAL_ADC_MspInit+0x90>
 8000d66:	bf00      	nop
 8000d68:	40020000 	.word	0x40020000
 8000d6c:	20000254 	.word	0x20000254
 8000d70:	40026410 	.word	0x40026410

08000d74 <HAL_CRC_MspInit>:
  if(hcrc->Instance==CRC)
 8000d74:	6802      	ldr	r2, [r0, #0]
 8000d76:	4b09      	ldr	r3, [pc, #36]	@ (8000d9c <HAL_CRC_MspInit+0x28>)
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d000      	beq.n	8000d7e <HAL_CRC_MspInit+0xa>
 8000d7c:	4770      	bx	lr
{
 8000d7e:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d80:	2300      	movs	r3, #0
 8000d82:	9301      	str	r3, [sp, #4]
 8000d84:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <HAL_CRC_MspInit+0x2c>)
 8000d86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d88:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000d8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d94:	9301      	str	r3, [sp, #4]
 8000d96:	9b01      	ldr	r3, [sp, #4]
}
 8000d98:	b002      	add	sp, #8
 8000d9a:	4770      	bx	lr
 8000d9c:	40023000 	.word	0x40023000
 8000da0:	40023800 	.word	0x40023800

08000da4 <HAL_I2C_MspInit>:
{
 8000da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000da8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000daa:	2300      	movs	r3, #0
 8000dac:	9303      	str	r3, [sp, #12]
 8000dae:	9304      	str	r3, [sp, #16]
 8000db0:	9305      	str	r3, [sp, #20]
 8000db2:	9306      	str	r3, [sp, #24]
 8000db4:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C3)
 8000db6:	6802      	ldr	r2, [r0, #0]
 8000db8:	4b20      	ldr	r3, [pc, #128]	@ (8000e3c <HAL_I2C_MspInit+0x98>)
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d002      	beq.n	8000dc4 <HAL_I2C_MspInit+0x20>
}
 8000dbe:	b008      	add	sp, #32
 8000dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc4:	2500      	movs	r5, #0
 8000dc6:	9500      	str	r5, [sp, #0]
 8000dc8:	4c1d      	ldr	r4, [pc, #116]	@ (8000e40 <HAL_I2C_MspInit+0x9c>)
 8000dca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000dcc:	f043 0304 	orr.w	r3, r3, #4
 8000dd0:	6323      	str	r3, [r4, #48]	@ 0x30
 8000dd2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000dd4:	f003 0304 	and.w	r3, r3, #4
 8000dd8:	9300      	str	r3, [sp, #0]
 8000dda:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ddc:	9501      	str	r5, [sp, #4]
 8000dde:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6323      	str	r3, [r4, #48]	@ 0x30
 8000de6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000de8:	f003 0301 	and.w	r3, r3, #1
 8000dec:	9301      	str	r3, [sp, #4]
 8000dee:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000df0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000df4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df6:	f04f 0812 	mov.w	r8, #18
 8000dfa:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dfe:	2701      	movs	r7, #1
 8000e00:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e02:	2604      	movs	r6, #4
 8000e04:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000e06:	a903      	add	r1, sp, #12
 8000e08:	480e      	ldr	r0, [pc, #56]	@ (8000e44 <HAL_I2C_MspInit+0xa0>)
 8000e0a:	f000 ff33 	bl	8001c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000e0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e12:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e14:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e18:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e1c:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000e1e:	a903      	add	r1, sp, #12
 8000e20:	4809      	ldr	r0, [pc, #36]	@ (8000e48 <HAL_I2C_MspInit+0xa4>)
 8000e22:	f000 ff27 	bl	8001c74 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000e26:	9502      	str	r5, [sp, #8]
 8000e28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000e2a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000e2e:	6423      	str	r3, [r4, #64]	@ 0x40
 8000e30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000e32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000e36:	9302      	str	r3, [sp, #8]
 8000e38:	9b02      	ldr	r3, [sp, #8]
}
 8000e3a:	e7c0      	b.n	8000dbe <HAL_I2C_MspInit+0x1a>
 8000e3c:	40005c00 	.word	0x40005c00
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40020800 	.word	0x40020800
 8000e48:	40020000 	.word	0x40020000

08000e4c <HAL_LTDC_MspInit>:
{
 8000e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e50:	b098      	sub	sp, #96	@ 0x60
 8000e52:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	2100      	movs	r1, #0
 8000e56:	9113      	str	r1, [sp, #76]	@ 0x4c
 8000e58:	9114      	str	r1, [sp, #80]	@ 0x50
 8000e5a:	9115      	str	r1, [sp, #84]	@ 0x54
 8000e5c:	9116      	str	r1, [sp, #88]	@ 0x58
 8000e5e:	9117      	str	r1, [sp, #92]	@ 0x5c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e60:	2230      	movs	r2, #48	@ 0x30
 8000e62:	a807      	add	r0, sp, #28
 8000e64:	f002 ff00 	bl	8003c68 <memset>
  if(hltdc->Instance==LTDC)
 8000e68:	6822      	ldr	r2, [r4, #0]
 8000e6a:	4b72      	ldr	r3, [pc, #456]	@ (8001034 <HAL_LTDC_MspInit+0x1e8>)
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d002      	beq.n	8000e76 <HAL_LTDC_MspInit+0x2a>
}
 8000e70:	b018      	add	sp, #96	@ 0x60
 8000e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000e76:	2308      	movs	r3, #8
 8000e78:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000e7a:	2332      	movs	r3, #50	@ 0x32
 8000e7c:	930b      	str	r3, [sp, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	930d      	str	r3, [sp, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e82:	a807      	add	r0, sp, #28
 8000e84:	f001 fe7e 	bl	8002b84 <HAL_RCCEx_PeriphCLKConfig>
 8000e88:	2800      	cmp	r0, #0
 8000e8a:	f040 80d0 	bne.w	800102e <HAL_LTDC_MspInit+0x1e2>
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000e8e:	2400      	movs	r4, #0
 8000e90:	9400      	str	r4, [sp, #0]
 8000e92:	4b69      	ldr	r3, [pc, #420]	@ (8001038 <HAL_LTDC_MspInit+0x1ec>)
 8000e94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000e96:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8000e9a:	645a      	str	r2, [r3, #68]	@ 0x44
 8000e9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000e9e:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 8000ea2:	9200      	str	r2, [sp, #0]
 8000ea4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ea6:	9401      	str	r4, [sp, #4]
 8000ea8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000eaa:	f042 0220 	orr.w	r2, r2, #32
 8000eae:	631a      	str	r2, [r3, #48]	@ 0x30
 8000eb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000eb2:	f002 0220 	and.w	r2, r2, #32
 8000eb6:	9201      	str	r2, [sp, #4]
 8000eb8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	9402      	str	r4, [sp, #8]
 8000ebc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ebe:	f042 0201 	orr.w	r2, r2, #1
 8000ec2:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ec4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ec6:	f002 0201 	and.w	r2, r2, #1
 8000eca:	9202      	str	r2, [sp, #8]
 8000ecc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ece:	9403      	str	r4, [sp, #12]
 8000ed0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ed2:	f042 0202 	orr.w	r2, r2, #2
 8000ed6:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ed8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000eda:	f002 0202 	and.w	r2, r2, #2
 8000ede:	9203      	str	r2, [sp, #12]
 8000ee0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ee2:	9404      	str	r4, [sp, #16]
 8000ee4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ee6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000eea:	631a      	str	r2, [r3, #48]	@ 0x30
 8000eec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000eee:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8000ef2:	9204      	str	r2, [sp, #16]
 8000ef4:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef6:	9405      	str	r4, [sp, #20]
 8000ef8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000efa:	f042 0204 	orr.w	r2, r2, #4
 8000efe:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f02:	f002 0204 	and.w	r2, r2, #4
 8000f06:	9205      	str	r2, [sp, #20]
 8000f08:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f0a:	9406      	str	r4, [sp, #24]
 8000f0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f0e:	f042 0208 	orr.w	r2, r2, #8
 8000f12:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	f003 0308 	and.w	r3, r3, #8
 8000f1a:	9306      	str	r3, [sp, #24]
 8000f1c:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8000f1e:	f44f 6a80 	mov.w	sl, #1024	@ 0x400
 8000f22:	f8cd a04c 	str.w	sl, [sp, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2502      	movs	r5, #2
 8000f28:	9514      	str	r5, [sp, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	9415      	str	r4, [sp, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f2c:	9516      	str	r5, [sp, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f2e:	260e      	movs	r6, #14
 8000f30:	9617      	str	r6, [sp, #92]	@ 0x5c
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000f32:	a913      	add	r1, sp, #76	@ 0x4c
 8000f34:	4841      	ldr	r0, [pc, #260]	@ (800103c <HAL_LTDC_MspInit+0x1f0>)
 8000f36:	f000 fe9d 	bl	8001c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000f3a:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000f3e:	9313      	str	r3, [sp, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	9514      	str	r5, [sp, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	9415      	str	r4, [sp, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f44:	9516      	str	r5, [sp, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f46:	9617      	str	r6, [sp, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f48:	a913      	add	r1, sp, #76	@ 0x4c
 8000f4a:	483d      	ldr	r0, [pc, #244]	@ (8001040 <HAL_LTDC_MspInit+0x1f4>)
 8000f4c:	f000 fe92 	bl	8001c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000f50:	2303      	movs	r3, #3
 8000f52:	9313      	str	r3, [sp, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f54:	9514      	str	r5, [sp, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	9415      	str	r4, [sp, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f58:	9516      	str	r5, [sp, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000f5a:	f04f 0809 	mov.w	r8, #9
 8000f5e:	f8cd 805c 	str.w	r8, [sp, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f62:	4f38      	ldr	r7, [pc, #224]	@ (8001044 <HAL_LTDC_MspInit+0x1f8>)
 8000f64:	a913      	add	r1, sp, #76	@ 0x4c
 8000f66:	4638      	mov	r0, r7
 8000f68:	f000 fe84 	bl	8001c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000f6c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000f70:	9313      	str	r3, [sp, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	9514      	str	r5, [sp, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	9415      	str	r4, [sp, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f76:	9516      	str	r5, [sp, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f78:	9617      	str	r6, [sp, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7a:	a913      	add	r1, sp, #76	@ 0x4c
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	f000 fe79 	bl	8001c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000f82:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000f86:	9313      	str	r3, [sp, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	9514      	str	r5, [sp, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	9415      	str	r4, [sp, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f8c:	9516      	str	r5, [sp, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f8e:	9617      	str	r6, [sp, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f90:	f507 57a0 	add.w	r7, r7, #5120	@ 0x1400
 8000f94:	a913      	add	r1, sp, #76	@ 0x4c
 8000f96:	4638      	mov	r0, r7
 8000f98:	f000 fe6c 	bl	8001c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin;
 8000f9c:	23c0      	movs	r3, #192	@ 0xc0
 8000f9e:	9313      	str	r3, [sp, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	9514      	str	r5, [sp, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	9415      	str	r4, [sp, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fa4:	9516      	str	r5, [sp, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fa6:	9617      	str	r6, [sp, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa8:	f8df 909c 	ldr.w	r9, [pc, #156]	@ 8001048 <HAL_LTDC_MspInit+0x1fc>
 8000fac:	a913      	add	r1, sp, #76	@ 0x4c
 8000fae:	4648      	mov	r0, r9
 8000fb0:	f000 fe60 	bl	8001c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = R2_Pin;
 8000fb4:	f8cd a04c 	str.w	sl, [sp, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	9514      	str	r5, [sp, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	9415      	str	r4, [sp, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	9416      	str	r4, [sp, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fbe:	9617      	str	r6, [sp, #92]	@ 0x5c
    HAL_GPIO_Init(R2_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	a913      	add	r1, sp, #76	@ 0x4c
 8000fc2:	4648      	mov	r0, r9
 8000fc4:	f000 fe56 	bl	8001c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = G7_Pin;
 8000fc8:	2308      	movs	r3, #8
 8000fca:	9313      	str	r3, [sp, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fcc:	9514      	str	r5, [sp, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	9415      	str	r4, [sp, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fd0:	9516      	str	r5, [sp, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fd2:	9617      	str	r6, [sp, #92]	@ 0x5c
    HAL_GPIO_Init(G7_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f509 6980 	add.w	r9, r9, #1024	@ 0x400
 8000fd8:	a913      	add	r1, sp, #76	@ 0x4c
 8000fda:	4648      	mov	r0, r9
 8000fdc:	f000 fe4a 	bl	8001c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = B2_Pin;
 8000fe0:	2340      	movs	r3, #64	@ 0x40
 8000fe2:	9313      	str	r3, [sp, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	9514      	str	r5, [sp, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	9415      	str	r4, [sp, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	9416      	str	r4, [sp, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fea:	9617      	str	r6, [sp, #92]	@ 0x5c
    HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8000fec:	a913      	add	r1, sp, #76	@ 0x4c
 8000fee:	4648      	mov	r0, r9
 8000ff0:	f000 fe40 	bl	8001c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000ff4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ff8:	9313      	str	r3, [sp, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	9514      	str	r5, [sp, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	9415      	str	r4, [sp, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ffe:	9516      	str	r5, [sp, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001000:	f8cd 805c 	str.w	r8, [sp, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001004:	a913      	add	r1, sp, #76	@ 0x4c
 8001006:	4638      	mov	r0, r7
 8001008:	f000 fe34 	bl	8001c74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800100c:	4622      	mov	r2, r4
 800100e:	4621      	mov	r1, r4
 8001010:	2058      	movs	r0, #88	@ 0x58
 8001012:	f000 fc93 	bl	800193c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001016:	2058      	movs	r0, #88	@ 0x58
 8001018:	f000 fca0 	bl	800195c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 800101c:	4622      	mov	r2, r4
 800101e:	4621      	mov	r1, r4
 8001020:	2059      	movs	r0, #89	@ 0x59
 8001022:	f000 fc8b 	bl	800193c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 8001026:	2059      	movs	r0, #89	@ 0x59
 8001028:	f000 fc98 	bl	800195c <HAL_NVIC_EnableIRQ>
}
 800102c:	e720      	b.n	8000e70 <HAL_LTDC_MspInit+0x24>
      Error_Handler();
 800102e:	f7ff fbc5 	bl	80007bc <Error_Handler>
 8001032:	e72c      	b.n	8000e8e <HAL_LTDC_MspInit+0x42>
 8001034:	40016800 	.word	0x40016800
 8001038:	40023800 	.word	0x40023800
 800103c:	40021400 	.word	0x40021400
 8001040:	40020000 	.word	0x40020000
 8001044:	40020400 	.word	0x40020400
 8001048:	40020800 	.word	0x40020800

0800104c <HAL_SPI_MspInit>:
{
 800104c:	b500      	push	{lr}
 800104e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	2300      	movs	r3, #0
 8001052:	9303      	str	r3, [sp, #12]
 8001054:	9304      	str	r3, [sp, #16]
 8001056:	9305      	str	r3, [sp, #20]
 8001058:	9306      	str	r3, [sp, #24]
 800105a:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI5)
 800105c:	6802      	ldr	r2, [r0, #0]
 800105e:	4b14      	ldr	r3, [pc, #80]	@ (80010b0 <HAL_SPI_MspInit+0x64>)
 8001060:	429a      	cmp	r2, r3
 8001062:	d002      	beq.n	800106a <HAL_SPI_MspInit+0x1e>
}
 8001064:	b009      	add	sp, #36	@ 0x24
 8001066:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI5_CLK_ENABLE();
 800106a:	2100      	movs	r1, #0
 800106c:	9101      	str	r1, [sp, #4]
 800106e:	f503 4368 	add.w	r3, r3, #59392	@ 0xe800
 8001072:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001074:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001078:	645a      	str	r2, [r3, #68]	@ 0x44
 800107a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800107c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001080:	9201      	str	r2, [sp, #4]
 8001082:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001084:	9102      	str	r1, [sp, #8]
 8001086:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001088:	f042 0220 	orr.w	r2, r2, #32
 800108c:	631a      	str	r2, [r3, #48]	@ 0x30
 800108e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001090:	f003 0320 	and.w	r3, r3, #32
 8001094:	9302      	str	r3, [sp, #8]
 8001096:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001098:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800109c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80010a2:	2305      	movs	r3, #5
 80010a4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010a6:	a903      	add	r1, sp, #12
 80010a8:	4802      	ldr	r0, [pc, #8]	@ (80010b4 <HAL_SPI_MspInit+0x68>)
 80010aa:	f000 fde3 	bl	8001c74 <HAL_GPIO_Init>
}
 80010ae:	e7d9      	b.n	8001064 <HAL_SPI_MspInit+0x18>
 80010b0:	40015000 	.word	0x40015000
 80010b4:	40021400 	.word	0x40021400

080010b8 <HAL_TIM_Base_MspInit>:
  if(htim_base->Instance==TIM1)
 80010b8:	6802      	ldr	r2, [r0, #0]
 80010ba:	4b09      	ldr	r3, [pc, #36]	@ (80010e0 <HAL_TIM_Base_MspInit+0x28>)
 80010bc:	429a      	cmp	r2, r3
 80010be:	d000      	beq.n	80010c2 <HAL_TIM_Base_MspInit+0xa>
 80010c0:	4770      	bx	lr
{
 80010c2:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010c4:	2300      	movs	r3, #0
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <HAL_TIM_Base_MspInit+0x2c>)
 80010ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80010cc:	f042 0201 	orr.w	r2, r2, #1
 80010d0:	645a      	str	r2, [r3, #68]	@ 0x44
 80010d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	9301      	str	r3, [sp, #4]
 80010da:	9b01      	ldr	r3, [sp, #4]
}
 80010dc:	b002      	add	sp, #8
 80010de:	4770      	bx	lr
 80010e0:	40010000 	.word	0x40010000
 80010e4:	40023800 	.word	0x40023800

080010e8 <HAL_UART_MspInit>:
{
 80010e8:	b510      	push	{r4, lr}
 80010ea:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	2300      	movs	r3, #0
 80010ee:	9303      	str	r3, [sp, #12]
 80010f0:	9304      	str	r3, [sp, #16]
 80010f2:	9305      	str	r3, [sp, #20]
 80010f4:	9306      	str	r3, [sp, #24]
 80010f6:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 80010f8:	6802      	ldr	r2, [r0, #0]
 80010fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80010fe:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8001102:	429a      	cmp	r2, r3
 8001104:	d001      	beq.n	800110a <HAL_UART_MspInit+0x22>
}
 8001106:	b008      	add	sp, #32
 8001108:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800110a:	2400      	movs	r4, #0
 800110c:	9401      	str	r4, [sp, #4]
 800110e:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8001112:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001114:	f042 0210 	orr.w	r2, r2, #16
 8001118:	645a      	str	r2, [r3, #68]	@ 0x44
 800111a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800111c:	f002 0210 	and.w	r2, r2, #16
 8001120:	9201      	str	r2, [sp, #4]
 8001122:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001124:	9402      	str	r4, [sp, #8]
 8001126:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001128:	f042 0201 	orr.w	r2, r2, #1
 800112c:	631a      	str	r2, [r3, #48]	@ 0x30
 800112e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	9302      	str	r3, [sp, #8]
 8001136:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001138:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800113c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001142:	2303      	movs	r3, #3
 8001144:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001146:	2307      	movs	r3, #7
 8001148:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	a903      	add	r1, sp, #12
 800114c:	4805      	ldr	r0, [pc, #20]	@ (8001164 <HAL_UART_MspInit+0x7c>)
 800114e:	f000 fd91 	bl	8001c74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001152:	4622      	mov	r2, r4
 8001154:	4621      	mov	r1, r4
 8001156:	2025      	movs	r0, #37	@ 0x25
 8001158:	f000 fbf0 	bl	800193c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800115c:	2025      	movs	r0, #37	@ 0x25
 800115e:	f000 fbfd 	bl	800195c <HAL_NVIC_EnableIRQ>
}
 8001162:	e7d0      	b.n	8001106 <HAL_UART_MspInit+0x1e>
 8001164:	40020000 	.word	0x40020000

08001168 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001168:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800116a:	f7ff fd1d 	bl	8000ba8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800116e:	bd08      	pop	{r3, pc}

08001170 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001170:	b530      	push	{r4, r5, lr}
 8001172:	b089      	sub	sp, #36	@ 0x24
 8001174:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	4b21      	ldr	r3, [pc, #132]	@ (8001200 <HAL_InitTick+0x90>)
 800117c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800117e:	f042 0210 	orr.w	r2, r2, #16
 8001182:	641a      	str	r2, [r3, #64]	@ 0x40
 8001184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001186:	f003 0310 	and.w	r3, r3, #16
 800118a:	9301      	str	r3, [sp, #4]
 800118c:	9b01      	ldr	r3, [sp, #4]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800118e:	a902      	add	r1, sp, #8
 8001190:	a803      	add	r0, sp, #12
 8001192:	f001 fcd9 	bl	8002b48 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001196:	9b06      	ldr	r3, [sp, #24]
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001198:	b9cb      	cbnz	r3, 80011ce <HAL_InitTick+0x5e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800119a:	f001 fcb5 	bl	8002b08 <HAL_RCC_GetPCLK1Freq>
 800119e:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011a0:	4a18      	ldr	r2, [pc, #96]	@ (8001204 <HAL_InitTick+0x94>)
 80011a2:	fba2 2303 	umull	r2, r3, r2, r3
 80011a6:	0c9b      	lsrs	r3, r3, #18
 80011a8:	3b01      	subs	r3, #1

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80011aa:	4817      	ldr	r0, [pc, #92]	@ (8001208 <HAL_InitTick+0x98>)
 80011ac:	4a17      	ldr	r2, [pc, #92]	@ (800120c <HAL_InitTick+0x9c>)
 80011ae:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80011b0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011b4:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80011b6:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011bc:	6083      	str	r3, [r0, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011be:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80011c0:	f002 f834 	bl	800322c <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80011c4:	4605      	mov	r5, r0
 80011c6:	b130      	cbz	r0, 80011d6 <HAL_InitTick+0x66>
    }
  }

 /* Return function status */
  return status;
}
 80011c8:	4628      	mov	r0, r5
 80011ca:	b009      	add	sp, #36	@ 0x24
 80011cc:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011ce:	f001 fc9b 	bl	8002b08 <HAL_RCC_GetPCLK1Freq>
 80011d2:	0043      	lsls	r3, r0, #1
 80011d4:	e7e4      	b.n	80011a0 <HAL_InitTick+0x30>
    status = HAL_TIM_Base_Start_IT(&htim6);
 80011d6:	480c      	ldr	r0, [pc, #48]	@ (8001208 <HAL_InitTick+0x98>)
 80011d8:	f001 fec4 	bl	8002f64 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80011dc:	4605      	mov	r5, r0
 80011de:	2800      	cmp	r0, #0
 80011e0:	d1f2      	bne.n	80011c8 <HAL_InitTick+0x58>
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011e2:	2036      	movs	r0, #54	@ 0x36
 80011e4:	f000 fbba 	bl	800195c <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e8:	2c0f      	cmp	r4, #15
 80011ea:	d901      	bls.n	80011f0 <HAL_InitTick+0x80>
        status = HAL_ERROR;
 80011ec:	2501      	movs	r5, #1
 80011ee:	e7eb      	b.n	80011c8 <HAL_InitTick+0x58>
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80011f0:	2200      	movs	r2, #0
 80011f2:	4621      	mov	r1, r4
 80011f4:	2036      	movs	r0, #54	@ 0x36
 80011f6:	f000 fba1 	bl	800193c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011fa:	4b05      	ldr	r3, [pc, #20]	@ (8001210 <HAL_InitTick+0xa0>)
 80011fc:	601c      	str	r4, [r3, #0]
 80011fe:	e7e3      	b.n	80011c8 <HAL_InitTick+0x58>
 8001200:	40023800 	.word	0x40023800
 8001204:	431bde83 	.word	0x431bde83
 8001208:	20000300 	.word	0x20000300
 800120c:	40001000 	.word	0x40001000
 8001210:	20000008 	.word	0x20000008

08001214 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001214:	e7fe      	b.n	8001214 <NMI_Handler>

08001216 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001216:	e7fe      	b.n	8001216 <HardFault_Handler>

08001218 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001218:	e7fe      	b.n	8001218 <MemManage_Handler>

0800121a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <BusFault_Handler>

0800121c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800121c:	e7fe      	b.n	800121c <UsageFault_Handler>

0800121e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800121e:	4770      	bx	lr

08001220 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001220:	4770      	bx	lr

08001222 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001222:	4770      	bx	lr

08001224 <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001224:	4770      	bx	lr
	...

08001228 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001228:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800122a:	4802      	ldr	r0, [pc, #8]	@ (8001234 <USART1_IRQHandler+0xc>)
 800122c:	f002 fb4a 	bl	80038c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001230:	bd08      	pop	{r3, pc}
 8001232:	bf00      	nop
 8001234:	20000068 	.word	0x20000068

08001238 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001238:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800123a:	4802      	ldr	r0, [pc, #8]	@ (8001244 <TIM6_DAC_IRQHandler+0xc>)
 800123c:	f001 feda 	bl	8002ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001240:	bd08      	pop	{r3, pc}
 8001242:	bf00      	nop
 8001244:	20000300 	.word	0x20000300

08001248 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001248:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800124a:	4802      	ldr	r0, [pc, #8]	@ (8001254 <LTDC_IRQHandler+0xc>)
 800124c:	f001 f89b 	bl	8002386 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001250:	bd08      	pop	{r3, pc}
 8001252:	bf00      	nop
 8001254:	20000150 	.word	0x20000150

08001258 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC global error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 8001258:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800125a:	4802      	ldr	r0, [pc, #8]	@ (8001264 <LTDC_ER_IRQHandler+0xc>)
 800125c:	f001 f893 	bl	8002386 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 8001260:	bd08      	pop	{r3, pc}
 8001262:	bf00      	nop
 8001264:	20000150 	.word	0x20000150

08001268 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001268:	4a03      	ldr	r2, [pc, #12]	@ (8001278 <SystemInit+0x10>)
 800126a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800126e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001272:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800127c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001280:	f7ff fff2 	bl	8001268 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001284:	480c      	ldr	r0, [pc, #48]	@ (80012b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001286:	490d      	ldr	r1, [pc, #52]	@ (80012bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001288:	4a0d      	ldr	r2, [pc, #52]	@ (80012c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800128a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800128c:	e002      	b.n	8001294 <LoopCopyDataInit>

0800128e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001292:	3304      	adds	r3, #4

08001294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001298:	d3f9      	bcc.n	800128e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800129a:	4a0a      	ldr	r2, [pc, #40]	@ (80012c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800129c:	4c0a      	ldr	r4, [pc, #40]	@ (80012c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a0:	e001      	b.n	80012a6 <LoopFillZerobss>

080012a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a4:	3204      	adds	r2, #4

080012a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a8:	d3fb      	bcc.n	80012a2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80012aa:	f002 fce5 	bl	8003c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ae:	f7ff fc5d 	bl	8000b6c <main>
  bx  lr    
 80012b2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80012b4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80012b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012c0:	08003d10 	.word	0x08003d10
  ldr r2, =_sbss
 80012c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012c8:	2000034c 	.word	0x2000034c

080012cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012cc:	e7fe      	b.n	80012cc <ADC_IRQHandler>
	...

080012d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001300 <HAL_Init+0x30>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80012da:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80012e2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80012ea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ec:	2003      	movs	r0, #3
 80012ee:	f000 fb13 	bl	8001918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012f2:	200f      	movs	r0, #15
 80012f4:	f7ff ff3c 	bl	8001170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f8:	f7ff fcca 	bl	8000c90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80012fc:	2000      	movs	r0, #0
 80012fe:	bd08      	pop	{r3, pc}
 8001300:	40023c00 	.word	0x40023c00

08001304 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001304:	4a03      	ldr	r2, [pc, #12]	@ (8001314 <HAL_IncTick+0x10>)
 8001306:	6811      	ldr	r1, [r2, #0]
 8001308:	4b03      	ldr	r3, [pc, #12]	@ (8001318 <HAL_IncTick+0x14>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	440b      	add	r3, r1
 800130e:	6013      	str	r3, [r2, #0]
}
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	20000348 	.word	0x20000348
 8001318:	20000004 	.word	0x20000004

0800131c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800131c:	4b01      	ldr	r3, [pc, #4]	@ (8001324 <HAL_GetTick+0x8>)
 800131e:	6818      	ldr	r0, [r3, #0]
}
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	20000348 	.word	0x20000348

08001328 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001328:	4b4a      	ldr	r3, [pc, #296]	@ (8001454 <ADC_Init+0x12c>)
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8001330:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	6841      	ldr	r1, [r0, #4]
 8001336:	430a      	orrs	r2, r1
 8001338:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800133a:	6802      	ldr	r2, [r0, #0]
 800133c:	6853      	ldr	r3, [r2, #4]
 800133e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001342:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001344:	6802      	ldr	r2, [r0, #0]
 8001346:	6853      	ldr	r3, [r2, #4]
 8001348:	6901      	ldr	r1, [r0, #16]
 800134a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800134e:	6053      	str	r3, [r2, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001350:	6802      	ldr	r2, [r0, #0]
 8001352:	6853      	ldr	r3, [r2, #4]
 8001354:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8001358:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800135a:	6802      	ldr	r2, [r0, #0]
 800135c:	6853      	ldr	r3, [r2, #4]
 800135e:	6881      	ldr	r1, [r0, #8]
 8001360:	430b      	orrs	r3, r1
 8001362:	6053      	str	r3, [r2, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001364:	6802      	ldr	r2, [r0, #0]
 8001366:	6893      	ldr	r3, [r2, #8]
 8001368:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800136c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800136e:	6802      	ldr	r2, [r0, #0]
 8001370:	6893      	ldr	r3, [r2, #8]
 8001372:	68c1      	ldr	r1, [r0, #12]
 8001374:	430b      	orrs	r3, r1
 8001376:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001378:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800137a:	4b37      	ldr	r3, [pc, #220]	@ (8001458 <ADC_Init+0x130>)
 800137c:	429a      	cmp	r2, r3
 800137e:	d057      	beq.n	8001430 <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001380:	6802      	ldr	r2, [r0, #0]
 8001382:	6893      	ldr	r3, [r2, #8]
 8001384:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001388:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800138a:	6802      	ldr	r2, [r0, #0]
 800138c:	6893      	ldr	r3, [r2, #8]
 800138e:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8001390:	430b      	orrs	r3, r1
 8001392:	6093      	str	r3, [r2, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001394:	6802      	ldr	r2, [r0, #0]
 8001396:	6893      	ldr	r3, [r2, #8]
 8001398:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800139c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800139e:	6802      	ldr	r2, [r0, #0]
 80013a0:	6893      	ldr	r3, [r2, #8]
 80013a2:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80013a4:	430b      	orrs	r3, r1
 80013a6:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80013a8:	6802      	ldr	r2, [r0, #0]
 80013aa:	6893      	ldr	r3, [r2, #8]
 80013ac:	f023 0302 	bic.w	r3, r3, #2
 80013b0:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80013b2:	6802      	ldr	r2, [r0, #0]
 80013b4:	6893      	ldr	r3, [r2, #8]
 80013b6:	7e01      	ldrb	r1, [r0, #24]
 80013b8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80013bc:	6093      	str	r3, [r2, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80013be:	f890 3020 	ldrb.w	r3, [r0, #32]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d03f      	beq.n	8001446 <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80013c6:	6802      	ldr	r2, [r0, #0]
 80013c8:	6853      	ldr	r3, [r2, #4]
 80013ca:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013ce:	6053      	str	r3, [r2, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80013d0:	6802      	ldr	r2, [r0, #0]
 80013d2:	6853      	ldr	r3, [r2, #4]
 80013d4:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80013d8:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80013da:	6801      	ldr	r1, [r0, #0]
 80013dc:	684b      	ldr	r3, [r1, #4]
 80013de:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 80013e0:	3a01      	subs	r2, #1
 80013e2:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80013e6:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80013e8:	6802      	ldr	r2, [r0, #0]
 80013ea:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80013ec:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80013f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80013f2:	6801      	ldr	r1, [r0, #0]
 80013f4:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 80013f6:	69c2      	ldr	r2, [r0, #28]
 80013f8:	3a01      	subs	r2, #1
 80013fa:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80013fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001400:	6802      	ldr	r2, [r0, #0]
 8001402:	6893      	ldr	r3, [r2, #8]
 8001404:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001408:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800140a:	6802      	ldr	r2, [r0, #0]
 800140c:	6893      	ldr	r3, [r2, #8]
 800140e:	f890 1030 	ldrb.w	r1, [r0, #48]	@ 0x30
 8001412:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8001416:	6093      	str	r3, [r2, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001418:	6802      	ldr	r2, [r0, #0]
 800141a:	6893      	ldr	r3, [r2, #8]
 800141c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001420:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001422:	6802      	ldr	r2, [r0, #0]
 8001424:	6893      	ldr	r3, [r2, #8]
 8001426:	6941      	ldr	r1, [r0, #20]
 8001428:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800142c:	6093      	str	r3, [r2, #8]
}
 800142e:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001430:	6802      	ldr	r2, [r0, #0]
 8001432:	6893      	ldr	r3, [r2, #8]
 8001434:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001438:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800143a:	6802      	ldr	r2, [r0, #0]
 800143c:	6893      	ldr	r3, [r2, #8]
 800143e:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8001442:	6093      	str	r3, [r2, #8]
 8001444:	e7b0      	b.n	80013a8 <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001446:	6802      	ldr	r2, [r0, #0]
 8001448:	6853      	ldr	r3, [r2, #4]
 800144a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800144e:	6053      	str	r3, [r2, #4]
 8001450:	e7ca      	b.n	80013e8 <ADC_Init+0xc0>
 8001452:	bf00      	nop
 8001454:	40012300 	.word	0x40012300
 8001458:	0f000001 	.word	0x0f000001

0800145c <HAL_ADC_Init>:
  if (hadc == NULL)
 800145c:	b338      	cbz	r0, 80014ae <HAL_ADC_Init+0x52>
{
 800145e:	b510      	push	{r4, lr}
 8001460:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001462:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001464:	b143      	cbz	r3, 8001478 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001466:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001468:	f013 0f10 	tst.w	r3, #16
 800146c:	d00b      	beq.n	8001486 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 800146e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001470:	2300      	movs	r3, #0
 8001472:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001476:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8001478:	f7ff fc26 	bl	8000cc8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800147c:	2300      	movs	r3, #0
 800147e:	6463      	str	r3, [r4, #68]	@ 0x44
    hadc->Lock = HAL_UNLOCKED;
 8001480:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 8001484:	e7ef      	b.n	8001466 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8001486:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001488:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800148c:	f023 0302 	bic.w	r3, r3, #2
 8001490:	f043 0302 	orr.w	r3, r3, #2
 8001494:	6423      	str	r3, [r4, #64]	@ 0x40
    ADC_Init(hadc);
 8001496:	4620      	mov	r0, r4
 8001498:	f7ff ff46 	bl	8001328 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 800149c:	2000      	movs	r0, #0
 800149e:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80014a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80014a2:	f023 0303 	bic.w	r3, r3, #3
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	6423      	str	r3, [r4, #64]	@ 0x40
 80014ac:	e7e0      	b.n	8001470 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 80014ae:	2001      	movs	r0, #1
}
 80014b0:	4770      	bx	lr
	...

080014b4 <HAL_ADC_Start_DMA>:
{
 80014b4:	b510      	push	{r4, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 80014ba:	2200      	movs	r2, #0
 80014bc:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80014be:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80014c2:	2a01      	cmp	r2, #1
 80014c4:	f000 80ae 	beq.w	8001624 <HAL_ADC_Start_DMA+0x170>
 80014c8:	4604      	mov	r4, r0
 80014ca:	2201      	movs	r2, #1
 80014cc:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80014d0:	6802      	ldr	r2, [r0, #0]
 80014d2:	6890      	ldr	r0, [r2, #8]
 80014d4:	f010 0f01 	tst.w	r0, #1
 80014d8:	d113      	bne.n	8001502 <HAL_ADC_Start_DMA+0x4e>
    __HAL_ADC_ENABLE(hadc);
 80014da:	6890      	ldr	r0, [r2, #8]
 80014dc:	f040 0001 	orr.w	r0, r0, #1
 80014e0:	6090      	str	r0, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014e2:	4a53      	ldr	r2, [pc, #332]	@ (8001630 <HAL_ADC_Start_DMA+0x17c>)
 80014e4:	6810      	ldr	r0, [r2, #0]
 80014e6:	4a53      	ldr	r2, [pc, #332]	@ (8001634 <HAL_ADC_Start_DMA+0x180>)
 80014e8:	fba2 2000 	umull	r2, r0, r2, r0
 80014ec:	0c80      	lsrs	r0, r0, #18
 80014ee:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80014f2:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 80014f4:	e002      	b.n	80014fc <HAL_ADC_Start_DMA+0x48>
      counter--;
 80014f6:	9801      	ldr	r0, [sp, #4]
 80014f8:	3801      	subs	r0, #1
 80014fa:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 80014fc:	9801      	ldr	r0, [sp, #4]
 80014fe:	2800      	cmp	r0, #0
 8001500:	d1f9      	bne.n	80014f6 <HAL_ADC_Start_DMA+0x42>
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001502:	6822      	ldr	r2, [r4, #0]
 8001504:	6890      	ldr	r0, [r2, #8]
 8001506:	f410 7f80 	tst.w	r0, #256	@ 0x100
 800150a:	d003      	beq.n	8001514 <HAL_ADC_Start_DMA+0x60>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800150c:	6890      	ldr	r0, [r2, #8]
 800150e:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 8001512:	6090      	str	r0, [r2, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001514:	6822      	ldr	r2, [r4, #0]
 8001516:	6890      	ldr	r0, [r2, #8]
 8001518:	f010 0f01 	tst.w	r0, #1
 800151c:	d077      	beq.n	800160e <HAL_ADC_Start_DMA+0x15a>
    ADC_STATE_CLR_SET(hadc->State,
 800151e:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8001520:	f420 60e0 	bic.w	r0, r0, #1792	@ 0x700
 8001524:	f020 0001 	bic.w	r0, r0, #1
 8001528:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 800152c:	6420      	str	r0, [r4, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800152e:	6852      	ldr	r2, [r2, #4]
 8001530:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001534:	d005      	beq.n	8001542 <HAL_ADC_Start_DMA+0x8e>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001536:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001538:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800153c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001540:	6422      	str	r2, [r4, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001542:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001544:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 8001548:	d036      	beq.n	80015b8 <HAL_ADC_Start_DMA+0x104>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800154a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800154c:	f022 0206 	bic.w	r2, r2, #6
 8001550:	6462      	str	r2, [r4, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 8001552:	2200      	movs	r2, #0
 8001554:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001558:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800155a:	4837      	ldr	r0, [pc, #220]	@ (8001638 <HAL_ADC_Start_DMA+0x184>)
 800155c:	63d0      	str	r0, [r2, #60]	@ 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800155e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001560:	4836      	ldr	r0, [pc, #216]	@ (800163c <HAL_ADC_Start_DMA+0x188>)
 8001562:	6410      	str	r0, [r2, #64]	@ 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001564:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001566:	4836      	ldr	r0, [pc, #216]	@ (8001640 <HAL_ADC_Start_DMA+0x18c>)
 8001568:	64d0      	str	r0, [r2, #76]	@ 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800156a:	6822      	ldr	r2, [r4, #0]
 800156c:	f06f 0022 	mvn.w	r0, #34	@ 0x22
 8001570:	6010      	str	r0, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001572:	6820      	ldr	r0, [r4, #0]
 8001574:	6842      	ldr	r2, [r0, #4]
 8001576:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800157a:	6042      	str	r2, [r0, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800157c:	6820      	ldr	r0, [r4, #0]
 800157e:	6882      	ldr	r2, [r0, #8]
 8001580:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001584:	6082      	str	r2, [r0, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001586:	6820      	ldr	r0, [r4, #0]
 8001588:	460a      	mov	r2, r1
 800158a:	f100 014c 	add.w	r1, r0, #76	@ 0x4c
 800158e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001590:	f000 fade 	bl	8001b50 <HAL_DMA_Start_IT>
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001594:	4b2b      	ldr	r3, [pc, #172]	@ (8001644 <HAL_ADC_Start_DMA+0x190>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f013 0f1f 	tst.w	r3, #31
 800159c:	d127      	bne.n	80015ee <HAL_ADC_Start_DMA+0x13a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800159e:	6823      	ldr	r3, [r4, #0]
 80015a0:	4a29      	ldr	r2, [pc, #164]	@ (8001648 <HAL_ADC_Start_DMA+0x194>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d011      	beq.n	80015ca <HAL_ADC_Start_DMA+0x116>
 80015a6:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d007      	beq.n	80015be <HAL_ADC_Start_DMA+0x10a>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80015ae:	4a27      	ldr	r2, [pc, #156]	@ (800164c <HAL_ADC_Start_DMA+0x198>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d014      	beq.n	80015de <HAL_ADC_Start_DMA+0x12a>
  return HAL_OK;
 80015b4:	2000      	movs	r0, #0
 80015b6:	e033      	b.n	8001620 <HAL_ADC_Start_DMA+0x16c>
      ADC_CLEAR_ERRORCODE(hadc);
 80015b8:	2200      	movs	r2, #0
 80015ba:	6462      	str	r2, [r4, #68]	@ 0x44
 80015bc:	e7c9      	b.n	8001552 <HAL_ADC_Start_DMA+0x9e>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80015be:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 80015c2:	6852      	ldr	r2, [r2, #4]
 80015c4:	f012 0f1f 	tst.w	r2, #31
 80015c8:	d1f1      	bne.n	80015ae <HAL_ADC_Start_DMA+0xfa>
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 80015d0:	d12a      	bne.n	8001628 <HAL_ADC_Start_DMA+0x174>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80015d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80015da:	2000      	movs	r0, #0
 80015dc:	e020      	b.n	8001620 <HAL_ADC_Start_DMA+0x16c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80015de:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 80015e2:	6852      	ldr	r2, [r2, #4]
 80015e4:	f012 0f10 	tst.w	r2, #16
 80015e8:	d0ef      	beq.n	80015ca <HAL_ADC_Start_DMA+0x116>
  return HAL_OK;
 80015ea:	2000      	movs	r0, #0
 80015ec:	e018      	b.n	8001620 <HAL_ADC_Start_DMA+0x16c>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015ee:	6823      	ldr	r3, [r4, #0]
 80015f0:	4a15      	ldr	r2, [pc, #84]	@ (8001648 <HAL_ADC_Start_DMA+0x194>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d001      	beq.n	80015fa <HAL_ADC_Start_DMA+0x146>
  return HAL_OK;
 80015f6:	2000      	movs	r0, #0
 80015f8:	e012      	b.n	8001620 <HAL_ADC_Start_DMA+0x16c>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001600:	d114      	bne.n	800162c <HAL_ADC_Start_DMA+0x178>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001608:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800160a:	2000      	movs	r0, #0
 800160c:	e008      	b.n	8001620 <HAL_ADC_Start_DMA+0x16c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800160e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001610:	f043 0310 	orr.w	r3, r3, #16
 8001614:	6423      	str	r3, [r4, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001616:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6463      	str	r3, [r4, #68]	@ 0x44
  return HAL_OK;
 800161e:	2000      	movs	r0, #0
}
 8001620:	b002      	add	sp, #8
 8001622:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8001624:	2002      	movs	r0, #2
 8001626:	e7fb      	b.n	8001620 <HAL_ADC_Start_DMA+0x16c>
  return HAL_OK;
 8001628:	2000      	movs	r0, #0
 800162a:	e7f9      	b.n	8001620 <HAL_ADC_Start_DMA+0x16c>
 800162c:	2000      	movs	r0, #0
 800162e:	e7f7      	b.n	8001620 <HAL_ADC_Start_DMA+0x16c>
 8001630:	20000000 	.word	0x20000000
 8001634:	431bde83 	.word	0x431bde83
 8001638:	08001677 	.word	0x08001677
 800163c:	08001655 	.word	0x08001655
 8001640:	08001661 	.word	0x08001661
 8001644:	40012300 	.word	0x40012300
 8001648:	40012000 	.word	0x40012000
 800164c:	40012200 	.word	0x40012200

08001650 <HAL_ADC_ConvCpltCallback>:
}
 8001650:	4770      	bx	lr

08001652 <HAL_ADC_ConvHalfCpltCallback>:
}
 8001652:	4770      	bx	lr

08001654 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001654:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001656:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8001658:	f7ff fffb 	bl	8001652 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800165c:	bd08      	pop	{r3, pc}

0800165e <HAL_ADC_ErrorCallback>:
}
 800165e:	4770      	bx	lr

08001660 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001660:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001662:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001664:	2340      	movs	r3, #64	@ 0x40
 8001666:	6403      	str	r3, [r0, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001668:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800166a:	f043 0304 	orr.w	r3, r3, #4
 800166e:	6443      	str	r3, [r0, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001670:	f7ff fff5 	bl	800165e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001674:	bd08      	pop	{r3, pc}

08001676 <ADC_DMAConvCplt>:
{
 8001676:	b508      	push	{r3, lr}
 8001678:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800167a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800167c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800167e:	f012 0f50 	tst.w	r2, #80	@ 0x50
 8001682:	d125      	bne.n	80016d0 <ADC_DMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001684:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001686:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800168a:	6403      	str	r3, [r0, #64]	@ 0x40
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800168c:	6803      	ldr	r3, [r0, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001694:	d119      	bne.n	80016ca <ADC_DMAConvCplt+0x54>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001696:	7e02      	ldrb	r2, [r0, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001698:	b9ba      	cbnz	r2, 80016ca <ADC_DMAConvCplt+0x54>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800169a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800169c:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 80016a0:	d003      	beq.n	80016aa <ADC_DMAConvCplt+0x34>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80016a2:	689a      	ldr	r2, [r3, #8]
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80016a4:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80016a8:	d10f      	bne.n	80016ca <ADC_DMAConvCplt+0x54>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	f022 0220 	bic.w	r2, r2, #32
 80016b0:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80016b2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80016b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80016b8:	6403      	str	r3, [r0, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016ba:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80016bc:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 80016c0:	d103      	bne.n	80016ca <ADC_DMAConvCplt+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016c2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6403      	str	r3, [r0, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80016ca:	f7ff ffc1 	bl	8001650 <HAL_ADC_ConvCpltCallback>
}
 80016ce:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80016d0:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80016d2:	f012 0f10 	tst.w	r2, #16
 80016d6:	d104      	bne.n	80016e2 <ADC_DMAConvCplt+0x6c>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80016d8:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 80016da:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80016dc:	4618      	mov	r0, r3
 80016de:	4790      	blx	r2
}
 80016e0:	e7f5      	b.n	80016ce <ADC_DMAConvCplt+0x58>
      HAL_ADC_ErrorCallback(hadc);
 80016e2:	f7ff ffbc 	bl	800165e <HAL_ADC_ErrorCallback>
 80016e6:	e7f2      	b.n	80016ce <ADC_DMAConvCplt+0x58>

080016e8 <HAL_ADC_ConfigChannel>:
{
 80016e8:	b430      	push	{r4, r5}
 80016ea:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80016ec:	2200      	movs	r2, #0
 80016ee:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80016f0:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80016f4:	2a01      	cmp	r2, #1
 80016f6:	f000 80c0 	beq.w	800187a <HAL_ADC_ConfigChannel+0x192>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2201      	movs	r2, #1
 80016fe:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001702:	680a      	ldr	r2, [r1, #0]
 8001704:	2a09      	cmp	r2, #9
 8001706:	d940      	bls.n	800178a <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001708:	6804      	ldr	r4, [r0, #0]
 800170a:	68e0      	ldr	r0, [r4, #12]
 800170c:	b292      	uxth	r2, r2
 800170e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001712:	3a1e      	subs	r2, #30
 8001714:	f04f 0c07 	mov.w	ip, #7
 8001718:	fa0c f202 	lsl.w	r2, ip, r2
 800171c:	ea20 0202 	bic.w	r2, r0, r2
 8001720:	60e2      	str	r2, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001722:	681c      	ldr	r4, [r3, #0]
 8001724:	68e0      	ldr	r0, [r4, #12]
 8001726:	880a      	ldrh	r2, [r1, #0]
 8001728:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800172c:	3a1e      	subs	r2, #30
 800172e:	688d      	ldr	r5, [r1, #8]
 8001730:	fa05 f202 	lsl.w	r2, r5, r2
 8001734:	4302      	orrs	r2, r0
 8001736:	60e2      	str	r2, [r4, #12]
  if (sConfig->Rank < 7U)
 8001738:	684a      	ldr	r2, [r1, #4]
 800173a:	2a06      	cmp	r2, #6
 800173c:	d83c      	bhi.n	80017b8 <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800173e:	681c      	ldr	r4, [r3, #0]
 8001740:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8001742:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001746:	3a05      	subs	r2, #5
 8001748:	f04f 0c1f 	mov.w	ip, #31
 800174c:	fa0c f202 	lsl.w	r2, ip, r2
 8001750:	ea20 0202 	bic.w	r2, r0, r2
 8001754:	6362      	str	r2, [r4, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001756:	681c      	ldr	r4, [r3, #0]
 8001758:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800175a:	684a      	ldr	r2, [r1, #4]
 800175c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001760:	3a05      	subs	r2, #5
 8001762:	f8b1 c000 	ldrh.w	ip, [r1]
 8001766:	fa0c f202 	lsl.w	r2, ip, r2
 800176a:	4302      	orrs	r2, r0
 800176c:	6362      	str	r2, [r4, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800176e:	6818      	ldr	r0, [r3, #0]
 8001770:	4a43      	ldr	r2, [pc, #268]	@ (8001880 <HAL_ADC_ConfigChannel+0x198>)
 8001772:	4290      	cmp	r0, r2
 8001774:	d050      	beq.n	8001818 <HAL_ADC_ConfigChannel+0x130>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001776:	6818      	ldr	r0, [r3, #0]
 8001778:	4a41      	ldr	r2, [pc, #260]	@ (8001880 <HAL_ADC_ConfigChannel+0x198>)
 800177a:	4290      	cmp	r0, r2
 800177c:	d059      	beq.n	8001832 <HAL_ADC_ConfigChannel+0x14a>
  __HAL_UNLOCK(hadc);
 800177e:	2000      	movs	r0, #0
 8001780:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 8001784:	b002      	add	sp, #8
 8001786:	bc30      	pop	{r4, r5}
 8001788:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800178a:	6804      	ldr	r4, [r0, #0]
 800178c:	6920      	ldr	r0, [r4, #16]
 800178e:	b292      	uxth	r2, r2
 8001790:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001794:	f04f 0c07 	mov.w	ip, #7
 8001798:	fa0c f202 	lsl.w	r2, ip, r2
 800179c:	ea20 0202 	bic.w	r2, r0, r2
 80017a0:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017a2:	681c      	ldr	r4, [r3, #0]
 80017a4:	6920      	ldr	r0, [r4, #16]
 80017a6:	880a      	ldrh	r2, [r1, #0]
 80017a8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80017ac:	688d      	ldr	r5, [r1, #8]
 80017ae:	fa05 f202 	lsl.w	r2, r5, r2
 80017b2:	4302      	orrs	r2, r0
 80017b4:	6122      	str	r2, [r4, #16]
 80017b6:	e7bf      	b.n	8001738 <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 80017b8:	2a0c      	cmp	r2, #12
 80017ba:	d816      	bhi.n	80017ea <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017bc:	681d      	ldr	r5, [r3, #0]
 80017be:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80017c0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80017c4:	3a23      	subs	r2, #35	@ 0x23
 80017c6:	241f      	movs	r4, #31
 80017c8:	fa04 f202 	lsl.w	r2, r4, r2
 80017cc:	ea20 0202 	bic.w	r2, r0, r2
 80017d0:	632a      	str	r2, [r5, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017d2:	681d      	ldr	r5, [r3, #0]
 80017d4:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80017d6:	684a      	ldr	r2, [r1, #4]
 80017d8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80017dc:	3a23      	subs	r2, #35	@ 0x23
 80017de:	880c      	ldrh	r4, [r1, #0]
 80017e0:	fa04 f202 	lsl.w	r2, r4, r2
 80017e4:	4302      	orrs	r2, r0
 80017e6:	632a      	str	r2, [r5, #48]	@ 0x30
 80017e8:	e7c1      	b.n	800176e <HAL_ADC_ConfigChannel+0x86>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017ea:	681d      	ldr	r5, [r3, #0]
 80017ec:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80017ee:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80017f2:	3a41      	subs	r2, #65	@ 0x41
 80017f4:	241f      	movs	r4, #31
 80017f6:	fa04 f202 	lsl.w	r2, r4, r2
 80017fa:	ea20 0202 	bic.w	r2, r0, r2
 80017fe:	62ea      	str	r2, [r5, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001800:	681d      	ldr	r5, [r3, #0]
 8001802:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001804:	684a      	ldr	r2, [r1, #4]
 8001806:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800180a:	3a41      	subs	r2, #65	@ 0x41
 800180c:	880c      	ldrh	r4, [r1, #0]
 800180e:	fa04 f202 	lsl.w	r2, r4, r2
 8001812:	4302      	orrs	r2, r0
 8001814:	62ea      	str	r2, [r5, #44]	@ 0x2c
 8001816:	e7aa      	b.n	800176e <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001818:	680a      	ldr	r2, [r1, #0]
 800181a:	2a12      	cmp	r2, #18
 800181c:	d1ab      	bne.n	8001776 <HAL_ADC_ConfigChannel+0x8e>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800181e:	4a19      	ldr	r2, [pc, #100]	@ (8001884 <HAL_ADC_ConfigChannel+0x19c>)
 8001820:	6850      	ldr	r0, [r2, #4]
 8001822:	f420 0000 	bic.w	r0, r0, #8388608	@ 0x800000
 8001826:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001828:	6850      	ldr	r0, [r2, #4]
 800182a:	f440 0080 	orr.w	r0, r0, #4194304	@ 0x400000
 800182e:	6050      	str	r0, [r2, #4]
 8001830:	e7a1      	b.n	8001776 <HAL_ADC_ConfigChannel+0x8e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001832:	680a      	ldr	r2, [r1, #0]
 8001834:	4814      	ldr	r0, [pc, #80]	@ (8001888 <HAL_ADC_ConfigChannel+0x1a0>)
 8001836:	4282      	cmp	r2, r0
 8001838:	d001      	beq.n	800183e <HAL_ADC_ConfigChannel+0x156>
 800183a:	2a11      	cmp	r2, #17
 800183c:	d19f      	bne.n	800177e <HAL_ADC_ConfigChannel+0x96>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800183e:	4a11      	ldr	r2, [pc, #68]	@ (8001884 <HAL_ADC_ConfigChannel+0x19c>)
 8001840:	6850      	ldr	r0, [r2, #4]
 8001842:	f420 0080 	bic.w	r0, r0, #4194304	@ 0x400000
 8001846:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001848:	6850      	ldr	r0, [r2, #4]
 800184a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800184e:	6050      	str	r0, [r2, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001850:	6809      	ldr	r1, [r1, #0]
 8001852:	4a0d      	ldr	r2, [pc, #52]	@ (8001888 <HAL_ADC_ConfigChannel+0x1a0>)
 8001854:	4291      	cmp	r1, r2
 8001856:	d192      	bne.n	800177e <HAL_ADC_ConfigChannel+0x96>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001858:	4a0c      	ldr	r2, [pc, #48]	@ (800188c <HAL_ADC_ConfigChannel+0x1a4>)
 800185a:	6812      	ldr	r2, [r2, #0]
 800185c:	490c      	ldr	r1, [pc, #48]	@ (8001890 <HAL_ADC_ConfigChannel+0x1a8>)
 800185e:	fba1 1202 	umull	r1, r2, r1, r2
 8001862:	0c92      	lsrs	r2, r2, #18
 8001864:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001868:	0052      	lsls	r2, r2, #1
 800186a:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 800186c:	9a01      	ldr	r2, [sp, #4]
 800186e:	2a00      	cmp	r2, #0
 8001870:	d085      	beq.n	800177e <HAL_ADC_ConfigChannel+0x96>
        counter--;
 8001872:	9a01      	ldr	r2, [sp, #4]
 8001874:	3a01      	subs	r2, #1
 8001876:	9201      	str	r2, [sp, #4]
 8001878:	e7f8      	b.n	800186c <HAL_ADC_ConfigChannel+0x184>
  __HAL_LOCK(hadc);
 800187a:	2002      	movs	r0, #2
 800187c:	e782      	b.n	8001784 <HAL_ADC_ConfigChannel+0x9c>
 800187e:	bf00      	nop
 8001880:	40012000 	.word	0x40012000
 8001884:	40012300 	.word	0x40012300
 8001888:	10000012 	.word	0x10000012
 800188c:	20000000 	.word	0x20000000
 8001890:	431bde83 	.word	0x431bde83

08001894 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8001894:	2800      	cmp	r0, #0
 8001896:	db07      	blt.n	80018a8 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001898:	f000 021f 	and.w	r2, r0, #31
 800189c:	0940      	lsrs	r0, r0, #5
 800189e:	2301      	movs	r3, #1
 80018a0:	4093      	lsls	r3, r2
 80018a2:	4a02      	ldr	r2, [pc, #8]	@ (80018ac <__NVIC_EnableIRQ+0x18>)
 80018a4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000e100 	.word	0xe000e100

080018b0 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80018b0:	2800      	cmp	r0, #0
 80018b2:	db08      	blt.n	80018c6 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b4:	0109      	lsls	r1, r1, #4
 80018b6:	b2c9      	uxtb	r1, r1
 80018b8:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80018bc:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80018c0:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 80018c4:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c6:	f000 000f 	and.w	r0, r0, #15
 80018ca:	0109      	lsls	r1, r1, #4
 80018cc:	b2c9      	uxtb	r1, r1
 80018ce:	4b01      	ldr	r3, [pc, #4]	@ (80018d4 <__NVIC_SetPriority+0x24>)
 80018d0:	5419      	strb	r1, [r3, r0]
  }
}
 80018d2:	4770      	bx	lr
 80018d4:	e000ed14 	.word	0xe000ed14

080018d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d8:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018da:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018de:	f1c0 0c07 	rsb	ip, r0, #7
 80018e2:	f1bc 0f04 	cmp.w	ip, #4
 80018e6:	bf28      	it	cs
 80018e8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ec:	1d03      	adds	r3, r0, #4
 80018ee:	2b06      	cmp	r3, #6
 80018f0:	d90f      	bls.n	8001912 <NVIC_EncodePriority+0x3a>
 80018f2:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	f04f 3eff 	mov.w	lr, #4294967295
 80018f8:	fa0e f00c 	lsl.w	r0, lr, ip
 80018fc:	ea21 0100 	bic.w	r1, r1, r0
 8001900:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001902:	fa0e fe03 	lsl.w	lr, lr, r3
 8001906:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 800190a:	ea41 0002 	orr.w	r0, r1, r2
 800190e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001912:	2300      	movs	r3, #0
 8001914:	e7ee      	b.n	80018f4 <NVIC_EncodePriority+0x1c>
	...

08001918 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001918:	4a07      	ldr	r2, [pc, #28]	@ (8001938 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800191a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800191c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001920:	041b      	lsls	r3, r3, #16
 8001922:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001924:	0200      	lsls	r0, r0, #8
 8001926:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800192a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800192c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001930:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001934:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001936:	4770      	bx	lr
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800193c:	b510      	push	{r4, lr}
 800193e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001940:	4b05      	ldr	r3, [pc, #20]	@ (8001958 <HAL_NVIC_SetPriority+0x1c>)
 8001942:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001944:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001948:	f7ff ffc6 	bl	80018d8 <NVIC_EncodePriority>
 800194c:	4601      	mov	r1, r0
 800194e:	4620      	mov	r0, r4
 8001950:	f7ff ffae 	bl	80018b0 <__NVIC_SetPriority>
}
 8001954:	bd10      	pop	{r4, pc}
 8001956:	bf00      	nop
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800195e:	f7ff ff99 	bl	8001894 <__NVIC_EnableIRQ>
}
 8001962:	bd08      	pop	{r3, pc}

08001964 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001964:	b158      	cbz	r0, 800197e <HAL_CRC_Init+0x1a>
{
 8001966:	b510      	push	{r4, lr}
 8001968:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800196a:	7943      	ldrb	r3, [r0, #5]
 800196c:	b11b      	cbz	r3, 8001976 <HAL_CRC_Init+0x12>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800196e:	2301      	movs	r3, #1
 8001970:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8001972:	2000      	movs	r0, #0
}
 8001974:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8001976:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8001978:	f7ff f9fc 	bl	8000d74 <HAL_CRC_MspInit>
 800197c:	e7f7      	b.n	800196e <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 800197e:	2001      	movs	r0, #1
}
 8001980:	4770      	bx	lr

08001982 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001982:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001984:	6805      	ldr	r5, [r0, #0]
 8001986:	682c      	ldr	r4, [r5, #0]
 8001988:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 800198c:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800198e:	6804      	ldr	r4, [r0, #0]
 8001990:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001992:	6883      	ldr	r3, [r0, #8]
 8001994:	2b40      	cmp	r3, #64	@ 0x40
 8001996:	d005      	beq.n	80019a4 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8001998:	6803      	ldr	r3, [r0, #0]
 800199a:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 800199c:	6803      	ldr	r3, [r0, #0]
 800199e:	60da      	str	r2, [r3, #12]
  }
}
 80019a0:	bc30      	pop	{r4, r5}
 80019a2:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 80019a4:	6803      	ldr	r3, [r0, #0]
 80019a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 80019a8:	6803      	ldr	r3, [r0, #0]
 80019aa:	60d9      	str	r1, [r3, #12]
 80019ac:	e7f8      	b.n	80019a0 <DMA_SetConfig+0x1e>
	...

080019b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019b0:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019b2:	6803      	ldr	r3, [r0, #0]
 80019b4:	b2d9      	uxtb	r1, r3
 80019b6:	3910      	subs	r1, #16
 80019b8:	4a0c      	ldr	r2, [pc, #48]	@ (80019ec <DMA_CalcBaseAndBitshift+0x3c>)
 80019ba:	fba2 4201 	umull	r4, r2, r2, r1
 80019be:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019c0:	4c0b      	ldr	r4, [pc, #44]	@ (80019f0 <DMA_CalcBaseAndBitshift+0x40>)
 80019c2:	5ca2      	ldrb	r2, [r4, r2]
 80019c4:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80019c6:	295f      	cmp	r1, #95	@ 0x5f
 80019c8:	d909      	bls.n	80019de <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80019ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80019ce:	f023 0303 	bic.w	r3, r3, #3
 80019d2:	3304      	adds	r3, #4
 80019d4:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80019d6:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 80019d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80019dc:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80019de:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80019e2:	f023 0303 	bic.w	r3, r3, #3
 80019e6:	6583      	str	r3, [r0, #88]	@ 0x58
 80019e8:	e7f5      	b.n	80019d6 <DMA_CalcBaseAndBitshift+0x26>
 80019ea:	bf00      	nop
 80019ec:	aaaaaaab 	.word	0xaaaaaaab
 80019f0:	08003cf8 	.word	0x08003cf8

080019f4 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019f4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019f6:	6982      	ldr	r2, [r0, #24]
 80019f8:	b992      	cbnz	r2, 8001a20 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d00a      	beq.n	8001a14 <DMA_CheckFifoParam+0x20>
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d002      	beq.n	8001a08 <DMA_CheckFifoParam+0x14>
 8001a02:	b10b      	cbz	r3, 8001a08 <DMA_CheckFifoParam+0x14>
 8001a04:	2000      	movs	r0, #0
 8001a06:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a08:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001a0a:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001a0e:	d128      	bne.n	8001a62 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8001a10:	2000      	movs	r0, #0
 8001a12:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a14:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001a16:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001a1a:	d024      	beq.n	8001a66 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a20:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8001a24:	d009      	beq.n	8001a3a <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d925      	bls.n	8001a76 <DMA_CheckFifoParam+0x82>
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d125      	bne.n	8001a7a <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a2e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001a30:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001a34:	d123      	bne.n	8001a7e <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8001a36:	2000      	movs	r0, #0
 8001a38:	4770      	bx	lr
    switch (tmp)
 8001a3a:	2b03      	cmp	r3, #3
 8001a3c:	d803      	bhi.n	8001a46 <DMA_CheckFifoParam+0x52>
 8001a3e:	e8df f003 	tbb	[pc, r3]
 8001a42:	0414      	.short	0x0414
 8001a44:	0a14      	.short	0x0a14
 8001a46:	2000      	movs	r0, #0
 8001a48:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a4a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001a4c:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001a50:	d10d      	bne.n	8001a6e <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001a52:	2000      	movs	r0, #0
 8001a54:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a56:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001a58:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001a5c:	d009      	beq.n	8001a72 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8001a5e:	2000      	movs	r0, #0
 8001a60:	4770      	bx	lr
        status = HAL_ERROR;
 8001a62:	2001      	movs	r0, #1
 8001a64:	4770      	bx	lr
        status = HAL_ERROR;
 8001a66:	2001      	movs	r0, #1
 8001a68:	4770      	bx	lr
      status = HAL_ERROR;
 8001a6a:	2001      	movs	r0, #1
 8001a6c:	4770      	bx	lr
        status = HAL_ERROR;
 8001a6e:	2001      	movs	r0, #1
 8001a70:	4770      	bx	lr
        status = HAL_ERROR;
 8001a72:	2001      	movs	r0, #1
 8001a74:	4770      	bx	lr
      status = HAL_ERROR;
 8001a76:	2001      	movs	r0, #1
 8001a78:	4770      	bx	lr
    switch (tmp)
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8001a7e:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001a80:	4770      	bx	lr
	...

08001a84 <HAL_DMA_Init>:
{
 8001a84:	b570      	push	{r4, r5, r6, lr}
 8001a86:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001a88:	f7ff fc48 	bl	800131c <HAL_GetTick>
  if(hdma == NULL)
 8001a8c:	2c00      	cmp	r4, #0
 8001a8e:	d05b      	beq.n	8001b48 <HAL_DMA_Init+0xc4>
 8001a90:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a92:	2302      	movs	r3, #2
 8001a94:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8001a98:	2300      	movs	r3, #0
 8001a9a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8001a9e:	6822      	ldr	r2, [r4, #0]
 8001aa0:	6813      	ldr	r3, [r2, #0]
 8001aa2:	f023 0301 	bic.w	r3, r3, #1
 8001aa6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aa8:	6823      	ldr	r3, [r4, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	f012 0f01 	tst.w	r2, #1
 8001ab0:	d00a      	beq.n	8001ac8 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ab2:	f7ff fc33 	bl	800131c <HAL_GetTick>
 8001ab6:	1b43      	subs	r3, r0, r5
 8001ab8:	2b05      	cmp	r3, #5
 8001aba:	d9f5      	bls.n	8001aa8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001abc:	2320      	movs	r3, #32
 8001abe:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ac0:	2003      	movs	r0, #3
 8001ac2:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8001ac6:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8001ac8:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001aca:	4920      	ldr	r1, [pc, #128]	@ (8001b4c <HAL_DMA_Init+0xc8>)
 8001acc:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ace:	6862      	ldr	r2, [r4, #4]
 8001ad0:	68a0      	ldr	r0, [r4, #8]
 8001ad2:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ad4:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ad6:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ad8:	6920      	ldr	r0, [r4, #16]
 8001ada:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001adc:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ade:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ae0:	69a0      	ldr	r0, [r4, #24]
 8001ae2:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ae4:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ae6:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ae8:	6a20      	ldr	r0, [r4, #32]
 8001aea:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aec:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001aee:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001af0:	2904      	cmp	r1, #4
 8001af2:	d01e      	beq.n	8001b32 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8001af4:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001af6:	6826      	ldr	r6, [r4, #0]
 8001af8:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001afa:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8001afe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001b00:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	d107      	bne.n	8001b16 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8001b06:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001b08:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b0a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001b0c:	b11b      	cbz	r3, 8001b16 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b0e:	4620      	mov	r0, r4
 8001b10:	f7ff ff70 	bl	80019f4 <DMA_CheckFifoParam>
 8001b14:	b990      	cbnz	r0, 8001b3c <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8001b16:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b18:	4620      	mov	r0, r4
 8001b1a:	f7ff ff49 	bl	80019b0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b1e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001b20:	233f      	movs	r3, #63	@ 0x3f
 8001b22:	4093      	lsls	r3, r2
 8001b24:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b26:	2000      	movs	r0, #0
 8001b28:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8001b30:	e7c9      	b.n	8001ac6 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b32:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001b34:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8001b36:	4301      	orrs	r1, r0
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	e7db      	b.n	8001af4 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b3c:	2340      	movs	r3, #64	@ 0x40
 8001b3e:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001b40:	2001      	movs	r0, #1
 8001b42:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 8001b46:	e7be      	b.n	8001ac6 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001b48:	2001      	movs	r0, #1
 8001b4a:	e7bc      	b.n	8001ac6 <HAL_DMA_Init+0x42>
 8001b4c:	f010803f 	.word	0xf010803f

08001b50 <HAL_DMA_Start_IT>:
{
 8001b50:	b538      	push	{r3, r4, r5, lr}
 8001b52:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b54:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8001b56:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8001b5a:	2801      	cmp	r0, #1
 8001b5c:	d02b      	beq.n	8001bb6 <HAL_DMA_Start_IT+0x66>
 8001b5e:	2001      	movs	r0, #1
 8001b60:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b64:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8001b68:	b2c0      	uxtb	r0, r0
 8001b6a:	2801      	cmp	r0, #1
 8001b6c:	d004      	beq.n	8001b78 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 8001b74:	2002      	movs	r0, #2
}
 8001b76:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b78:	2002      	movs	r0, #2
 8001b7a:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b7e:	2000      	movs	r0, #0
 8001b80:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b82:	4620      	mov	r0, r4
 8001b84:	f7ff fefd 	bl	8001982 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b88:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001b8a:	233f      	movs	r3, #63	@ 0x3f
 8001b8c:	4093      	lsls	r3, r2
 8001b8e:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b90:	6822      	ldr	r2, [r4, #0]
 8001b92:	6813      	ldr	r3, [r2, #0]
 8001b94:	f043 0316 	orr.w	r3, r3, #22
 8001b98:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001b9a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001b9c:	b123      	cbz	r3, 8001ba8 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b9e:	6822      	ldr	r2, [r4, #0]
 8001ba0:	6813      	ldr	r3, [r2, #0]
 8001ba2:	f043 0308 	orr.w	r3, r3, #8
 8001ba6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001ba8:	6822      	ldr	r2, [r4, #0]
 8001baa:	6813      	ldr	r3, [r2, #0]
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	e7df      	b.n	8001b76 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8001bb6:	2002      	movs	r0, #2
 8001bb8:	e7dd      	b.n	8001b76 <HAL_DMA_Start_IT+0x26>

08001bba <HAL_DMA_Abort>:
{
 8001bba:	b570      	push	{r4, r5, r6, lr}
 8001bbc:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bbe:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 8001bc0:	f7ff fbac 	bl	800131c <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bc4:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d006      	beq.n	8001bdc <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bce:	2380      	movs	r3, #128	@ 0x80
 8001bd0:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8001bd8:	2001      	movs	r0, #1
}
 8001bda:	bd70      	pop	{r4, r5, r6, pc}
 8001bdc:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bde:	6822      	ldr	r2, [r4, #0]
 8001be0:	6813      	ldr	r3, [r2, #0]
 8001be2:	f023 0316 	bic.w	r3, r3, #22
 8001be6:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001be8:	6822      	ldr	r2, [r4, #0]
 8001bea:	6953      	ldr	r3, [r2, #20]
 8001bec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001bf0:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bf2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001bf4:	b1e3      	cbz	r3, 8001c30 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bf6:	6822      	ldr	r2, [r4, #0]
 8001bf8:	6813      	ldr	r3, [r2, #0]
 8001bfa:	f023 0308 	bic.w	r3, r3, #8
 8001bfe:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001c00:	6822      	ldr	r2, [r4, #0]
 8001c02:	6813      	ldr	r3, [r2, #0]
 8001c04:	f023 0301 	bic.w	r3, r3, #1
 8001c08:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c0a:	6823      	ldr	r3, [r4, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f013 0f01 	tst.w	r3, #1
 8001c12:	d011      	beq.n	8001c38 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c14:	f7ff fb82 	bl	800131c <HAL_GetTick>
 8001c18:	1b43      	subs	r3, r0, r5
 8001c1a:	2b05      	cmp	r3, #5
 8001c1c:	d9f5      	bls.n	8001c0a <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c1e:	2320      	movs	r3, #32
 8001c20:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c22:	2003      	movs	r0, #3
 8001c24:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        return HAL_TIMEOUT;
 8001c2e:	e7d4      	b.n	8001bda <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c30:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1df      	bne.n	8001bf6 <HAL_DMA_Abort+0x3c>
 8001c36:	e7e3      	b.n	8001c00 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c38:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001c3a:	233f      	movs	r3, #63	@ 0x3f
 8001c3c:	4093      	lsls	r3, r2
 8001c3e:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8001c40:	2301      	movs	r3, #1
 8001c42:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8001c46:	2000      	movs	r0, #0
 8001c48:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  return HAL_OK;
 8001c4c:	e7c5      	b.n	8001bda <HAL_DMA_Abort+0x20>

08001c4e <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c4e:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d003      	beq.n	8001c60 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c58:	2380      	movs	r3, #128	@ 0x80
 8001c5a:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c60:	2305      	movs	r3, #5
 8001c62:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8001c66:	6802      	ldr	r2, [r0, #0]
 8001c68:	6813      	ldr	r3, [r2, #0]
 8001c6a:	f023 0301 	bic.w	r3, r3, #1
 8001c6e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001c70:	2000      	movs	r0, #0
}
 8001c72:	4770      	bx	lr

08001c74 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c74:	2300      	movs	r3, #0
 8001c76:	2b0f      	cmp	r3, #15
 8001c78:	f200 80f6 	bhi.w	8001e68 <HAL_GPIO_Init+0x1f4>
{
 8001c7c:	b570      	push	{r4, r5, r6, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	e066      	b.n	8001d50 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c82:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c84:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001c88:	2403      	movs	r4, #3
 8001c8a:	fa04 f40e 	lsl.w	r4, r4, lr
 8001c8e:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c92:	68cc      	ldr	r4, [r1, #12]
 8001c94:	fa04 f40e 	lsl.w	r4, r4, lr
 8001c98:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001c9a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c9c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c9e:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ca2:	684a      	ldr	r2, [r1, #4]
 8001ca4:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001ca8:	409a      	lsls	r2, r3
 8001caa:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001cac:	6042      	str	r2, [r0, #4]
 8001cae:	e05d      	b.n	8001d6c <HAL_GPIO_Init+0xf8>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cb0:	08dc      	lsrs	r4, r3, #3
 8001cb2:	3408      	adds	r4, #8
 8001cb4:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cb8:	f003 0507 	and.w	r5, r3, #7
 8001cbc:	00ad      	lsls	r5, r5, #2
 8001cbe:	f04f 0e0f 	mov.w	lr, #15
 8001cc2:	fa0e fe05 	lsl.w	lr, lr, r5
 8001cc6:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cca:	690a      	ldr	r2, [r1, #16]
 8001ccc:	40aa      	lsls	r2, r5
 8001cce:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001cd2:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001cd6:	e05d      	b.n	8001d94 <HAL_GPIO_Init+0x120>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cd8:	2209      	movs	r2, #9
 8001cda:	e000      	b.n	8001cde <HAL_GPIO_Init+0x6a>
 8001cdc:	2200      	movs	r2, #0
 8001cde:	fa02 f20e 	lsl.w	r2, r2, lr
 8001ce2:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ce4:	3402      	adds	r4, #2
 8001ce6:	4d61      	ldr	r5, [pc, #388]	@ (8001e6c <HAL_GPIO_Init+0x1f8>)
 8001ce8:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cec:	4a60      	ldr	r2, [pc, #384]	@ (8001e70 <HAL_GPIO_Init+0x1fc>)
 8001cee:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001cf0:	ea6f 020c 	mvn.w	r2, ip
 8001cf4:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cf8:	684e      	ldr	r6, [r1, #4]
 8001cfa:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8001cfe:	d001      	beq.n	8001d04 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8001d00:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001d04:	4c5a      	ldr	r4, [pc, #360]	@ (8001e70 <HAL_GPIO_Init+0x1fc>)
 8001d06:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001d08:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001d0a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d0e:	684e      	ldr	r6, [r1, #4]
 8001d10:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8001d14:	d001      	beq.n	8001d1a <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8001d16:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001d1a:	4c55      	ldr	r4, [pc, #340]	@ (8001e70 <HAL_GPIO_Init+0x1fc>)
 8001d1c:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8001d1e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001d20:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d24:	684e      	ldr	r6, [r1, #4]
 8001d26:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8001d2a:	d001      	beq.n	8001d30 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001d2c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001d30:	4c4f      	ldr	r4, [pc, #316]	@ (8001e70 <HAL_GPIO_Init+0x1fc>)
 8001d32:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d34:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001d36:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d38:	684d      	ldr	r5, [r1, #4]
 8001d3a:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8001d3e:	d001      	beq.n	8001d44 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8001d40:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001d44:	4c4a      	ldr	r4, [pc, #296]	@ (8001e70 <HAL_GPIO_Init+0x1fc>)
 8001d46:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d48:	3301      	adds	r3, #1
 8001d4a:	2b0f      	cmp	r3, #15
 8001d4c:	f200 808a 	bhi.w	8001e64 <HAL_GPIO_Init+0x1f0>
    ioposition = 0x01U << position;
 8001d50:	2201      	movs	r2, #1
 8001d52:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d54:	680c      	ldr	r4, [r1, #0]
 8001d56:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001d5a:	ea32 0404 	bics.w	r4, r2, r4
 8001d5e:	d1f3      	bne.n	8001d48 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d60:	684c      	ldr	r4, [r1, #4]
 8001d62:	f004 0403 	and.w	r4, r4, #3
 8001d66:	3c01      	subs	r4, #1
 8001d68:	2c01      	cmp	r4, #1
 8001d6a:	d98a      	bls.n	8001c82 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d6c:	684a      	ldr	r2, [r1, #4]
 8001d6e:	f002 0203 	and.w	r2, r2, #3
 8001d72:	2a03      	cmp	r2, #3
 8001d74:	d009      	beq.n	8001d8a <HAL_GPIO_Init+0x116>
        temp = GPIOx->PUPDR;
 8001d76:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d78:	005d      	lsls	r5, r3, #1
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	40aa      	lsls	r2, r5
 8001d7e:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d82:	688a      	ldr	r2, [r1, #8]
 8001d84:	40aa      	lsls	r2, r5
 8001d86:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001d88:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d8a:	684a      	ldr	r2, [r1, #4]
 8001d8c:	f002 0203 	and.w	r2, r2, #3
 8001d90:	2a02      	cmp	r2, #2
 8001d92:	d08d      	beq.n	8001cb0 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8001d94:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d96:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001d9a:	2203      	movs	r2, #3
 8001d9c:	fa02 f20e 	lsl.w	r2, r2, lr
 8001da0:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001da4:	684a      	ldr	r2, [r1, #4]
 8001da6:	f002 0203 	and.w	r2, r2, #3
 8001daa:	fa02 f20e 	lsl.w	r2, r2, lr
 8001dae:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001db0:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001db2:	684a      	ldr	r2, [r1, #4]
 8001db4:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8001db8:	d0c6      	beq.n	8001d48 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dba:	2200      	movs	r2, #0
 8001dbc:	9201      	str	r2, [sp, #4]
 8001dbe:	4a2d      	ldr	r2, [pc, #180]	@ (8001e74 <HAL_GPIO_Init+0x200>)
 8001dc0:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8001dc2:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001dc6:	6454      	str	r4, [r2, #68]	@ 0x44
 8001dc8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001dca:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001dce:	9201      	str	r2, [sp, #4]
 8001dd0:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001dd2:	089c      	lsrs	r4, r3, #2
 8001dd4:	1ca5      	adds	r5, r4, #2
 8001dd6:	4a25      	ldr	r2, [pc, #148]	@ (8001e6c <HAL_GPIO_Init+0x1f8>)
 8001dd8:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ddc:	f003 0e03 	and.w	lr, r3, #3
 8001de0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001de4:	220f      	movs	r2, #15
 8001de6:	fa02 f20e 	lsl.w	r2, r2, lr
 8001dea:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dee:	4a22      	ldr	r2, [pc, #136]	@ (8001e78 <HAL_GPIO_Init+0x204>)
 8001df0:	4290      	cmp	r0, r2
 8001df2:	f43f af73 	beq.w	8001cdc <HAL_GPIO_Init+0x68>
 8001df6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001dfa:	4290      	cmp	r0, r2
 8001dfc:	d022      	beq.n	8001e44 <HAL_GPIO_Init+0x1d0>
 8001dfe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001e02:	4290      	cmp	r0, r2
 8001e04:	d020      	beq.n	8001e48 <HAL_GPIO_Init+0x1d4>
 8001e06:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001e0a:	4290      	cmp	r0, r2
 8001e0c:	d01e      	beq.n	8001e4c <HAL_GPIO_Init+0x1d8>
 8001e0e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001e12:	4290      	cmp	r0, r2
 8001e14:	d01c      	beq.n	8001e50 <HAL_GPIO_Init+0x1dc>
 8001e16:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001e1a:	4290      	cmp	r0, r2
 8001e1c:	d01a      	beq.n	8001e54 <HAL_GPIO_Init+0x1e0>
 8001e1e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001e22:	4290      	cmp	r0, r2
 8001e24:	d018      	beq.n	8001e58 <HAL_GPIO_Init+0x1e4>
 8001e26:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001e2a:	4290      	cmp	r0, r2
 8001e2c:	d016      	beq.n	8001e5c <HAL_GPIO_Init+0x1e8>
 8001e2e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001e32:	4290      	cmp	r0, r2
 8001e34:	d014      	beq.n	8001e60 <HAL_GPIO_Init+0x1ec>
 8001e36:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001e3a:	4290      	cmp	r0, r2
 8001e3c:	f43f af4c 	beq.w	8001cd8 <HAL_GPIO_Init+0x64>
 8001e40:	220a      	movs	r2, #10
 8001e42:	e74c      	b.n	8001cde <HAL_GPIO_Init+0x6a>
 8001e44:	2201      	movs	r2, #1
 8001e46:	e74a      	b.n	8001cde <HAL_GPIO_Init+0x6a>
 8001e48:	2202      	movs	r2, #2
 8001e4a:	e748      	b.n	8001cde <HAL_GPIO_Init+0x6a>
 8001e4c:	2203      	movs	r2, #3
 8001e4e:	e746      	b.n	8001cde <HAL_GPIO_Init+0x6a>
 8001e50:	2204      	movs	r2, #4
 8001e52:	e744      	b.n	8001cde <HAL_GPIO_Init+0x6a>
 8001e54:	2205      	movs	r2, #5
 8001e56:	e742      	b.n	8001cde <HAL_GPIO_Init+0x6a>
 8001e58:	2206      	movs	r2, #6
 8001e5a:	e740      	b.n	8001cde <HAL_GPIO_Init+0x6a>
 8001e5c:	2207      	movs	r2, #7
 8001e5e:	e73e      	b.n	8001cde <HAL_GPIO_Init+0x6a>
 8001e60:	2208      	movs	r2, #8
 8001e62:	e73c      	b.n	8001cde <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8001e64:	b002      	add	sp, #8
 8001e66:	bd70      	pop	{r4, r5, r6, pc}
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40013800 	.word	0x40013800
 8001e70:	40013c00 	.word	0x40013c00
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40020000 	.word	0x40020000

08001e7c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e7c:	b10a      	cbz	r2, 8001e82 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e7e:	6181      	str	r1, [r0, #24]
 8001e80:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e82:	0409      	lsls	r1, r1, #16
 8001e84:	6181      	str	r1, [r0, #24]
  }
}
 8001e86:	4770      	bx	lr

08001e88 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e88:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e8a:	ea01 0203 	and.w	r2, r1, r3
 8001e8e:	ea21 0103 	bic.w	r1, r1, r3
 8001e92:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001e96:	6181      	str	r1, [r0, #24]
}
 8001e98:	4770      	bx	lr
	...

08001e9c <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e9c:	2800      	cmp	r0, #0
 8001e9e:	f000 80cc 	beq.w	800203a <HAL_I2C_Init+0x19e>
{
 8001ea2:	b570      	push	{r4, r5, r6, lr}
 8001ea4:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ea6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d077      	beq.n	8001f9e <HAL_I2C_Init+0x102>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eae:	2324      	movs	r3, #36	@ 0x24
 8001eb0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001eb4:	6822      	ldr	r2, [r4, #0]
 8001eb6:	6813      	ldr	r3, [r2, #0]
 8001eb8:	f023 0301 	bic.w	r3, r3, #1
 8001ebc:	6013      	str	r3, [r2, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ebe:	6822      	ldr	r2, [r4, #0]
 8001ec0:	6813      	ldr	r3, [r2, #0]
 8001ec2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ec6:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ec8:	6822      	ldr	r2, [r4, #0]
 8001eca:	6813      	ldr	r3, [r2, #0]
 8001ecc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001ed0:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ed2:	f000 fe19 	bl	8002b08 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ed6:	6862      	ldr	r2, [r4, #4]
 8001ed8:	4b5a      	ldr	r3, [pc, #360]	@ (8002044 <HAL_I2C_Init+0x1a8>)
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d864      	bhi.n	8001fa8 <HAL_I2C_Init+0x10c>
 8001ede:	4b5a      	ldr	r3, [pc, #360]	@ (8002048 <HAL_I2C_Init+0x1ac>)
 8001ee0:	4298      	cmp	r0, r3
 8001ee2:	bf8c      	ite	hi
 8001ee4:	2300      	movhi	r3, #0
 8001ee6:	2301      	movls	r3, #1
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f040 80a8 	bne.w	800203e <HAL_I2C_Init+0x1a2>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001eee:	4957      	ldr	r1, [pc, #348]	@ (800204c <HAL_I2C_Init+0x1b0>)
 8001ef0:	fba1 3100 	umull	r3, r1, r1, r0
 8001ef4:	0c8b      	lsrs	r3, r1, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ef6:	6825      	ldr	r5, [r4, #0]
 8001ef8:	686a      	ldr	r2, [r5, #4]
 8001efa:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8001efe:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8001f02:	606a      	str	r2, [r5, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f04:	6821      	ldr	r1, [r4, #0]
 8001f06:	6a0a      	ldr	r2, [r1, #32]
 8001f08:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8001f0c:	6866      	ldr	r6, [r4, #4]
 8001f0e:	4d4d      	ldr	r5, [pc, #308]	@ (8002044 <HAL_I2C_Init+0x1a8>)
 8001f10:	42ae      	cmp	r6, r5
 8001f12:	d84f      	bhi.n	8001fb4 <HAL_I2C_Init+0x118>
 8001f14:	3301      	adds	r3, #1
 8001f16:	4313      	orrs	r3, r2
 8001f18:	620b      	str	r3, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f1a:	6821      	ldr	r1, [r4, #0]
 8001f1c:	69ca      	ldr	r2, [r1, #28]
 8001f1e:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 8001f22:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001f26:	6865      	ldr	r5, [r4, #4]
 8001f28:	4b46      	ldr	r3, [pc, #280]	@ (8002044 <HAL_I2C_Init+0x1a8>)
 8001f2a:	429d      	cmp	r5, r3
 8001f2c:	d84c      	bhi.n	8001fc8 <HAL_I2C_Init+0x12c>
 8001f2e:	1e43      	subs	r3, r0, #1
 8001f30:	006d      	lsls	r5, r5, #1
 8001f32:	fbb3 f3f5 	udiv	r3, r3, r5
 8001f36:	3301      	adds	r3, #1
 8001f38:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8001f3c:	4203      	tst	r3, r0
 8001f3e:	d078      	beq.n	8002032 <HAL_I2C_Init+0x196>
 8001f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f44:	431a      	orrs	r2, r3
 8001f46:	61ca      	str	r2, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f48:	6821      	ldr	r1, [r4, #0]
 8001f4a:	680b      	ldr	r3, [r1, #0]
 8001f4c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001f50:	69e2      	ldr	r2, [r4, #28]
 8001f52:	6a20      	ldr	r0, [r4, #32]
 8001f54:	4302      	orrs	r2, r0
 8001f56:	4313      	orrs	r3, r2
 8001f58:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f5a:	6821      	ldr	r1, [r4, #0]
 8001f5c:	688b      	ldr	r3, [r1, #8]
 8001f5e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001f62:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001f66:	6922      	ldr	r2, [r4, #16]
 8001f68:	68e0      	ldr	r0, [r4, #12]
 8001f6a:	4302      	orrs	r2, r0
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f70:	6821      	ldr	r1, [r4, #0]
 8001f72:	68cb      	ldr	r3, [r1, #12]
 8001f74:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001f78:	6962      	ldr	r2, [r4, #20]
 8001f7a:	69a0      	ldr	r0, [r4, #24]
 8001f7c:	4302      	orrs	r2, r0
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f82:	6822      	ldr	r2, [r4, #0]
 8001f84:	6813      	ldr	r3, [r2, #0]
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f90:	2320      	movs	r3, #32
 8001f92:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f96:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f98:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e

  return HAL_OK;
}
 8001f9c:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001f9e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8001fa2:	f7fe feff 	bl	8000da4 <HAL_I2C_MspInit>
 8001fa6:	e782      	b.n	8001eae <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fa8:	4b29      	ldr	r3, [pc, #164]	@ (8002050 <HAL_I2C_Init+0x1b4>)
 8001faa:	4298      	cmp	r0, r3
 8001fac:	bf8c      	ite	hi
 8001fae:	2300      	movhi	r3, #0
 8001fb0:	2301      	movls	r3, #1
 8001fb2:	e799      	b.n	8001ee8 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fb4:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8001fb8:	fb05 f303 	mul.w	r3, r5, r3
 8001fbc:	4d25      	ldr	r5, [pc, #148]	@ (8002054 <HAL_I2C_Init+0x1b8>)
 8001fbe:	fba5 5303 	umull	r5, r3, r5, r3
 8001fc2:	099b      	lsrs	r3, r3, #6
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	e7a6      	b.n	8001f16 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fc8:	68a6      	ldr	r6, [r4, #8]
 8001fca:	b9be      	cbnz	r6, 8001ffc <HAL_I2C_Init+0x160>
 8001fcc:	1e43      	subs	r3, r0, #1
 8001fce:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8001fd2:	fbb3 f3fc 	udiv	r3, r3, ip
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fdc:	fab3 f383 	clz	r3, r3
 8001fe0:	095b      	lsrs	r3, r3, #5
 8001fe2:	bb43      	cbnz	r3, 8002036 <HAL_I2C_Init+0x19a>
 8001fe4:	b9c6      	cbnz	r6, 8002018 <HAL_I2C_Init+0x17c>
 8001fe6:	1e43      	subs	r3, r0, #1
 8001fe8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001fec:	fbb3 f3f5 	udiv	r3, r3, r5
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ffa:	e7a3      	b.n	8001f44 <HAL_I2C_Init+0xa8>
 8001ffc:	1e43      	subs	r3, r0, #1
 8001ffe:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8002002:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8002006:	fbb3 f3fc 	udiv	r3, r3, ip
 800200a:	3301      	adds	r3, #1
 800200c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002010:	fab3 f383 	clz	r3, r3
 8002014:	095b      	lsrs	r3, r3, #5
 8002016:	e7e4      	b.n	8001fe2 <HAL_I2C_Init+0x146>
 8002018:	1e43      	subs	r3, r0, #1
 800201a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800201e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002022:	fbb3 f3f5 	udiv	r3, r3, r5
 8002026:	3301      	adds	r3, #1
 8002028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800202c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002030:	e788      	b.n	8001f44 <HAL_I2C_Init+0xa8>
 8002032:	2304      	movs	r3, #4
 8002034:	e786      	b.n	8001f44 <HAL_I2C_Init+0xa8>
 8002036:	2301      	movs	r3, #1
 8002038:	e784      	b.n	8001f44 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 800203a:	2001      	movs	r0, #1
}
 800203c:	4770      	bx	lr
    return HAL_ERROR;
 800203e:	2001      	movs	r0, #1
 8002040:	e7ac      	b.n	8001f9c <HAL_I2C_Init+0x100>
 8002042:	bf00      	nop
 8002044:	000186a0 	.word	0x000186a0
 8002048:	001e847f 	.word	0x001e847f
 800204c:	431bde83 	.word	0x431bde83
 8002050:	003d08ff 	.word	0x003d08ff
 8002054:	10624dd3 	.word	0x10624dd3

08002058 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002058:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b20      	cmp	r3, #32
 8002060:	d001      	beq.n	8002066 <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002062:	2002      	movs	r0, #2
  }
}
 8002064:	4770      	bx	lr
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002066:	2324      	movs	r3, #36	@ 0x24
 8002068:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    __HAL_I2C_DISABLE(hi2c);
 800206c:	6802      	ldr	r2, [r0, #0]
 800206e:	6813      	ldr	r3, [r2, #0]
 8002070:	f023 0301 	bic.w	r3, r3, #1
 8002074:	6013      	str	r3, [r2, #0]
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002076:	6802      	ldr	r2, [r0, #0]
 8002078:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 800207a:	f023 0310 	bic.w	r3, r3, #16
 800207e:	6253      	str	r3, [r2, #36]	@ 0x24
    hi2c->Instance->FLTR |= AnalogFilter;
 8002080:	6802      	ldr	r2, [r0, #0]
 8002082:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8002084:	430b      	orrs	r3, r1
 8002086:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_I2C_ENABLE(hi2c);
 8002088:	6802      	ldr	r2, [r0, #0]
 800208a:	6813      	ldr	r3, [r2, #0]
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002092:	2320      	movs	r3, #32
 8002094:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    return HAL_OK;
 8002098:	2000      	movs	r0, #0
 800209a:	4770      	bx	lr

0800209c <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800209c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b20      	cmp	r3, #32
 80020a4:	d001      	beq.n	80020aa <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80020a6:	2002      	movs	r0, #2
  }
}
 80020a8:	4770      	bx	lr
    hi2c->State = HAL_I2C_STATE_BUSY;
 80020aa:	2324      	movs	r3, #36	@ 0x24
 80020ac:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    __HAL_I2C_DISABLE(hi2c);
 80020b0:	6802      	ldr	r2, [r0, #0]
 80020b2:	6813      	ldr	r3, [r2, #0]
 80020b4:	f023 0301 	bic.w	r3, r3, #1
 80020b8:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->FLTR;
 80020ba:	6802      	ldr	r2, [r0, #0]
 80020bc:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 80020be:	b29b      	uxth	r3, r3
    tmpreg &= ~(I2C_FLTR_DNF);
 80020c0:	f023 030f 	bic.w	r3, r3, #15
    tmpreg |= DigitalFilter;
 80020c4:	4319      	orrs	r1, r3
 80020c6:	b289      	uxth	r1, r1
    hi2c->Instance->FLTR = tmpreg;
 80020c8:	6251      	str	r1, [r2, #36]	@ 0x24
    __HAL_I2C_ENABLE(hi2c);
 80020ca:	6802      	ldr	r2, [r0, #0]
 80020cc:	6813      	ldr	r3, [r2, #0]
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80020d4:	2320      	movs	r3, #32
 80020d6:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    return HAL_OK;
 80020da:	2000      	movs	r0, #0
 80020dc:	4770      	bx	lr

080020de <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80020de:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80020e0:	684d      	ldr	r5, [r1, #4]
 80020e2:	6803      	ldr	r3, [r0, #0]
 80020e4:	68dc      	ldr	r4, [r3, #12]
 80020e6:	f3c4 440b 	ubfx	r4, r4, #16, #12
 80020ea:	4425      	add	r5, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80020ec:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
 80020f0:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80020f4:	f8d3 4088 	ldr.w	r4, [r3, #136]	@ 0x88
 80020f8:	f404 4470 	and.w	r4, r4, #61440	@ 0xf000
 80020fc:	f8c3 4088 	str.w	r4, [r3, #136]	@ 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002100:	680b      	ldr	r3, [r1, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002102:	6804      	ldr	r4, [r0, #0]
 8002104:	68e6      	ldr	r6, [r4, #12]
 8002106:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800210a:	4433      	add	r3, r6
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800210c:	3301      	adds	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800210e:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002112:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002116:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800211a:	68cd      	ldr	r5, [r1, #12]
 800211c:	6803      	ldr	r3, [r0, #0]
 800211e:	68dc      	ldr	r4, [r3, #12]
 8002120:	f3c4 040a 	ubfx	r4, r4, #0, #11
 8002124:	4425      	add	r5, r4
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002126:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800212a:	f8d3 408c 	ldr.w	r4, [r3, #140]	@ 0x8c
 800212e:	f404 4470 	and.w	r4, r4, #61440	@ 0xf000
 8002132:	f8c3 408c 	str.w	r4, [r3, #140]	@ 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002136:	688b      	ldr	r3, [r1, #8]
 8002138:	6804      	ldr	r4, [r0, #0]
 800213a:	68e6      	ldr	r6, [r4, #12]
 800213c:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8002140:	4433      	add	r3, r6
 8002142:	3301      	adds	r3, #1
 8002144:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8002148:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800214c:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002150:	6803      	ldr	r3, [r0, #0]
 8002152:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8002156:	f8d3 4094 	ldr.w	r4, [r3, #148]	@ 0x94
 800215a:	f024 0407 	bic.w	r4, r4, #7
 800215e:	f8c3 4094 	str.w	r4, [r3, #148]	@ 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002162:	6803      	ldr	r3, [r0, #0]
 8002164:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8002168:	690c      	ldr	r4, [r1, #16]
 800216a:	f8c3 4094 	str.w	r4, [r3, #148]	@ 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800216e:	f891 e031 	ldrb.w	lr, [r1, #49]	@ 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002172:	f891 5032 	ldrb.w	r5, [r1, #50]	@ 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002176:	698e      	ldr	r6, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002178:	6803      	ldr	r3, [r0, #0]
 800217a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800217e:	f8d3 409c 	ldr.w	r4, [r3, #156]	@ 0x9c
 8002182:	2400      	movs	r4, #0
 8002184:	f8c3 409c 	str.w	r4, [r3, #156]	@ 0x9c
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002188:	f891 3030 	ldrb.w	r3, [r1, #48]	@ 0x30
 800218c:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 8002190:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8002194:	6805      	ldr	r5, [r0, #0]
 8002196:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 800219a:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 800219e:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80021a2:	6803      	ldr	r3, [r0, #0]
 80021a4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80021a8:	f8d3 5098 	ldr.w	r5, [r3, #152]	@ 0x98
 80021ac:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 80021b0:	f8c3 5098 	str.w	r5, [r3, #152]	@ 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80021b4:	6803      	ldr	r3, [r0, #0]
 80021b6:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80021ba:	694d      	ldr	r5, [r1, #20]
 80021bc:	f8c3 5098 	str.w	r5, [r3, #152]	@ 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80021c0:	6803      	ldr	r3, [r0, #0]
 80021c2:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80021c6:	f8d3 50a0 	ldr.w	r5, [r3, #160]	@ 0xa0
 80021ca:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 80021ce:	f025 0507 	bic.w	r5, r5, #7
 80021d2:	f8c3 50a0 	str.w	r5, [r3, #160]	@ 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80021d6:	6a0d      	ldr	r5, [r1, #32]
 80021d8:	6803      	ldr	r3, [r0, #0]
 80021da:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80021de:	69ce      	ldr	r6, [r1, #28]
 80021e0:	4335      	orrs	r5, r6
 80021e2:	f8c3 50a0 	str.w	r5, [r3, #160]	@ 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80021e6:	6803      	ldr	r3, [r0, #0]
 80021e8:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80021ec:	f8d3 50ac 	ldr.w	r5, [r3, #172]	@ 0xac
 80021f0:	f8c3 40ac 	str.w	r4, [r3, #172]	@ 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80021f4:	6803      	ldr	r3, [r0, #0]
 80021f6:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80021fa:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 80021fc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002200:	690a      	ldr	r2, [r1, #16]
 8002202:	b182      	cbz	r2, 8002226 <LTDC_SetConfig+0x148>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002204:	1e53      	subs	r3, r2, #1
 8002206:	2b06      	cmp	r3, #6
 8002208:	d805      	bhi.n	8002216 <LTDC_SetConfig+0x138>
 800220a:	e8df f003 	tbb	[pc, r3]
 800220e:	0d3c      	.short	0x0d3c
 8002210:	04040608 	.word	0x04040608
 8002214:	0a          	.byte	0x0a
 8002215:	00          	.byte	0x00
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002216:	2201      	movs	r2, #1
 8002218:	e006      	b.n	8002228 <LTDC_SetConfig+0x14a>
 800221a:	2202      	movs	r2, #2
 800221c:	e004      	b.n	8002228 <LTDC_SetConfig+0x14a>
 800221e:	2202      	movs	r2, #2
 8002220:	e002      	b.n	8002228 <LTDC_SetConfig+0x14a>
 8002222:	2202      	movs	r2, #2
 8002224:	e000      	b.n	8002228 <LTDC_SetConfig+0x14a>
    tmp = 4U;
 8002226:	2204      	movs	r2, #4
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002228:	6803      	ldr	r3, [r0, #0]
 800222a:	4463      	add	r3, ip
 800222c:	f8d3 40b0 	ldr.w	r4, [r3, #176]	@ 0xb0
 8002230:	f004 24e0 	and.w	r4, r4, #3758153728	@ 0xe000e000
 8002234:	f8c3 40b0 	str.w	r4, [r3, #176]	@ 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002238:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800223a:	fb02 f403 	mul.w	r4, r2, r3
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800223e:	684b      	ldr	r3, [r1, #4]
 8002240:	680d      	ldr	r5, [r1, #0]
 8002242:	1b5b      	subs	r3, r3, r5
 8002244:	fb02 f303 	mul.w	r3, r2, r3
 8002248:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800224a:	6802      	ldr	r2, [r0, #0]
 800224c:	4462      	add	r2, ip
 800224e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8002252:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002256:	6803      	ldr	r3, [r0, #0]
 8002258:	4463      	add	r3, ip
 800225a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800225e:	f422 62ff 	bic.w	r2, r2, #2040	@ 0x7f8
 8002262:	f022 0207 	bic.w	r2, r2, #7
 8002266:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800226a:	6803      	ldr	r3, [r0, #0]
 800226c:	4463      	add	r3, ip
 800226e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8002270:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002274:	6803      	ldr	r3, [r0, #0]
 8002276:	4463      	add	r3, ip
 8002278:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800227c:	f042 0201 	orr.w	r2, r2, #1
 8002280:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 8002284:	bd70      	pop	{r4, r5, r6, pc}
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002286:	2203      	movs	r2, #3
 8002288:	e7ce      	b.n	8002228 <LTDC_SetConfig+0x14a>
	...

0800228c <HAL_LTDC_Init>:
  if (hltdc == NULL)
 800228c:	2800      	cmp	r0, #0
 800228e:	d072      	beq.n	8002376 <HAL_LTDC_Init+0xea>
{
 8002290:	b538      	push	{r3, r4, r5, lr}
 8002292:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002294:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 8002298:	2b00      	cmp	r3, #0
 800229a:	d067      	beq.n	800236c <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800229c:	2302      	movs	r3, #2
 800229e:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80022a2:	6822      	ldr	r2, [r4, #0]
 80022a4:	6993      	ldr	r3, [r2, #24]
 80022a6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80022aa:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80022ac:	6821      	ldr	r1, [r4, #0]
 80022ae:	698a      	ldr	r2, [r1, #24]
 80022b0:	6863      	ldr	r3, [r4, #4]
 80022b2:	68a0      	ldr	r0, [r4, #8]
 80022b4:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80022b6:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80022b8:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80022ba:	6920      	ldr	r0, [r4, #16]
 80022bc:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80022be:	4313      	orrs	r3, r2
 80022c0:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80022c2:	6821      	ldr	r1, [r4, #0]
 80022c4:	688a      	ldr	r2, [r1, #8]
 80022c6:	4b2d      	ldr	r3, [pc, #180]	@ (800237c <HAL_LTDC_Init+0xf0>)
 80022c8:	401a      	ands	r2, r3
 80022ca:	608a      	str	r2, [r1, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80022cc:	6820      	ldr	r0, [r4, #0]
 80022ce:	6882      	ldr	r2, [r0, #8]
 80022d0:	69a1      	ldr	r1, [r4, #24]
 80022d2:	6965      	ldr	r5, [r4, #20]
 80022d4:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80022d8:	430a      	orrs	r2, r1
 80022da:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80022dc:	6821      	ldr	r1, [r4, #0]
 80022de:	68ca      	ldr	r2, [r1, #12]
 80022e0:	401a      	ands	r2, r3
 80022e2:	60ca      	str	r2, [r1, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80022e4:	6820      	ldr	r0, [r4, #0]
 80022e6:	68c2      	ldr	r2, [r0, #12]
 80022e8:	6a21      	ldr	r1, [r4, #32]
 80022ea:	69e5      	ldr	r5, [r4, #28]
 80022ec:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80022f0:	430a      	orrs	r2, r1
 80022f2:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80022f4:	6821      	ldr	r1, [r4, #0]
 80022f6:	690a      	ldr	r2, [r1, #16]
 80022f8:	401a      	ands	r2, r3
 80022fa:	610a      	str	r2, [r1, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80022fc:	6820      	ldr	r0, [r4, #0]
 80022fe:	6902      	ldr	r2, [r0, #16]
 8002300:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002302:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8002304:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8002308:	430a      	orrs	r2, r1
 800230a:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800230c:	6821      	ldr	r1, [r4, #0]
 800230e:	694a      	ldr	r2, [r1, #20]
 8002310:	4013      	ands	r3, r2
 8002312:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002314:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002316:	6821      	ldr	r1, [r4, #0]
 8002318:	694b      	ldr	r3, [r1, #20]
 800231a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800231c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002320:	4313      	orrs	r3, r2
 8002322:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002324:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002328:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 800232c:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800232e:	6821      	ldr	r1, [r4, #0]
 8002330:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8002332:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8002336:	62ca      	str	r2, [r1, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002338:	6821      	ldr	r1, [r4, #0]
 800233a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800233c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002340:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 8002344:	4303      	orrs	r3, r0
 8002346:	4313      	orrs	r3, r2
 8002348:	62cb      	str	r3, [r1, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800234a:	6822      	ldr	r2, [r4, #0]
 800234c:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800234e:	f043 0306 	orr.w	r3, r3, #6
 8002352:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8002354:	6822      	ldr	r2, [r4, #0]
 8002356:	6993      	ldr	r3, [r2, #24]
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800235e:	2000      	movs	r0, #0
 8002360:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8002364:	2301      	movs	r3, #1
 8002366:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 800236a:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 800236c:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 8002370:	f7fe fd6c 	bl	8000e4c <HAL_LTDC_MspInit>
 8002374:	e792      	b.n	800229c <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 8002376:	2001      	movs	r0, #1
}
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	f000f800 	.word	0xf000f800

08002380 <HAL_LTDC_ErrorCallback>:
}
 8002380:	4770      	bx	lr

08002382 <HAL_LTDC_LineEventCallback>:
}
 8002382:	4770      	bx	lr

08002384 <HAL_LTDC_ReloadEventCallback>:
}
 8002384:	4770      	bx	lr

08002386 <HAL_LTDC_IRQHandler>:
{
 8002386:	b570      	push	{r4, r5, r6, lr}
 8002388:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800238a:	6803      	ldr	r3, [r0, #0]
 800238c:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800238e:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8002390:	f015 0f04 	tst.w	r5, #4
 8002394:	d002      	beq.n	800239c <HAL_LTDC_IRQHandler+0x16>
 8002396:	f016 0f04 	tst.w	r6, #4
 800239a:	d112      	bne.n	80023c2 <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800239c:	f015 0f02 	tst.w	r5, #2
 80023a0:	d002      	beq.n	80023a8 <HAL_LTDC_IRQHandler+0x22>
 80023a2:	f016 0f02 	tst.w	r6, #2
 80023a6:	d121      	bne.n	80023ec <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80023a8:	f015 0f01 	tst.w	r5, #1
 80023ac:	d002      	beq.n	80023b4 <HAL_LTDC_IRQHandler+0x2e>
 80023ae:	f016 0f01 	tst.w	r6, #1
 80023b2:	d132      	bne.n	800241a <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80023b4:	f015 0f08 	tst.w	r5, #8
 80023b8:	d002      	beq.n	80023c0 <HAL_LTDC_IRQHandler+0x3a>
 80023ba:	f016 0f08 	tst.w	r6, #8
 80023be:	d13d      	bne.n	800243c <HAL_LTDC_IRQHandler+0xb6>
}
 80023c0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80023c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023c4:	f022 0204 	bic.w	r2, r2, #4
 80023c8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80023ca:	6803      	ldr	r3, [r0, #0]
 80023cc:	2204      	movs	r2, #4
 80023ce:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80023d0:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80023dc:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 80023e0:	2300      	movs	r3, #0
 80023e2:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80023e6:	f7ff ffcb 	bl	8002380 <HAL_LTDC_ErrorCallback>
 80023ea:	e7d7      	b.n	800239c <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80023ec:	6822      	ldr	r2, [r4, #0]
 80023ee:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80023f0:	f023 0302 	bic.w	r3, r3, #2
 80023f4:	6353      	str	r3, [r2, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80023f6:	6823      	ldr	r3, [r4, #0]
 80023f8:	2202      	movs	r2, #2
 80023fa:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80023fc:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8002400:	4313      	orrs	r3, r2
 8002402:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002406:	2304      	movs	r3, #4
 8002408:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800240c:	2300      	movs	r3, #0
 800240e:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8002412:	4620      	mov	r0, r4
 8002414:	f7ff ffb4 	bl	8002380 <HAL_LTDC_ErrorCallback>
 8002418:	e7c6      	b.n	80023a8 <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800241a:	6822      	ldr	r2, [r4, #0]
 800241c:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800241e:	f023 0301 	bic.w	r3, r3, #1
 8002422:	6353      	str	r3, [r2, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8002424:	6822      	ldr	r2, [r4, #0]
 8002426:	2301      	movs	r3, #1
 8002428:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800242a:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800242e:	2300      	movs	r3, #0
 8002430:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8002434:	4620      	mov	r0, r4
 8002436:	f7ff ffa4 	bl	8002382 <HAL_LTDC_LineEventCallback>
 800243a:	e7bb      	b.n	80023b4 <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800243c:	6822      	ldr	r2, [r4, #0]
 800243e:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8002440:	f023 0308 	bic.w	r3, r3, #8
 8002444:	6353      	str	r3, [r2, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8002446:	6823      	ldr	r3, [r4, #0]
 8002448:	2208      	movs	r2, #8
 800244a:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800244c:	2301      	movs	r3, #1
 800244e:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8002452:	2300      	movs	r3, #0
 8002454:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8002458:	4620      	mov	r0, r4
 800245a:	f7ff ff93 	bl	8002384 <HAL_LTDC_ReloadEventCallback>
}
 800245e:	e7af      	b.n	80023c0 <HAL_LTDC_IRQHandler+0x3a>

08002460 <HAL_LTDC_ConfigLayer>:
{
 8002460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8002462:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 8002466:	2b01      	cmp	r3, #1
 8002468:	d02c      	beq.n	80024c4 <HAL_LTDC_ConfigLayer+0x64>
 800246a:	4604      	mov	r4, r0
 800246c:	460d      	mov	r5, r1
 800246e:	4616      	mov	r6, r2
 8002470:	2701      	movs	r7, #1
 8002472:	f880 70a0 	strb.w	r7, [r0, #160]	@ 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002476:	2302      	movs	r3, #2
 8002478:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800247c:	f04f 0c34 	mov.w	ip, #52	@ 0x34
 8002480:	fb0c 0c02 	mla	ip, ip, r2, r0
 8002484:	f10c 0c38 	add.w	ip, ip, #56	@ 0x38
 8002488:	468e      	mov	lr, r1
 800248a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800248e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002492:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002496:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800249a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800249e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80024a2:	f8de 3000 	ldr.w	r3, [lr]
 80024a6:	f8cc 3000 	str.w	r3, [ip]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80024aa:	4632      	mov	r2, r6
 80024ac:	4629      	mov	r1, r5
 80024ae:	4620      	mov	r0, r4
 80024b0:	f7ff fe15 	bl	80020de <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80024b4:	6823      	ldr	r3, [r4, #0]
 80024b6:	625f      	str	r7, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80024b8:	f884 70a1 	strb.w	r7, [r4, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 80024bc:	2000      	movs	r0, #0
 80024be:	f884 00a0 	strb.w	r0, [r4, #160]	@ 0xa0
}
 80024c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 80024c4:	2002      	movs	r0, #2
 80024c6:	e7fc      	b.n	80024c2 <HAL_LTDC_ConfigLayer+0x62>

080024c8 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024c8:	2800      	cmp	r0, #0
 80024ca:	f000 81e0 	beq.w	800288e <HAL_RCC_OscConfig+0x3c6>
{
 80024ce:	b570      	push	{r4, r5, r6, lr}
 80024d0:	b082      	sub	sp, #8
 80024d2:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024d4:	6803      	ldr	r3, [r0, #0]
 80024d6:	f013 0f01 	tst.w	r3, #1
 80024da:	d03b      	beq.n	8002554 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024dc:	4b9f      	ldr	r3, [pc, #636]	@ (800275c <HAL_RCC_OscConfig+0x294>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 030c 	and.w	r3, r3, #12
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	d02c      	beq.n	8002542 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024e8:	4b9c      	ldr	r3, [pc, #624]	@ (800275c <HAL_RCC_OscConfig+0x294>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d021      	beq.n	8002538 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f4:	6863      	ldr	r3, [r4, #4]
 80024f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024fa:	d04f      	beq.n	800259c <HAL_RCC_OscConfig+0xd4>
 80024fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002500:	d052      	beq.n	80025a8 <HAL_RCC_OscConfig+0xe0>
 8002502:	4b96      	ldr	r3, [pc, #600]	@ (800275c <HAL_RCC_OscConfig+0x294>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002512:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002514:	6863      	ldr	r3, [r4, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d050      	beq.n	80025bc <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251a:	f7fe feff 	bl	800131c <HAL_GetTick>
 800251e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002520:	4b8e      	ldr	r3, [pc, #568]	@ (800275c <HAL_RCC_OscConfig+0x294>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002528:	d114      	bne.n	8002554 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800252a:	f7fe fef7 	bl	800131c <HAL_GetTick>
 800252e:	1b40      	subs	r0, r0, r5
 8002530:	2864      	cmp	r0, #100	@ 0x64
 8002532:	d9f5      	bls.n	8002520 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8002534:	2003      	movs	r0, #3
 8002536:	e1b1      	b.n	800289c <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002538:	4b88      	ldr	r3, [pc, #544]	@ (800275c <HAL_RCC_OscConfig+0x294>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8002540:	d0d8      	beq.n	80024f4 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002542:	4b86      	ldr	r3, [pc, #536]	@ (800275c <HAL_RCC_OscConfig+0x294>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800254a:	d003      	beq.n	8002554 <HAL_RCC_OscConfig+0x8c>
 800254c:	6863      	ldr	r3, [r4, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	f000 819f 	beq.w	8002892 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002554:	6823      	ldr	r3, [r4, #0]
 8002556:	f013 0f02 	tst.w	r3, #2
 800255a:	d054      	beq.n	8002606 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800255c:	4b7f      	ldr	r3, [pc, #508]	@ (800275c <HAL_RCC_OscConfig+0x294>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f013 0f0c 	tst.w	r3, #12
 8002564:	d03e      	beq.n	80025e4 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002566:	4b7d      	ldr	r3, [pc, #500]	@ (800275c <HAL_RCC_OscConfig+0x294>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800256e:	2b08      	cmp	r3, #8
 8002570:	d033      	beq.n	80025da <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002572:	68e3      	ldr	r3, [r4, #12]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d068      	beq.n	800264a <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002578:	4b79      	ldr	r3, [pc, #484]	@ (8002760 <HAL_RCC_OscConfig+0x298>)
 800257a:	2201      	movs	r2, #1
 800257c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257e:	f7fe fecd 	bl	800131c <HAL_GetTick>
 8002582:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002584:	4b75      	ldr	r3, [pc, #468]	@ (800275c <HAL_RCC_OscConfig+0x294>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f013 0f02 	tst.w	r3, #2
 800258c:	d154      	bne.n	8002638 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800258e:	f7fe fec5 	bl	800131c <HAL_GetTick>
 8002592:	1b40      	subs	r0, r0, r5
 8002594:	2802      	cmp	r0, #2
 8002596:	d9f5      	bls.n	8002584 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002598:	2003      	movs	r0, #3
 800259a:	e17f      	b.n	800289c <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800259c:	4a6f      	ldr	r2, [pc, #444]	@ (800275c <HAL_RCC_OscConfig+0x294>)
 800259e:	6813      	ldr	r3, [r2, #0]
 80025a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	e7b5      	b.n	8002514 <HAL_RCC_OscConfig+0x4c>
 80025a8:	4b6c      	ldr	r3, [pc, #432]	@ (800275c <HAL_RCC_OscConfig+0x294>)
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	e7ab      	b.n	8002514 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80025bc:	f7fe feae 	bl	800131c <HAL_GetTick>
 80025c0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c2:	4b66      	ldr	r3, [pc, #408]	@ (800275c <HAL_RCC_OscConfig+0x294>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80025ca:	d0c3      	beq.n	8002554 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025cc:	f7fe fea6 	bl	800131c <HAL_GetTick>
 80025d0:	1b40      	subs	r0, r0, r5
 80025d2:	2864      	cmp	r0, #100	@ 0x64
 80025d4:	d9f5      	bls.n	80025c2 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80025d6:	2003      	movs	r0, #3
 80025d8:	e160      	b.n	800289c <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025da:	4b60      	ldr	r3, [pc, #384]	@ (800275c <HAL_RCC_OscConfig+0x294>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80025e2:	d1c6      	bne.n	8002572 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e4:	4b5d      	ldr	r3, [pc, #372]	@ (800275c <HAL_RCC_OscConfig+0x294>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f013 0f02 	tst.w	r3, #2
 80025ec:	d003      	beq.n	80025f6 <HAL_RCC_OscConfig+0x12e>
 80025ee:	68e3      	ldr	r3, [r4, #12]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	f040 8150 	bne.w	8002896 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f6:	4a59      	ldr	r2, [pc, #356]	@ (800275c <HAL_RCC_OscConfig+0x294>)
 80025f8:	6813      	ldr	r3, [r2, #0]
 80025fa:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80025fe:	6921      	ldr	r1, [r4, #16]
 8002600:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002604:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002606:	6823      	ldr	r3, [r4, #0]
 8002608:	f013 0f08 	tst.w	r3, #8
 800260c:	d042      	beq.n	8002694 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800260e:	6963      	ldr	r3, [r4, #20]
 8002610:	b36b      	cbz	r3, 800266e <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002612:	4b53      	ldr	r3, [pc, #332]	@ (8002760 <HAL_RCC_OscConfig+0x298>)
 8002614:	2201      	movs	r2, #1
 8002616:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261a:	f7fe fe7f 	bl	800131c <HAL_GetTick>
 800261e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002620:	4b4e      	ldr	r3, [pc, #312]	@ (800275c <HAL_RCC_OscConfig+0x294>)
 8002622:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002624:	f013 0f02 	tst.w	r3, #2
 8002628:	d134      	bne.n	8002694 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800262a:	f7fe fe77 	bl	800131c <HAL_GetTick>
 800262e:	1b40      	subs	r0, r0, r5
 8002630:	2802      	cmp	r0, #2
 8002632:	d9f5      	bls.n	8002620 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002634:	2003      	movs	r0, #3
 8002636:	e131      	b.n	800289c <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002638:	4a48      	ldr	r2, [pc, #288]	@ (800275c <HAL_RCC_OscConfig+0x294>)
 800263a:	6813      	ldr	r3, [r2, #0]
 800263c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002640:	6921      	ldr	r1, [r4, #16]
 8002642:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	e7dd      	b.n	8002606 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 800264a:	4b45      	ldr	r3, [pc, #276]	@ (8002760 <HAL_RCC_OscConfig+0x298>)
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002650:	f7fe fe64 	bl	800131c <HAL_GetTick>
 8002654:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002656:	4b41      	ldr	r3, [pc, #260]	@ (800275c <HAL_RCC_OscConfig+0x294>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f013 0f02 	tst.w	r3, #2
 800265e:	d0d2      	beq.n	8002606 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002660:	f7fe fe5c 	bl	800131c <HAL_GetTick>
 8002664:	1b40      	subs	r0, r0, r5
 8002666:	2802      	cmp	r0, #2
 8002668:	d9f5      	bls.n	8002656 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800266a:	2003      	movs	r0, #3
 800266c:	e116      	b.n	800289c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800266e:	4b3c      	ldr	r3, [pc, #240]	@ (8002760 <HAL_RCC_OscConfig+0x298>)
 8002670:	2200      	movs	r2, #0
 8002672:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002676:	f7fe fe51 	bl	800131c <HAL_GetTick>
 800267a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800267c:	4b37      	ldr	r3, [pc, #220]	@ (800275c <HAL_RCC_OscConfig+0x294>)
 800267e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002680:	f013 0f02 	tst.w	r3, #2
 8002684:	d006      	beq.n	8002694 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002686:	f7fe fe49 	bl	800131c <HAL_GetTick>
 800268a:	1b40      	subs	r0, r0, r5
 800268c:	2802      	cmp	r0, #2
 800268e:	d9f5      	bls.n	800267c <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8002690:	2003      	movs	r0, #3
 8002692:	e103      	b.n	800289c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002694:	6823      	ldr	r3, [r4, #0]
 8002696:	f013 0f04 	tst.w	r3, #4
 800269a:	d077      	beq.n	800278c <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800269c:	4b2f      	ldr	r3, [pc, #188]	@ (800275c <HAL_RCC_OscConfig+0x294>)
 800269e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a0:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80026a4:	d133      	bne.n	800270e <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	9301      	str	r3, [sp, #4]
 80026aa:	4b2c      	ldr	r3, [pc, #176]	@ (800275c <HAL_RCC_OscConfig+0x294>)
 80026ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026ae:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80026b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80026b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ba:	9301      	str	r3, [sp, #4]
 80026bc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80026be:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c0:	4b28      	ldr	r3, [pc, #160]	@ (8002764 <HAL_RCC_OscConfig+0x29c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80026c8:	d023      	beq.n	8002712 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ca:	68a3      	ldr	r3, [r4, #8]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d034      	beq.n	800273a <HAL_RCC_OscConfig+0x272>
 80026d0:	2b05      	cmp	r3, #5
 80026d2:	d038      	beq.n	8002746 <HAL_RCC_OscConfig+0x27e>
 80026d4:	4b21      	ldr	r3, [pc, #132]	@ (800275c <HAL_RCC_OscConfig+0x294>)
 80026d6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80026d8:	f022 0201 	bic.w	r2, r2, #1
 80026dc:	671a      	str	r2, [r3, #112]	@ 0x70
 80026de:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80026e0:	f022 0204 	bic.w	r2, r2, #4
 80026e4:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026e6:	68a3      	ldr	r3, [r4, #8]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d03d      	beq.n	8002768 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ec:	f7fe fe16 	bl	800131c <HAL_GetTick>
 80026f0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f2:	4b1a      	ldr	r3, [pc, #104]	@ (800275c <HAL_RCC_OscConfig+0x294>)
 80026f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f6:	f013 0f02 	tst.w	r3, #2
 80026fa:	d146      	bne.n	800278a <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026fc:	f7fe fe0e 	bl	800131c <HAL_GetTick>
 8002700:	1b80      	subs	r0, r0, r6
 8002702:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002706:	4298      	cmp	r0, r3
 8002708:	d9f3      	bls.n	80026f2 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 800270a:	2003      	movs	r0, #3
 800270c:	e0c6      	b.n	800289c <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 800270e:	2500      	movs	r5, #0
 8002710:	e7d6      	b.n	80026c0 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002712:	4a14      	ldr	r2, [pc, #80]	@ (8002764 <HAL_RCC_OscConfig+0x29c>)
 8002714:	6813      	ldr	r3, [r2, #0]
 8002716:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800271a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800271c:	f7fe fdfe 	bl	800131c <HAL_GetTick>
 8002720:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002722:	4b10      	ldr	r3, [pc, #64]	@ (8002764 <HAL_RCC_OscConfig+0x29c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800272a:	d1ce      	bne.n	80026ca <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800272c:	f7fe fdf6 	bl	800131c <HAL_GetTick>
 8002730:	1b80      	subs	r0, r0, r6
 8002732:	2802      	cmp	r0, #2
 8002734:	d9f5      	bls.n	8002722 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8002736:	2003      	movs	r0, #3
 8002738:	e0b0      	b.n	800289c <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800273a:	4a08      	ldr	r2, [pc, #32]	@ (800275c <HAL_RCC_OscConfig+0x294>)
 800273c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	6713      	str	r3, [r2, #112]	@ 0x70
 8002744:	e7cf      	b.n	80026e6 <HAL_RCC_OscConfig+0x21e>
 8002746:	4b05      	ldr	r3, [pc, #20]	@ (800275c <HAL_RCC_OscConfig+0x294>)
 8002748:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800274a:	f042 0204 	orr.w	r2, r2, #4
 800274e:	671a      	str	r2, [r3, #112]	@ 0x70
 8002750:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002752:	f042 0201 	orr.w	r2, r2, #1
 8002756:	671a      	str	r2, [r3, #112]	@ 0x70
 8002758:	e7c5      	b.n	80026e6 <HAL_RCC_OscConfig+0x21e>
 800275a:	bf00      	nop
 800275c:	40023800 	.word	0x40023800
 8002760:	42470000 	.word	0x42470000
 8002764:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002768:	f7fe fdd8 	bl	800131c <HAL_GetTick>
 800276c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800276e:	4b52      	ldr	r3, [pc, #328]	@ (80028b8 <HAL_RCC_OscConfig+0x3f0>)
 8002770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002772:	f013 0f02 	tst.w	r3, #2
 8002776:	d008      	beq.n	800278a <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002778:	f7fe fdd0 	bl	800131c <HAL_GetTick>
 800277c:	1b80      	subs	r0, r0, r6
 800277e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002782:	4298      	cmp	r0, r3
 8002784:	d9f3      	bls.n	800276e <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8002786:	2003      	movs	r0, #3
 8002788:	e088      	b.n	800289c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800278a:	b9ed      	cbnz	r5, 80027c8 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800278c:	69a3      	ldr	r3, [r4, #24]
 800278e:	2b00      	cmp	r3, #0
 8002790:	f000 8083 	beq.w	800289a <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002794:	4a48      	ldr	r2, [pc, #288]	@ (80028b8 <HAL_RCC_OscConfig+0x3f0>)
 8002796:	6892      	ldr	r2, [r2, #8]
 8002798:	f002 020c 	and.w	r2, r2, #12
 800279c:	2a08      	cmp	r2, #8
 800279e:	d051      	beq.n	8002844 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d017      	beq.n	80027d4 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a4:	4b45      	ldr	r3, [pc, #276]	@ (80028bc <HAL_RCC_OscConfig+0x3f4>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027aa:	f7fe fdb7 	bl	800131c <HAL_GetTick>
 80027ae:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b0:	4b41      	ldr	r3, [pc, #260]	@ (80028b8 <HAL_RCC_OscConfig+0x3f0>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80027b8:	d042      	beq.n	8002840 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ba:	f7fe fdaf 	bl	800131c <HAL_GetTick>
 80027be:	1b00      	subs	r0, r0, r4
 80027c0:	2802      	cmp	r0, #2
 80027c2:	d9f5      	bls.n	80027b0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80027c4:	2003      	movs	r0, #3
 80027c6:	e069      	b.n	800289c <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c8:	4a3b      	ldr	r2, [pc, #236]	@ (80028b8 <HAL_RCC_OscConfig+0x3f0>)
 80027ca:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80027cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027d2:	e7db      	b.n	800278c <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 80027d4:	4b39      	ldr	r3, [pc, #228]	@ (80028bc <HAL_RCC_OscConfig+0x3f4>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80027da:	f7fe fd9f 	bl	800131c <HAL_GetTick>
 80027de:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e0:	4b35      	ldr	r3, [pc, #212]	@ (80028b8 <HAL_RCC_OscConfig+0x3f0>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80027e8:	d006      	beq.n	80027f8 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ea:	f7fe fd97 	bl	800131c <HAL_GetTick>
 80027ee:	1b40      	subs	r0, r0, r5
 80027f0:	2802      	cmp	r0, #2
 80027f2:	d9f5      	bls.n	80027e0 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 80027f4:	2003      	movs	r0, #3
 80027f6:	e051      	b.n	800289c <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027f8:	69e3      	ldr	r3, [r4, #28]
 80027fa:	6a22      	ldr	r2, [r4, #32]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002800:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002804:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002806:	0852      	lsrs	r2, r2, #1
 8002808:	3a01      	subs	r2, #1
 800280a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800280e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002810:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002814:	4a28      	ldr	r2, [pc, #160]	@ (80028b8 <HAL_RCC_OscConfig+0x3f0>)
 8002816:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002818:	4b28      	ldr	r3, [pc, #160]	@ (80028bc <HAL_RCC_OscConfig+0x3f4>)
 800281a:	2201      	movs	r2, #1
 800281c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800281e:	f7fe fd7d 	bl	800131c <HAL_GetTick>
 8002822:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002824:	4b24      	ldr	r3, [pc, #144]	@ (80028b8 <HAL_RCC_OscConfig+0x3f0>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800282c:	d106      	bne.n	800283c <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800282e:	f7fe fd75 	bl	800131c <HAL_GetTick>
 8002832:	1b00      	subs	r0, r0, r4
 8002834:	2802      	cmp	r0, #2
 8002836:	d9f5      	bls.n	8002824 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8002838:	2003      	movs	r0, #3
 800283a:	e02f      	b.n	800289c <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800283c:	2000      	movs	r0, #0
 800283e:	e02d      	b.n	800289c <HAL_RCC_OscConfig+0x3d4>
 8002840:	2000      	movs	r0, #0
 8002842:	e02b      	b.n	800289c <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002844:	2b01      	cmp	r3, #1
 8002846:	d02b      	beq.n	80028a0 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8002848:	4b1b      	ldr	r3, [pc, #108]	@ (80028b8 <HAL_RCC_OscConfig+0x3f0>)
 800284a:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800284c:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8002850:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002852:	4291      	cmp	r1, r2
 8002854:	d126      	bne.n	80028a4 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002856:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800285a:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800285c:	428a      	cmp	r2, r1
 800285e:	d123      	bne.n	80028a8 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002860:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002862:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8002866:	401a      	ands	r2, r3
 8002868:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800286c:	d11e      	bne.n	80028ac <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800286e:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8002872:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002874:	0852      	lsrs	r2, r2, #1
 8002876:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002878:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800287c:	d118      	bne.n	80028b0 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800287e:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8002882:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002884:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002888:	d114      	bne.n	80028b4 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 800288a:	2000      	movs	r0, #0
 800288c:	e006      	b.n	800289c <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 800288e:	2001      	movs	r0, #1
}
 8002890:	4770      	bx	lr
        return HAL_ERROR;
 8002892:	2001      	movs	r0, #1
 8002894:	e002      	b.n	800289c <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8002896:	2001      	movs	r0, #1
 8002898:	e000      	b.n	800289c <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 800289a:	2000      	movs	r0, #0
}
 800289c:	b002      	add	sp, #8
 800289e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80028a0:	2001      	movs	r0, #1
 80028a2:	e7fb      	b.n	800289c <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 80028a4:	2001      	movs	r0, #1
 80028a6:	e7f9      	b.n	800289c <HAL_RCC_OscConfig+0x3d4>
 80028a8:	2001      	movs	r0, #1
 80028aa:	e7f7      	b.n	800289c <HAL_RCC_OscConfig+0x3d4>
 80028ac:	2001      	movs	r0, #1
 80028ae:	e7f5      	b.n	800289c <HAL_RCC_OscConfig+0x3d4>
 80028b0:	2001      	movs	r0, #1
 80028b2:	e7f3      	b.n	800289c <HAL_RCC_OscConfig+0x3d4>
 80028b4:	2001      	movs	r0, #1
 80028b6:	e7f1      	b.n	800289c <HAL_RCC_OscConfig+0x3d4>
 80028b8:	40023800 	.word	0x40023800
 80028bc:	42470000 	.word	0x42470000

080028c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028c0:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028c2:	4b33      	ldr	r3, [pc, #204]	@ (8002990 <HAL_RCC_GetSysClockFreq+0xd0>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 030c 	and.w	r3, r3, #12
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d05b      	beq.n	8002986 <HAL_RCC_GetSysClockFreq+0xc6>
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d15b      	bne.n	800298a <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028d2:	4b2f      	ldr	r3, [pc, #188]	@ (8002990 <HAL_RCC_GetSysClockFreq+0xd0>)
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80028e0:	d02c      	beq.n	800293c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002990 <HAL_RCC_GetSysClockFreq+0xd0>)
 80028e4:	6858      	ldr	r0, [r3, #4]
 80028e6:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80028ea:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80028ee:	ebbc 0c00 	subs.w	ip, ip, r0
 80028f2:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80028f6:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80028fa:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80028fe:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002902:	ebb1 010c 	subs.w	r1, r1, ip
 8002906:	eb63 030e 	sbc.w	r3, r3, lr
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002910:	00c9      	lsls	r1, r1, #3
 8002912:	eb11 0c00 	adds.w	ip, r1, r0
 8002916:	f143 0300 	adc.w	r3, r3, #0
 800291a:	0259      	lsls	r1, r3, #9
 800291c:	2300      	movs	r3, #0
 800291e:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8002922:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8002926:	f7fd fc61 	bl	80001ec <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800292a:	4b19      	ldr	r3, [pc, #100]	@ (8002990 <HAL_RCC_GetSysClockFreq+0xd0>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002932:	3301      	adds	r3, #1
 8002934:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002936:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800293a:	e027      	b.n	800298c <HAL_RCC_GetSysClockFreq+0xcc>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800293c:	4b14      	ldr	r3, [pc, #80]	@ (8002990 <HAL_RCC_GetSysClockFreq+0xd0>)
 800293e:	6858      	ldr	r0, [r3, #4]
 8002940:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002944:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002948:	ebbc 0c00 	subs.w	ip, ip, r0
 800294c:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002950:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002954:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002958:	ea4f 118c 	mov.w	r1, ip, lsl #6
 800295c:	ebb1 010c 	subs.w	r1, r1, ip
 8002960:	eb63 030e 	sbc.w	r3, r3, lr
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800296a:	00c9      	lsls	r1, r1, #3
 800296c:	eb11 0c00 	adds.w	ip, r1, r0
 8002970:	f143 0300 	adc.w	r3, r3, #0
 8002974:	0299      	lsls	r1, r3, #10
 8002976:	2300      	movs	r3, #0
 8002978:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800297c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002980:	f7fd fc34 	bl	80001ec <__aeabi_uldivmod>
 8002984:	e7d1      	b.n	800292a <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 8002986:	4803      	ldr	r0, [pc, #12]	@ (8002994 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002988:	e000      	b.n	800298c <HAL_RCC_GetSysClockFreq+0xcc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800298a:	4803      	ldr	r0, [pc, #12]	@ (8002998 <HAL_RCC_GetSysClockFreq+0xd8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800298c:	bd08      	pop	{r3, pc}
 800298e:	bf00      	nop
 8002990:	40023800 	.word	0x40023800
 8002994:	007a1200 	.word	0x007a1200
 8002998:	00f42400 	.word	0x00f42400

0800299c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800299c:	2800      	cmp	r0, #0
 800299e:	f000 809b 	beq.w	8002ad8 <HAL_RCC_ClockConfig+0x13c>
{
 80029a2:	b570      	push	{r4, r5, r6, lr}
 80029a4:	460d      	mov	r5, r1
 80029a6:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029a8:	4b4f      	ldr	r3, [pc, #316]	@ (8002ae8 <HAL_RCC_ClockConfig+0x14c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 030f 	and.w	r3, r3, #15
 80029b0:	428b      	cmp	r3, r1
 80029b2:	d208      	bcs.n	80029c6 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b4:	b2cb      	uxtb	r3, r1
 80029b6:	4a4c      	ldr	r2, [pc, #304]	@ (8002ae8 <HAL_RCC_ClockConfig+0x14c>)
 80029b8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ba:	6813      	ldr	r3, [r2, #0]
 80029bc:	f003 030f 	and.w	r3, r3, #15
 80029c0:	428b      	cmp	r3, r1
 80029c2:	f040 808b 	bne.w	8002adc <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c6:	6823      	ldr	r3, [r4, #0]
 80029c8:	f013 0f02 	tst.w	r3, #2
 80029cc:	d017      	beq.n	80029fe <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ce:	f013 0f04 	tst.w	r3, #4
 80029d2:	d004      	beq.n	80029de <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029d4:	4a45      	ldr	r2, [pc, #276]	@ (8002aec <HAL_RCC_ClockConfig+0x150>)
 80029d6:	6893      	ldr	r3, [r2, #8]
 80029d8:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029dc:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029de:	6823      	ldr	r3, [r4, #0]
 80029e0:	f013 0f08 	tst.w	r3, #8
 80029e4:	d004      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029e6:	4a41      	ldr	r2, [pc, #260]	@ (8002aec <HAL_RCC_ClockConfig+0x150>)
 80029e8:	6893      	ldr	r3, [r2, #8]
 80029ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029ee:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f0:	4a3e      	ldr	r2, [pc, #248]	@ (8002aec <HAL_RCC_ClockConfig+0x150>)
 80029f2:	6893      	ldr	r3, [r2, #8]
 80029f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80029f8:	68a1      	ldr	r1, [r4, #8]
 80029fa:	430b      	orrs	r3, r1
 80029fc:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029fe:	6823      	ldr	r3, [r4, #0]
 8002a00:	f013 0f01 	tst.w	r3, #1
 8002a04:	d032      	beq.n	8002a6c <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a06:	6863      	ldr	r3, [r4, #4]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d021      	beq.n	8002a50 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a0c:	1e9a      	subs	r2, r3, #2
 8002a0e:	2a01      	cmp	r2, #1
 8002a10:	d925      	bls.n	8002a5e <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a12:	4a36      	ldr	r2, [pc, #216]	@ (8002aec <HAL_RCC_ClockConfig+0x150>)
 8002a14:	6812      	ldr	r2, [r2, #0]
 8002a16:	f012 0f02 	tst.w	r2, #2
 8002a1a:	d061      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a1c:	4933      	ldr	r1, [pc, #204]	@ (8002aec <HAL_RCC_ClockConfig+0x150>)
 8002a1e:	688a      	ldr	r2, [r1, #8]
 8002a20:	f022 0203 	bic.w	r2, r2, #3
 8002a24:	4313      	orrs	r3, r2
 8002a26:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002a28:	f7fe fc78 	bl	800131c <HAL_GetTick>
 8002a2c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2e:	4b2f      	ldr	r3, [pc, #188]	@ (8002aec <HAL_RCC_ClockConfig+0x150>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 030c 	and.w	r3, r3, #12
 8002a36:	6862      	ldr	r2, [r4, #4]
 8002a38:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002a3c:	d016      	beq.n	8002a6c <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a3e:	f7fe fc6d 	bl	800131c <HAL_GetTick>
 8002a42:	1b80      	subs	r0, r0, r6
 8002a44:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002a48:	4298      	cmp	r0, r3
 8002a4a:	d9f0      	bls.n	8002a2e <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8002a4c:	2003      	movs	r0, #3
 8002a4e:	e042      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a50:	4a26      	ldr	r2, [pc, #152]	@ (8002aec <HAL_RCC_ClockConfig+0x150>)
 8002a52:	6812      	ldr	r2, [r2, #0]
 8002a54:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8002a58:	d1e0      	bne.n	8002a1c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002a5a:	2001      	movs	r0, #1
 8002a5c:	e03b      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a5e:	4a23      	ldr	r2, [pc, #140]	@ (8002aec <HAL_RCC_ClockConfig+0x150>)
 8002a60:	6812      	ldr	r2, [r2, #0]
 8002a62:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8002a66:	d1d9      	bne.n	8002a1c <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002a68:	2001      	movs	r0, #1
 8002a6a:	e034      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a6c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ae8 <HAL_RCC_ClockConfig+0x14c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 030f 	and.w	r3, r3, #15
 8002a74:	42ab      	cmp	r3, r5
 8002a76:	d907      	bls.n	8002a88 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a78:	b2ea      	uxtb	r2, r5
 8002a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae8 <HAL_RCC_ClockConfig+0x14c>)
 8002a7c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 030f 	and.w	r3, r3, #15
 8002a84:	42ab      	cmp	r3, r5
 8002a86:	d12d      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a88:	6823      	ldr	r3, [r4, #0]
 8002a8a:	f013 0f04 	tst.w	r3, #4
 8002a8e:	d006      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a90:	4a16      	ldr	r2, [pc, #88]	@ (8002aec <HAL_RCC_ClockConfig+0x150>)
 8002a92:	6893      	ldr	r3, [r2, #8]
 8002a94:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8002a98:	68e1      	ldr	r1, [r4, #12]
 8002a9a:	430b      	orrs	r3, r1
 8002a9c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a9e:	6823      	ldr	r3, [r4, #0]
 8002aa0:	f013 0f08 	tst.w	r3, #8
 8002aa4:	d007      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aa6:	4a11      	ldr	r2, [pc, #68]	@ (8002aec <HAL_RCC_ClockConfig+0x150>)
 8002aa8:	6893      	ldr	r3, [r2, #8]
 8002aaa:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002aae:	6921      	ldr	r1, [r4, #16]
 8002ab0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002ab4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ab6:	f7ff ff03 	bl	80028c0 <HAL_RCC_GetSysClockFreq>
 8002aba:	4b0c      	ldr	r3, [pc, #48]	@ (8002aec <HAL_RCC_ClockConfig+0x150>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002ac2:	4a0b      	ldr	r2, [pc, #44]	@ (8002af0 <HAL_RCC_ClockConfig+0x154>)
 8002ac4:	5cd3      	ldrb	r3, [r2, r3]
 8002ac6:	40d8      	lsrs	r0, r3
 8002ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8002af4 <HAL_RCC_ClockConfig+0x158>)
 8002aca:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002acc:	4b0a      	ldr	r3, [pc, #40]	@ (8002af8 <HAL_RCC_ClockConfig+0x15c>)
 8002ace:	6818      	ldr	r0, [r3, #0]
 8002ad0:	f7fe fb4e 	bl	8001170 <HAL_InitTick>
  return HAL_OK;
 8002ad4:	2000      	movs	r0, #0
}
 8002ad6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002ad8:	2001      	movs	r0, #1
}
 8002ada:	4770      	bx	lr
      return HAL_ERROR;
 8002adc:	2001      	movs	r0, #1
 8002ade:	e7fa      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002ae0:	2001      	movs	r0, #1
 8002ae2:	e7f8      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8002ae4:	2001      	movs	r0, #1
 8002ae6:	e7f6      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x13a>
 8002ae8:	40023c00 	.word	0x40023c00
 8002aec:	40023800 	.word	0x40023800
 8002af0:	08003ce8 	.word	0x08003ce8
 8002af4:	20000000 	.word	0x20000000
 8002af8:	20000008 	.word	0x20000008

08002afc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002afc:	4b01      	ldr	r3, [pc, #4]	@ (8002b04 <HAL_RCC_GetHCLKFreq+0x8>)
 8002afe:	6818      	ldr	r0, [r3, #0]
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	20000000 	.word	0x20000000

08002b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b08:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b0a:	f7ff fff7 	bl	8002afc <HAL_RCC_GetHCLKFreq>
 8002b0e:	4b04      	ldr	r3, [pc, #16]	@ (8002b20 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002b16:	4a03      	ldr	r2, [pc, #12]	@ (8002b24 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002b18:	5cd3      	ldrb	r3, [r2, r3]
}
 8002b1a:	40d8      	lsrs	r0, r3
 8002b1c:	bd08      	pop	{r3, pc}
 8002b1e:	bf00      	nop
 8002b20:	40023800 	.word	0x40023800
 8002b24:	08003ce0 	.word	0x08003ce0

08002b28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b28:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b2a:	f7ff ffe7 	bl	8002afc <HAL_RCC_GetHCLKFreq>
 8002b2e:	4b04      	ldr	r3, [pc, #16]	@ (8002b40 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002b36:	4a03      	ldr	r2, [pc, #12]	@ (8002b44 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002b38:	5cd3      	ldrb	r3, [r2, r3]
}
 8002b3a:	40d8      	lsrs	r0, r3
 8002b3c:	bd08      	pop	{r3, pc}
 8002b3e:	bf00      	nop
 8002b40:	40023800 	.word	0x40023800
 8002b44:	08003ce0 	.word	0x08003ce0

08002b48 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b48:	230f      	movs	r3, #15
 8002b4a:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b7c <HAL_RCC_GetClockConfig+0x34>)
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	f002 0203 	and.w	r2, r2, #3
 8002b54:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8002b5c:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8002b64:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	08db      	lsrs	r3, r3, #3
 8002b6a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8002b6e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b70:	4b03      	ldr	r3, [pc, #12]	@ (8002b80 <HAL_RCC_GetClockConfig+0x38>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 030f 	and.w	r3, r3, #15
 8002b78:	600b      	str	r3, [r1, #0]
}
 8002b7a:	4770      	bx	lr
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	40023c00 	.word	0x40023c00

08002b84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b84:	b530      	push	{r4, r5, lr}
 8002b86:	b083      	sub	sp, #12
 8002b88:	4604      	mov	r4, r0
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002b8a:	6803      	ldr	r3, [r0, #0]
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002b8c:	f013 0f43 	tst.w	r3, #67	@ 0x43
 8002b90:	d115      	bne.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x3a>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002b92:	6823      	ldr	r3, [r4, #0]
 8002b94:	f013 0f0c 	tst.w	r3, #12
 8002b98:	d16a      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0xec>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b9a:	6823      	ldr	r3, [r4, #0]
 8002b9c:	f013 0f20 	tst.w	r3, #32
 8002ba0:	f040 80bf 	bne.w	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x19e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ba4:	6823      	ldr	r3, [r4, #0]
 8002ba6:	f013 0f10 	tst.w	r3, #16
 8002baa:	f000 8123 	beq.w	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002bae:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8002bb2:	4b91      	ldr	r3, [pc, #580]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8002bb4:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
  }
  return HAL_OK;
 8002bb8:	2000      	movs	r0, #0
}
 8002bba:	b003      	add	sp, #12
 8002bbc:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8002bbe:	4b8f      	ldr	r3, [pc, #572]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8002bc4:	f7fe fbaa 	bl	800131c <HAL_GetTick>
 8002bc8:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002bca:	4b8d      	ldr	r3, [pc, #564]	@ (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8002bd2:	d006      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002bd4:	f7fe fba2 	bl	800131c <HAL_GetTick>
 8002bd8:	1b43      	subs	r3, r0, r5
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d9f5      	bls.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x46>
        return HAL_TIMEOUT;
 8002bde:	2003      	movs	r0, #3
 8002be0:	e7eb      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x36>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002be2:	6823      	ldr	r3, [r4, #0]
 8002be4:	f013 0f01 	tst.w	r3, #1
 8002be8:	d007      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x76>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002bea:	6862      	ldr	r2, [r4, #4]
 8002bec:	68a3      	ldr	r3, [r4, #8]
 8002bee:	071b      	lsls	r3, r3, #28
 8002bf0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002bf4:	4a82      	ldr	r2, [pc, #520]	@ (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002bf6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8002bfa:	6823      	ldr	r3, [r4, #0]
 8002bfc:	f013 0f02 	tst.w	r3, #2
 8002c00:	d015      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0xaa>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c02:	4a7f      	ldr	r2, [pc, #508]	@ (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002c04:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8002c08:	6860      	ldr	r0, [r4, #4]
 8002c0a:	68e3      	ldr	r3, [r4, #12]
 8002c0c:	061b      	lsls	r3, r3, #24
 8002c0e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002c12:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 8002c16:	430b      	orrs	r3, r1
 8002c18:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c1c:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8002c20:	f023 031f 	bic.w	r3, r3, #31
 8002c24:	69e1      	ldr	r1, [r4, #28]
 8002c26:	3901      	subs	r1, #1
 8002c28:	430b      	orrs	r3, r1
 8002c2a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c2e:	6823      	ldr	r3, [r4, #0]
 8002c30:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8002c34:	d00a      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c36:	6862      	ldr	r2, [r4, #4]
 8002c38:	68e3      	ldr	r3, [r4, #12]
 8002c3a:	061b      	lsls	r3, r3, #24
 8002c3c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002c40:	68a2      	ldr	r2, [r4, #8]
 8002c42:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002c46:	4a6e      	ldr	r2, [pc, #440]	@ (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002c48:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002c4c:	4b6b      	ldr	r3, [pc, #428]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8002c52:	f7fe fb63 	bl	800131c <HAL_GetTick>
 8002c56:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c58:	4b69      	ldr	r3, [pc, #420]	@ (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8002c60:	d197      	bne.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002c62:	f7fe fb5b 	bl	800131c <HAL_GetTick>
 8002c66:	1b40      	subs	r0, r0, r5
 8002c68:	2802      	cmp	r0, #2
 8002c6a:	d9f5      	bls.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
        return HAL_TIMEOUT;
 8002c6c:	2003      	movs	r0, #3
 8002c6e:	e7a4      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLSAI_DISABLE();
 8002c70:	4b62      	ldr	r3, [pc, #392]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	671a      	str	r2, [r3, #112]	@ 0x70
    tickstart = HAL_GetTick();
 8002c76:	f7fe fb51 	bl	800131c <HAL_GetTick>
 8002c7a:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c7c:	4b60      	ldr	r3, [pc, #384]	@ (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8002c84:	d006      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x110>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002c86:	f7fe fb49 	bl	800131c <HAL_GetTick>
 8002c8a:	1b43      	subs	r3, r0, r5
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d9f5      	bls.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0xf8>
        return HAL_TIMEOUT;
 8002c90:	2003      	movs	r0, #3
 8002c92:	e792      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x36>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8002c94:	6823      	ldr	r3, [r4, #0]
 8002c96:	f013 0f04 	tst.w	r3, #4
 8002c9a:	d016      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x146>
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c9c:	4a58      	ldr	r2, [pc, #352]	@ (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002c9e:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002ca2:	6920      	ldr	r0, [r4, #16]
 8002ca4:	6963      	ldr	r3, [r4, #20]
 8002ca6:	061b      	lsls	r3, r3, #24
 8002ca8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002cac:	f001 41e0 	and.w	r1, r1, #1879048192	@ 0x70000000
 8002cb0:	430b      	orrs	r3, r1
 8002cb2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002cb6:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8002cba:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8002cbe:	6a21      	ldr	r1, [r4, #32]
 8002cc0:	3901      	subs	r1, #1
 8002cc2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002cc6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002cca:	6823      	ldr	r3, [r4, #0]
 8002ccc:	f013 0f08 	tst.w	r3, #8
 8002cd0:	d014      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x178>
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002cd2:	4a4b      	ldr	r2, [pc, #300]	@ (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002cd4:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8002cd8:	6921      	ldr	r1, [r4, #16]
 8002cda:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8002cde:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002ce2:	69a1      	ldr	r1, [r4, #24]
 8002ce4:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002ce8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002cec:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8002cf0:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002cf4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002cf6:	430b      	orrs	r3, r1
 8002cf8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 8002cfc:	4b3f      	ldr	r3, [pc, #252]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8002cfe:	2201      	movs	r2, #1
 8002d00:	671a      	str	r2, [r3, #112]	@ 0x70
    tickstart = HAL_GetTick();
 8002d02:	f7fe fb0b 	bl	800131c <HAL_GetTick>
 8002d06:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d08:	4b3d      	ldr	r3, [pc, #244]	@ (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8002d10:	f47f af43 	bne.w	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x16>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002d14:	f7fe fb02 	bl	800131c <HAL_GetTick>
 8002d18:	1b40      	subs	r0, r0, r5
 8002d1a:	2802      	cmp	r0, #2
 8002d1c:	d9f4      	bls.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x184>
        return HAL_TIMEOUT;
 8002d1e:	2003      	movs	r0, #3
 8002d20:	e74b      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	9301      	str	r3, [sp, #4]
 8002d26:	4b36      	ldr	r3, [pc, #216]	@ (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002d28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d2a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002d2e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d36:	9301      	str	r3, [sp, #4]
 8002d38:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8002d3a:	4a32      	ldr	r2, [pc, #200]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002d3c:	6813      	ldr	r3, [r2, #0]
 8002d3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d42:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002d44:	f7fe faea 	bl	800131c <HAL_GetTick>
 8002d48:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d4a:	4b2e      	ldr	r3, [pc, #184]	@ (8002e04 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002d52:	d106      	bne.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d54:	f7fe fae2 	bl	800131c <HAL_GetTick>
 8002d58:	1b40      	subs	r0, r0, r5
 8002d5a:	2802      	cmp	r0, #2
 8002d5c:	d9f5      	bls.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
        return HAL_TIMEOUT;
 8002d5e:	2003      	movs	r0, #3
 8002d60:	e72b      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x36>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d62:	4b27      	ldr	r3, [pc, #156]	@ (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d66:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8002d6a:	d014      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8002d6c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002d6e:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d00f      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x212>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d76:	4b22      	ldr	r3, [pc, #136]	@ (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002d78:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d7a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d7e:	491f      	ldr	r1, [pc, #124]	@ (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8002d80:	2001      	movs	r0, #1
 8002d82:	f8c1 0e40 	str.w	r0, [r1, #3648]	@ 0xe40
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d86:	2000      	movs	r0, #0
 8002d88:	f8c1 0e40 	str.w	r0, [r1, #3648]	@ 0xe40
      RCC->BDCR = tmpreg1;
 8002d8c:	671a      	str	r2, [r3, #112]	@ 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d90:	f013 0f01 	tst.w	r3, #1
 8002d94:	d112      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x238>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d96:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002d98:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8002d9c:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8002da0:	d01d      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8002da2:	4a17      	ldr	r2, [pc, #92]	@ (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002da4:	6893      	ldr	r3, [r2, #8]
 8002da6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002daa:	6093      	str	r3, [r2, #8]
 8002dac:	4914      	ldr	r1, [pc, #80]	@ (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002dae:	6f0b      	ldr	r3, [r1, #112]	@ 0x70
 8002db0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002db2:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002db6:	4313      	orrs	r3, r2
 8002db8:	670b      	str	r3, [r1, #112]	@ 0x70
 8002dba:	e6f3      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 8002dbc:	f7fe faae 	bl	800131c <HAL_GetTick>
 8002dc0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc6:	f013 0f02 	tst.w	r3, #2
 8002dca:	d1e4      	bne.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x212>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dcc:	f7fe faa6 	bl	800131c <HAL_GetTick>
 8002dd0:	1b40      	subs	r0, r0, r5
 8002dd2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002dd6:	4298      	cmp	r0, r3
 8002dd8:	d9f3      	bls.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x23e>
            return HAL_TIMEOUT;
 8002dda:	2003      	movs	r0, #3
 8002ddc:	e6ed      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dde:	4908      	ldr	r1, [pc, #32]	@ (8002e00 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002de0:	688a      	ldr	r2, [r1, #8]
 8002de2:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8002de6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002dea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dee:	4313      	orrs	r3, r2
 8002df0:	608b      	str	r3, [r1, #8]
 8002df2:	e7db      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x228>
  return HAL_OK;
 8002df4:	2000      	movs	r0, #0
 8002df6:	e6e0      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x36>
 8002df8:	42471000 	.word	0x42471000
 8002dfc:	42470000 	.word	0x42470000
 8002e00:	40023800 	.word	0x40023800
 8002e04:	40007000 	.word	0x40007000

08002e08 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8002e08:	b1e0      	cbz	r0, 8002e44 <HAL_SDRAM_Init+0x3c>
{
 8002e0a:	b538      	push	{r3, r4, r5, lr}
 8002e0c:	460d      	mov	r5, r1
 8002e0e:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8002e10:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8002e14:	b18b      	cbz	r3, 8002e3a <HAL_SDRAM_Init+0x32>
    HAL_SDRAM_MspInit(hsdram);
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002e16:	2302      	movs	r3, #2
 8002e18:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8002e1c:	4621      	mov	r1, r4
 8002e1e:	f851 0b04 	ldr.w	r0, [r1], #4
 8002e22:	f000 fe91 	bl	8003b48 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8002e26:	6862      	ldr	r2, [r4, #4]
 8002e28:	4629      	mov	r1, r5
 8002e2a:	6820      	ldr	r0, [r4, #0]
 8002e2c:	f000 fec8 	bl	8003bc0 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002e30:	2301      	movs	r3, #1
 8002e32:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  return HAL_OK;
 8002e36:	2000      	movs	r0, #0
}
 8002e38:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8002e3a:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8002e3e:	f7fe f993 	bl	8001168 <HAL_SDRAM_MspInit>
 8002e42:	e7e8      	b.n	8002e16 <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 8002e44:	2001      	movs	r0, #1
}
 8002e46:	4770      	bx	lr

08002e48 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e48:	2800      	cmp	r0, #0
 8002e4a:	d05a      	beq.n	8002f02 <HAL_SPI_Init+0xba>
{
 8002e4c:	b510      	push	{r4, lr}
 8002e4e:	4604      	mov	r4, r0
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e50:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002e52:	b933      	cbnz	r3, 8002e62 <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e54:	6843      	ldr	r3, [r0, #4]
 8002e56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e5a:	d005      	beq.n	8002e68 <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	61c3      	str	r3, [r0, #28]
 8002e60:	e002      	b.n	8002e68 <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e62:	2300      	movs	r3, #0
 8002e64:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e66:	6143      	str	r3, [r0, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	62a3      	str	r3, [r4, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e6c:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d040      	beq.n	8002ef6 <HAL_SPI_Init+0xae>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e74:	2302      	movs	r3, #2
 8002e76:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e7a:	6822      	ldr	r2, [r4, #0]
 8002e7c:	6813      	ldr	r3, [r2, #0]
 8002e7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e82:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e84:	6863      	ldr	r3, [r4, #4]
 8002e86:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8002e8a:	68a2      	ldr	r2, [r4, #8]
 8002e8c:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 8002e90:	4313      	orrs	r3, r2
 8002e92:	68e2      	ldr	r2, [r4, #12]
 8002e94:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	6922      	ldr	r2, [r4, #16]
 8002e9c:	f002 0202 	and.w	r2, r2, #2
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	6962      	ldr	r2, [r4, #20]
 8002ea4:	f002 0201 	and.w	r2, r2, #1
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	69a2      	ldr	r2, [r4, #24]
 8002eac:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	69e2      	ldr	r2, [r4, #28]
 8002eb4:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	6a22      	ldr	r2, [r4, #32]
 8002ebc:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002ec4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002ec8:	6821      	ldr	r1, [r4, #0]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	600b      	str	r3, [r1, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002ece:	8b63      	ldrh	r3, [r4, #26]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002ed6:	f002 0210 	and.w	r2, r2, #16
 8002eda:	6821      	ldr	r1, [r4, #0]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ee0:	6822      	ldr	r2, [r4, #0]
 8002ee2:	69d3      	ldr	r3, [r2, #28]
 8002ee4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002ee8:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002eea:	2000      	movs	r0, #0
 8002eec:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51

  return HAL_OK;
}
 8002ef4:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002ef6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8002efa:	4620      	mov	r0, r4
 8002efc:	f7fe f8a6 	bl	800104c <HAL_SPI_MspInit>
 8002f00:	e7b8      	b.n	8002e74 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8002f02:	2001      	movs	r0, #1
}
 8002f04:	4770      	bx	lr

08002f06 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f06:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f08:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f0a:	6a04      	ldr	r4, [r0, #32]
 8002f0c:	f024 0401 	bic.w	r4, r4, #1
 8002f10:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f12:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f14:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f18:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f1c:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8002f20:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f22:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002f24:	6203      	str	r3, [r0, #32]
}
 8002f26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f2c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f2e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f30:	6a04      	ldr	r4, [r0, #32]
 8002f32:	f024 0410 	bic.w	r4, r4, #16
 8002f36:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f38:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f3a:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f3e:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f42:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f46:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f4a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002f4c:	6203      	str	r3, [r0, #32]
}
 8002f4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f54:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f5a:	430b      	orrs	r3, r1
 8002f5c:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f60:	6083      	str	r3, [r0, #8]
}
 8002f62:	4770      	bx	lr

08002f64 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002f64:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d137      	bne.n	8002fde <HAL_TIM_Base_Start_IT+0x7a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002f6e:	2302      	movs	r3, #2
 8002f70:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f74:	6802      	ldr	r2, [r0, #0]
 8002f76:	68d3      	ldr	r3, [r2, #12]
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f7e:	6803      	ldr	r3, [r0, #0]
 8002f80:	4a19      	ldr	r2, [pc, #100]	@ (8002fe8 <HAL_TIM_Base_Start_IT+0x84>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d020      	beq.n	8002fc8 <HAL_TIM_Base_Start_IT+0x64>
 8002f86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f8a:	d01d      	beq.n	8002fc8 <HAL_TIM_Base_Start_IT+0x64>
 8002f8c:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d019      	beq.n	8002fc8 <HAL_TIM_Base_Start_IT+0x64>
 8002f94:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d015      	beq.n	8002fc8 <HAL_TIM_Base_Start_IT+0x64>
 8002f9c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d011      	beq.n	8002fc8 <HAL_TIM_Base_Start_IT+0x64>
 8002fa4:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d00d      	beq.n	8002fc8 <HAL_TIM_Base_Start_IT+0x64>
 8002fac:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d009      	beq.n	8002fc8 <HAL_TIM_Base_Start_IT+0x64>
 8002fb4:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d005      	beq.n	8002fc8 <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	f042 0201 	orr.w	r2, r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fc8:	689a      	ldr	r2, [r3, #8]
 8002fca:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fce:	2a06      	cmp	r2, #6
 8002fd0:	d007      	beq.n	8002fe2 <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	f042 0201 	orr.w	r2, r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002fda:	2000      	movs	r0, #0
 8002fdc:	4770      	bx	lr
    return HAL_ERROR;
 8002fde:	2001      	movs	r0, #1
 8002fe0:	4770      	bx	lr
  return HAL_OK;
 8002fe2:	2000      	movs	r0, #0
}
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40010000 	.word	0x40010000

08002fec <HAL_TIM_OC_DelayElapsedCallback>:
}
 8002fec:	4770      	bx	lr

08002fee <HAL_TIM_IC_CaptureCallback>:
}
 8002fee:	4770      	bx	lr

08002ff0 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8002ff0:	4770      	bx	lr

08002ff2 <HAL_TIM_TriggerCallback>:
}
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_TIM_IRQHandler>:
{
 8002ff4:	b570      	push	{r4, r5, r6, lr}
 8002ff6:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8002ff8:	6803      	ldr	r3, [r0, #0]
 8002ffa:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ffc:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ffe:	f015 0f02 	tst.w	r5, #2
 8003002:	d010      	beq.n	8003026 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003004:	f016 0f02 	tst.w	r6, #2
 8003008:	d00d      	beq.n	8003026 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800300a:	f06f 0202 	mvn.w	r2, #2
 800300e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003010:	2301      	movs	r3, #1
 8003012:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003014:	6803      	ldr	r3, [r0, #0]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	f013 0f03 	tst.w	r3, #3
 800301c:	d05e      	beq.n	80030dc <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 800301e:	f7ff ffe6 	bl	8002fee <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003022:	2300      	movs	r3, #0
 8003024:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003026:	f015 0f04 	tst.w	r5, #4
 800302a:	d012      	beq.n	8003052 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800302c:	f016 0f04 	tst.w	r6, #4
 8003030:	d00f      	beq.n	8003052 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003032:	6823      	ldr	r3, [r4, #0]
 8003034:	f06f 0204 	mvn.w	r2, #4
 8003038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800303a:	2302      	movs	r3, #2
 800303c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800303e:	6823      	ldr	r3, [r4, #0]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8003046:	d04f      	beq.n	80030e8 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8003048:	4620      	mov	r0, r4
 800304a:	f7ff ffd0 	bl	8002fee <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800304e:	2300      	movs	r3, #0
 8003050:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003052:	f015 0f08 	tst.w	r5, #8
 8003056:	d012      	beq.n	800307e <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003058:	f016 0f08 	tst.w	r6, #8
 800305c:	d00f      	beq.n	800307e <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800305e:	6823      	ldr	r3, [r4, #0]
 8003060:	f06f 0208 	mvn.w	r2, #8
 8003064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003066:	2304      	movs	r3, #4
 8003068:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800306a:	6823      	ldr	r3, [r4, #0]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	f013 0f03 	tst.w	r3, #3
 8003072:	d040      	beq.n	80030f6 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8003074:	4620      	mov	r0, r4
 8003076:	f7ff ffba 	bl	8002fee <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800307a:	2300      	movs	r3, #0
 800307c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800307e:	f015 0f10 	tst.w	r5, #16
 8003082:	d012      	beq.n	80030aa <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003084:	f016 0f10 	tst.w	r6, #16
 8003088:	d00f      	beq.n	80030aa <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800308a:	6823      	ldr	r3, [r4, #0]
 800308c:	f06f 0210 	mvn.w	r2, #16
 8003090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003092:	2308      	movs	r3, #8
 8003094:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003096:	6823      	ldr	r3, [r4, #0]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800309e:	d031      	beq.n	8003104 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 80030a0:	4620      	mov	r0, r4
 80030a2:	f7ff ffa4 	bl	8002fee <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030a6:	2300      	movs	r3, #0
 80030a8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80030aa:	f015 0f01 	tst.w	r5, #1
 80030ae:	d002      	beq.n	80030b6 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80030b0:	f016 0f01 	tst.w	r6, #1
 80030b4:	d12d      	bne.n	8003112 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80030b6:	f015 0f80 	tst.w	r5, #128	@ 0x80
 80030ba:	d002      	beq.n	80030c2 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030bc:	f016 0f80 	tst.w	r6, #128	@ 0x80
 80030c0:	d12f      	bne.n	8003122 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030c2:	f015 0f40 	tst.w	r5, #64	@ 0x40
 80030c6:	d002      	beq.n	80030ce <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030c8:	f016 0f40 	tst.w	r6, #64	@ 0x40
 80030cc:	d131      	bne.n	8003132 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80030ce:	f015 0f20 	tst.w	r5, #32
 80030d2:	d002      	beq.n	80030da <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80030d4:	f016 0f20 	tst.w	r6, #32
 80030d8:	d133      	bne.n	8003142 <HAL_TIM_IRQHandler+0x14e>
}
 80030da:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030dc:	f7ff ff86 	bl	8002fec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e0:	4620      	mov	r0, r4
 80030e2:	f7ff ff85 	bl	8002ff0 <HAL_TIM_PWM_PulseFinishedCallback>
 80030e6:	e79c      	b.n	8003022 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030e8:	4620      	mov	r0, r4
 80030ea:	f7ff ff7f 	bl	8002fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ee:	4620      	mov	r0, r4
 80030f0:	f7ff ff7e 	bl	8002ff0 <HAL_TIM_PWM_PulseFinishedCallback>
 80030f4:	e7ab      	b.n	800304e <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030f6:	4620      	mov	r0, r4
 80030f8:	f7ff ff78 	bl	8002fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030fc:	4620      	mov	r0, r4
 80030fe:	f7ff ff77 	bl	8002ff0 <HAL_TIM_PWM_PulseFinishedCallback>
 8003102:	e7ba      	b.n	800307a <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003104:	4620      	mov	r0, r4
 8003106:	f7ff ff71 	bl	8002fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800310a:	4620      	mov	r0, r4
 800310c:	f7ff ff70 	bl	8002ff0 <HAL_TIM_PWM_PulseFinishedCallback>
 8003110:	e7c9      	b.n	80030a6 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003112:	6823      	ldr	r3, [r4, #0]
 8003114:	f06f 0201 	mvn.w	r2, #1
 8003118:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800311a:	4620      	mov	r0, r4
 800311c:	f7fd fb42 	bl	80007a4 <HAL_TIM_PeriodElapsedCallback>
 8003120:	e7c9      	b.n	80030b6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003122:	6823      	ldr	r3, [r4, #0]
 8003124:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003128:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800312a:	4620      	mov	r0, r4
 800312c:	f000 f97d 	bl	800342a <HAL_TIMEx_BreakCallback>
 8003130:	e7c7      	b.n	80030c2 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003132:	6823      	ldr	r3, [r4, #0]
 8003134:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003138:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800313a:	4620      	mov	r0, r4
 800313c:	f7ff ff59 	bl	8002ff2 <HAL_TIM_TriggerCallback>
 8003140:	e7c5      	b.n	80030ce <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003142:	6823      	ldr	r3, [r4, #0]
 8003144:	f06f 0220 	mvn.w	r2, #32
 8003148:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800314a:	4620      	mov	r0, r4
 800314c:	f000 f96c 	bl	8003428 <HAL_TIMEx_CommutCallback>
}
 8003150:	e7c3      	b.n	80030da <HAL_TIM_IRQHandler+0xe6>
	...

08003154 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003154:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003156:	4a34      	ldr	r2, [pc, #208]	@ (8003228 <TIM_Base_SetConfig+0xd4>)
 8003158:	4290      	cmp	r0, r2
 800315a:	d012      	beq.n	8003182 <TIM_Base_SetConfig+0x2e>
 800315c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003160:	d00f      	beq.n	8003182 <TIM_Base_SetConfig+0x2e>
 8003162:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8003166:	4290      	cmp	r0, r2
 8003168:	d00b      	beq.n	8003182 <TIM_Base_SetConfig+0x2e>
 800316a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800316e:	4290      	cmp	r0, r2
 8003170:	d007      	beq.n	8003182 <TIM_Base_SetConfig+0x2e>
 8003172:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003176:	4290      	cmp	r0, r2
 8003178:	d003      	beq.n	8003182 <TIM_Base_SetConfig+0x2e>
 800317a:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800317e:	4290      	cmp	r0, r2
 8003180:	d103      	bne.n	800318a <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003186:	684a      	ldr	r2, [r1, #4]
 8003188:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800318a:	4a27      	ldr	r2, [pc, #156]	@ (8003228 <TIM_Base_SetConfig+0xd4>)
 800318c:	4290      	cmp	r0, r2
 800318e:	d02a      	beq.n	80031e6 <TIM_Base_SetConfig+0x92>
 8003190:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003194:	d027      	beq.n	80031e6 <TIM_Base_SetConfig+0x92>
 8003196:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800319a:	4290      	cmp	r0, r2
 800319c:	d023      	beq.n	80031e6 <TIM_Base_SetConfig+0x92>
 800319e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80031a2:	4290      	cmp	r0, r2
 80031a4:	d01f      	beq.n	80031e6 <TIM_Base_SetConfig+0x92>
 80031a6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80031aa:	4290      	cmp	r0, r2
 80031ac:	d01b      	beq.n	80031e6 <TIM_Base_SetConfig+0x92>
 80031ae:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80031b2:	4290      	cmp	r0, r2
 80031b4:	d017      	beq.n	80031e6 <TIM_Base_SetConfig+0x92>
 80031b6:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 80031ba:	4290      	cmp	r0, r2
 80031bc:	d013      	beq.n	80031e6 <TIM_Base_SetConfig+0x92>
 80031be:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80031c2:	4290      	cmp	r0, r2
 80031c4:	d00f      	beq.n	80031e6 <TIM_Base_SetConfig+0x92>
 80031c6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80031ca:	4290      	cmp	r0, r2
 80031cc:	d00b      	beq.n	80031e6 <TIM_Base_SetConfig+0x92>
 80031ce:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 80031d2:	4290      	cmp	r0, r2
 80031d4:	d007      	beq.n	80031e6 <TIM_Base_SetConfig+0x92>
 80031d6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80031da:	4290      	cmp	r0, r2
 80031dc:	d003      	beq.n	80031e6 <TIM_Base_SetConfig+0x92>
 80031de:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80031e2:	4290      	cmp	r0, r2
 80031e4:	d103      	bne.n	80031ee <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80031e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031ea:	68ca      	ldr	r2, [r1, #12]
 80031ec:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031f2:	694a      	ldr	r2, [r1, #20]
 80031f4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80031f6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031f8:	688b      	ldr	r3, [r1, #8]
 80031fa:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80031fc:	680b      	ldr	r3, [r1, #0]
 80031fe:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003200:	4b09      	ldr	r3, [pc, #36]	@ (8003228 <TIM_Base_SetConfig+0xd4>)
 8003202:	4298      	cmp	r0, r3
 8003204:	d003      	beq.n	800320e <TIM_Base_SetConfig+0xba>
 8003206:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800320a:	4298      	cmp	r0, r3
 800320c:	d101      	bne.n	8003212 <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 800320e:	690b      	ldr	r3, [r1, #16]
 8003210:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003212:	2301      	movs	r3, #1
 8003214:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003216:	6903      	ldr	r3, [r0, #16]
 8003218:	f013 0f01 	tst.w	r3, #1
 800321c:	d003      	beq.n	8003226 <TIM_Base_SetConfig+0xd2>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800321e:	6903      	ldr	r3, [r0, #16]
 8003220:	f023 0301 	bic.w	r3, r3, #1
 8003224:	6103      	str	r3, [r0, #16]
}
 8003226:	4770      	bx	lr
 8003228:	40010000 	.word	0x40010000

0800322c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800322c:	b340      	cbz	r0, 8003280 <HAL_TIM_Base_Init+0x54>
{
 800322e:	b510      	push	{r4, lr}
 8003230:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8003232:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003236:	b1f3      	cbz	r3, 8003276 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003238:	2302      	movs	r3, #2
 800323a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800323e:	4621      	mov	r1, r4
 8003240:	f851 0b04 	ldr.w	r0, [r1], #4
 8003244:	f7ff ff86 	bl	8003154 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003248:	2301      	movs	r3, #1
 800324a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800324e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003252:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003256:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800325a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800325e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003262:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003266:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800326a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800326e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003272:	2000      	movs	r0, #0
}
 8003274:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003276:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800327a:	f7fd ff1d 	bl	80010b8 <HAL_TIM_Base_MspInit>
 800327e:	e7db      	b.n	8003238 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003280:	2001      	movs	r0, #1
}
 8003282:	4770      	bx	lr

08003284 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003284:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003286:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003288:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800328c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003290:	430a      	orrs	r2, r1
 8003292:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003296:	6082      	str	r2, [r0, #8]
}
 8003298:	f85d 4b04 	ldr.w	r4, [sp], #4
 800329c:	4770      	bx	lr

0800329e <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800329e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d078      	beq.n	8003398 <HAL_TIM_ConfigClockSource+0xfa>
{
 80032a6:	b510      	push	{r4, lr}
 80032a8:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80032aa:	2301      	movs	r3, #1
 80032ac:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80032b0:	2302      	movs	r3, #2
 80032b2:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80032b6:	6802      	ldr	r2, [r0, #0]
 80032b8:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 80032c2:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80032c4:	680b      	ldr	r3, [r1, #0]
 80032c6:	2b60      	cmp	r3, #96	@ 0x60
 80032c8:	d04c      	beq.n	8003364 <HAL_TIM_ConfigClockSource+0xc6>
 80032ca:	d829      	bhi.n	8003320 <HAL_TIM_ConfigClockSource+0x82>
 80032cc:	2b40      	cmp	r3, #64	@ 0x40
 80032ce:	d054      	beq.n	800337a <HAL_TIM_ConfigClockSource+0xdc>
 80032d0:	d90c      	bls.n	80032ec <HAL_TIM_ConfigClockSource+0x4e>
 80032d2:	2b50      	cmp	r3, #80	@ 0x50
 80032d4:	d122      	bne.n	800331c <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032d6:	68ca      	ldr	r2, [r1, #12]
 80032d8:	6849      	ldr	r1, [r1, #4]
 80032da:	6800      	ldr	r0, [r0, #0]
 80032dc:	f7ff fe13 	bl	8002f06 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032e0:	2150      	movs	r1, #80	@ 0x50
 80032e2:	6820      	ldr	r0, [r4, #0]
 80032e4:	f7ff fe36 	bl	8002f54 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80032e8:	2000      	movs	r0, #0
      break;
 80032ea:	e005      	b.n	80032f8 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80032ec:	2b20      	cmp	r3, #32
 80032ee:	d00d      	beq.n	800330c <HAL_TIM_ConfigClockSource+0x6e>
 80032f0:	d909      	bls.n	8003306 <HAL_TIM_ConfigClockSource+0x68>
 80032f2:	2b30      	cmp	r3, #48	@ 0x30
 80032f4:	d00a      	beq.n	800330c <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 80032f6:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 80032f8:	2301      	movs	r3, #1
 80032fa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80032fe:	2300      	movs	r3, #0
 8003300:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8003304:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8003306:	b10b      	cbz	r3, 800330c <HAL_TIM_ConfigClockSource+0x6e>
 8003308:	2b10      	cmp	r3, #16
 800330a:	d105      	bne.n	8003318 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800330c:	4619      	mov	r1, r3
 800330e:	6820      	ldr	r0, [r4, #0]
 8003310:	f7ff fe20 	bl	8002f54 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003314:	2000      	movs	r0, #0
      break;
 8003316:	e7ef      	b.n	80032f8 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8003318:	2001      	movs	r0, #1
 800331a:	e7ed      	b.n	80032f8 <HAL_TIM_ConfigClockSource+0x5a>
 800331c:	2001      	movs	r0, #1
 800331e:	e7eb      	b.n	80032f8 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8003320:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003324:	d034      	beq.n	8003390 <HAL_TIM_ConfigClockSource+0xf2>
 8003326:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800332a:	d10c      	bne.n	8003346 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 800332c:	68cb      	ldr	r3, [r1, #12]
 800332e:	684a      	ldr	r2, [r1, #4]
 8003330:	6889      	ldr	r1, [r1, #8]
 8003332:	6800      	ldr	r0, [r0, #0]
 8003334:	f7ff ffa6 	bl	8003284 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003338:	6822      	ldr	r2, [r4, #0]
 800333a:	6893      	ldr	r3, [r2, #8]
 800333c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003340:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003342:	2000      	movs	r0, #0
      break;
 8003344:	e7d8      	b.n	80032f8 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8003346:	2b70      	cmp	r3, #112	@ 0x70
 8003348:	d124      	bne.n	8003394 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 800334a:	68cb      	ldr	r3, [r1, #12]
 800334c:	684a      	ldr	r2, [r1, #4]
 800334e:	6889      	ldr	r1, [r1, #8]
 8003350:	6800      	ldr	r0, [r0, #0]
 8003352:	f7ff ff97 	bl	8003284 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003356:	6822      	ldr	r2, [r4, #0]
 8003358:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800335a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800335e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003360:	2000      	movs	r0, #0
      break;
 8003362:	e7c9      	b.n	80032f8 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003364:	68ca      	ldr	r2, [r1, #12]
 8003366:	6849      	ldr	r1, [r1, #4]
 8003368:	6800      	ldr	r0, [r0, #0]
 800336a:	f7ff fddf 	bl	8002f2c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800336e:	2160      	movs	r1, #96	@ 0x60
 8003370:	6820      	ldr	r0, [r4, #0]
 8003372:	f7ff fdef 	bl	8002f54 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003376:	2000      	movs	r0, #0
      break;
 8003378:	e7be      	b.n	80032f8 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800337a:	68ca      	ldr	r2, [r1, #12]
 800337c:	6849      	ldr	r1, [r1, #4]
 800337e:	6800      	ldr	r0, [r0, #0]
 8003380:	f7ff fdc1 	bl	8002f06 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003384:	2140      	movs	r1, #64	@ 0x40
 8003386:	6820      	ldr	r0, [r4, #0]
 8003388:	f7ff fde4 	bl	8002f54 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800338c:	2000      	movs	r0, #0
      break;
 800338e:	e7b3      	b.n	80032f8 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8003390:	2000      	movs	r0, #0
 8003392:	e7b1      	b.n	80032f8 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8003394:	2001      	movs	r0, #1
 8003396:	e7af      	b.n	80032f8 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8003398:	2002      	movs	r0, #2
}
 800339a:	4770      	bx	lr

0800339c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800339c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80033a0:	2a01      	cmp	r2, #1
 80033a2:	d03d      	beq.n	8003420 <HAL_TIMEx_MasterConfigSynchronization+0x84>
{
 80033a4:	b410      	push	{r4}
 80033a6:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80033a8:	2201      	movs	r2, #1
 80033aa:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ae:	2202      	movs	r2, #2
 80033b0:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033b4:	6802      	ldr	r2, [r0, #0]
 80033b6:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033b8:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033ba:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033be:	6808      	ldr	r0, [r1, #0]
 80033c0:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033c4:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	4816      	ldr	r0, [pc, #88]	@ (8003424 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 80033ca:	4282      	cmp	r2, r0
 80033cc:	d01a      	beq.n	8003404 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80033ce:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80033d2:	d017      	beq.n	8003404 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80033d4:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 80033d8:	4282      	cmp	r2, r0
 80033da:	d013      	beq.n	8003404 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80033dc:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80033e0:	4282      	cmp	r2, r0
 80033e2:	d00f      	beq.n	8003404 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80033e4:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80033e8:	4282      	cmp	r2, r0
 80033ea:	d00b      	beq.n	8003404 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80033ec:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 80033f0:	4282      	cmp	r2, r0
 80033f2:	d007      	beq.n	8003404 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80033f4:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 80033f8:	4282      	cmp	r2, r0
 80033fa:	d003      	beq.n	8003404 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80033fc:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8003400:	4282      	cmp	r2, r0
 8003402:	d104      	bne.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003404:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003408:	6849      	ldr	r1, [r1, #4]
 800340a:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800340c:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003414:	2000      	movs	r0, #0
 8003416:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 800341a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800341e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003420:	2002      	movs	r0, #2
}
 8003422:	4770      	bx	lr
 8003424:	40010000 	.word	0x40010000

08003428 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003428:	4770      	bx	lr

0800342a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800342a:	4770      	bx	lr

0800342c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800342c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342e:	f102 030c 	add.w	r3, r2, #12
 8003432:	e853 3f00 	ldrex	r3, [r3]
 8003436:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343a:	320c      	adds	r2, #12
 800343c:	e842 3100 	strex	r1, r3, [r2]
 8003440:	2900      	cmp	r1, #0
 8003442:	d1f3      	bne.n	800342c <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003444:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003446:	f102 0314 	add.w	r3, r2, #20
 800344a:	e853 3f00 	ldrex	r3, [r3]
 800344e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003452:	3214      	adds	r2, #20
 8003454:	e842 3100 	strex	r1, r3, [r2]
 8003458:	2900      	cmp	r1, #0
 800345a:	d1f3      	bne.n	8003444 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800345c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800345e:	2b01      	cmp	r3, #1
 8003460:	d005      	beq.n	800346e <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003462:	2320      	movs	r3, #32
 8003464:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003468:	2300      	movs	r3, #0
 800346a:	6303      	str	r3, [r0, #48]	@ 0x30
}
 800346c:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800346e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003470:	f102 030c 	add.w	r3, r2, #12
 8003474:	e853 3f00 	ldrex	r3, [r3]
 8003478:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347c:	320c      	adds	r2, #12
 800347e:	e842 3100 	strex	r1, r3, [r2]
 8003482:	2900      	cmp	r1, #0
 8003484:	d1f3      	bne.n	800346e <UART_EndRxTransfer+0x42>
 8003486:	e7ec      	b.n	8003462 <UART_EndRxTransfer+0x36>

08003488 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003488:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b21      	cmp	r3, #33	@ 0x21
 8003490:	d001      	beq.n	8003496 <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003492:	2002      	movs	r0, #2
  }
}
 8003494:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003496:	6883      	ldr	r3, [r0, #8]
 8003498:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800349c:	d017      	beq.n	80034ce <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800349e:	6a03      	ldr	r3, [r0, #32]
 80034a0:	1c5a      	adds	r2, r3, #1
 80034a2:	6202      	str	r2, [r0, #32]
 80034a4:	781a      	ldrb	r2, [r3, #0]
 80034a6:	6803      	ldr	r3, [r0, #0]
 80034a8:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 80034aa:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80034b4:	b94b      	cbnz	r3, 80034ca <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034b6:	6802      	ldr	r2, [r0, #0]
 80034b8:	68d3      	ldr	r3, [r2, #12]
 80034ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034be:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034c0:	6802      	ldr	r2, [r0, #0]
 80034c2:	68d3      	ldr	r3, [r2, #12]
 80034c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034c8:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 80034ca:	2000      	movs	r0, #0
 80034cc:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034ce:	6903      	ldr	r3, [r0, #16]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1e4      	bne.n	800349e <UART_Transmit_IT+0x16>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80034d4:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	6802      	ldr	r2, [r0, #0]
 80034da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034de:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 80034e0:	6a03      	ldr	r3, [r0, #32]
 80034e2:	3302      	adds	r3, #2
 80034e4:	6203      	str	r3, [r0, #32]
 80034e6:	e7e0      	b.n	80034aa <UART_Transmit_IT+0x22>

080034e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034e8:	b510      	push	{r4, lr}
 80034ea:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034ec:	6802      	ldr	r2, [r0, #0]
 80034ee:	6913      	ldr	r3, [r2, #16]
 80034f0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80034f4:	68c1      	ldr	r1, [r0, #12]
 80034f6:	430b      	orrs	r3, r1
 80034f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034fa:	6883      	ldr	r3, [r0, #8]
 80034fc:	6902      	ldr	r2, [r0, #16]
 80034fe:	431a      	orrs	r2, r3
 8003500:	6943      	ldr	r3, [r0, #20]
 8003502:	431a      	orrs	r2, r3
 8003504:	69c3      	ldr	r3, [r0, #28]
 8003506:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8003508:	6801      	ldr	r1, [r0, #0]
 800350a:	68cb      	ldr	r3, [r1, #12]
 800350c:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003510:	f023 030c 	bic.w	r3, r3, #12
 8003514:	4313      	orrs	r3, r2
 8003516:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003518:	6802      	ldr	r2, [r0, #0]
 800351a:	6953      	ldr	r3, [r2, #20]
 800351c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003520:	6981      	ldr	r1, [r0, #24]
 8003522:	430b      	orrs	r3, r1
 8003524:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003526:	6803      	ldr	r3, [r0, #0]
 8003528:	4a31      	ldr	r2, [pc, #196]	@ (80035f0 <UART_SetConfig+0x108>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d006      	beq.n	800353c <UART_SetConfig+0x54>
 800352e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003532:	4293      	cmp	r3, r2
 8003534:	d002      	beq.n	800353c <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003536:	f7ff fae7 	bl	8002b08 <HAL_RCC_GetPCLK1Freq>
 800353a:	e001      	b.n	8003540 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 800353c:	f7ff faf4 	bl	8002b28 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003540:	69e3      	ldr	r3, [r4, #28]
 8003542:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003546:	d029      	beq.n	800359c <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003548:	2100      	movs	r1, #0
 800354a:	1803      	adds	r3, r0, r0
 800354c:	4149      	adcs	r1, r1
 800354e:	181b      	adds	r3, r3, r0
 8003550:	f141 0100 	adc.w	r1, r1, #0
 8003554:	00c9      	lsls	r1, r1, #3
 8003556:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	1818      	adds	r0, r3, r0
 800355e:	6863      	ldr	r3, [r4, #4]
 8003560:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8003564:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8003568:	f141 0100 	adc.w	r1, r1, #0
 800356c:	f7fc fe3e 	bl	80001ec <__aeabi_uldivmod>
 8003570:	4a20      	ldr	r2, [pc, #128]	@ (80035f4 <UART_SetConfig+0x10c>)
 8003572:	fba2 3100 	umull	r3, r1, r2, r0
 8003576:	0949      	lsrs	r1, r1, #5
 8003578:	2364      	movs	r3, #100	@ 0x64
 800357a:	fb03 0311 	mls	r3, r3, r1, r0
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	3332      	adds	r3, #50	@ 0x32
 8003582:	fba2 2303 	umull	r2, r3, r2, r3
 8003586:	095b      	lsrs	r3, r3, #5
 8003588:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800358c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003590:	f003 030f 	and.w	r3, r3, #15
 8003594:	6821      	ldr	r1, [r4, #0]
 8003596:	4413      	add	r3, r2
 8003598:	608b      	str	r3, [r1, #8]
  }
}
 800359a:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800359c:	2300      	movs	r3, #0
 800359e:	1802      	adds	r2, r0, r0
 80035a0:	eb43 0103 	adc.w	r1, r3, r3
 80035a4:	1812      	adds	r2, r2, r0
 80035a6:	f141 0100 	adc.w	r1, r1, #0
 80035aa:	00c9      	lsls	r1, r1, #3
 80035ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035b0:	00d2      	lsls	r2, r2, #3
 80035b2:	1810      	adds	r0, r2, r0
 80035b4:	f141 0100 	adc.w	r1, r1, #0
 80035b8:	6862      	ldr	r2, [r4, #4]
 80035ba:	1892      	adds	r2, r2, r2
 80035bc:	415b      	adcs	r3, r3
 80035be:	f7fc fe15 	bl	80001ec <__aeabi_uldivmod>
 80035c2:	4a0c      	ldr	r2, [pc, #48]	@ (80035f4 <UART_SetConfig+0x10c>)
 80035c4:	fba2 3100 	umull	r3, r1, r2, r0
 80035c8:	0949      	lsrs	r1, r1, #5
 80035ca:	2364      	movs	r3, #100	@ 0x64
 80035cc:	fb03 0311 	mls	r3, r3, r1, r0
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	3332      	adds	r3, #50	@ 0x32
 80035d4:	fba2 2303 	umull	r2, r3, r2, r3
 80035d8:	095b      	lsrs	r3, r3, #5
 80035da:	005a      	lsls	r2, r3, #1
 80035dc:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 80035e0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	6821      	ldr	r1, [r4, #0]
 80035ea:	4413      	add	r3, r2
 80035ec:	608b      	str	r3, [r1, #8]
 80035ee:	e7d4      	b.n	800359a <UART_SetConfig+0xb2>
 80035f0:	40011000 	.word	0x40011000
 80035f4:	51eb851f 	.word	0x51eb851f

080035f8 <UART_WaitOnFlagUntilTimeout>:
{
 80035f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80035fc:	b083      	sub	sp, #12
 80035fe:	4605      	mov	r5, r0
 8003600:	460e      	mov	r6, r1
 8003602:	4617      	mov	r7, r2
 8003604:	4699      	mov	r9, r3
 8003606:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800360a:	682b      	ldr	r3, [r5, #0]
 800360c:	681c      	ldr	r4, [r3, #0]
 800360e:	ea36 0404 	bics.w	r4, r6, r4
 8003612:	bf0c      	ite	eq
 8003614:	2401      	moveq	r4, #1
 8003616:	2400      	movne	r4, #0
 8003618:	42bc      	cmp	r4, r7
 800361a:	d128      	bne.n	800366e <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 800361c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003620:	d0f3      	beq.n	800360a <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003622:	f7fd fe7b 	bl	800131c <HAL_GetTick>
 8003626:	eba0 0009 	sub.w	r0, r0, r9
 800362a:	4540      	cmp	r0, r8
 800362c:	d823      	bhi.n	8003676 <UART_WaitOnFlagUntilTimeout+0x7e>
 800362e:	f1b8 0f00 	cmp.w	r8, #0
 8003632:	d022      	beq.n	800367a <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003634:	682b      	ldr	r3, [r5, #0]
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	f012 0f04 	tst.w	r2, #4
 800363c:	d0e5      	beq.n	800360a <UART_WaitOnFlagUntilTimeout+0x12>
 800363e:	2e80      	cmp	r6, #128	@ 0x80
 8003640:	d0e3      	beq.n	800360a <UART_WaitOnFlagUntilTimeout+0x12>
 8003642:	2e40      	cmp	r6, #64	@ 0x40
 8003644:	d0e1      	beq.n	800360a <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	f012 0f08 	tst.w	r2, #8
 800364c:	d0dd      	beq.n	800360a <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 800364e:	2400      	movs	r4, #0
 8003650:	9401      	str	r4, [sp, #4]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	9201      	str	r2, [sp, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	9301      	str	r3, [sp, #4]
 800365a:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 800365c:	4628      	mov	r0, r5
 800365e:	f7ff fee5 	bl	800342c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003662:	2308      	movs	r3, #8
 8003664:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8003666:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 800366a:	2001      	movs	r0, #1
 800366c:	e000      	b.n	8003670 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 800366e:	2000      	movs	r0, #0
}
 8003670:	b003      	add	sp, #12
 8003672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8003676:	2003      	movs	r0, #3
 8003678:	e7fa      	b.n	8003670 <UART_WaitOnFlagUntilTimeout+0x78>
 800367a:	2003      	movs	r0, #3
 800367c:	e7f8      	b.n	8003670 <UART_WaitOnFlagUntilTimeout+0x78>

0800367e <HAL_UART_Init>:
  if (huart == NULL)
 800367e:	b360      	cbz	r0, 80036da <HAL_UART_Init+0x5c>
{
 8003680:	b510      	push	{r4, lr}
 8003682:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003684:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003688:	b313      	cbz	r3, 80036d0 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 800368a:	2324      	movs	r3, #36	@ 0x24
 800368c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8003690:	6822      	ldr	r2, [r4, #0]
 8003692:	68d3      	ldr	r3, [r2, #12]
 8003694:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003698:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800369a:	4620      	mov	r0, r4
 800369c:	f7ff ff24 	bl	80034e8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036a0:	6822      	ldr	r2, [r4, #0]
 80036a2:	6913      	ldr	r3, [r2, #16]
 80036a4:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80036a8:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036aa:	6822      	ldr	r2, [r4, #0]
 80036ac:	6953      	ldr	r3, [r2, #20]
 80036ae:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80036b2:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80036b4:	6822      	ldr	r2, [r4, #0]
 80036b6:	68d3      	ldr	r3, [r2, #12]
 80036b8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80036bc:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036be:	2000      	movs	r0, #0
 80036c0:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036c2:	2320      	movs	r3, #32
 80036c4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036cc:	6360      	str	r0, [r4, #52]	@ 0x34
}
 80036ce:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80036d0:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 80036d4:	f7fd fd08 	bl	80010e8 <HAL_UART_MspInit>
 80036d8:	e7d7      	b.n	800368a <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80036da:	2001      	movs	r0, #1
}
 80036dc:	4770      	bx	lr

080036de <HAL_UART_Transmit>:
{
 80036de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80036e6:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b20      	cmp	r3, #32
 80036ee:	d156      	bne.n	800379e <HAL_UART_Transmit+0xc0>
 80036f0:	4604      	mov	r4, r0
 80036f2:	460d      	mov	r5, r1
 80036f4:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 80036f6:	2900      	cmp	r1, #0
 80036f8:	d055      	beq.n	80037a6 <HAL_UART_Transmit+0xc8>
 80036fa:	b90a      	cbnz	r2, 8003700 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 80036fc:	2001      	movs	r0, #1
 80036fe:	e04f      	b.n	80037a0 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003700:	2300      	movs	r3, #0
 8003702:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003704:	2321      	movs	r3, #33	@ 0x21
 8003706:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 800370a:	f7fd fe07 	bl	800131c <HAL_GetTick>
 800370e:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8003710:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003714:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003718:	68a3      	ldr	r3, [r4, #8]
 800371a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800371e:	d002      	beq.n	8003726 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8003720:	f04f 0800 	mov.w	r8, #0
 8003724:	e014      	b.n	8003750 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003726:	6923      	ldr	r3, [r4, #16]
 8003728:	b32b      	cbz	r3, 8003776 <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 800372a:	f04f 0800 	mov.w	r8, #0
 800372e:	e00f      	b.n	8003750 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8003730:	2320      	movs	r3, #32
 8003732:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8003736:	2003      	movs	r0, #3
 8003738:	e032      	b.n	80037a0 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800373a:	f838 3b02 	ldrh.w	r3, [r8], #2
 800373e:	6822      	ldr	r2, [r4, #0]
 8003740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003744:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8003746:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8003748:	b292      	uxth	r2, r2
 800374a:	3a01      	subs	r2, #1
 800374c:	b292      	uxth	r2, r2
 800374e:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003750:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8003752:	b29b      	uxth	r3, r3
 8003754:	b193      	cbz	r3, 800377c <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003756:	9600      	str	r6, [sp, #0]
 8003758:	463b      	mov	r3, r7
 800375a:	2200      	movs	r2, #0
 800375c:	2180      	movs	r1, #128	@ 0x80
 800375e:	4620      	mov	r0, r4
 8003760:	f7ff ff4a 	bl	80035f8 <UART_WaitOnFlagUntilTimeout>
 8003764:	2800      	cmp	r0, #0
 8003766:	d1e3      	bne.n	8003730 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8003768:	2d00      	cmp	r5, #0
 800376a:	d0e6      	beq.n	800373a <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800376c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8003770:	6823      	ldr	r3, [r4, #0]
 8003772:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003774:	e7e7      	b.n	8003746 <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8003776:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8003778:	2500      	movs	r5, #0
 800377a:	e7e9      	b.n	8003750 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800377c:	9600      	str	r6, [sp, #0]
 800377e:	463b      	mov	r3, r7
 8003780:	2200      	movs	r2, #0
 8003782:	2140      	movs	r1, #64	@ 0x40
 8003784:	4620      	mov	r0, r4
 8003786:	f7ff ff37 	bl	80035f8 <UART_WaitOnFlagUntilTimeout>
 800378a:	b918      	cbnz	r0, 8003794 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 800378c:	2320      	movs	r3, #32
 800378e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8003792:	e005      	b.n	80037a0 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8003794:	2320      	movs	r3, #32
 8003796:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 800379a:	2003      	movs	r0, #3
 800379c:	e000      	b.n	80037a0 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 800379e:	2002      	movs	r0, #2
}
 80037a0:	b002      	add	sp, #8
 80037a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80037a6:	2001      	movs	r0, #1
 80037a8:	e7fa      	b.n	80037a0 <HAL_UART_Transmit+0xc2>

080037aa <HAL_UART_TxCpltCallback>:
}
 80037aa:	4770      	bx	lr

080037ac <UART_EndTransmit_IT>:
{
 80037ac:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037ae:	6801      	ldr	r1, [r0, #0]
 80037b0:	68ca      	ldr	r2, [r1, #12]
 80037b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037b6:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 80037b8:	2220      	movs	r2, #32
 80037ba:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 80037be:	f7ff fff4 	bl	80037aa <HAL_UART_TxCpltCallback>
}
 80037c2:	2000      	movs	r0, #0
 80037c4:	bd08      	pop	{r3, pc}

080037c6 <HAL_UART_RxCpltCallback>:
}
 80037c6:	4770      	bx	lr

080037c8 <HAL_UART_ErrorCallback>:
}
 80037c8:	4770      	bx	lr

080037ca <UART_DMAAbortOnError>:
{
 80037ca:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037cc:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80037d2:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 80037d4:	f7ff fff8 	bl	80037c8 <HAL_UART_ErrorCallback>
}
 80037d8:	bd08      	pop	{r3, pc}

080037da <HAL_UARTEx_RxEventCallback>:
}
 80037da:	4770      	bx	lr

080037dc <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037dc:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b22      	cmp	r3, #34	@ 0x22
 80037e4:	d169      	bne.n	80038ba <UART_Receive_IT+0xde>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037e6:	6883      	ldr	r3, [r0, #8]
 80037e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037ec:	d04f      	beq.n	800388e <UART_Receive_IT+0xb2>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037ee:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037f4:	d004      	beq.n	8003800 <UART_Receive_IT+0x24>
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d156      	bne.n	80038a8 <UART_Receive_IT+0xcc>
 80037fa:	6903      	ldr	r3, [r0, #16]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d153      	bne.n	80038a8 <UART_Receive_IT+0xcc>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003800:	6803      	ldr	r3, [r0, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8003806:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003808:	3301      	adds	r3, #1
 800380a:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 800380c:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 800380e:	b29b      	uxth	r3, r3
 8003810:	3b01      	subs	r3, #1
 8003812:	b29b      	uxth	r3, r3
 8003814:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8003816:	2b00      	cmp	r3, #0
 8003818:	d151      	bne.n	80038be <UART_Receive_IT+0xe2>
{
 800381a:	b500      	push	{lr}
 800381c:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800381e:	6802      	ldr	r2, [r0, #0]
 8003820:	68d3      	ldr	r3, [r2, #12]
 8003822:	f023 0320 	bic.w	r3, r3, #32
 8003826:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003828:	6802      	ldr	r2, [r0, #0]
 800382a:	68d3      	ldr	r3, [r2, #12]
 800382c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003830:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003832:	6802      	ldr	r2, [r0, #0]
 8003834:	6953      	ldr	r3, [r2, #20]
 8003836:	f023 0301 	bic.w	r3, r3, #1
 800383a:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800383c:	2320      	movs	r3, #32
 800383e:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003842:	2300      	movs	r3, #0
 8003844:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003846:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003848:	2b01      	cmp	r3, #1
 800384a:	d133      	bne.n	80038b4 <UART_Receive_IT+0xd8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800384c:	2300      	movs	r3, #0
 800384e:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003850:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003852:	f102 030c 	add.w	r3, r2, #12
 8003856:	e853 3f00 	ldrex	r3, [r3]
 800385a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385e:	320c      	adds	r2, #12
 8003860:	e842 3100 	strex	r1, r3, [r2]
 8003864:	2900      	cmp	r1, #0
 8003866:	d1f3      	bne.n	8003850 <UART_Receive_IT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003868:	6803      	ldr	r3, [r0, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	f012 0f10 	tst.w	r2, #16
 8003870:	d006      	beq.n	8003880 <UART_Receive_IT+0xa4>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003872:	2200      	movs	r2, #0
 8003874:	9201      	str	r2, [sp, #4]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	9201      	str	r2, [sp, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	9301      	str	r3, [sp, #4]
 800387e:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003880:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8003882:	f7ff ffaa 	bl	80037da <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8003886:	2000      	movs	r0, #0
}
 8003888:	b003      	add	sp, #12
 800388a:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800388e:	6902      	ldr	r2, [r0, #16]
 8003890:	2a00      	cmp	r2, #0
 8003892:	d1ac      	bne.n	80037ee <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003894:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003896:	6803      	ldr	r3, [r0, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800389e:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80038a0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80038a2:	3302      	adds	r3, #2
 80038a4:	6283      	str	r3, [r0, #40]	@ 0x28
 80038a6:	e7b1      	b.n	800380c <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038a8:	6803      	ldr	r3, [r0, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038b0:	7013      	strb	r3, [r2, #0]
 80038b2:	e7a8      	b.n	8003806 <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 80038b4:	f7ff ff87 	bl	80037c6 <HAL_UART_RxCpltCallback>
 80038b8:	e7e5      	b.n	8003886 <UART_Receive_IT+0xaa>
    return HAL_BUSY;
 80038ba:	2002      	movs	r0, #2
 80038bc:	4770      	bx	lr
    return HAL_OK;
 80038be:	2000      	movs	r0, #0
}
 80038c0:	4770      	bx	lr
	...

080038c4 <HAL_UART_IRQHandler>:
{
 80038c4:	b510      	push	{r4, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038ca:	6802      	ldr	r2, [r0, #0]
 80038cc:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038ce:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038d0:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 80038d2:	f013 0f0f 	tst.w	r3, #15
 80038d6:	d109      	bne.n	80038ec <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038d8:	f013 0f20 	tst.w	r3, #32
 80038dc:	d00c      	beq.n	80038f8 <HAL_UART_IRQHandler+0x34>
 80038de:	f010 0f20 	tst.w	r0, #32
 80038e2:	d009      	beq.n	80038f8 <HAL_UART_IRQHandler+0x34>
      UART_Receive_IT(huart);
 80038e4:	4620      	mov	r0, r4
 80038e6:	f7ff ff79 	bl	80037dc <UART_Receive_IT>
      return;
 80038ea:	e016      	b.n	800391a <HAL_UART_IRQHandler+0x56>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80038ec:	f011 0101 	ands.w	r1, r1, #1
 80038f0:	d115      	bne.n	800391e <HAL_UART_IRQHandler+0x5a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80038f2:	f410 7f90 	tst.w	r0, #288	@ 0x120
 80038f6:	d112      	bne.n	800391e <HAL_UART_IRQHandler+0x5a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038f8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80038fa:	2901      	cmp	r1, #1
 80038fc:	d079      	beq.n	80039f2 <HAL_UART_IRQHandler+0x12e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80038fe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003902:	d003      	beq.n	800390c <HAL_UART_IRQHandler+0x48>
 8003904:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8003908:	f040 8114 	bne.w	8003b34 <HAL_UART_IRQHandler+0x270>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800390c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003910:	d003      	beq.n	800391a <HAL_UART_IRQHandler+0x56>
 8003912:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8003916:	f040 8111 	bne.w	8003b3c <HAL_UART_IRQHandler+0x278>
}
 800391a:	b002      	add	sp, #8
 800391c:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800391e:	f013 0f01 	tst.w	r3, #1
 8003922:	d006      	beq.n	8003932 <HAL_UART_IRQHandler+0x6e>
 8003924:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8003928:	d003      	beq.n	8003932 <HAL_UART_IRQHandler+0x6e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800392a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800392c:	f042 0201 	orr.w	r2, r2, #1
 8003930:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003932:	f013 0f04 	tst.w	r3, #4
 8003936:	d004      	beq.n	8003942 <HAL_UART_IRQHandler+0x7e>
 8003938:	b119      	cbz	r1, 8003942 <HAL_UART_IRQHandler+0x7e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800393a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800393c:	f042 0202 	orr.w	r2, r2, #2
 8003940:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003942:	f013 0f02 	tst.w	r3, #2
 8003946:	d004      	beq.n	8003952 <HAL_UART_IRQHandler+0x8e>
 8003948:	b119      	cbz	r1, 8003952 <HAL_UART_IRQHandler+0x8e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800394a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800394c:	f042 0204 	orr.w	r2, r2, #4
 8003950:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003952:	f013 0f08 	tst.w	r3, #8
 8003956:	d007      	beq.n	8003968 <HAL_UART_IRQHandler+0xa4>
 8003958:	f010 0f20 	tst.w	r0, #32
 800395c:	d100      	bne.n	8003960 <HAL_UART_IRQHandler+0x9c>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800395e:	b119      	cbz	r1, 8003968 <HAL_UART_IRQHandler+0xa4>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003960:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003962:	f042 0208 	orr.w	r2, r2, #8
 8003966:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003968:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800396a:	2a00      	cmp	r2, #0
 800396c:	d0d5      	beq.n	800391a <HAL_UART_IRQHandler+0x56>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800396e:	f013 0f20 	tst.w	r3, #32
 8003972:	d002      	beq.n	800397a <HAL_UART_IRQHandler+0xb6>
 8003974:	f010 0f20 	tst.w	r0, #32
 8003978:	d129      	bne.n	80039ce <HAL_UART_IRQHandler+0x10a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800397a:	6823      	ldr	r3, [r4, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003982:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003984:	f012 0f08 	tst.w	r2, #8
 8003988:	d100      	bne.n	800398c <HAL_UART_IRQHandler+0xc8>
 800398a:	b363      	cbz	r3, 80039e6 <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 800398c:	4620      	mov	r0, r4
 800398e:	f7ff fd4d 	bl	800342c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003992:	6823      	ldr	r3, [r4, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800399a:	d020      	beq.n	80039de <HAL_UART_IRQHandler+0x11a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800399c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399e:	f102 0314 	add.w	r3, r2, #20
 80039a2:	e853 3f00 	ldrex	r3, [r3]
 80039a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039aa:	3214      	adds	r2, #20
 80039ac:	e842 3100 	strex	r1, r3, [r2]
 80039b0:	2900      	cmp	r1, #0
 80039b2:	d1f3      	bne.n	800399c <HAL_UART_IRQHandler+0xd8>
          if (huart->hdmarx != NULL)
 80039b4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80039b6:	b173      	cbz	r3, 80039d6 <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039b8:	4a62      	ldr	r2, [pc, #392]	@ (8003b44 <HAL_UART_IRQHandler+0x280>)
 80039ba:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039bc:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80039be:	f7fe f946 	bl	8001c4e <HAL_DMA_Abort_IT>
 80039c2:	2800      	cmp	r0, #0
 80039c4:	d0a9      	beq.n	800391a <HAL_UART_IRQHandler+0x56>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039c6:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80039c8:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80039ca:	4798      	blx	r3
 80039cc:	e7a5      	b.n	800391a <HAL_UART_IRQHandler+0x56>
        UART_Receive_IT(huart);
 80039ce:	4620      	mov	r0, r4
 80039d0:	f7ff ff04 	bl	80037dc <UART_Receive_IT>
 80039d4:	e7d1      	b.n	800397a <HAL_UART_IRQHandler+0xb6>
            HAL_UART_ErrorCallback(huart);
 80039d6:	4620      	mov	r0, r4
 80039d8:	f7ff fef6 	bl	80037c8 <HAL_UART_ErrorCallback>
 80039dc:	e79d      	b.n	800391a <HAL_UART_IRQHandler+0x56>
          HAL_UART_ErrorCallback(huart);
 80039de:	4620      	mov	r0, r4
 80039e0:	f7ff fef2 	bl	80037c8 <HAL_UART_ErrorCallback>
 80039e4:	e799      	b.n	800391a <HAL_UART_IRQHandler+0x56>
        HAL_UART_ErrorCallback(huart);
 80039e6:	4620      	mov	r0, r4
 80039e8:	f7ff feee 	bl	80037c8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ec:	2300      	movs	r3, #0
 80039ee:	6463      	str	r3, [r4, #68]	@ 0x44
    return;
 80039f0:	e793      	b.n	800391a <HAL_UART_IRQHandler+0x56>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80039f2:	f013 0f10 	tst.w	r3, #16
 80039f6:	d082      	beq.n	80038fe <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80039f8:	f010 0f10 	tst.w	r0, #16
 80039fc:	f43f af7f 	beq.w	80038fe <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a00:	2300      	movs	r3, #0
 8003a02:	9301      	str	r3, [sp, #4]
 8003a04:	6813      	ldr	r3, [r2, #0]
 8003a06:	9301      	str	r3, [sp, #4]
 8003a08:	6853      	ldr	r3, [r2, #4]
 8003a0a:	9301      	str	r3, [sp, #4]
 8003a0c:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a0e:	6953      	ldr	r3, [r2, #20]
 8003a10:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003a14:	d052      	beq.n	8003abc <HAL_UART_IRQHandler+0x1f8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a16:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003a18:	6813      	ldr	r3, [r2, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f43f af7b 	beq.w	800391a <HAL_UART_IRQHandler+0x56>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a24:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8003a26:	4299      	cmp	r1, r3
 8003a28:	f67f af77 	bls.w	800391a <HAL_UART_IRQHandler+0x56>
        huart->RxXferCount = nb_remaining_rx_data;
 8003a2c:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a2e:	69d3      	ldr	r3, [r2, #28]
 8003a30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a34:	d037      	beq.n	8003aa6 <HAL_UART_IRQHandler+0x1e2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a36:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a38:	f102 030c 	add.w	r3, r2, #12
 8003a3c:	e853 3f00 	ldrex	r3, [r3]
 8003a40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a44:	320c      	adds	r2, #12
 8003a46:	e842 3100 	strex	r1, r3, [r2]
 8003a4a:	2900      	cmp	r1, #0
 8003a4c:	d1f3      	bne.n	8003a36 <HAL_UART_IRQHandler+0x172>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a4e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a50:	f102 0314 	add.w	r3, r2, #20
 8003a54:	e853 3f00 	ldrex	r3, [r3]
 8003a58:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5c:	3214      	adds	r2, #20
 8003a5e:	e842 3100 	strex	r1, r3, [r2]
 8003a62:	2900      	cmp	r1, #0
 8003a64:	d1f3      	bne.n	8003a4e <HAL_UART_IRQHandler+0x18a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a66:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a68:	f102 0314 	add.w	r3, r2, #20
 8003a6c:	e853 3f00 	ldrex	r3, [r3]
 8003a70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a74:	3214      	adds	r2, #20
 8003a76:	e842 3100 	strex	r1, r3, [r2]
 8003a7a:	2900      	cmp	r1, #0
 8003a7c:	d1f3      	bne.n	8003a66 <HAL_UART_IRQHandler+0x1a2>
          huart->RxState = HAL_UART_STATE_READY;
 8003a7e:	2320      	movs	r3, #32
 8003a80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a84:	2300      	movs	r3, #0
 8003a86:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a88:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8a:	f102 030c 	add.w	r3, r2, #12
 8003a8e:	e853 3f00 	ldrex	r3, [r3]
 8003a92:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a96:	320c      	adds	r2, #12
 8003a98:	e842 3100 	strex	r1, r3, [r2]
 8003a9c:	2900      	cmp	r1, #0
 8003a9e:	d1f3      	bne.n	8003a88 <HAL_UART_IRQHandler+0x1c4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003aa0:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003aa2:	f7fe f88a 	bl	8001bba <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003aaa:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8003aac:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	1ac9      	subs	r1, r1, r3
 8003ab2:	b289      	uxth	r1, r1
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	f7ff fe90 	bl	80037da <HAL_UARTEx_RxEventCallback>
      return;
 8003aba:	e72e      	b.n	800391a <HAL_UART_IRQHandler+0x56>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003abc:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8003abe:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	1ac9      	subs	r1, r1, r3
 8003ac4:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8003ac6:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f43f af25 	beq.w	800391a <HAL_UART_IRQHandler+0x56>
          && (nb_rx_data > 0U))
 8003ad0:	2900      	cmp	r1, #0
 8003ad2:	f43f af22 	beq.w	800391a <HAL_UART_IRQHandler+0x56>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ad6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad8:	f102 030c 	add.w	r3, r2, #12
 8003adc:	e853 3f00 	ldrex	r3, [r3]
 8003ae0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae4:	320c      	adds	r2, #12
 8003ae6:	e842 3000 	strex	r0, r3, [r2]
 8003aea:	2800      	cmp	r0, #0
 8003aec:	d1f3      	bne.n	8003ad6 <HAL_UART_IRQHandler+0x212>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aee:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af0:	f102 0314 	add.w	r3, r2, #20
 8003af4:	e853 3f00 	ldrex	r3, [r3]
 8003af8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afc:	3214      	adds	r2, #20
 8003afe:	e842 3000 	strex	r0, r3, [r2]
 8003b02:	2800      	cmp	r0, #0
 8003b04:	d1f3      	bne.n	8003aee <HAL_UART_IRQHandler+0x22a>
        huart->RxState = HAL_UART_STATE_READY;
 8003b06:	2320      	movs	r3, #32
 8003b08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b10:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b12:	f102 030c 	add.w	r3, r2, #12
 8003b16:	e853 3f00 	ldrex	r3, [r3]
 8003b1a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1e:	320c      	adds	r2, #12
 8003b20:	e842 3000 	strex	r0, r3, [r2]
 8003b24:	2800      	cmp	r0, #0
 8003b26:	d1f3      	bne.n	8003b10 <HAL_UART_IRQHandler+0x24c>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b28:	2302      	movs	r3, #2
 8003b2a:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b2c:	4620      	mov	r0, r4
 8003b2e:	f7ff fe54 	bl	80037da <HAL_UARTEx_RxEventCallback>
      return;
 8003b32:	e6f2      	b.n	800391a <HAL_UART_IRQHandler+0x56>
    UART_Transmit_IT(huart);
 8003b34:	4620      	mov	r0, r4
 8003b36:	f7ff fca7 	bl	8003488 <UART_Transmit_IT>
    return;
 8003b3a:	e6ee      	b.n	800391a <HAL_UART_IRQHandler+0x56>
    UART_EndTransmit_IT(huart);
 8003b3c:	4620      	mov	r0, r4
 8003b3e:	f7ff fe35 	bl	80037ac <UART_EndTransmit_IT>
    return;
 8003b42:	e6ea      	b.n	800391a <HAL_UART_IRQHandler+0x56>
 8003b44:	080037cb 	.word	0x080037cb

08003b48 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8003b48:	b410      	push	{r4}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8003b4a:	680b      	ldr	r3, [r1, #0]
 8003b4c:	b9db      	cbnz	r3, 8003b86 <FMC_SDRAM_Init+0x3e>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8003b4e:	6802      	ldr	r2, [r0, #0]
 8003b50:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 8003b54:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8003b58:	684b      	ldr	r3, [r1, #4]
 8003b5a:	688c      	ldr	r4, [r1, #8]
 8003b5c:	4323      	orrs	r3, r4
 8003b5e:	68cc      	ldr	r4, [r1, #12]
 8003b60:	4323      	orrs	r3, r4
 8003b62:	690c      	ldr	r4, [r1, #16]
 8003b64:	4323      	orrs	r3, r4
 8003b66:	694c      	ldr	r4, [r1, #20]
 8003b68:	4323      	orrs	r3, r4
 8003b6a:	698c      	ldr	r4, [r1, #24]
 8003b6c:	4323      	orrs	r3, r4
 8003b6e:	69cc      	ldr	r4, [r1, #28]
 8003b70:	4323      	orrs	r3, r4
 8003b72:	6a0c      	ldr	r4, [r1, #32]
 8003b74:	4323      	orrs	r3, r4
 8003b76:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	6002      	str	r2, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8003b7e:	2000      	movs	r0, #0
 8003b80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b84:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8003b86:	6803      	ldr	r3, [r0, #0]
 8003b88:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8003b8c:	69ca      	ldr	r2, [r1, #28]
 8003b8e:	6a0c      	ldr	r4, [r1, #32]
 8003b90:	4322      	orrs	r2, r4
 8003b92:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 8003b94:	4322      	orrs	r2, r4
 8003b96:	4313      	orrs	r3, r2
 8003b98:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8003b9a:	6842      	ldr	r2, [r0, #4]
 8003b9c:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 8003ba0:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8003ba4:	684b      	ldr	r3, [r1, #4]
 8003ba6:	688c      	ldr	r4, [r1, #8]
 8003ba8:	4323      	orrs	r3, r4
 8003baa:	68cc      	ldr	r4, [r1, #12]
 8003bac:	4323      	orrs	r3, r4
 8003bae:	690c      	ldr	r4, [r1, #16]
 8003bb0:	4323      	orrs	r3, r4
 8003bb2:	694c      	ldr	r4, [r1, #20]
 8003bb4:	4323      	orrs	r3, r4
 8003bb6:	6989      	ldr	r1, [r1, #24]
 8003bb8:	430b      	orrs	r3, r1
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	6042      	str	r2, [r0, #4]
 8003bbe:	e7de      	b.n	8003b7e <FMC_SDRAM_Init+0x36>

08003bc0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003bc0:	b410      	push	{r4}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8003bc2:	bb3a      	cbnz	r2, 8003c14 <FMC_SDRAM_Timing_Init+0x54>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8003bc4:	6882      	ldr	r2, [r0, #8]
 8003bc6:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8003bca:	680b      	ldr	r3, [r1, #0]
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	684c      	ldr	r4, [r1, #4]
 8003bd0:	f104 3cff 	add.w	ip, r4, #4294967295
 8003bd4:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 8003bd8:	688c      	ldr	r4, [r1, #8]
 8003bda:	f104 3cff 	add.w	ip, r4, #4294967295
 8003bde:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8003be2:	68cc      	ldr	r4, [r1, #12]
 8003be4:	f104 3cff 	add.w	ip, r4, #4294967295
 8003be8:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 8003bec:	690c      	ldr	r4, [r1, #16]
 8003bee:	f104 3cff 	add.w	ip, r4, #4294967295
 8003bf2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8003bf6:	694c      	ldr	r4, [r1, #20]
 8003bf8:	f104 3cff 	add.w	ip, r4, #4294967295
 8003bfc:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 8003c00:	6989      	ldr	r1, [r1, #24]
 8003c02:	3901      	subs	r1, #1
 8003c04:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c12:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8003c14:	6883      	ldr	r3, [r0, #8]
 8003c16:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003c1a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c1e:	68ca      	ldr	r2, [r1, #12]
 8003c20:	f102 3cff 	add.w	ip, r2, #4294967295
 8003c24:	694a      	ldr	r2, [r1, #20]
 8003c26:	3a01      	subs	r2, #1
 8003c28:	0512      	lsls	r2, r2, #20
 8003c2a:	ea42 320c 	orr.w	r2, r2, ip, lsl #12
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8003c32:	68c2      	ldr	r2, [r0, #12]
 8003c34:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8003c38:	680b      	ldr	r3, [r1, #0]
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	684c      	ldr	r4, [r1, #4]
 8003c3e:	f104 3cff 	add.w	ip, r4, #4294967295
 8003c42:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 8003c46:	688c      	ldr	r4, [r1, #8]
 8003c48:	f104 3cff 	add.w	ip, r4, #4294967295
 8003c4c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8003c50:	690c      	ldr	r4, [r1, #16]
 8003c52:	f104 3cff 	add.w	ip, r4, #4294967295
 8003c56:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8003c5a:	6989      	ldr	r1, [r1, #24]
 8003c5c:	3901      	subs	r1, #1
 8003c5e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003c62:	4313      	orrs	r3, r2
 8003c64:	60c3      	str	r3, [r0, #12]
 8003c66:	e7d1      	b.n	8003c0c <FMC_SDRAM_Timing_Init+0x4c>

08003c68 <memset>:
 8003c68:	4402      	add	r2, r0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d100      	bne.n	8003c72 <memset+0xa>
 8003c70:	4770      	bx	lr
 8003c72:	f803 1b01 	strb.w	r1, [r3], #1
 8003c76:	e7f9      	b.n	8003c6c <memset+0x4>

08003c78 <__libc_init_array>:
 8003c78:	b570      	push	{r4, r5, r6, lr}
 8003c7a:	4d0d      	ldr	r5, [pc, #52]	@ (8003cb0 <__libc_init_array+0x38>)
 8003c7c:	4c0d      	ldr	r4, [pc, #52]	@ (8003cb4 <__libc_init_array+0x3c>)
 8003c7e:	1b64      	subs	r4, r4, r5
 8003c80:	10a4      	asrs	r4, r4, #2
 8003c82:	2600      	movs	r6, #0
 8003c84:	42a6      	cmp	r6, r4
 8003c86:	d109      	bne.n	8003c9c <__libc_init_array+0x24>
 8003c88:	4d0b      	ldr	r5, [pc, #44]	@ (8003cb8 <__libc_init_array+0x40>)
 8003c8a:	4c0c      	ldr	r4, [pc, #48]	@ (8003cbc <__libc_init_array+0x44>)
 8003c8c:	f000 f818 	bl	8003cc0 <_init>
 8003c90:	1b64      	subs	r4, r4, r5
 8003c92:	10a4      	asrs	r4, r4, #2
 8003c94:	2600      	movs	r6, #0
 8003c96:	42a6      	cmp	r6, r4
 8003c98:	d105      	bne.n	8003ca6 <__libc_init_array+0x2e>
 8003c9a:	bd70      	pop	{r4, r5, r6, pc}
 8003c9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ca0:	4798      	blx	r3
 8003ca2:	3601      	adds	r6, #1
 8003ca4:	e7ee      	b.n	8003c84 <__libc_init_array+0xc>
 8003ca6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003caa:	4798      	blx	r3
 8003cac:	3601      	adds	r6, #1
 8003cae:	e7f2      	b.n	8003c96 <__libc_init_array+0x1e>
 8003cb0:	08003d08 	.word	0x08003d08
 8003cb4:	08003d08 	.word	0x08003d08
 8003cb8:	08003d08 	.word	0x08003d08
 8003cbc:	08003d0c 	.word	0x08003d0c

08003cc0 <_init>:
 8003cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc2:	bf00      	nop
 8003cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cc6:	bc08      	pop	{r3}
 8003cc8:	469e      	mov	lr, r3
 8003cca:	4770      	bx	lr

08003ccc <_fini>:
 8003ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cce:	bf00      	nop
 8003cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cd2:	bc08      	pop	{r3}
 8003cd4:	469e      	mov	lr, r3
 8003cd6:	4770      	bx	lr
