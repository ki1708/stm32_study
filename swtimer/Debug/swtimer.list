
swtimer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031e4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08003394  08003394  00004394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035a8  080035a8  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  080035a8  080035a8  000045a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035b0  080035b0  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035b0  080035b0  000045b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080035b4  080035b4  000045b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080035b8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000505c  2**0
                  CONTENTS
 10 .bss          000005c0  2000005c  2000005c  0000505c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000061c  2000061c  0000505c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015088  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000302a  00000000  00000000  0001a114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000098ab  00000000  00000000  0001d13e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ef0  00000000  00000000  000269f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b71  00000000  00000000  000278e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028734  00000000  00000000  00028451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a6c2  00000000  00000000  00050b85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f5cc2  00000000  00000000  0006b247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00160f09  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00002d04  00000000  00000000  00160f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005c  00000000  00000000  00163c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800337c 	.word	0x0800337c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	0800337c 	.word	0x0800337c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <ledISR>:

static void infoCli (uint8_t argc, const char **argv);


void ledISR(void *arg)
{
 80005a0:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin (LD3_GPIO_Port, LD3_Pin);
 80005a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005a6:	4802      	ldr	r0, [pc, #8]	@ (80005b0 <ledISR+0x10>)
 80005a8:	f001 fd26 	bl	8001ff8 <HAL_GPIO_TogglePin>
}
 80005ac:	bd08      	pop	{r3, pc}
 80005ae:	bf00      	nop
 80005b0:	40021800 	.word	0x40021800

080005b4 <testISR>:

void testISR(void *arg)
{
 80005b4:	b508      	push	{r3, lr}
  static uint32_t count = 0 ;
  uartPrintf(_DEF_CH1,"count %d\n", count++ );
 80005b6:	4b04      	ldr	r3, [pc, #16]	@ (80005c8 <testISR+0x14>)
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	1c51      	adds	r1, r2, #1
 80005bc:	6019      	str	r1, [r3, #0]
 80005be:	4903      	ldr	r1, [pc, #12]	@ (80005cc <testISR+0x18>)
 80005c0:	2000      	movs	r0, #0
 80005c2:	f000 fadb 	bl	8000b7c <uartPrintf>
}
 80005c6:	bd08      	pop	{r3, pc}
 80005c8:	20000078 	.word	0x20000078
 80005cc:	08003394 	.word	0x08003394

080005d0 <infoCli>:
    }
}


void infoCli(uint8_t argc , const char **argv)
{
 80005d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80005d4:	4604      	mov	r4, r0
 80005d6:	460e      	mov	r6, r1
  bool ret = false ;

  if(argc == 1 && cliIsStr(argv[0],"test"))
 80005d8:	2801      	cmp	r0, #1
 80005da:	d008      	beq.n	80005ee <infoCli+0x1e>
  bool ret = false ;
 80005dc:	2500      	movs	r5, #0
      cliPrintf("infoCli run\n"); // 인자까지 정상이면 정상작동
      ret = true ;
    }


  if(argc == 2  && cliIsStr (argv[0], "print"))
 80005de:	2c02      	cmp	r4, #2
 80005e0:	d010      	beq.n	8000604 <infoCli+0x34>
	}

      ret = true;
    }

  if(argc == 1 && cliIsStr(argv[0], "adc"))
 80005e2:	2c01      	cmp	r4, #1
 80005e4:	d025      	beq.n	8000632 <infoCli+0x62>





  if (ret == false)
 80005e6:	2d00      	cmp	r5, #0
 80005e8:	d03a      	beq.n	8000660 <infoCli+0x90>
    {
      cliPrintf("write -> info test\n");
      cliPrintf("write -> info print 0~10\n");
      cliPrintf("write -> info adc\n");
    }
}
 80005ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(argc == 1 && cliIsStr(argv[0],"test"))
 80005ee:	4921      	ldr	r1, [pc, #132]	@ (8000674 <infoCli+0xa4>)
 80005f0:	6830      	ldr	r0, [r6, #0]
 80005f2:	f000 f92f 	bl	8000854 <cliIsStr>
 80005f6:	4605      	mov	r5, r0
 80005f8:	2800      	cmp	r0, #0
 80005fa:	d0f0      	beq.n	80005de <infoCli+0xe>
      cliPrintf("infoCli run\n"); // 인자까지 정상이면 정상작동
 80005fc:	481e      	ldr	r0, [pc, #120]	@ (8000678 <infoCli+0xa8>)
 80005fe:	f000 f8f9 	bl	80007f4 <cliPrintf>
      ret = true ;
 8000602:	e7ec      	b.n	80005de <infoCli+0xe>
  if(argc == 2  && cliIsStr (argv[0], "print"))
 8000604:	491d      	ldr	r1, [pc, #116]	@ (800067c <infoCli+0xac>)
 8000606:	6830      	ldr	r0, [r6, #0]
 8000608:	f000 f924 	bl	8000854 <cliIsStr>
 800060c:	4680      	mov	r8, r0
 800060e:	2800      	cmp	r0, #0
 8000610:	d0e7      	beq.n	80005e2 <infoCli+0x12>
      count = (uint8_t)cliGetData(argv[1]);
 8000612:	6870      	ldr	r0, [r6, #4]
 8000614:	f000 f926 	bl	8000864 <cliGetData>
 8000618:	4607      	mov	r7, r0
      for(int i = 0 ; i < count ; i++)
 800061a:	2500      	movs	r5, #0
 800061c:	e004      	b.n	8000628 <infoCli+0x58>
	  cliPrintf("print %d / %d\n " , i +1 , count);
 800061e:	3501      	adds	r5, #1
 8000620:	4629      	mov	r1, r5
 8000622:	4817      	ldr	r0, [pc, #92]	@ (8000680 <infoCli+0xb0>)
 8000624:	f000 f8e6 	bl	80007f4 <cliPrintf>
      for(int i = 0 ; i < count ; i++)
 8000628:	b2fa      	uxtb	r2, r7
 800062a:	4295      	cmp	r5, r2
 800062c:	dbf7      	blt.n	800061e <infoCli+0x4e>
      ret = true;
 800062e:	4645      	mov	r5, r8
 8000630:	e7d7      	b.n	80005e2 <infoCli+0x12>
  if(argc == 1 && cliIsStr(argv[0], "adc"))
 8000632:	4914      	ldr	r1, [pc, #80]	@ (8000684 <infoCli+0xb4>)
 8000634:	6830      	ldr	r0, [r6, #0]
 8000636:	f000 f90d 	bl	8000854 <cliIsStr>
 800063a:	4604      	mov	r4, r0
 800063c:	b950      	cbnz	r0, 8000654 <infoCli+0x84>
 800063e:	e7d2      	b.n	80005e6 <infoCli+0x16>
	      data = adcReadVoltage(_DEF_CH1);
 8000640:	2000      	movs	r0, #0
 8000642:	f000 f893 	bl	800076c <adcReadVoltage>
 8000646:	4601      	mov	r1, r0
	      cliPrintf("adc_voltage : %d\n",data );
 8000648:	480f      	ldr	r0, [pc, #60]	@ (8000688 <infoCli+0xb8>)
 800064a:	f000 f8d3 	bl	80007f4 <cliPrintf>
	      delay(100);
 800064e:	2064      	movs	r0, #100	@ 0x64
 8000650:	f000 fac2 	bl	8000bd8 <delay>
      while(cliKeepLoop())
 8000654:	f000 f90c 	bl	8000870 <cliKeepLoop>
 8000658:	2800      	cmp	r0, #0
 800065a:	d1f1      	bne.n	8000640 <infoCli+0x70>
      ret = true;
 800065c:	4625      	mov	r5, r4
 800065e:	e7c2      	b.n	80005e6 <infoCli+0x16>
      cliPrintf("write -> info test\n");
 8000660:	480a      	ldr	r0, [pc, #40]	@ (800068c <infoCli+0xbc>)
 8000662:	f000 f8c7 	bl	80007f4 <cliPrintf>
      cliPrintf("write -> info print 0~10\n");
 8000666:	480a      	ldr	r0, [pc, #40]	@ (8000690 <infoCli+0xc0>)
 8000668:	f000 f8c4 	bl	80007f4 <cliPrintf>
      cliPrintf("write -> info adc\n");
 800066c:	4809      	ldr	r0, [pc, #36]	@ (8000694 <infoCli+0xc4>)
 800066e:	f000 f8c1 	bl	80007f4 <cliPrintf>
}
 8000672:	e7ba      	b.n	80005ea <infoCli+0x1a>
 8000674:	080033a0 	.word	0x080033a0
 8000678:	080033a8 	.word	0x080033a8
 800067c:	080033b8 	.word	0x080033b8
 8000680:	080033c0 	.word	0x080033c0
 8000684:	080033d0 	.word	0x080033d0
 8000688:	080033d4 	.word	0x080033d4
 800068c:	080033e8 	.word	0x080033e8
 8000690:	080033fc 	.word	0x080033fc
 8000694:	08003418 	.word	0x08003418

08000698 <apInit>:
{
 8000698:	b500      	push	{lr}
 800069a:	b085      	sub	sp, #20
  cliInit ();
 800069c:	f000 f890 	bl	80007c0 <cliInit>
  swtimerInit();
 80006a0:	f000 f96e 	bl	8000980 <swtimerInit>
  adcInit ();
 80006a4:	f000 f84c 	bl	8000740 <adcInit>
  uartInit ();
 80006a8:	f000 fa0e 	bl	8000ac8 <uartInit>
  cliAdd("info", infoCli);
 80006ac:	4917      	ldr	r1, [pc, #92]	@ (800070c <apInit+0x74>)
 80006ae:	4818      	ldr	r0, [pc, #96]	@ (8000710 <apInit+0x78>)
 80006b0:	f000 f866 	bl	8000780 <cliAdd>
  if(swtimerGetch(&timer_ch) == true)
 80006b4:	f10d 000f 	add.w	r0, sp, #15
 80006b8:	f000 f97c 	bl	80009b4 <swtimerGetch>
 80006bc:	b978      	cbnz	r0, 80006de <apInit+0x46>
  swtimerStart(timer_ch) ;
 80006be:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80006c2:	f000 f9a5 	bl	8000a10 <swtimerStart>
  if(swtimerGetch(&timer_ch) == true)
 80006c6:	f10d 000f 	add.w	r0, sp, #15
 80006ca:	f000 f973 	bl	80009b4 <swtimerGetch>
 80006ce:	b988      	cbnz	r0, 80006f4 <apInit+0x5c>
  swtimerStart(timer_ch) ;
 80006d0:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80006d4:	f000 f99c 	bl	8000a10 <swtimerStart>
}
 80006d8:	b005      	add	sp, #20
 80006da:	f85d fb04 	ldr.w	pc, [sp], #4
      swtimerSet (timer_ch, ledISR, NULL, SWTIMER_LOOP, 500) ;
 80006de:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	2300      	movs	r3, #0
 80006e6:	461a      	mov	r2, r3
 80006e8:	490a      	ldr	r1, [pc, #40]	@ (8000714 <apInit+0x7c>)
 80006ea:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80006ee:	f000 f96f 	bl	80009d0 <swtimerSet>
 80006f2:	e7e4      	b.n	80006be <apInit+0x26>
      swtimerSet (timer_ch, testISR, NULL, SWTIMER_LOOP, 1000) ;
 80006f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	2300      	movs	r3, #0
 80006fc:	461a      	mov	r2, r3
 80006fe:	4906      	ldr	r1, [pc, #24]	@ (8000718 <apInit+0x80>)
 8000700:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8000704:	f000 f964 	bl	80009d0 <swtimerSet>
 8000708:	e7e2      	b.n	80006d0 <apInit+0x38>
 800070a:	bf00      	nop
 800070c:	080005d1 	.word	0x080005d1
 8000710:	0800342c 	.word	0x0800342c
 8000714:	080005a1 	.word	0x080005a1
 8000718:	080005b5 	.word	0x080005b5

0800071c <apMain>:
{
 800071c:	b510      	push	{r4, lr}
  pre_time = millis ();
 800071e:	f000 fa5f 	bl	8000be0 <millis>
 8000722:	4604      	mov	r4, r0
 8000724:	e004      	b.n	8000730 <apMain+0x14>
	  pre_time = millis ();
 8000726:	f000 fa5b 	bl	8000be0 <millis>
 800072a:	4604      	mov	r4, r0
      cliMain ();
 800072c:	f000 f8aa 	bl	8000884 <cliMain>
      if (millis () - pre_time >= 500)
 8000730:	f000 fa56 	bl	8000be0 <millis>
 8000734:	1b03      	subs	r3, r0, r4
 8000736:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800073a:	d2f4      	bcs.n	8000726 <apMain+0xa>
 800073c:	e7f6      	b.n	800072c <apMain+0x10>
	...

08000740 <adcInit>:
uint16_t adc_data[3];



bool adcInit(void)
{
 8000740:	b508      	push	{r3, lr}
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_data, 3);		//핸들러, 배열, 채널 수
 8000742:	2203      	movs	r2, #3
 8000744:	4902      	ldr	r1, [pc, #8]	@ (8000750 <adcInit+0x10>)
 8000746:	4803      	ldr	r0, [pc, #12]	@ (8000754 <adcInit+0x14>)
 8000748:	f000 ffc4 	bl	80016d4 <HAL_ADC_Start_DMA>
	return true;
}
 800074c:	2001      	movs	r0, #1
 800074e:	bd08      	pop	{r3, pc}
 8000750:	2000007c 	.word	0x2000007c
 8000754:	20000484 	.word	0x20000484

08000758 <adcRead>:
uint16_t adcRead(uint8_t ch)
{
	uint16_t cali_value = 0;
	uint16_t ret = 0;
	switch(ch)
 8000758:	b918      	cbnz	r0, 8000762 <adcRead+0xa>
	{
		case _DEF_CH1 :
			if(adc_data[ch] > cali_value)
 800075a:	4a03      	ldr	r2, [pc, #12]	@ (8000768 <adcRead+0x10>)
 800075c:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
 8000760:	4770      	bx	lr
	uint16_t ret = 0;
 8000762:	2000      	movs	r0, #0
			}

		break;
	}
	return ret;
}
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	2000007c 	.word	0x2000007c

0800076c <adcReadVoltage>:


uint32_t adcReadVoltage(uint8_t ch)
{
 800076c:	b508      	push	{r3, lr}
	uint32_t ret ;
	uint32_t adc_data;
	adc_data = adcRead(ch);
 800076e:	f7ff fff3 	bl	8000758 <adcRead>
	ret = (330 * adc_data ) / 4096 ;	// float 안쓰고 330 (3.3v) * adc_data / 2의 12승(해상도)
 8000772:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 8000776:	fb03 f000 	mul.w	r0, r3, r0
	return ret ;
}
 800077a:	0b00      	lsrs	r0, r0, #12
 800077c:	bd08      	pop	{r3, pc}
	...

08000780 <cliAdd>:
  return true;
}

bool cliAdd (const char *cmd_str,
	     void (*cmd_func) (uint8_t argc, const char **argv))
{
 8000780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cli_cmd_count >= CLI_CMD_LIST_MAX)
 8000782:	4b0d      	ldr	r3, [pc, #52]	@ (80007b8 <cliAdd+0x38>)
 8000784:	781c      	ldrb	r4, [r3, #0]
 8000786:	2c07      	cmp	r4, #7
 8000788:	d901      	bls.n	800078e <cliAdd+0xe>
    return false;
 800078a:	2000      	movs	r0, #0
  strncpy (cli_cmd_func[cli_cmd_count].cmd_str, cmd_str, 8);
  cli_cmd_func[cli_cmd_count].cmd_func = cmd_func; // 함수포인터 세팅
  cli_cmd_count++;

  return true;
}
 800078c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800078e:	460e      	mov	r6, r1
  strncpy (cli_cmd_func[cli_cmd_count].cmd_str, cmd_str, 8);
 8000790:	0067      	lsls	r7, r4, #1
 8000792:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8000796:	4d09      	ldr	r5, [pc, #36]	@ (80007bc <cliAdd+0x3c>)
 8000798:	2208      	movs	r2, #8
 800079a:	4601      	mov	r1, r0
 800079c:	eb05 0083 	add.w	r0, r5, r3, lsl #2
 80007a0:	f002 f936 	bl	8002a10 <strncpy>
  cli_cmd_func[cli_cmd_count].cmd_func = cmd_func; // 함수포인터 세팅
 80007a4:	4427      	add	r7, r4
 80007a6:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 80007aa:	60ae      	str	r6, [r5, #8]
  cli_cmd_count++;
 80007ac:	3401      	adds	r4, #1
 80007ae:	4b02      	ldr	r3, [pc, #8]	@ (80007b8 <cliAdd+0x38>)
 80007b0:	701c      	strb	r4, [r3, #0]
  return true;
 80007b2:	2001      	movs	r0, #1
 80007b4:	e7ea      	b.n	800078c <cliAdd+0xc>
 80007b6:	bf00      	nop
 80007b8:	200000e4 	.word	0x200000e4
 80007bc:	20000084 	.word	0x20000084

080007c0 <cliInit>:
{
 80007c0:	b508      	push	{r3, lr}
  for (int i = 0; i < CLI_CMD_LIST_MAX; i++)
 80007c2:	2300      	movs	r3, #0
 80007c4:	e007      	b.n	80007d6 <cliInit+0x16>
      cli_cmd_func[i].cmd_func = NULL;
 80007c6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80007ca:	0091      	lsls	r1, r2, #2
 80007cc:	4a06      	ldr	r2, [pc, #24]	@ (80007e8 <cliInit+0x28>)
 80007ce:	440a      	add	r2, r1
 80007d0:	2100      	movs	r1, #0
 80007d2:	6091      	str	r1, [r2, #8]
  for (int i = 0; i < CLI_CMD_LIST_MAX; i++)
 80007d4:	3301      	adds	r3, #1
 80007d6:	2b07      	cmp	r3, #7
 80007d8:	ddf5      	ble.n	80007c6 <cliInit+0x6>
  cliAdd("help" , cliHelp);
 80007da:	4904      	ldr	r1, [pc, #16]	@ (80007ec <cliInit+0x2c>)
 80007dc:	4804      	ldr	r0, [pc, #16]	@ (80007f0 <cliInit+0x30>)
 80007de:	f7ff ffcf 	bl	8000780 <cliAdd>
}
 80007e2:	2001      	movs	r0, #1
 80007e4:	bd08      	pop	{r3, pc}
 80007e6:	bf00      	nop
 80007e8:	20000084 	.word	0x20000084
 80007ec:	08000815 	.word	0x08000815
 80007f0:	08003434 	.word	0x08003434

080007f4 <cliPrintf>:
}



void cliPrintf (const char *fmt, ...)
{
 80007f4:	b40f      	push	{r0, r1, r2, r3}
 80007f6:	b500      	push	{lr}
 80007f8:	b083      	sub	sp, #12
 80007fa:	aa04      	add	r2, sp, #16
 80007fc:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list arg;

  va_start(arg, fmt);
 8000800:	9201      	str	r2, [sp, #4]
  uartVPrintf (cli_ch, fmt, arg);
 8000802:	2000      	movs	r0, #0
 8000804:	f000 f9d4 	bl	8000bb0 <uartVPrintf>
  va_end(arg);
}
 8000808:	b003      	add	sp, #12
 800080a:	f85d eb04 	ldr.w	lr, [sp], #4
 800080e:	b004      	add	sp, #16
 8000810:	4770      	bx	lr
	...

08000814 <cliHelp>:
{
 8000814:	b510      	push	{r4, lr}
  cliPrintf("----------------------\n");
 8000816:	480b      	ldr	r0, [pc, #44]	@ (8000844 <cliHelp+0x30>)
 8000818:	f7ff ffec 	bl	80007f4 <cliPrintf>
  for(int i= 0; i<cli_cmd_count; i++)
 800081c:	2400      	movs	r4, #0
 800081e:	e008      	b.n	8000832 <cliHelp+0x1e>
      cliPrintf("%s\n", cli_cmd_func[i].cmd_str);
 8000820:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8000824:	0093      	lsls	r3, r2, #2
 8000826:	4908      	ldr	r1, [pc, #32]	@ (8000848 <cliHelp+0x34>)
 8000828:	4419      	add	r1, r3
 800082a:	4808      	ldr	r0, [pc, #32]	@ (800084c <cliHelp+0x38>)
 800082c:	f7ff ffe2 	bl	80007f4 <cliPrintf>
  for(int i= 0; i<cli_cmd_count; i++)
 8000830:	3401      	adds	r4, #1
 8000832:	4b07      	ldr	r3, [pc, #28]	@ (8000850 <cliHelp+0x3c>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	42a3      	cmp	r3, r4
 8000838:	dcf2      	bgt.n	8000820 <cliHelp+0xc>
  cliPrintf("----------------------\n");
 800083a:	4802      	ldr	r0, [pc, #8]	@ (8000844 <cliHelp+0x30>)
 800083c:	f7ff ffda 	bl	80007f4 <cliPrintf>
}
 8000840:	bd10      	pop	{r4, pc}
 8000842:	bf00      	nop
 8000844:	0800343c 	.word	0x0800343c
 8000848:	20000084 	.word	0x20000084
 800084c:	08003454 	.word	0x08003454
 8000850:	200000e4 	.word	0x200000e4

08000854 <cliIsStr>:

bool cliIsStr (const char *p_arg, const char *p_str)
{
 8000854:	b508      	push	{r3, lr}
  if (strcmp (p_arg, p_str) == 0)
 8000856:	f7ff fccb 	bl	80001f0 <strcmp>
 800085a:	b908      	cbnz	r0, 8000860 <cliIsStr+0xc>
    return true;
 800085c:	2001      	movs	r0, #1
  else
    return false;
}
 800085e:	bd08      	pop	{r3, pc}
    return false;
 8000860:	2000      	movs	r0, #0
 8000862:	e7fc      	b.n	800085e <cliIsStr+0xa>

08000864 <cliGetData>:

int32_t cliGetData (const char *p_arg)
{
 8000864:	b508      	push	{r3, lr}
  int32_t ret;
  ret = (int32_t) strtoul (p_arg, (char**) NULL, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	4611      	mov	r1, r2
 800086a:	f002 f88d 	bl	8002988 <strtoul>
  return ret;
}
 800086e:	bd08      	pop	{r3, pc}

08000870 <cliKeepLoop>:


bool cliKeepLoop(void)
{
 8000870:	b508      	push	{r3, lr}
  if(uartAvailable(cli_ch) ==0)
 8000872:	2000      	movs	r0, #0
 8000874:	f000 f948 	bl	8000b08 <uartAvailable>
 8000878:	b908      	cbnz	r0, 800087e <cliKeepLoop+0xe>
    return true;
 800087a:	2001      	movs	r0, #1
  else
    return false;
}
 800087c:	bd08      	pop	{r3, pc}
    return false;
 800087e:	2000      	movs	r0, #0
 8000880:	e7fc      	b.n	800087c <cliKeepLoop+0xc>
	...

08000884 <cliMain>:




bool cliMain (void)
{
 8000884:	b530      	push	{r4, r5, lr}
 8000886:	b083      	sub	sp, #12
  bool ret = false;
  if (uartAvailable (cli_ch) > 0)
 8000888:	2000      	movs	r0, #0
 800088a:	f000 f93d 	bl	8000b08 <uartAvailable>
 800088e:	b918      	cbnz	r0, 8000898 <cliMain+0x14>
  bool ret = false;
 8000890:	2400      	movs	r4, #0
	}

    }

  return ret;
}
 8000892:	4620      	mov	r0, r4
 8000894:	b003      	add	sp, #12
 8000896:	bd30      	pop	{r4, r5, pc}
      rx_data = uartRead (cli_ch);
 8000898:	2000      	movs	r0, #0
 800089a:	f000 f953 	bl	8000b44 <uartRead>
 800089e:	f88d 0003 	strb.w	r0, [sp, #3]
      if (rx_data == '\r')
 80008a2:	280d      	cmp	r0, #13
 80008a4:	d005      	beq.n	80008b2 <cliMain+0x2e>
      else if (cli_buf_index < (128 - 1)) // 버퍼 경계처리 128은 버퍼크기 , -1은 null값 고려
 80008a6:	4b2c      	ldr	r3, [pc, #176]	@ (8000958 <cliMain+0xd4>)
 80008a8:	881b      	ldrh	r3, [r3, #0]
 80008aa:	2b7e      	cmp	r3, #126	@ 0x7e
 80008ac:	d946      	bls.n	800093c <cliMain+0xb8>
  bool ret = false;
 80008ae:	2400      	movs	r4, #0
 80008b0:	e7ef      	b.n	8000892 <cliMain+0xe>
	  cli_buf[cli_buf_index] = 0; // CLI 라인마지막 'r'다음 null값을 주기
 80008b2:	4b29      	ldr	r3, [pc, #164]	@ (8000958 <cliMain+0xd4>)
 80008b4:	881a      	ldrh	r2, [r3, #0]
 80008b6:	4d29      	ldr	r5, [pc, #164]	@ (800095c <cliMain+0xd8>)
 80008b8:	2400      	movs	r4, #0
 80008ba:	54ac      	strb	r4, [r5, r2]
	  cli_buf_index = 0;
 80008bc:	801c      	strh	r4, [r3, #0]
	  uartPrintf (cli_ch, "\r\n"); // 터미널쪽에 줄바꿈
 80008be:	4928      	ldr	r1, [pc, #160]	@ (8000960 <cliMain+0xdc>)
 80008c0:	4620      	mov	r0, r4
 80008c2:	f000 f95b 	bl	8000b7c <uartPrintf>
	  char *str_ptr = cli_buf;
 80008c6:	9501      	str	r5, [sp, #4]
	  cli_argc = 0;
 80008c8:	4b26      	ldr	r3, [pc, #152]	@ (8000964 <cliMain+0xe0>)
 80008ca:	801c      	strh	r4, [r3, #0]
	  while ((tok = strtok_r (str_ptr, " ", &str_ptr)) != NULL)
 80008cc:	e006      	b.n	80008dc <cliMain+0x58>
	      cli_argv[cli_argc] = tok;
 80008ce:	4a25      	ldr	r2, [pc, #148]	@ (8000964 <cliMain+0xe0>)
 80008d0:	8813      	ldrh	r3, [r2, #0]
 80008d2:	4825      	ldr	r0, [pc, #148]	@ (8000968 <cliMain+0xe4>)
 80008d4:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	      cli_argc++;
 80008d8:	3301      	adds	r3, #1
 80008da:	8013      	strh	r3, [r2, #0]
	  while ((tok = strtok_r (str_ptr, " ", &str_ptr)) != NULL)
 80008dc:	aa01      	add	r2, sp, #4
 80008de:	4923      	ldr	r1, [pc, #140]	@ (800096c <cliMain+0xe8>)
 80008e0:	9801      	ldr	r0, [sp, #4]
 80008e2:	f002 f8d0 	bl	8002a86 <strtok_r>
 80008e6:	4601      	mov	r1, r0
 80008e8:	2800      	cmp	r0, #0
 80008ea:	d1f0      	bne.n	80008ce <cliMain+0x4a>
	  for (int i = 0; i < cli_cmd_count; i++)
 80008ec:	2400      	movs	r4, #0
 80008ee:	e000      	b.n	80008f2 <cliMain+0x6e>
 80008f0:	3401      	adds	r4, #1
 80008f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000970 <cliMain+0xec>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	42a3      	cmp	r3, r4
 80008f8:	dd1a      	ble.n	8000930 <cliMain+0xac>
	      if (strcmp (cli_argv[0], cli_cmd_func[i].cmd_str) == 0)
 80008fa:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 80008fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000974 <cliMain+0xf0>)
 8000900:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8000904:	4b18      	ldr	r3, [pc, #96]	@ (8000968 <cliMain+0xe4>)
 8000906:	6818      	ldr	r0, [r3, #0]
 8000908:	f7ff fc72 	bl	80001f0 <strcmp>
 800090c:	2800      	cmp	r0, #0
 800090e:	d1ef      	bne.n	80008f0 <cliMain+0x6c>
		  if (cli_cmd_func[i].cmd_func != NULL)
 8000910:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8000914:	4b17      	ldr	r3, [pc, #92]	@ (8000974 <cliMain+0xf0>)
 8000916:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d0e7      	beq.n	80008f0 <cliMain+0x6c>
		      cli_cmd_func[i].cmd_func (cli_argc - 1,
 8000920:	4a10      	ldr	r2, [pc, #64]	@ (8000964 <cliMain+0xe0>)
 8000922:	8810      	ldrh	r0, [r2, #0]
 8000924:	3801      	subs	r0, #1
 8000926:	4914      	ldr	r1, [pc, #80]	@ (8000978 <cliMain+0xf4>)
 8000928:	b2c0      	uxtb	r0, r0
 800092a:	4798      	blx	r3
		      ret = true;
 800092c:	2401      	movs	r4, #1
		      break;
 800092e:	e000      	b.n	8000932 <cliMain+0xae>
  bool ret = false;
 8000930:	2400      	movs	r4, #0
	  uartPrintf (cli_ch, "cli# "); // 프롬프트라고 알리는 출력
 8000932:	4912      	ldr	r1, [pc, #72]	@ (800097c <cliMain+0xf8>)
 8000934:	2000      	movs	r0, #0
 8000936:	f000 f921 	bl	8000b7c <uartPrintf>
 800093a:	e7aa      	b.n	8000892 <cliMain+0xe>
	  cli_buf[cli_buf_index] = rx_data;
 800093c:	4a07      	ldr	r2, [pc, #28]	@ (800095c <cliMain+0xd8>)
 800093e:	54d0      	strb	r0, [r2, r3]
	  cli_buf_index++;
 8000940:	3301      	adds	r3, #1
 8000942:	4a05      	ldr	r2, [pc, #20]	@ (8000958 <cliMain+0xd4>)
 8000944:	8013      	strh	r3, [r2, #0]
	  uartWrite (cli_ch, &rx_data, 1); // 에코
 8000946:	2201      	movs	r2, #1
 8000948:	f10d 0103 	add.w	r1, sp, #3
 800094c:	2000      	movs	r0, #0
 800094e:	f000 f8c9 	bl	8000ae4 <uartWrite>
  bool ret = false;
 8000952:	2400      	movs	r4, #0
 8000954:	e79d      	b.n	8000892 <cliMain+0xe>
 8000956:	bf00      	nop
 8000958:	2000010a 	.word	0x2000010a
 800095c:	2000010c 	.word	0x2000010c
 8000960:	08003458 	.word	0x08003458
 8000964:	20000108 	.word	0x20000108
 8000968:	200000e8 	.word	0x200000e8
 800096c:	08003460 	.word	0x08003460
 8000970:	200000e4 	.word	0x200000e4
 8000974:	20000084 	.word	0x20000084
 8000978:	200000ec 	.word	0x200000ec
 800097c:	0800345c 	.word	0x0800345c

08000980 <swtimerInit>:
static uint8_t swtimer_count = 0; // 채널숫자 관리용
static swtimer_t swtimer_tbl[SWTIMER_MAX_CH] ;
extern TIM_HandleTypeDef htim14;

bool swtimerInit (void)
{
 8000980:	b510      	push	{r4, lr}
  for (int i = 0; i < SWTIMER_MAX_CH; i++)
 8000982:	2300      	movs	r3, #0
 8000984:	e00a      	b.n	800099c <swtimerInit+0x1c>
    {
      swtimer_tbl[i].enable = false;
 8000986:	4c09      	ldr	r4, [pc, #36]	@ (80009ac <swtimerInit+0x2c>)
 8000988:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800098c:	0090      	lsls	r0, r2, #2
 800098e:	1821      	adds	r1, r4, r0
 8000990:	2200      	movs	r2, #0
 8000992:	5422      	strb	r2, [r4, r0]
      swtimer_tbl[i].counter = 0;
 8000994:	604a      	str	r2, [r1, #4]
      swtimer_tbl[i].func = NULL;
 8000996:	60ca      	str	r2, [r1, #12]
      swtimer_tbl[i].func_arg = NULL;
 8000998:	610a      	str	r2, [r1, #16]
  for (int i = 0; i < SWTIMER_MAX_CH; i++)
 800099a:	3301      	adds	r3, #1
 800099c:	2b07      	cmp	r3, #7
 800099e:	ddf2      	ble.n	8000986 <swtimerInit+0x6>
    }
  HAL_TIM_Base_Start_IT (&htim14);
 80009a0:	4803      	ldr	r0, [pc, #12]	@ (80009b0 <swtimerInit+0x30>)
 80009a2:	f001 fb59 	bl	8002058 <HAL_TIM_Base_Start_IT>
  return true;
}
 80009a6:	2001      	movs	r0, #1
 80009a8:	bd10      	pop	{r4, pc}
 80009aa:	bf00      	nop
 80009ac:	2000018c 	.word	0x2000018c
 80009b0:	200003dc 	.word	0x200003dc

080009b4 <swtimerGetch>:

bool swtimerGetch (uint8_t *p_ch)
{
  if (swtimer_count >= SWTIMER_MAX_CH)
 80009b4:	4b05      	ldr	r3, [pc, #20]	@ (80009cc <swtimerGetch+0x18>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b07      	cmp	r3, #7
 80009ba:	d805      	bhi.n	80009c8 <swtimerGetch+0x14>
    return false;

  *p_ch = swtimer_count;
 80009bc:	7003      	strb	r3, [r0, #0]
  swtimer_count++;
 80009be:	3301      	adds	r3, #1
 80009c0:	4a02      	ldr	r2, [pc, #8]	@ (80009cc <swtimerGetch+0x18>)
 80009c2:	7013      	strb	r3, [r2, #0]
  return true;
 80009c4:	2001      	movs	r0, #1
 80009c6:	4770      	bx	lr
    return false;
 80009c8:	2000      	movs	r0, #0
}
 80009ca:	4770      	bx	lr
 80009cc:	2000022c 	.word	0x2000022c

080009d0 <swtimerSet>:
		 void (*func) (void *arg),
		 void *func_arg,
		 SwtimerMode_t mode,
		 uint32_t time_ms)
{
  if (ch >= SWTIMER_MAX_CH)
 80009d0:	2807      	cmp	r0, #7
 80009d2:	d819      	bhi.n	8000a08 <swtimerSet+0x38>
{
 80009d4:	b410      	push	{r4}
    return false;

  swtimer_tbl[ch].func = func;
 80009d6:	4c0d      	ldr	r4, [pc, #52]	@ (8000a0c <swtimerSet+0x3c>)
 80009d8:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
 80009dc:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 80009e0:	f8cc 100c 	str.w	r1, [ip, #12]
  swtimer_tbl[ch].func_arg = func_arg;
 80009e4:	f8cc 2010 	str.w	r2, [ip, #16]
  swtimer_tbl[ch].mode = mode;
 80009e8:	f88c 3002 	strb.w	r3, [ip, #2]
  swtimer_tbl[ch].counter = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	f8cc 3004 	str.w	r3, [ip, #4]
  swtimer_tbl[ch].reload = time_ms;
 80009f2:	9a01      	ldr	r2, [sp, #4]
 80009f4:	f8cc 2008 	str.w	r2, [ip, #8]
  swtimer_tbl[ch].enable = false;
 80009f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80009fc:	0080      	lsls	r0, r0, #2
 80009fe:	5423      	strb	r3, [r4, r0]

  return true;
 8000a00:	2001      	movs	r0, #1
}
 8000a02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a06:	4770      	bx	lr
    return false;
 8000a08:	2000      	movs	r0, #0
}
 8000a0a:	4770      	bx	lr
 8000a0c:	2000018c 	.word	0x2000018c

08000a10 <swtimerStart>:



bool swtimerStart (uint8_t ch)
{
  if (ch >= SWTIMER_MAX_CH)
 8000a10:	2807      	cmp	r0, #7
 8000a12:	d80c      	bhi.n	8000a2e <swtimerStart+0x1e>
    return false;

  swtimer_tbl[ch].counter = 0;
 8000a14:	4a07      	ldr	r2, [pc, #28]	@ (8000a34 <swtimerStart+0x24>)
 8000a16:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8000a1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000a1e:	2100      	movs	r1, #0
 8000a20:	6059      	str	r1, [r3, #4]
  swtimer_tbl[ch].enable = true;
 8000a22:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8000a26:	2001      	movs	r0, #1
 8000a28:	f802 0023 	strb.w	r0, [r2, r3, lsl #2]

  return true;
 8000a2c:	4770      	bx	lr
    return false;
 8000a2e:	2000      	movs	r0, #0
}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	2000018c 	.word	0x2000018c

08000a38 <swtimerISR>:

  return true;
}

void swtimerISR (void)
{
 8000a38:	b510      	push	{r4, lr}
  for (int i = 0; i < swtimer_count; i++) // 채널마다 루프돌기
 8000a3a:	2400      	movs	r4, #0
 8000a3c:	e000      	b.n	8000a40 <swtimerISR+0x8>
 8000a3e:	3401      	adds	r4, #1
 8000a40:	4b1a      	ldr	r3, [pc, #104]	@ (8000aac <swtimerISR+0x74>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	42a3      	cmp	r3, r4
 8000a46:	dd30      	ble.n	8000aaa <swtimerISR+0x72>
    {
      if (swtimer_tbl[i].enable == true)
 8000a48:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8000a4c:	0093      	lsls	r3, r2, #2
 8000a4e:	4a18      	ldr	r2, [pc, #96]	@ (8000ab0 <swtimerISR+0x78>)
 8000a50:	5cd3      	ldrb	r3, [r2, r3]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d0f3      	beq.n	8000a3e <swtimerISR+0x6>
        {
	  swtimer_tbl[i].counter++;
 8000a56:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8000a5a:	009a      	lsls	r2, r3, #2
 8000a5c:	4b14      	ldr	r3, [pc, #80]	@ (8000ab0 <swtimerISR+0x78>)
 8000a5e:	4413      	add	r3, r2
 8000a60:	685a      	ldr	r2, [r3, #4]
 8000a62:	3201      	adds	r2, #1
 8000a64:	605a      	str	r2, [r3, #4]
	  if (swtimer_tbl[i].counter >= swtimer_tbl[i].reload)
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d3e8      	bcc.n	8000a3e <swtimerISR+0x6>
	    {
	      if (swtimer_tbl[i].func != NULL)
 8000a6c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8000a70:	009a      	lsls	r2, r3, #2
 8000a72:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab0 <swtimerISR+0x78>)
 8000a74:	4413      	add	r3, r2
 8000a76:	68da      	ldr	r2, [r3, #12]
 8000a78:	b132      	cbz	r2, 8000a88 <swtimerISR+0x50>
	        {
		  swtimer_tbl[i].func (swtimer_tbl[i].func_arg);
 8000a7a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8000a7e:	0099      	lsls	r1, r3, #2
 8000a80:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab0 <swtimerISR+0x78>)
 8000a82:	440b      	add	r3, r1
 8000a84:	6918      	ldr	r0, [r3, #16]
 8000a86:	4790      	blx	r2
		}
	      swtimer_tbl[i].counter = 0;
 8000a88:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8000a8c:	009a      	lsls	r2, r3, #2
 8000a8e:	4b08      	ldr	r3, [pc, #32]	@ (8000ab0 <swtimerISR+0x78>)
 8000a90:	4413      	add	r3, r2
 8000a92:	2200      	movs	r2, #0
 8000a94:	605a      	str	r2, [r3, #4]
	      if (swtimer_tbl[i].mode == SWTIMER_ONETIME)
 8000a96:	789b      	ldrb	r3, [r3, #2]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d1d0      	bne.n	8000a3e <swtimerISR+0x6>
	        {
		  swtimer_tbl[i].enable = false;
 8000a9c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8000aa0:	0093      	lsls	r3, r2, #2
 8000aa2:	4a03      	ldr	r2, [pc, #12]	@ (8000ab0 <swtimerISR+0x78>)
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	54d1      	strb	r1, [r2, r3]
 8000aa8:	e7c9      	b.n	8000a3e <swtimerISR+0x6>
		}
	    }
	}
    }
}
 8000aaa:	bd10      	pop	{r4, pc}
 8000aac:	2000022c 	.word	0x2000022c
 8000ab0:	2000018c 	.word	0x2000018c

08000ab4 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab4:	b508      	push	{r3, lr}
  if(htim == &htim14)
 8000ab6:	4b03      	ldr	r3, [pc, #12]	@ (8000ac4 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000ab8:	4283      	cmp	r3, r0
 8000aba:	d000      	beq.n	8000abe <HAL_TIM_PeriodElapsedCallback+0xa>
    {
      swtimerISR();
    }
}
 8000abc:	bd08      	pop	{r3, pc}
      swtimerISR();
 8000abe:	f7ff ffbb 	bl	8000a38 <swtimerISR>
}
 8000ac2:	e7fb      	b.n	8000abc <HAL_TIM_PeriodElapsedCallback+0x8>
 8000ac4:	200003dc 	.word	0x200003dc

08000ac8 <uartInit>:
static uint16_t q_in = 0;
static uint16_t q_out = 0;
static uint8_t q_buf[UART_Q_BUF_MAX];

bool uartInit (void) //코어에서 실제로 초기화를 함.
{
 8000ac8:	b508      	push	{r3, lr}
  HAL_UART_Receive_DMA (&huart1, &q_buf[0], UART_Q_BUF_MAX);
 8000aca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ace:	4903      	ldr	r1, [pc, #12]	@ (8000adc <uartInit+0x14>)
 8000ad0:	4803      	ldr	r0, [pc, #12]	@ (8000ae0 <uartInit+0x18>)
 8000ad2:	f001 fed1 	bl	8002878 <HAL_UART_Receive_DMA>
  return true;
}
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	bd08      	pop	{r3, pc}
 8000ada:	bf00      	nop
 8000adc:	20000230 	.word	0x20000230
 8000ae0:	20000394 	.word	0x20000394

08000ae4 <uartWrite>:
uint32_t uartWrite (uint8_t ch, uint8_t *p_data, uint32_t length)
{
  uint32_t ret = 0;
  HAL_StatusTypeDef hal_ret;

  switch (ch)
 8000ae4:	b108      	cbz	r0, 8000aea <uartWrite+0x6>
  uint32_t ret = 0;
 8000ae6:	2000      	movs	r0, #0
	  ret = length;	// HAL_OK일 경우가 아니면 ret은 0으로 초기화된그대로,.
	}
      break;
    }
  return ret;
}
 8000ae8:	4770      	bx	lr
{
 8000aea:	b510      	push	{r4, lr}
 8000aec:	4614      	mov	r4, r2
      hal_ret = HAL_UART_Transmit (&huart1, p_data, length, 100); //timeout으로 100ms 주기
 8000aee:	2364      	movs	r3, #100	@ 0x64
 8000af0:	b292      	uxth	r2, r2
 8000af2:	4804      	ldr	r0, [pc, #16]	@ (8000b04 <uartWrite+0x20>)
 8000af4:	f001 fd7b 	bl	80025ee <HAL_UART_Transmit>
      if (hal_ret == HAL_OK)
 8000af8:	b108      	cbz	r0, 8000afe <uartWrite+0x1a>
  uint32_t ret = 0;
 8000afa:	2000      	movs	r0, #0
}
 8000afc:	bd10      	pop	{r4, pc}
	  ret = length;	// HAL_OK일 경우가 아니면 ret은 0으로 초기화된그대로,.
 8000afe:	4620      	mov	r0, r4
  return ret;
 8000b00:	e7fc      	b.n	8000afc <uartWrite+0x18>
 8000b02:	bf00      	nop
 8000b04:	20000394 	.word	0x20000394

08000b08 <uartAvailable>:

uint32_t uartAvailable (uint8_t ch)
{
  uint32_t ret = 0;

  switch (ch)
 8000b08:	b998      	cbnz	r0, 8000b32 <uartAvailable+0x2a>
    {
    case _DEF_CH1:
      q_in = (UART_Q_BUF_MAX - huart1.hdmarx->Instance->NDTR) % UART_Q_BUF_MAX;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b38 <uartAvailable+0x30>)
 8000b0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	6858      	ldr	r0, [r3, #4]
 8000b12:	b280      	uxth	r0, r0
 8000b14:	4240      	negs	r0, r0
 8000b16:	b2c0      	uxtb	r0, r0
 8000b18:	4b08      	ldr	r3, [pc, #32]	@ (8000b3c <uartAvailable+0x34>)
 8000b1a:	8018      	strh	r0, [r3, #0]
      ret = (UART_Q_BUF_MAX + q_in - q_out) % UART_Q_BUF_MAX; // 큐에 남아있는 버퍼 갯수를 리턴
 8000b1c:	f500 7080 	add.w	r0, r0, #256	@ 0x100
 8000b20:	4b07      	ldr	r3, [pc, #28]	@ (8000b40 <uartAvailable+0x38>)
 8000b22:	881b      	ldrh	r3, [r3, #0]
 8000b24:	1ac0      	subs	r0, r0, r3
 8000b26:	4243      	negs	r3, r0
 8000b28:	b2c0      	uxtb	r0, r0
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	bf58      	it	pl
 8000b2e:	4258      	negpl	r0, r3
      break;
 8000b30:	4770      	bx	lr
  uint32_t ret = 0;
 8000b32:	2000      	movs	r0, #0
    }
  return ret;
}
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000394 	.word	0x20000394
 8000b3c:	20000332 	.word	0x20000332
 8000b40:	20000330 	.word	0x20000330

08000b44 <uartRead>:

uint8_t uartRead (uint8_t ch)	//버퍼를 출력하기
{
  uint8_t ret = 0;

  switch (ch)
 8000b44:	b980      	cbnz	r0, 8000b68 <uartRead+0x24>
    {
    case _DEF_CH1:
      if (q_out != q_in)
 8000b46:	4b0a      	ldr	r3, [pc, #40]	@ (8000b70 <uartRead+0x2c>)
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	490a      	ldr	r1, [pc, #40]	@ (8000b74 <uartRead+0x30>)
 8000b4c:	8809      	ldrh	r1, [r1, #0]
 8000b4e:	428b      	cmp	r3, r1
 8000b50:	d00c      	beq.n	8000b6c <uartRead+0x28>
	{
	  ret = q_buf[q_out];
 8000b52:	4a09      	ldr	r2, [pc, #36]	@ (8000b78 <uartRead+0x34>)
 8000b54:	5cd0      	ldrb	r0, [r2, r3]
	  q_out = (q_out + 1) % UART_Q_BUF_MAX;
 8000b56:	3301      	adds	r3, #1
 8000b58:	425a      	negs	r2, r3
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	b2d2      	uxtb	r2, r2
 8000b5e:	bf58      	it	pl
 8000b60:	4253      	negpl	r3, r2
 8000b62:	4a03      	ldr	r2, [pc, #12]	@ (8000b70 <uartRead+0x2c>)
 8000b64:	8013      	strh	r3, [r2, #0]
 8000b66:	4770      	bx	lr
  uint8_t ret = 0;
 8000b68:	2000      	movs	r0, #0
 8000b6a:	4770      	bx	lr
	}
      break;
    }

  return ret;
}
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	20000330 	.word	0x20000330
 8000b74:	20000332 	.word	0x20000332
 8000b78:	20000230 	.word	0x20000230

08000b7c <uartPrintf>:

uint32_t uartPrintf (uint8_t ch, const char *fmt, ...) //가변인자를 사용한 형식화 출력함수, 프로그램만들때 매우 용이
{
 8000b7c:	b40e      	push	{r1, r2, r3}
 8000b7e:	b510      	push	{r4, lr}
 8000b80:	b0c3      	sub	sp, #268	@ 0x10c
 8000b82:	4604      	mov	r4, r0
 8000b84:	ab45      	add	r3, sp, #276	@ 0x114
 8000b86:	f853 2b04 	ldr.w	r2, [r3], #4
  uint32_t ret = 0;

  va_list arg;
  char print_buf[256];

  va_start(arg, fmt);
 8000b8a:	9341      	str	r3, [sp, #260]	@ 0x104
  int len;
  len = vsnprintf (print_buf, 256, fmt, arg);
 8000b8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b90:	a801      	add	r0, sp, #4
 8000b92:	f001 ff2f 	bl	80029f4 <vsniprintf>
  va_end(arg);

  if (len > 0)
 8000b96:	1e02      	subs	r2, r0, #0
 8000b98:	dc05      	bgt.n	8000ba6 <uartPrintf+0x2a>
  uint32_t ret = 0;
 8000b9a:	2000      	movs	r0, #0
    {
      ret = uartWrite (ch, (uint8_t*) print_buf, len);
    }

  return ret;
}
 8000b9c:	b043      	add	sp, #268	@ 0x10c
 8000b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ba2:	b003      	add	sp, #12
 8000ba4:	4770      	bx	lr
      ret = uartWrite (ch, (uint8_t*) print_buf, len);
 8000ba6:	a901      	add	r1, sp, #4
 8000ba8:	4620      	mov	r0, r4
 8000baa:	f7ff ff9b 	bl	8000ae4 <uartWrite>
 8000bae:	e7f5      	b.n	8000b9c <uartPrintf+0x20>

08000bb0 <uartVPrintf>:

uint32_t uartVPrintf (uint8_t ch, const char *fmt, va_list arg) //cli에 사용할 printf 가변인자 포인터를 윗단에서관리함.
{
 8000bb0:	b510      	push	{r4, lr}
 8000bb2:	b0c0      	sub	sp, #256	@ 0x100
 8000bb4:	4604      	mov	r4, r0
 8000bb6:	4613      	mov	r3, r2

  uint32_t ret = 0;
  char print_buf[256];
  int len;
  len = vsnprintf (print_buf, 256, fmt, arg);
 8000bb8:	460a      	mov	r2, r1
 8000bba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bbe:	4668      	mov	r0, sp
 8000bc0:	f001 ff18 	bl	80029f4 <vsniprintf>

  if (len > 0)
 8000bc4:	1e02      	subs	r2, r0, #0
 8000bc6:	dc02      	bgt.n	8000bce <uartVPrintf+0x1e>
  uint32_t ret = 0;
 8000bc8:	2000      	movs	r0, #0
    {
      ret = uartWrite (ch, (uint8_t*) print_buf, len);
    }

  return ret;
}
 8000bca:	b040      	add	sp, #256	@ 0x100
 8000bcc:	bd10      	pop	{r4, pc}
      ret = uartWrite (ch, (uint8_t*) print_buf, len);
 8000bce:	4669      	mov	r1, sp
 8000bd0:	4620      	mov	r0, r4
 8000bd2:	f7ff ff87 	bl	8000ae4 <uartWrite>
 8000bd6:	e7f8      	b.n	8000bca <uartVPrintf+0x1a>

08000bd8 <delay>:

#include "utils.h"


void delay(uint32_t time_ms) // Hal 추상화용
{
 8000bd8:	b508      	push	{r3, lr}
	HAL_Delay(time_ms);
 8000bda:	f000 fca1 	bl	8001520 <HAL_Delay>
}
 8000bde:	bd08      	pop	{r3, pc}

08000be0 <millis>:



uint32_t millis(void)
{
 8000be0:	b508      	push	{r3, lr}
	return HAL_GetTick();
 8000be2:	f000 fc97 	bl	8001514 <HAL_GetTick>
}
 8000be6:	bd08      	pop	{r3, pc}

08000be8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000be8:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	9301      	str	r3, [sp, #4]
 8000bee:	4b06      	ldr	r3, [pc, #24]	@ (8000c08 <MX_DMA_Init+0x20>)
 8000bf0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000bf2:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8000bf6:	631a      	str	r2, [r3, #48]	@ 0x30
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000bfe:	9301      	str	r3, [sp, #4]
 8000c00:	9b01      	ldr	r3, [sp, #4]

}
 8000c02:	b002      	add	sp, #8
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	40023800 	.word	0x40023800

08000c0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c10:	b08f      	sub	sp, #60	@ 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c12:	2400      	movs	r4, #0
 8000c14:	9409      	str	r4, [sp, #36]	@ 0x24
 8000c16:	940a      	str	r4, [sp, #40]	@ 0x28
 8000c18:	940b      	str	r4, [sp, #44]	@ 0x2c
 8000c1a:	940c      	str	r4, [sp, #48]	@ 0x30
 8000c1c:	940d      	str	r4, [sp, #52]	@ 0x34
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1e:	9401      	str	r4, [sp, #4]
 8000c20:	4bac      	ldr	r3, [pc, #688]	@ (8000ed4 <MX_GPIO_Init+0x2c8>)
 8000c22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c24:	f042 0204 	orr.w	r2, r2, #4
 8000c28:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c2c:	f002 0204 	and.w	r2, r2, #4
 8000c30:	9201      	str	r2, [sp, #4]
 8000c32:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c34:	9402      	str	r4, [sp, #8]
 8000c36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c38:	f042 0220 	orr.w	r2, r2, #32
 8000c3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c40:	f002 0220 	and.w	r2, r2, #32
 8000c44:	9202      	str	r2, [sp, #8]
 8000c46:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c48:	9403      	str	r4, [sp, #12]
 8000c4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c4c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000c50:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c54:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000c58:	9203      	str	r2, [sp, #12]
 8000c5a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5c:	9404      	str	r4, [sp, #16]
 8000c5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c60:	f042 0201 	orr.w	r2, r2, #1
 8000c64:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c68:	f002 0201 	and.w	r2, r2, #1
 8000c6c:	9204      	str	r2, [sp, #16]
 8000c6e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c70:	9405      	str	r4, [sp, #20]
 8000c72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c74:	f042 0202 	orr.w	r2, r2, #2
 8000c78:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c7c:	f002 0202 	and.w	r2, r2, #2
 8000c80:	9205      	str	r2, [sp, #20]
 8000c82:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c84:	9406      	str	r4, [sp, #24]
 8000c86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000c8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c90:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8000c94:	9206      	str	r2, [sp, #24]
 8000c96:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c98:	9407      	str	r4, [sp, #28]
 8000c9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c9c:	f042 0210 	orr.w	r2, r2, #16
 8000ca0:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ca2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ca4:	f002 0210 	and.w	r2, r2, #16
 8000ca8:	9207      	str	r2, [sp, #28]
 8000caa:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cac:	9408      	str	r4, [sp, #32]
 8000cae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000cb0:	f042 0208 	orr.w	r2, r2, #8
 8000cb4:	631a      	str	r2, [r3, #48]	@ 0x30
 8000cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb8:	f003 0308 	and.w	r3, r3, #8
 8000cbc:	9308      	str	r3, [sp, #32]
 8000cbe:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000cc0:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8000ee8 <MX_GPIO_Init+0x2dc>
 8000cc4:	4622      	mov	r2, r4
 8000cc6:	2116      	movs	r1, #22
 8000cc8:	4650      	mov	r0, sl
 8000cca:	f001 f98f 	bl	8001fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000cce:	4622      	mov	r2, r4
 8000cd0:	2180      	movs	r1, #128	@ 0x80
 8000cd2:	4881      	ldr	r0, [pc, #516]	@ (8000ed8 <MX_GPIO_Init+0x2cc>)
 8000cd4:	f001 f98a 	bl	8001fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000cd8:	4622      	mov	r2, r4
 8000cda:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000cde:	487f      	ldr	r0, [pc, #508]	@ (8000edc <MX_GPIO_Init+0x2d0>)
 8000ce0:	f001 f984 	bl	8001fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000ce4:	4622      	mov	r2, r4
 8000ce6:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000cea:	487d      	ldr	r0, [pc, #500]	@ (8000ee0 <MX_GPIO_Init+0x2d4>)
 8000cec:	f001 f97e 	bl	8001fec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000cf0:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000cf4:	9309      	str	r3, [sp, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2502      	movs	r5, #2
 8000cf8:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfc:	f04f 0803 	mov.w	r8, #3
 8000d00:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d04:	270c      	movs	r7, #12
 8000d06:	970d      	str	r7, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d08:	f8df 91e0 	ldr.w	r9, [pc, #480]	@ 8000eec <MX_GPIO_Init+0x2e0>
 8000d0c:	a909      	add	r1, sp, #36	@ 0x24
 8000d0e:	4648      	mov	r0, r9
 8000d10:	f001 f868 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000d14:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000d18:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	940c      	str	r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000d20:	2305      	movs	r3, #5
 8000d22:	930d      	str	r3, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d24:	a909      	add	r1, sp, #36	@ 0x24
 8000d26:	4648      	mov	r0, r9
 8000d28:	f001 f85c 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000d2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d30:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d36:	950c      	str	r5, [sp, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d38:	260e      	movs	r6, #14
 8000d3a:	960d      	str	r6, [sp, #52]	@ 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	a909      	add	r1, sp, #36	@ 0x24
 8000d3e:	4648      	mov	r0, r9
 8000d40:	f001 f850 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000d44:	f04f 0901 	mov.w	r9, #1
 8000d48:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d50:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d54:	970d      	str	r7, [sp, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000d56:	a909      	add	r1, sp, #36	@ 0x24
 8000d58:	4650      	mov	r0, sl
 8000d5a:	f001 f843 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000d5e:	2316      	movs	r3, #22
 8000d60:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d62:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6a:	a909      	add	r1, sp, #36	@ 0x24
 8000d6c:	4650      	mov	r0, sl
 8000d6e:	f001 f839 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000d72:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000d76:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d78:	f44f 1b90 	mov.w	fp, #1179648	@ 0x120000
 8000d7c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d82:	a909      	add	r1, sp, #36	@ 0x24
 8000d84:	4854      	ldr	r0, [pc, #336]	@ (8000ed8 <MX_GPIO_Init+0x2cc>)
 8000d86:	f001 f82d 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000d8a:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000d8e:	9309      	str	r3, [sp, #36]	@ 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d94:	950c      	str	r5, [sp, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d96:	960d      	str	r6, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d98:	a909      	add	r1, sp, #36	@ 0x24
 8000d9a:	484f      	ldr	r0, [pc, #316]	@ (8000ed8 <MX_GPIO_Init+0x2cc>)
 8000d9c:	f001 f822 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000da0:	2380      	movs	r3, #128	@ 0x80
 8000da2:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da4:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000dac:	a909      	add	r1, sp, #36	@ 0x24
 8000dae:	484a      	ldr	r0, [pc, #296]	@ (8000ed8 <MX_GPIO_Init+0x2cc>)
 8000db0:	f001 f818 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000db4:	2320      	movs	r3, #32
 8000db6:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000db8:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	a909      	add	r1, sp, #36	@ 0x24
 8000dc0:	4650      	mov	r0, sl
 8000dc2:	f001 f80f 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000dc6:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dce:	950c      	str	r5, [sp, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000dd0:	2309      	movs	r3, #9
 8000dd2:	930d      	str	r3, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd4:	f8df b118 	ldr.w	fp, [pc, #280]	@ 8000ef0 <MX_GPIO_Init+0x2e4>
 8000dd8:	a909      	add	r1, sp, #36	@ 0x24
 8000dda:	4658      	mov	r0, fp
 8000ddc:	f001 f802 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000de0:	2304      	movs	r3, #4
 8000de2:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de4:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000de8:	a909      	add	r1, sp, #36	@ 0x24
 8000dea:	4658      	mov	r0, fp
 8000dec:	f000 fffa 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000df0:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000df4:	9309      	str	r3, [sp, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfa:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000dfe:	970d      	str	r7, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e00:	a909      	add	r1, sp, #36	@ 0x24
 8000e02:	4837      	ldr	r0, [pc, #220]	@ (8000ee0 <MX_GPIO_Init+0x2d4>)
 8000e04:	f000 ffee 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000e08:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000e0c:	9309      	str	r3, [sp, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e12:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e16:	970d      	str	r7, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e18:	a909      	add	r1, sp, #36	@ 0x24
 8000e1a:	4832      	ldr	r0, [pc, #200]	@ (8000ee4 <MX_GPIO_Init+0x2d8>)
 8000e1c:	f000 ffe2 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000e20:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000e24:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e2a:	950c      	str	r5, [sp, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e2c:	960d      	str	r6, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2e:	a909      	add	r1, sp, #36	@ 0x24
 8000e30:	4658      	mov	r0, fp
 8000e32:	f000 ffd7 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000e36:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8000e3a:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	940c      	str	r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000e42:	970d      	str	r7, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e44:	a909      	add	r1, sp, #36	@ 0x24
 8000e46:	4658      	mov	r0, fp
 8000e48:	f000 ffcc 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000e4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e50:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e52:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000e56:	a909      	add	r1, sp, #36	@ 0x24
 8000e58:	4658      	mov	r0, fp
 8000e5a:	f000 ffc3 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000e5e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000e62:	9309      	str	r3, [sp, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e68:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e6c:	970d      	str	r7, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e6e:	a909      	add	r1, sp, #36	@ 0x24
 8000e70:	481a      	ldr	r0, [pc, #104]	@ (8000edc <MX_GPIO_Init+0x2d0>)
 8000e72:	f000 ffb7 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000e76:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e7a:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7c:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000e80:	a909      	add	r1, sp, #36	@ 0x24
 8000e82:	4816      	ldr	r0, [pc, #88]	@ (8000edc <MX_GPIO_Init+0x2d0>)
 8000e84:	f000 ffae 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000e88:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000e8c:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8e:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e96:	a909      	add	r1, sp, #36	@ 0x24
 8000e98:	4810      	ldr	r0, [pc, #64]	@ (8000edc <MX_GPIO_Init+0x2d0>)
 8000e9a:	f000 ffa3 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000e9e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000ea2:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ea8:	950c      	str	r5, [sp, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000eaa:	960d      	str	r6, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eac:	a909      	add	r1, sp, #36	@ 0x24
 8000eae:	480c      	ldr	r0, [pc, #48]	@ (8000ee0 <MX_GPIO_Init+0x2d4>)
 8000eb0:	f000 ff98 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin;
 8000eb4:	23c0      	movs	r3, #192	@ 0xc0
 8000eb6:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ebc:	950c      	str	r5, [sp, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ebe:	960d      	str	r6, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec0:	a909      	add	r1, sp, #36	@ 0x24
 8000ec2:	4650      	mov	r0, sl
 8000ec4:	f000 ff8e 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000ec8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ecc:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ece:	2312      	movs	r3, #18
 8000ed0:	930a      	str	r3, [sp, #40]	@ 0x28
 8000ed2:	e00f      	b.n	8000ef4 <MX_GPIO_Init+0x2e8>
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40020000 	.word	0x40020000
 8000edc:	40020c00 	.word	0x40020c00
 8000ee0:	40021800 	.word	0x40021800
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40020800 	.word	0x40020800
 8000eec:	40021400 	.word	0x40021400
 8000ef0:	40020400 	.word	0x40020400
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef4:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	940c      	str	r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000efa:	2304      	movs	r3, #4
 8000efc:	930d      	str	r3, [sp, #52]	@ 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000efe:	a909      	add	r1, sp, #36	@ 0x24
 8000f00:	4650      	mov	r0, sl
 8000f02:	f000 ff6f 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000f06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f0a:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f0c:	2312      	movs	r3, #18
 8000f0e:	930a      	str	r3, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f10:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	940c      	str	r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f16:	2304      	movs	r3, #4
 8000f18:	930d      	str	r3, [sp, #52]	@ 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000f1a:	a909      	add	r1, sp, #36	@ 0x24
 8000f1c:	4823      	ldr	r0, [pc, #140]	@ (8000fac <MX_GPIO_Init+0x3a0>)
 8000f1e:	f000 ff61 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : R2_Pin */
  GPIO_InitStruct.Pin = R2_Pin;
 8000f22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f26:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	940c      	str	r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f2e:	960d      	str	r6, [sp, #52]	@ 0x34
  HAL_GPIO_Init(R2_GPIO_Port, &GPIO_InitStruct);
 8000f30:	a909      	add	r1, sp, #36	@ 0x24
 8000f32:	4650      	mov	r0, sl
 8000f34:	f000 ff56 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : G7_Pin */
  GPIO_InitStruct.Pin = G7_Pin;
 8000f38:	2308      	movs	r3, #8
 8000f3a:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f40:	950c      	str	r5, [sp, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f42:	960d      	str	r6, [sp, #52]	@ 0x34
  HAL_GPIO_Init(G7_GPIO_Port, &GPIO_InitStruct);
 8000f44:	a909      	add	r1, sp, #36	@ 0x24
 8000f46:	481a      	ldr	r0, [pc, #104]	@ (8000fb0 <MX_GPIO_Init+0x3a4>)
 8000f48:	f000 ff4c 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8000f4c:	2340      	movs	r3, #64	@ 0x40
 8000f4e:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f50:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	940c      	str	r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f56:	960d      	str	r6, [sp, #52]	@ 0x34
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8000f58:	a909      	add	r1, sp, #36	@ 0x24
 8000f5a:	4815      	ldr	r0, [pc, #84]	@ (8000fb0 <MX_GPIO_Init+0x3a4>)
 8000f5c:	f000 ff42 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000f60:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f64:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f6a:	950c      	str	r5, [sp, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000f6c:	2309      	movs	r3, #9
 8000f6e:	930d      	str	r3, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f70:	a909      	add	r1, sp, #36	@ 0x24
 8000f72:	4810      	ldr	r0, [pc, #64]	@ (8000fb4 <MX_GPIO_Init+0x3a8>)
 8000f74:	f000 ff36 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000f78:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000f7c:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7e:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f84:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f86:	a909      	add	r1, sp, #36	@ 0x24
 8000f88:	480a      	ldr	r0, [pc, #40]	@ (8000fb4 <MX_GPIO_Init+0x3a8>)
 8000f8a:	f000 ff2b 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000f8e:	2360      	movs	r3, #96	@ 0x60
 8000f90:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f96:	f8cd 8030 	str.w	r8, [sp, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f9a:	970d      	str	r7, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9c:	a909      	add	r1, sp, #36	@ 0x24
 8000f9e:	4658      	mov	r0, fp
 8000fa0:	f000 ff20 	bl	8001de4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fa4:	b00f      	add	sp, #60	@ 0x3c
 8000fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000faa:	bf00      	nop
 8000fac:	40020000 	.word	0x40020000
 8000fb0:	40020c00 	.word	0x40020c00
 8000fb4:	40021800 	.word	0x40021800

08000fb8 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fba:	e7fe      	b.n	8000fba <Error_Handler+0x2>

08000fbc <MX_USART1_UART_Init>:
{
 8000fbc:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8000fbe:	480a      	ldr	r0, [pc, #40]	@ (8000fe8 <MX_USART1_UART_Init+0x2c>)
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fec <MX_USART1_UART_Init+0x30>)
 8000fc2:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000fc4:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000fc8:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fce:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fd0:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fd2:	220c      	movs	r2, #12
 8000fd4:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fda:	f001 fad8 	bl	800258e <HAL_UART_Init>
 8000fde:	b900      	cbnz	r0, 8000fe2 <MX_USART1_UART_Init+0x26>
}
 8000fe0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000fe2:	f7ff ffe9 	bl	8000fb8 <Error_Handler>
 8000fe6:	bf00      	nop
 8000fe8:	20000394 	.word	0x20000394
 8000fec:	40011000 	.word	0x40011000

08000ff0 <MX_ADC1_Init>:
{
 8000ff0:	b500      	push	{lr}
 8000ff2:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	9302      	str	r3, [sp, #8]
 8000ffc:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 8000ffe:	481e      	ldr	r0, [pc, #120]	@ (8001078 <MX_ADC1_Init+0x88>)
 8001000:	4a1e      	ldr	r2, [pc, #120]	@ (800107c <MX_ADC1_Init+0x8c>)
 8001002:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001004:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001006:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001008:	2201      	movs	r2, #1
 800100a:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800100c:	7602      	strb	r2, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800100e:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001012:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001014:	491a      	ldr	r1, [pc, #104]	@ (8001080 <MX_ADC1_Init+0x90>)
 8001016:	6281      	str	r1, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001018:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 3;
 800101a:	2303      	movs	r3, #3
 800101c:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800101e:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001022:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001024:	f000 fb2a 	bl	800167c <HAL_ADC_Init>
 8001028:	b9f0      	cbnz	r0, 8001068 <MX_ADC1_Init+0x78>
  sConfig.Channel = ADC_CHANNEL_5;
 800102a:	2305      	movs	r3, #5
 800102c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 800102e:	2301      	movs	r3, #1
 8001030:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001032:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001034:	4669      	mov	r1, sp
 8001036:	4810      	ldr	r0, [pc, #64]	@ (8001078 <MX_ADC1_Init+0x88>)
 8001038:	f000 fc66 	bl	8001908 <HAL_ADC_ConfigChannel>
 800103c:	b9b0      	cbnz	r0, 800106c <MX_ADC1_Init+0x7c>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800103e:	4b11      	ldr	r3, [pc, #68]	@ (8001084 <MX_ADC1_Init+0x94>)
 8001040:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 8001042:	2302      	movs	r3, #2
 8001044:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001046:	4669      	mov	r1, sp
 8001048:	480b      	ldr	r0, [pc, #44]	@ (8001078 <MX_ADC1_Init+0x88>)
 800104a:	f000 fc5d 	bl	8001908 <HAL_ADC_ConfigChannel>
 800104e:	b978      	cbnz	r0, 8001070 <MX_ADC1_Init+0x80>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001050:	2311      	movs	r3, #17
 8001052:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 8001054:	2303      	movs	r3, #3
 8001056:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001058:	4669      	mov	r1, sp
 800105a:	4807      	ldr	r0, [pc, #28]	@ (8001078 <MX_ADC1_Init+0x88>)
 800105c:	f000 fc54 	bl	8001908 <HAL_ADC_ConfigChannel>
 8001060:	b940      	cbnz	r0, 8001074 <MX_ADC1_Init+0x84>
}
 8001062:	b005      	add	sp, #20
 8001064:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001068:	f7ff ffa6 	bl	8000fb8 <Error_Handler>
    Error_Handler();
 800106c:	f7ff ffa4 	bl	8000fb8 <Error_Handler>
    Error_Handler();
 8001070:	f7ff ffa2 	bl	8000fb8 <Error_Handler>
    Error_Handler();
 8001074:	f7ff ffa0 	bl	8000fb8 <Error_Handler>
 8001078:	20000484 	.word	0x20000484
 800107c:	40012000 	.word	0x40012000
 8001080:	0f000001 	.word	0x0f000001
 8001084:	10000012 	.word	0x10000012

08001088 <MX_TIM14_Init>:
{
 8001088:	b508      	push	{r3, lr}
  htim14.Instance = TIM14;
 800108a:	4809      	ldr	r0, [pc, #36]	@ (80010b0 <MX_TIM14_Init+0x28>)
 800108c:	4b09      	ldr	r3, [pc, #36]	@ (80010b4 <MX_TIM14_Init+0x2c>)
 800108e:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 47;
 8001090:	232f      	movs	r3, #47	@ 0x2f
 8001092:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001094:	2300      	movs	r3, #0
 8001096:	6083      	str	r3, [r0, #8]
  htim14.Init.Period = 999;
 8001098:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800109c:	60c2      	str	r2, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800109e:	6103      	str	r3, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80010a2:	f001 f93d 	bl	8002320 <HAL_TIM_Base_Init>
 80010a6:	b900      	cbnz	r0, 80010aa <MX_TIM14_Init+0x22>
}
 80010a8:	bd08      	pop	{r3, pc}
    Error_Handler();
 80010aa:	f7ff ff85 	bl	8000fb8 <Error_Handler>
 80010ae:	bf00      	nop
 80010b0:	200003dc 	.word	0x200003dc
 80010b4:	40002000 	.word	0x40002000

080010b8 <SystemClock_Config>:
{
 80010b8:	b508      	push	{r3, lr}
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80010ba:	4a35      	ldr	r2, [pc, #212]	@ (8001190 <SystemClock_Config+0xd8>)
 80010bc:	6813      	ldr	r3, [r2, #0]
 80010be:	f023 030f 	bic.w	r3, r3, #15
 80010c2:	f043 0303 	orr.w	r3, r3, #3
 80010c6:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80010c8:	4b31      	ldr	r3, [pc, #196]	@ (8001190 <SystemClock_Config+0xd8>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 030f 	and.w	r3, r3, #15
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 80010d0:	2b03      	cmp	r3, #3
 80010d2:	d1f9      	bne.n	80010c8 <SystemClock_Config+0x10>
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80010d4:	4a2f      	ldr	r2, [pc, #188]	@ (8001194 <SystemClock_Config+0xdc>)
 80010d6:	6813      	ldr	r3, [r2, #0]
 80010d8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80010dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010e0:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(PWR->CR, PWR_CR_ODEN);
 80010e2:	6813      	ldr	r3, [r2, #0]
 80010e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010e8:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80010ea:	f502 32e4 	add.w	r2, r2, #116736	@ 0x1c800
 80010ee:	6813      	ldr	r3, [r2, #0]
 80010f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010f4:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80010f6:	4b28      	ldr	r3, [pc, #160]	@ (8001198 <SystemClock_Config+0xe0>)
 80010f8:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_HSE_IsReady() != 1)
 80010fa:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80010fe:	d0fa      	beq.n	80010f6 <SystemClock_Config+0x3e>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8001100:	4b25      	ldr	r3, [pc, #148]	@ (8001198 <SystemClock_Config+0xe0>)
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	4925      	ldr	r1, [pc, #148]	@ (800119c <SystemClock_Config+0xe4>)
 8001106:	4011      	ands	r1, r2
 8001108:	4a25      	ldr	r2, [pc, #148]	@ (80011a0 <SystemClock_Config+0xe8>)
 800110a:	430a      	orrs	r2, r1
 800110c:	605a      	str	r2, [r3, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8001114:	605a      	str	r2, [r3, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800111c:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800111e:	4b1e      	ldr	r3, [pc, #120]	@ (8001198 <SystemClock_Config+0xe0>)
 8001120:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_PLL_IsReady() != 1)
 8001122:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001126:	d0fa      	beq.n	800111e <SystemClock_Config+0x66>
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8001128:	4b1a      	ldr	r3, [pc, #104]	@ (8001194 <SystemClock_Config+0xdc>)
 800112a:	685b      	ldr	r3, [r3, #4]
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 800112c:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8001130:	d0fa      	beq.n	8001128 <SystemClock_Config+0x70>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001132:	4b19      	ldr	r3, [pc, #100]	@ (8001198 <SystemClock_Config+0xe0>)
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800113a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8001142:	f442 52a0 	orr.w	r2, r2, #5120	@ 0x1400
 8001146:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800114e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001152:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001154:	689a      	ldr	r2, [r3, #8]
 8001156:	f022 0203 	bic.w	r2, r2, #3
 800115a:	f042 0202 	orr.w	r2, r2, #2
 800115e:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001160:	4b0d      	ldr	r3, [pc, #52]	@ (8001198 <SystemClock_Config+0xe0>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f003 030c 	and.w	r3, r3, #12
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001168:	2b08      	cmp	r3, #8
 800116a:	d1f9      	bne.n	8001160 <SystemClock_Config+0xa8>
  LL_SetSystemCoreClock(96000000);
 800116c:	480d      	ldr	r0, [pc, #52]	@ (80011a4 <SystemClock_Config+0xec>)
 800116e:	f001 fb97 	bl	80028a0 <LL_SetSystemCoreClock>
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001172:	2000      	movs	r0, #0
 8001174:	f000 f982 	bl	800147c <HAL_InitTick>
 8001178:	b938      	cbnz	r0, 800118a <SystemClock_Config+0xd2>
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 800117a:	4a07      	ldr	r2, [pc, #28]	@ (8001198 <SystemClock_Config+0xe0>)
 800117c:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8001180:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001184:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
}
 8001188:	bd08      	pop	{r3, pc}
    Error_Handler();
 800118a:	f7ff ff15 	bl	8000fb8 <Error_Handler>
 800118e:	bf00      	nop
 8001190:	40023c00 	.word	0x40023c00
 8001194:	40007000 	.word	0x40007000
 8001198:	40023800 	.word	0x40023800
 800119c:	ffbf8000 	.word	0xffbf8000
 80011a0:	00401804 	.word	0x00401804
 80011a4:	05b8d800 	.word	0x05b8d800

080011a8 <main>:
{
 80011a8:	b508      	push	{r3, lr}
  HAL_Init();
 80011aa:	f000 f98d 	bl	80014c8 <HAL_Init>
  SystemClock_Config();
 80011ae:	f7ff ff83 	bl	80010b8 <SystemClock_Config>
  MX_GPIO_Init();
 80011b2:	f7ff fd2b 	bl	8000c0c <MX_GPIO_Init>
  MX_DMA_Init();
 80011b6:	f7ff fd17 	bl	8000be8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80011ba:	f7ff feff 	bl	8000fbc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80011be:	f7ff ff17 	bl	8000ff0 <MX_ADC1_Init>
  MX_TIM14_Init();
 80011c2:	f7ff ff61 	bl	8001088 <MX_TIM14_Init>
  apInit();
 80011c6:	f7ff fa67 	bl	8000698 <apInit>
  apMain(); // 안에 while문이 있음.
 80011ca:	f7ff faa7 	bl	800071c <apMain>
  while (1)
 80011ce:	e7fe      	b.n	80011ce <main+0x26>

080011d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d0:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d2:	2100      	movs	r1, #0
 80011d4:	9100      	str	r1, [sp, #0]
 80011d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001204 <HAL_MspInit+0x34>)
 80011d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80011da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80011de:	645a      	str	r2, [r3, #68]	@ 0x44
 80011e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80011e2:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80011e6:	9200      	str	r2, [sp, #0]
 80011e8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	9101      	str	r1, [sp, #4]
 80011ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011ee:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80011f2:	641a      	str	r2, [r3, #64]	@ 0x40
 80011f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011fa:	9301      	str	r3, [sp, #4]
 80011fc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fe:	b002      	add	sp, #8
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800

08001208 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001208:	b530      	push	{r4, r5, lr}
 800120a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	2300      	movs	r3, #0
 800120e:	9303      	str	r3, [sp, #12]
 8001210:	9304      	str	r3, [sp, #16]
 8001212:	9305      	str	r3, [sp, #20]
 8001214:	9306      	str	r3, [sp, #24]
 8001216:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 8001218:	6802      	ldr	r2, [r0, #0]
 800121a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800121e:	f503 3390 	add.w	r3, r3, #73728	@ 0x12000
 8001222:	429a      	cmp	r2, r3
 8001224:	d001      	beq.n	800122a <HAL_ADC_MspInit+0x22>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001226:	b009      	add	sp, #36	@ 0x24
 8001228:	bd30      	pop	{r4, r5, pc}
 800122a:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 800122c:	2500      	movs	r5, #0
 800122e:	9501      	str	r5, [sp, #4]
 8001230:	f503 338c 	add.w	r3, r3, #71680	@ 0x11800
 8001234:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001236:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800123a:	645a      	str	r2, [r3, #68]	@ 0x44
 800123c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800123e:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8001242:	9201      	str	r2, [sp, #4]
 8001244:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	9502      	str	r5, [sp, #8]
 8001248:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800124a:	f042 0201 	orr.w	r2, r2, #1
 800124e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	9302      	str	r3, [sp, #8]
 8001258:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800125a:	2320      	movs	r3, #32
 800125c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800125e:	2303      	movs	r3, #3
 8001260:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001262:	a903      	add	r1, sp, #12
 8001264:	4810      	ldr	r0, [pc, #64]	@ (80012a8 <HAL_ADC_MspInit+0xa0>)
 8001266:	f000 fdbd 	bl	8001de4 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 800126a:	4810      	ldr	r0, [pc, #64]	@ (80012ac <HAL_ADC_MspInit+0xa4>)
 800126c:	4b10      	ldr	r3, [pc, #64]	@ (80012b0 <HAL_ADC_MspInit+0xa8>)
 800126e:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001270:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001272:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001274:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001276:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800127a:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800127c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001280:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001282:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001286:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001288:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800128c:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800128e:	6205      	str	r5, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001290:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001292:	f000 fd0b 	bl	8001cac <HAL_DMA_Init>
 8001296:	b918      	cbnz	r0, 80012a0 <HAL_ADC_MspInit+0x98>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001298:	4b04      	ldr	r3, [pc, #16]	@ (80012ac <HAL_ADC_MspInit+0xa4>)
 800129a:	63a3      	str	r3, [r4, #56]	@ 0x38
 800129c:	639c      	str	r4, [r3, #56]	@ 0x38
}
 800129e:	e7c2      	b.n	8001226 <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 80012a0:	f7ff fe8a 	bl	8000fb8 <Error_Handler>
 80012a4:	e7f8      	b.n	8001298 <HAL_ADC_MspInit+0x90>
 80012a6:	bf00      	nop
 80012a8:	40020000 	.word	0x40020000
 80012ac:	20000424 	.word	0x20000424
 80012b0:	40026410 	.word	0x40026410

080012b4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM14)
 80012b4:	6802      	ldr	r2, [r0, #0]
 80012b6:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <HAL_TIM_Base_MspInit+0x3c>)
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d000      	beq.n	80012be <HAL_TIM_Base_MspInit+0xa>
 80012bc:	4770      	bx	lr
{
 80012be:	b500      	push	{lr}
 80012c0:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80012c2:	2200      	movs	r2, #0
 80012c4:	9201      	str	r2, [sp, #4]
 80012c6:	f503 3306 	add.w	r3, r3, #137216	@ 0x21800
 80012ca:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80012cc:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 80012d0:	6419      	str	r1, [r3, #64]	@ 0x40
 80012d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012d8:	9301      	str	r3, [sp, #4]
 80012da:	9b01      	ldr	r3, [sp, #4]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 15, 0);
 80012dc:	210f      	movs	r1, #15
 80012de:	202d      	movs	r0, #45	@ 0x2d
 80012e0:	f000 fc3c 	bl	8001b5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80012e4:	202d      	movs	r0, #45	@ 0x2d
 80012e6:	f000 fc49 	bl	8001b7c <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM14_MspInit 1 */

  }

}
 80012ea:	b003      	add	sp, #12
 80012ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80012f0:	40002000 	.word	0x40002000

080012f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f4:	b530      	push	{r4, r5, lr}
 80012f6:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	2300      	movs	r3, #0
 80012fa:	9303      	str	r3, [sp, #12]
 80012fc:	9304      	str	r3, [sp, #16]
 80012fe:	9305      	str	r3, [sp, #20]
 8001300:	9306      	str	r3, [sp, #24]
 8001302:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8001304:	6802      	ldr	r2, [r0, #0]
 8001306:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800130a:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 800130e:	429a      	cmp	r2, r3
 8001310:	d001      	beq.n	8001316 <HAL_UART_MspInit+0x22>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001312:	b009      	add	sp, #36	@ 0x24
 8001314:	bd30      	pop	{r4, r5, pc}
 8001316:	4604      	mov	r4, r0
    __HAL_RCC_USART1_CLK_ENABLE();
 8001318:	2500      	movs	r5, #0
 800131a:	9501      	str	r5, [sp, #4]
 800131c:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8001320:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001322:	f042 0210 	orr.w	r2, r2, #16
 8001326:	645a      	str	r2, [r3, #68]	@ 0x44
 8001328:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800132a:	f002 0210 	and.w	r2, r2, #16
 800132e:	9201      	str	r2, [sp, #4]
 8001330:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	9502      	str	r5, [sp, #8]
 8001334:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001336:	f042 0201 	orr.w	r2, r2, #1
 800133a:	631a      	str	r2, [r3, #48]	@ 0x30
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	9302      	str	r3, [sp, #8]
 8001344:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001346:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800134a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001350:	2303      	movs	r3, #3
 8001352:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001354:	2307      	movs	r3, #7
 8001356:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001358:	a903      	add	r1, sp, #12
 800135a:	480f      	ldr	r0, [pc, #60]	@ (8001398 <HAL_UART_MspInit+0xa4>)
 800135c:	f000 fd42 	bl	8001de4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001360:	480e      	ldr	r0, [pc, #56]	@ (800139c <HAL_UART_MspInit+0xa8>)
 8001362:	4b0f      	ldr	r3, [pc, #60]	@ (80013a0 <HAL_UART_MspInit+0xac>)
 8001364:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001366:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800136a:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800136c:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800136e:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001370:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001374:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001376:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001378:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800137a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800137e:	61c3      	str	r3, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001380:	6205      	str	r5, [r0, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001382:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001384:	f000 fc92 	bl	8001cac <HAL_DMA_Init>
 8001388:	b918      	cbnz	r0, 8001392 <HAL_UART_MspInit+0x9e>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800138a:	4b04      	ldr	r3, [pc, #16]	@ (800139c <HAL_UART_MspInit+0xa8>)
 800138c:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800138e:	639c      	str	r4, [r3, #56]	@ 0x38
}
 8001390:	e7bf      	b.n	8001312 <HAL_UART_MspInit+0x1e>
      Error_Handler();
 8001392:	f7ff fe11 	bl	8000fb8 <Error_Handler>
 8001396:	e7f8      	b.n	800138a <HAL_UART_MspInit+0x96>
 8001398:	40020000 	.word	0x40020000
 800139c:	20000334 	.word	0x20000334
 80013a0:	40026440 	.word	0x40026440

080013a4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013a4:	e7fe      	b.n	80013a4 <NMI_Handler>

080013a6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a6:	e7fe      	b.n	80013a6 <HardFault_Handler>

080013a8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <MemManage_Handler>

080013aa <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013aa:	e7fe      	b.n	80013aa <BusFault_Handler>

080013ac <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <UsageFault_Handler>

080013ae <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ae:	4770      	bx	lr

080013b0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b0:	4770      	bx	lr

080013b2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b2:	4770      	bx	lr

080013b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013b6:	f000 f8a1 	bl	80014fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ba:	bd08      	pop	{r3, pc}

080013bc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80013bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80013be:	4802      	ldr	r0, [pc, #8]	@ (80013c8 <TIM8_TRG_COM_TIM14_IRQHandler+0xc>)
 80013c0:	f000 fe92 	bl	80020e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80013c4:	bd08      	pop	{r3, pc}
 80013c6:	bf00      	nop
 80013c8:	200003dc 	.word	0x200003dc

080013cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013cc:	b510      	push	{r4, lr}
 80013ce:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001404 <_sbrk+0x38>)
 80013d2:	490d      	ldr	r1, [pc, #52]	@ (8001408 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d4:	480d      	ldr	r0, [pc, #52]	@ (800140c <_sbrk+0x40>)
 80013d6:	6800      	ldr	r0, [r0, #0]
 80013d8:	b140      	cbz	r0, 80013ec <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013da:	480c      	ldr	r0, [pc, #48]	@ (800140c <_sbrk+0x40>)
 80013dc:	6800      	ldr	r0, [r0, #0]
 80013de:	4403      	add	r3, r0
 80013e0:	1a52      	subs	r2, r2, r1
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d806      	bhi.n	80013f4 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80013e6:	4a09      	ldr	r2, [pc, #36]	@ (800140c <_sbrk+0x40>)
 80013e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80013ea:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80013ec:	4807      	ldr	r0, [pc, #28]	@ (800140c <_sbrk+0x40>)
 80013ee:	4c08      	ldr	r4, [pc, #32]	@ (8001410 <_sbrk+0x44>)
 80013f0:	6004      	str	r4, [r0, #0]
 80013f2:	e7f2      	b.n	80013da <_sbrk+0xe>
    errno = ENOMEM;
 80013f4:	f001 fb4a 	bl	8002a8c <__errno>
 80013f8:	230c      	movs	r3, #12
 80013fa:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	e7f3      	b.n	80013ea <_sbrk+0x1e>
 8001402:	bf00      	nop
 8001404:	20030000 	.word	0x20030000
 8001408:	00000400 	.word	0x00000400
 800140c:	200004cc 	.word	0x200004cc
 8001410:	20000620 	.word	0x20000620

08001414 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001414:	4a03      	ldr	r2, [pc, #12]	@ (8001424 <SystemInit+0x10>)
 8001416:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800141a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800141e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001422:	4770      	bx	lr
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001428:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001460 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800142c:	f7ff fff2 	bl	8001414 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001430:	480c      	ldr	r0, [pc, #48]	@ (8001464 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001432:	490d      	ldr	r1, [pc, #52]	@ (8001468 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001434:	4a0d      	ldr	r2, [pc, #52]	@ (800146c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001438:	e002      	b.n	8001440 <LoopCopyDataInit>

0800143a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800143a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800143c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143e:	3304      	adds	r3, #4

08001440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001444:	d3f9      	bcc.n	800143a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001446:	4a0a      	ldr	r2, [pc, #40]	@ (8001470 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001448:	4c0a      	ldr	r4, [pc, #40]	@ (8001474 <LoopFillZerobss+0x22>)
  movs r3, #0
 800144a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800144c:	e001      	b.n	8001452 <LoopFillZerobss>

0800144e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001450:	3204      	adds	r2, #4

08001452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001454:	d3fb      	bcc.n	800144e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001456:	f001 fb1f 	bl	8002a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800145a:	f7ff fea5 	bl	80011a8 <main>
  bx  lr    
 800145e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001460:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001468:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800146c:	080035b8 	.word	0x080035b8
  ldr r2, =_sbss
 8001470:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001474:	2000061c 	.word	0x2000061c

08001478 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001478:	e7fe      	b.n	8001478 <ADC_IRQHandler>
	...

0800147c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800147c:	b510      	push	{r4, lr}
 800147e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001480:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <HAL_InitTick+0x40>)
 8001482:	781a      	ldrb	r2, [r3, #0]
 8001484:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001488:	fbb3 f3f2 	udiv	r3, r3, r2
 800148c:	4a0c      	ldr	r2, [pc, #48]	@ (80014c0 <HAL_InitTick+0x44>)
 800148e:	6810      	ldr	r0, [r2, #0]
 8001490:	fbb0 f0f3 	udiv	r0, r0, r3
 8001494:	f000 fb76 	bl	8001b84 <HAL_SYSTICK_Config>
 8001498:	b968      	cbnz	r0, 80014b6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149a:	2c0f      	cmp	r4, #15
 800149c:	d901      	bls.n	80014a2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800149e:	2001      	movs	r0, #1
 80014a0:	e00a      	b.n	80014b8 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a2:	2200      	movs	r2, #0
 80014a4:	4621      	mov	r1, r4
 80014a6:	f04f 30ff 	mov.w	r0, #4294967295
 80014aa:	f000 fb57 	bl	8001b5c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014ae:	4b05      	ldr	r3, [pc, #20]	@ (80014c4 <HAL_InitTick+0x48>)
 80014b0:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80014b2:	2000      	movs	r0, #0
 80014b4:	e000      	b.n	80014b8 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80014b6:	2001      	movs	r0, #1
}
 80014b8:	bd10      	pop	{r4, pc}
 80014ba:	bf00      	nop
 80014bc:	20000004 	.word	0x20000004
 80014c0:	20000000 	.word	0x20000000
 80014c4:	20000008 	.word	0x20000008

080014c8 <HAL_Init>:
{
 80014c8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014ca:	4b0b      	ldr	r3, [pc, #44]	@ (80014f8 <HAL_Init+0x30>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014d2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80014da:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80014e2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e4:	2003      	movs	r0, #3
 80014e6:	f000 fb27 	bl	8001b38 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ea:	2000      	movs	r0, #0
 80014ec:	f7ff ffc6 	bl	800147c <HAL_InitTick>
  HAL_MspInit();
 80014f0:	f7ff fe6e 	bl	80011d0 <HAL_MspInit>
}
 80014f4:	2000      	movs	r0, #0
 80014f6:	bd08      	pop	{r3, pc}
 80014f8:	40023c00 	.word	0x40023c00

080014fc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80014fc:	4a03      	ldr	r2, [pc, #12]	@ (800150c <HAL_IncTick+0x10>)
 80014fe:	6811      	ldr	r1, [r2, #0]
 8001500:	4b03      	ldr	r3, [pc, #12]	@ (8001510 <HAL_IncTick+0x14>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	440b      	add	r3, r1
 8001506:	6013      	str	r3, [r2, #0]
}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	200004d0 	.word	0x200004d0
 8001510:	20000004 	.word	0x20000004

08001514 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001514:	4b01      	ldr	r3, [pc, #4]	@ (800151c <HAL_GetTick+0x8>)
 8001516:	6818      	ldr	r0, [r3, #0]
}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	200004d0 	.word	0x200004d0

08001520 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001520:	b538      	push	{r3, r4, r5, lr}
 8001522:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001524:	f7ff fff6 	bl	8001514 <HAL_GetTick>
 8001528:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800152a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800152e:	d002      	beq.n	8001536 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001530:	4b04      	ldr	r3, [pc, #16]	@ (8001544 <HAL_Delay+0x24>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001536:	f7ff ffed 	bl	8001514 <HAL_GetTick>
 800153a:	1b40      	subs	r0, r0, r5
 800153c:	42a0      	cmp	r0, r4
 800153e:	d3fa      	bcc.n	8001536 <HAL_Delay+0x16>
  {
  }
}
 8001540:	bd38      	pop	{r3, r4, r5, pc}
 8001542:	bf00      	nop
 8001544:	20000004 	.word	0x20000004

08001548 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001548:	4b4a      	ldr	r3, [pc, #296]	@ (8001674 <ADC_Init+0x12c>)
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8001550:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	6841      	ldr	r1, [r0, #4]
 8001556:	430a      	orrs	r2, r1
 8001558:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800155a:	6802      	ldr	r2, [r0, #0]
 800155c:	6853      	ldr	r3, [r2, #4]
 800155e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001562:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001564:	6802      	ldr	r2, [r0, #0]
 8001566:	6853      	ldr	r3, [r2, #4]
 8001568:	6901      	ldr	r1, [r0, #16]
 800156a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800156e:	6053      	str	r3, [r2, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001570:	6802      	ldr	r2, [r0, #0]
 8001572:	6853      	ldr	r3, [r2, #4]
 8001574:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8001578:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800157a:	6802      	ldr	r2, [r0, #0]
 800157c:	6853      	ldr	r3, [r2, #4]
 800157e:	6881      	ldr	r1, [r0, #8]
 8001580:	430b      	orrs	r3, r1
 8001582:	6053      	str	r3, [r2, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001584:	6802      	ldr	r2, [r0, #0]
 8001586:	6893      	ldr	r3, [r2, #8]
 8001588:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800158c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800158e:	6802      	ldr	r2, [r0, #0]
 8001590:	6893      	ldr	r3, [r2, #8]
 8001592:	68c1      	ldr	r1, [r0, #12]
 8001594:	430b      	orrs	r3, r1
 8001596:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001598:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800159a:	4b37      	ldr	r3, [pc, #220]	@ (8001678 <ADC_Init+0x130>)
 800159c:	429a      	cmp	r2, r3
 800159e:	d057      	beq.n	8001650 <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015a0:	6802      	ldr	r2, [r0, #0]
 80015a2:	6893      	ldr	r3, [r2, #8]
 80015a4:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80015a8:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015aa:	6802      	ldr	r2, [r0, #0]
 80015ac:	6893      	ldr	r3, [r2, #8]
 80015ae:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80015b0:	430b      	orrs	r3, r1
 80015b2:	6093      	str	r3, [r2, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015b4:	6802      	ldr	r2, [r0, #0]
 80015b6:	6893      	ldr	r3, [r2, #8]
 80015b8:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80015bc:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015be:	6802      	ldr	r2, [r0, #0]
 80015c0:	6893      	ldr	r3, [r2, #8]
 80015c2:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80015c4:	430b      	orrs	r3, r1
 80015c6:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015c8:	6802      	ldr	r2, [r0, #0]
 80015ca:	6893      	ldr	r3, [r2, #8]
 80015cc:	f023 0302 	bic.w	r3, r3, #2
 80015d0:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015d2:	6802      	ldr	r2, [r0, #0]
 80015d4:	6893      	ldr	r3, [r2, #8]
 80015d6:	7e01      	ldrb	r1, [r0, #24]
 80015d8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80015dc:	6093      	str	r3, [r2, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80015de:	f890 3020 	ldrb.w	r3, [r0, #32]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d03f      	beq.n	8001666 <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015e6:	6802      	ldr	r2, [r0, #0]
 80015e8:	6853      	ldr	r3, [r2, #4]
 80015ea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015ee:	6053      	str	r3, [r2, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015f0:	6802      	ldr	r2, [r0, #0]
 80015f2:	6853      	ldr	r3, [r2, #4]
 80015f4:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80015f8:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015fa:	6801      	ldr	r1, [r0, #0]
 80015fc:	684b      	ldr	r3, [r1, #4]
 80015fe:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8001600:	3a01      	subs	r2, #1
 8001602:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001606:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001608:	6802      	ldr	r2, [r0, #0]
 800160a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800160c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8001610:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001612:	6801      	ldr	r1, [r0, #0]
 8001614:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8001616:	69c2      	ldr	r2, [r0, #28]
 8001618:	3a01      	subs	r2, #1
 800161a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800161e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001620:	6802      	ldr	r2, [r0, #0]
 8001622:	6893      	ldr	r3, [r2, #8]
 8001624:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001628:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800162a:	6802      	ldr	r2, [r0, #0]
 800162c:	6893      	ldr	r3, [r2, #8]
 800162e:	f890 1030 	ldrb.w	r1, [r0, #48]	@ 0x30
 8001632:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8001636:	6093      	str	r3, [r2, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001638:	6802      	ldr	r2, [r0, #0]
 800163a:	6893      	ldr	r3, [r2, #8]
 800163c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001640:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001642:	6802      	ldr	r2, [r0, #0]
 8001644:	6893      	ldr	r3, [r2, #8]
 8001646:	6941      	ldr	r1, [r0, #20]
 8001648:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800164c:	6093      	str	r3, [r2, #8]
}
 800164e:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001650:	6802      	ldr	r2, [r0, #0]
 8001652:	6893      	ldr	r3, [r2, #8]
 8001654:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001658:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800165a:	6802      	ldr	r2, [r0, #0]
 800165c:	6893      	ldr	r3, [r2, #8]
 800165e:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8001662:	6093      	str	r3, [r2, #8]
 8001664:	e7b0      	b.n	80015c8 <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001666:	6802      	ldr	r2, [r0, #0]
 8001668:	6853      	ldr	r3, [r2, #4]
 800166a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800166e:	6053      	str	r3, [r2, #4]
 8001670:	e7ca      	b.n	8001608 <ADC_Init+0xc0>
 8001672:	bf00      	nop
 8001674:	40012300 	.word	0x40012300
 8001678:	0f000001 	.word	0x0f000001

0800167c <HAL_ADC_Init>:
  if (hadc == NULL)
 800167c:	b338      	cbz	r0, 80016ce <HAL_ADC_Init+0x52>
{
 800167e:	b510      	push	{r4, lr}
 8001680:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001682:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001684:	b143      	cbz	r3, 8001698 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001686:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001688:	f013 0f10 	tst.w	r3, #16
 800168c:	d00b      	beq.n	80016a6 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 800168e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001690:	2300      	movs	r3, #0
 8001692:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001696:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8001698:	f7ff fdb6 	bl	8001208 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800169c:	2300      	movs	r3, #0
 800169e:	6463      	str	r3, [r4, #68]	@ 0x44
    hadc->Lock = HAL_UNLOCKED;
 80016a0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 80016a4:	e7ef      	b.n	8001686 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 80016a6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80016a8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80016ac:	f023 0302 	bic.w	r3, r3, #2
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	6423      	str	r3, [r4, #64]	@ 0x40
    ADC_Init(hadc);
 80016b6:	4620      	mov	r0, r4
 80016b8:	f7ff ff46 	bl	8001548 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 80016bc:	2000      	movs	r0, #0
 80016be:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80016c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80016c2:	f023 0303 	bic.w	r3, r3, #3
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	6423      	str	r3, [r4, #64]	@ 0x40
 80016cc:	e7e0      	b.n	8001690 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 80016ce:	2001      	movs	r0, #1
}
 80016d0:	4770      	bx	lr
	...

080016d4 <HAL_ADC_Start_DMA>:
{
 80016d4:	b510      	push	{r4, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 80016da:	2200      	movs	r2, #0
 80016dc:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80016de:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80016e2:	2a01      	cmp	r2, #1
 80016e4:	f000 80ae 	beq.w	8001844 <HAL_ADC_Start_DMA+0x170>
 80016e8:	4604      	mov	r4, r0
 80016ea:	2201      	movs	r2, #1
 80016ec:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80016f0:	6802      	ldr	r2, [r0, #0]
 80016f2:	6890      	ldr	r0, [r2, #8]
 80016f4:	f010 0f01 	tst.w	r0, #1
 80016f8:	d113      	bne.n	8001722 <HAL_ADC_Start_DMA+0x4e>
    __HAL_ADC_ENABLE(hadc);
 80016fa:	6890      	ldr	r0, [r2, #8]
 80016fc:	f040 0001 	orr.w	r0, r0, #1
 8001700:	6090      	str	r0, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001702:	4a53      	ldr	r2, [pc, #332]	@ (8001850 <HAL_ADC_Start_DMA+0x17c>)
 8001704:	6810      	ldr	r0, [r2, #0]
 8001706:	4a53      	ldr	r2, [pc, #332]	@ (8001854 <HAL_ADC_Start_DMA+0x180>)
 8001708:	fba2 2000 	umull	r2, r0, r2, r0
 800170c:	0c80      	lsrs	r0, r0, #18
 800170e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001712:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 8001714:	e002      	b.n	800171c <HAL_ADC_Start_DMA+0x48>
      counter--;
 8001716:	9801      	ldr	r0, [sp, #4]
 8001718:	3801      	subs	r0, #1
 800171a:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 800171c:	9801      	ldr	r0, [sp, #4]
 800171e:	2800      	cmp	r0, #0
 8001720:	d1f9      	bne.n	8001716 <HAL_ADC_Start_DMA+0x42>
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001722:	6822      	ldr	r2, [r4, #0]
 8001724:	6890      	ldr	r0, [r2, #8]
 8001726:	f410 7f80 	tst.w	r0, #256	@ 0x100
 800172a:	d003      	beq.n	8001734 <HAL_ADC_Start_DMA+0x60>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800172c:	6890      	ldr	r0, [r2, #8]
 800172e:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 8001732:	6090      	str	r0, [r2, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001734:	6822      	ldr	r2, [r4, #0]
 8001736:	6890      	ldr	r0, [r2, #8]
 8001738:	f010 0f01 	tst.w	r0, #1
 800173c:	d077      	beq.n	800182e <HAL_ADC_Start_DMA+0x15a>
    ADC_STATE_CLR_SET(hadc->State,
 800173e:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8001740:	f420 60e0 	bic.w	r0, r0, #1792	@ 0x700
 8001744:	f020 0001 	bic.w	r0, r0, #1
 8001748:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 800174c:	6420      	str	r0, [r4, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800174e:	6852      	ldr	r2, [r2, #4]
 8001750:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001754:	d005      	beq.n	8001762 <HAL_ADC_Start_DMA+0x8e>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001756:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001758:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800175c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001760:	6422      	str	r2, [r4, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001762:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001764:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 8001768:	d036      	beq.n	80017d8 <HAL_ADC_Start_DMA+0x104>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800176a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800176c:	f022 0206 	bic.w	r2, r2, #6
 8001770:	6462      	str	r2, [r4, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 8001772:	2200      	movs	r2, #0
 8001774:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001778:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800177a:	4837      	ldr	r0, [pc, #220]	@ (8001858 <HAL_ADC_Start_DMA+0x184>)
 800177c:	63d0      	str	r0, [r2, #60]	@ 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800177e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001780:	4836      	ldr	r0, [pc, #216]	@ (800185c <HAL_ADC_Start_DMA+0x188>)
 8001782:	6410      	str	r0, [r2, #64]	@ 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001784:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001786:	4836      	ldr	r0, [pc, #216]	@ (8001860 <HAL_ADC_Start_DMA+0x18c>)
 8001788:	64d0      	str	r0, [r2, #76]	@ 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800178a:	6822      	ldr	r2, [r4, #0]
 800178c:	f06f 0022 	mvn.w	r0, #34	@ 0x22
 8001790:	6010      	str	r0, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001792:	6820      	ldr	r0, [r4, #0]
 8001794:	6842      	ldr	r2, [r0, #4]
 8001796:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800179a:	6042      	str	r2, [r0, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800179c:	6820      	ldr	r0, [r4, #0]
 800179e:	6882      	ldr	r2, [r0, #8]
 80017a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80017a4:	6082      	str	r2, [r0, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80017a6:	6820      	ldr	r0, [r4, #0]
 80017a8:	460a      	mov	r2, r1
 80017aa:	f100 014c 	add.w	r1, r0, #76	@ 0x4c
 80017ae:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80017b0:	f000 fae2 	bl	8001d78 <HAL_DMA_Start_IT>
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80017b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001864 <HAL_ADC_Start_DMA+0x190>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f013 0f1f 	tst.w	r3, #31
 80017bc:	d127      	bne.n	800180e <HAL_ADC_Start_DMA+0x13a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80017be:	6823      	ldr	r3, [r4, #0]
 80017c0:	4a29      	ldr	r2, [pc, #164]	@ (8001868 <HAL_ADC_Start_DMA+0x194>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d011      	beq.n	80017ea <HAL_ADC_Start_DMA+0x116>
 80017c6:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d007      	beq.n	80017de <HAL_ADC_Start_DMA+0x10a>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80017ce:	4a27      	ldr	r2, [pc, #156]	@ (800186c <HAL_ADC_Start_DMA+0x198>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d014      	beq.n	80017fe <HAL_ADC_Start_DMA+0x12a>
  return HAL_OK;
 80017d4:	2000      	movs	r0, #0
 80017d6:	e033      	b.n	8001840 <HAL_ADC_Start_DMA+0x16c>
      ADC_CLEAR_ERRORCODE(hadc);
 80017d8:	2200      	movs	r2, #0
 80017da:	6462      	str	r2, [r4, #68]	@ 0x44
 80017dc:	e7c9      	b.n	8001772 <HAL_ADC_Start_DMA+0x9e>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80017de:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 80017e2:	6852      	ldr	r2, [r2, #4]
 80017e4:	f012 0f1f 	tst.w	r2, #31
 80017e8:	d1f1      	bne.n	80017ce <HAL_ADC_Start_DMA+0xfa>
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 80017f0:	d12a      	bne.n	8001848 <HAL_ADC_Start_DMA+0x174>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80017f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80017fa:	2000      	movs	r0, #0
 80017fc:	e020      	b.n	8001840 <HAL_ADC_Start_DMA+0x16c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80017fe:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8001802:	6852      	ldr	r2, [r2, #4]
 8001804:	f012 0f10 	tst.w	r2, #16
 8001808:	d0ef      	beq.n	80017ea <HAL_ADC_Start_DMA+0x116>
  return HAL_OK;
 800180a:	2000      	movs	r0, #0
 800180c:	e018      	b.n	8001840 <HAL_ADC_Start_DMA+0x16c>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800180e:	6823      	ldr	r3, [r4, #0]
 8001810:	4a15      	ldr	r2, [pc, #84]	@ (8001868 <HAL_ADC_Start_DMA+0x194>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d001      	beq.n	800181a <HAL_ADC_Start_DMA+0x146>
  return HAL_OK;
 8001816:	2000      	movs	r0, #0
 8001818:	e012      	b.n	8001840 <HAL_ADC_Start_DMA+0x16c>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001820:	d114      	bne.n	800184c <HAL_ADC_Start_DMA+0x178>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001828:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800182a:	2000      	movs	r0, #0
 800182c:	e008      	b.n	8001840 <HAL_ADC_Start_DMA+0x16c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800182e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001830:	f043 0310 	orr.w	r3, r3, #16
 8001834:	6423      	str	r3, [r4, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001836:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6463      	str	r3, [r4, #68]	@ 0x44
  return HAL_OK;
 800183e:	2000      	movs	r0, #0
}
 8001840:	b002      	add	sp, #8
 8001842:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8001844:	2002      	movs	r0, #2
 8001846:	e7fb      	b.n	8001840 <HAL_ADC_Start_DMA+0x16c>
  return HAL_OK;
 8001848:	2000      	movs	r0, #0
 800184a:	e7f9      	b.n	8001840 <HAL_ADC_Start_DMA+0x16c>
 800184c:	2000      	movs	r0, #0
 800184e:	e7f7      	b.n	8001840 <HAL_ADC_Start_DMA+0x16c>
 8001850:	20000000 	.word	0x20000000
 8001854:	431bde83 	.word	0x431bde83
 8001858:	08001897 	.word	0x08001897
 800185c:	08001875 	.word	0x08001875
 8001860:	08001881 	.word	0x08001881
 8001864:	40012300 	.word	0x40012300
 8001868:	40012000 	.word	0x40012000
 800186c:	40012200 	.word	0x40012200

08001870 <HAL_ADC_ConvCpltCallback>:
}
 8001870:	4770      	bx	lr

08001872 <HAL_ADC_ConvHalfCpltCallback>:
}
 8001872:	4770      	bx	lr

08001874 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001874:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001876:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8001878:	f7ff fffb 	bl	8001872 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800187c:	bd08      	pop	{r3, pc}

0800187e <HAL_ADC_ErrorCallback>:
}
 800187e:	4770      	bx	lr

08001880 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001880:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001882:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001884:	2340      	movs	r3, #64	@ 0x40
 8001886:	6403      	str	r3, [r0, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001888:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800188a:	f043 0304 	orr.w	r3, r3, #4
 800188e:	6443      	str	r3, [r0, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001890:	f7ff fff5 	bl	800187e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001894:	bd08      	pop	{r3, pc}

08001896 <ADC_DMAConvCplt>:
{
 8001896:	b508      	push	{r3, lr}
 8001898:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800189a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800189c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800189e:	f012 0f50 	tst.w	r2, #80	@ 0x50
 80018a2:	d125      	bne.n	80018f0 <ADC_DMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018a4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80018a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018aa:	6403      	str	r3, [r0, #64]	@ 0x40
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018ac:	6803      	ldr	r3, [r0, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 80018b4:	d119      	bne.n	80018ea <ADC_DMAConvCplt+0x54>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018b6:	7e02      	ldrb	r2, [r0, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018b8:	b9ba      	cbnz	r2, 80018ea <ADC_DMAConvCplt+0x54>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80018ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018bc:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 80018c0:	d003      	beq.n	80018ca <ADC_DMAConvCplt+0x34>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80018c2:	689a      	ldr	r2, [r3, #8]
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80018c4:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80018c8:	d10f      	bne.n	80018ea <ADC_DMAConvCplt+0x54>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	f022 0220 	bic.w	r2, r2, #32
 80018d0:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80018d2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80018d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80018d8:	6403      	str	r3, [r0, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018da:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80018dc:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 80018e0:	d103      	bne.n	80018ea <ADC_DMAConvCplt+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018e2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6403      	str	r3, [r0, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80018ea:	f7ff ffc1 	bl	8001870 <HAL_ADC_ConvCpltCallback>
}
 80018ee:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80018f0:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80018f2:	f012 0f10 	tst.w	r2, #16
 80018f6:	d104      	bne.n	8001902 <ADC_DMAConvCplt+0x6c>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80018f8:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 80018fa:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80018fc:	4618      	mov	r0, r3
 80018fe:	4790      	blx	r2
}
 8001900:	e7f5      	b.n	80018ee <ADC_DMAConvCplt+0x58>
      HAL_ADC_ErrorCallback(hadc);
 8001902:	f7ff ffbc 	bl	800187e <HAL_ADC_ErrorCallback>
 8001906:	e7f2      	b.n	80018ee <ADC_DMAConvCplt+0x58>

08001908 <HAL_ADC_ConfigChannel>:
{
 8001908:	b430      	push	{r4, r5}
 800190a:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 800190c:	2200      	movs	r2, #0
 800190e:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001910:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8001914:	2a01      	cmp	r2, #1
 8001916:	f000 80c0 	beq.w	8001a9a <HAL_ADC_ConfigChannel+0x192>
 800191a:	4603      	mov	r3, r0
 800191c:	2201      	movs	r2, #1
 800191e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001922:	680a      	ldr	r2, [r1, #0]
 8001924:	2a09      	cmp	r2, #9
 8001926:	d940      	bls.n	80019aa <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001928:	6804      	ldr	r4, [r0, #0]
 800192a:	68e0      	ldr	r0, [r4, #12]
 800192c:	b292      	uxth	r2, r2
 800192e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001932:	3a1e      	subs	r2, #30
 8001934:	f04f 0c07 	mov.w	ip, #7
 8001938:	fa0c f202 	lsl.w	r2, ip, r2
 800193c:	ea20 0202 	bic.w	r2, r0, r2
 8001940:	60e2      	str	r2, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001942:	681c      	ldr	r4, [r3, #0]
 8001944:	68e0      	ldr	r0, [r4, #12]
 8001946:	880a      	ldrh	r2, [r1, #0]
 8001948:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800194c:	3a1e      	subs	r2, #30
 800194e:	688d      	ldr	r5, [r1, #8]
 8001950:	fa05 f202 	lsl.w	r2, r5, r2
 8001954:	4302      	orrs	r2, r0
 8001956:	60e2      	str	r2, [r4, #12]
  if (sConfig->Rank < 7U)
 8001958:	684a      	ldr	r2, [r1, #4]
 800195a:	2a06      	cmp	r2, #6
 800195c:	d83c      	bhi.n	80019d8 <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800195e:	681c      	ldr	r4, [r3, #0]
 8001960:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8001962:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001966:	3a05      	subs	r2, #5
 8001968:	f04f 0c1f 	mov.w	ip, #31
 800196c:	fa0c f202 	lsl.w	r2, ip, r2
 8001970:	ea20 0202 	bic.w	r2, r0, r2
 8001974:	6362      	str	r2, [r4, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001976:	681c      	ldr	r4, [r3, #0]
 8001978:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800197a:	684a      	ldr	r2, [r1, #4]
 800197c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001980:	3a05      	subs	r2, #5
 8001982:	f8b1 c000 	ldrh.w	ip, [r1]
 8001986:	fa0c f202 	lsl.w	r2, ip, r2
 800198a:	4302      	orrs	r2, r0
 800198c:	6362      	str	r2, [r4, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800198e:	6818      	ldr	r0, [r3, #0]
 8001990:	4a43      	ldr	r2, [pc, #268]	@ (8001aa0 <HAL_ADC_ConfigChannel+0x198>)
 8001992:	4290      	cmp	r0, r2
 8001994:	d050      	beq.n	8001a38 <HAL_ADC_ConfigChannel+0x130>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001996:	6818      	ldr	r0, [r3, #0]
 8001998:	4a41      	ldr	r2, [pc, #260]	@ (8001aa0 <HAL_ADC_ConfigChannel+0x198>)
 800199a:	4290      	cmp	r0, r2
 800199c:	d059      	beq.n	8001a52 <HAL_ADC_ConfigChannel+0x14a>
  __HAL_UNLOCK(hadc);
 800199e:	2000      	movs	r0, #0
 80019a0:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 80019a4:	b002      	add	sp, #8
 80019a6:	bc30      	pop	{r4, r5}
 80019a8:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019aa:	6804      	ldr	r4, [r0, #0]
 80019ac:	6920      	ldr	r0, [r4, #16]
 80019ae:	b292      	uxth	r2, r2
 80019b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80019b4:	f04f 0c07 	mov.w	ip, #7
 80019b8:	fa0c f202 	lsl.w	r2, ip, r2
 80019bc:	ea20 0202 	bic.w	r2, r0, r2
 80019c0:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019c2:	681c      	ldr	r4, [r3, #0]
 80019c4:	6920      	ldr	r0, [r4, #16]
 80019c6:	880a      	ldrh	r2, [r1, #0]
 80019c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80019cc:	688d      	ldr	r5, [r1, #8]
 80019ce:	fa05 f202 	lsl.w	r2, r5, r2
 80019d2:	4302      	orrs	r2, r0
 80019d4:	6122      	str	r2, [r4, #16]
 80019d6:	e7bf      	b.n	8001958 <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 80019d8:	2a0c      	cmp	r2, #12
 80019da:	d816      	bhi.n	8001a0a <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019dc:	681d      	ldr	r5, [r3, #0]
 80019de:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80019e0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80019e4:	3a23      	subs	r2, #35	@ 0x23
 80019e6:	241f      	movs	r4, #31
 80019e8:	fa04 f202 	lsl.w	r2, r4, r2
 80019ec:	ea20 0202 	bic.w	r2, r0, r2
 80019f0:	632a      	str	r2, [r5, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019f2:	681d      	ldr	r5, [r3, #0]
 80019f4:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80019f6:	684a      	ldr	r2, [r1, #4]
 80019f8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80019fc:	3a23      	subs	r2, #35	@ 0x23
 80019fe:	880c      	ldrh	r4, [r1, #0]
 8001a00:	fa04 f202 	lsl.w	r2, r4, r2
 8001a04:	4302      	orrs	r2, r0
 8001a06:	632a      	str	r2, [r5, #48]	@ 0x30
 8001a08:	e7c1      	b.n	800198e <HAL_ADC_ConfigChannel+0x86>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a0a:	681d      	ldr	r5, [r3, #0]
 8001a0c:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001a0e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001a12:	3a41      	subs	r2, #65	@ 0x41
 8001a14:	241f      	movs	r4, #31
 8001a16:	fa04 f202 	lsl.w	r2, r4, r2
 8001a1a:	ea20 0202 	bic.w	r2, r0, r2
 8001a1e:	62ea      	str	r2, [r5, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a20:	681d      	ldr	r5, [r3, #0]
 8001a22:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001a24:	684a      	ldr	r2, [r1, #4]
 8001a26:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001a2a:	3a41      	subs	r2, #65	@ 0x41
 8001a2c:	880c      	ldrh	r4, [r1, #0]
 8001a2e:	fa04 f202 	lsl.w	r2, r4, r2
 8001a32:	4302      	orrs	r2, r0
 8001a34:	62ea      	str	r2, [r5, #44]	@ 0x2c
 8001a36:	e7aa      	b.n	800198e <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a38:	680a      	ldr	r2, [r1, #0]
 8001a3a:	2a12      	cmp	r2, #18
 8001a3c:	d1ab      	bne.n	8001996 <HAL_ADC_ConfigChannel+0x8e>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001a3e:	4a19      	ldr	r2, [pc, #100]	@ (8001aa4 <HAL_ADC_ConfigChannel+0x19c>)
 8001a40:	6850      	ldr	r0, [r2, #4]
 8001a42:	f420 0000 	bic.w	r0, r0, #8388608	@ 0x800000
 8001a46:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a48:	6850      	ldr	r0, [r2, #4]
 8001a4a:	f440 0080 	orr.w	r0, r0, #4194304	@ 0x400000
 8001a4e:	6050      	str	r0, [r2, #4]
 8001a50:	e7a1      	b.n	8001996 <HAL_ADC_ConfigChannel+0x8e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a52:	680a      	ldr	r2, [r1, #0]
 8001a54:	4814      	ldr	r0, [pc, #80]	@ (8001aa8 <HAL_ADC_ConfigChannel+0x1a0>)
 8001a56:	4282      	cmp	r2, r0
 8001a58:	d001      	beq.n	8001a5e <HAL_ADC_ConfigChannel+0x156>
 8001a5a:	2a11      	cmp	r2, #17
 8001a5c:	d19f      	bne.n	800199e <HAL_ADC_ConfigChannel+0x96>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001a5e:	4a11      	ldr	r2, [pc, #68]	@ (8001aa4 <HAL_ADC_ConfigChannel+0x19c>)
 8001a60:	6850      	ldr	r0, [r2, #4]
 8001a62:	f420 0080 	bic.w	r0, r0, #4194304	@ 0x400000
 8001a66:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a68:	6850      	ldr	r0, [r2, #4]
 8001a6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001a6e:	6050      	str	r0, [r2, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a70:	6809      	ldr	r1, [r1, #0]
 8001a72:	4a0d      	ldr	r2, [pc, #52]	@ (8001aa8 <HAL_ADC_ConfigChannel+0x1a0>)
 8001a74:	4291      	cmp	r1, r2
 8001a76:	d192      	bne.n	800199e <HAL_ADC_ConfigChannel+0x96>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a78:	4a0c      	ldr	r2, [pc, #48]	@ (8001aac <HAL_ADC_ConfigChannel+0x1a4>)
 8001a7a:	6812      	ldr	r2, [r2, #0]
 8001a7c:	490c      	ldr	r1, [pc, #48]	@ (8001ab0 <HAL_ADC_ConfigChannel+0x1a8>)
 8001a7e:	fba1 1202 	umull	r1, r2, r1, r2
 8001a82:	0c92      	lsrs	r2, r2, #18
 8001a84:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001a88:	0052      	lsls	r2, r2, #1
 8001a8a:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 8001a8c:	9a01      	ldr	r2, [sp, #4]
 8001a8e:	2a00      	cmp	r2, #0
 8001a90:	d085      	beq.n	800199e <HAL_ADC_ConfigChannel+0x96>
        counter--;
 8001a92:	9a01      	ldr	r2, [sp, #4]
 8001a94:	3a01      	subs	r2, #1
 8001a96:	9201      	str	r2, [sp, #4]
 8001a98:	e7f8      	b.n	8001a8c <HAL_ADC_ConfigChannel+0x184>
  __HAL_LOCK(hadc);
 8001a9a:	2002      	movs	r0, #2
 8001a9c:	e782      	b.n	80019a4 <HAL_ADC_ConfigChannel+0x9c>
 8001a9e:	bf00      	nop
 8001aa0:	40012000 	.word	0x40012000
 8001aa4:	40012300 	.word	0x40012300
 8001aa8:	10000012 	.word	0x10000012
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	431bde83 	.word	0x431bde83

08001ab4 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8001ab4:	2800      	cmp	r0, #0
 8001ab6:	db07      	blt.n	8001ac8 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ab8:	f000 021f 	and.w	r2, r0, #31
 8001abc:	0940      	lsrs	r0, r0, #5
 8001abe:	2301      	movs	r3, #1
 8001ac0:	4093      	lsls	r3, r2
 8001ac2:	4a02      	ldr	r2, [pc, #8]	@ (8001acc <__NVIC_EnableIRQ+0x18>)
 8001ac4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000e100 	.word	0xe000e100

08001ad0 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001ad0:	2800      	cmp	r0, #0
 8001ad2:	db08      	blt.n	8001ae6 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad4:	0109      	lsls	r1, r1, #4
 8001ad6:	b2c9      	uxtb	r1, r1
 8001ad8:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001adc:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001ae0:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001ae4:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae6:	f000 000f 	and.w	r0, r0, #15
 8001aea:	0109      	lsls	r1, r1, #4
 8001aec:	b2c9      	uxtb	r1, r1
 8001aee:	4b01      	ldr	r3, [pc, #4]	@ (8001af4 <__NVIC_SetPriority+0x24>)
 8001af0:	5419      	strb	r1, [r3, r0]
  }
}
 8001af2:	4770      	bx	lr
 8001af4:	e000ed14 	.word	0xe000ed14

08001af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af8:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001afa:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001afe:	f1c0 0c07 	rsb	ip, r0, #7
 8001b02:	f1bc 0f04 	cmp.w	ip, #4
 8001b06:	bf28      	it	cs
 8001b08:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b0c:	1d03      	adds	r3, r0, #4
 8001b0e:	2b06      	cmp	r3, #6
 8001b10:	d90f      	bls.n	8001b32 <NVIC_EncodePriority+0x3a>
 8001b12:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b14:	f04f 3eff 	mov.w	lr, #4294967295
 8001b18:	fa0e f00c 	lsl.w	r0, lr, ip
 8001b1c:	ea21 0100 	bic.w	r1, r1, r0
 8001b20:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b22:	fa0e fe03 	lsl.w	lr, lr, r3
 8001b26:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8001b2a:	ea41 0002 	orr.w	r0, r1, r2
 8001b2e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b32:	2300      	movs	r3, #0
 8001b34:	e7ee      	b.n	8001b14 <NVIC_EncodePriority+0x1c>
	...

08001b38 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b38:	4a07      	ldr	r2, [pc, #28]	@ (8001b58 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001b3a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001b40:	041b      	lsls	r3, r3, #16
 8001b42:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b44:	0200      	lsls	r0, r0, #8
 8001b46:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b4a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001b4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001b54:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001b56:	4770      	bx	lr
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b5c:	b510      	push	{r4, lr}
 8001b5e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b60:	4b05      	ldr	r3, [pc, #20]	@ (8001b78 <HAL_NVIC_SetPriority+0x1c>)
 8001b62:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b64:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001b68:	f7ff ffc6 	bl	8001af8 <NVIC_EncodePriority>
 8001b6c:	4601      	mov	r1, r0
 8001b6e:	4620      	mov	r0, r4
 8001b70:	f7ff ffae 	bl	8001ad0 <__NVIC_SetPriority>
}
 8001b74:	bd10      	pop	{r4, pc}
 8001b76:	bf00      	nop
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b7e:	f7ff ff99 	bl	8001ab4 <__NVIC_EnableIRQ>
}
 8001b82:	bd08      	pop	{r3, pc}

08001b84 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b84:	3801      	subs	r0, #1
 8001b86:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001b8a:	d20b      	bcs.n	8001ba4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b8c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001b90:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b92:	4a05      	ldr	r2, [pc, #20]	@ (8001ba8 <HAL_SYSTICK_Config+0x24>)
 8001b94:	21f0      	movs	r1, #240	@ 0xf0
 8001b96:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b9e:	2207      	movs	r2, #7
 8001ba0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ba2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001ba4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001ba6:	4770      	bx	lr
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bac:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001bae:	6805      	ldr	r5, [r0, #0]
 8001bb0:	682c      	ldr	r4, [r5, #0]
 8001bb2:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 8001bb6:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001bb8:	6804      	ldr	r4, [r0, #0]
 8001bba:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bbc:	6883      	ldr	r3, [r0, #8]
 8001bbe:	2b40      	cmp	r3, #64	@ 0x40
 8001bc0:	d005      	beq.n	8001bce <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8001bc2:	6803      	ldr	r3, [r0, #0]
 8001bc4:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8001bc6:	6803      	ldr	r3, [r0, #0]
 8001bc8:	60da      	str	r2, [r3, #12]
  }
}
 8001bca:	bc30      	pop	{r4, r5}
 8001bcc:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8001bce:	6803      	ldr	r3, [r0, #0]
 8001bd0:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8001bd2:	6803      	ldr	r3, [r0, #0]
 8001bd4:	60d9      	str	r1, [r3, #12]
 8001bd6:	e7f8      	b.n	8001bca <DMA_SetConfig+0x1e>

08001bd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001bd8:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001bda:	6803      	ldr	r3, [r0, #0]
 8001bdc:	b2d9      	uxtb	r1, r3
 8001bde:	3910      	subs	r1, #16
 8001be0:	4a0c      	ldr	r2, [pc, #48]	@ (8001c14 <DMA_CalcBaseAndBitshift+0x3c>)
 8001be2:	fba2 4201 	umull	r4, r2, r2, r1
 8001be6:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001be8:	4c0b      	ldr	r4, [pc, #44]	@ (8001c18 <DMA_CalcBaseAndBitshift+0x40>)
 8001bea:	5ca2      	ldrb	r2, [r4, r2]
 8001bec:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001bee:	295f      	cmp	r1, #95	@ 0x5f
 8001bf0:	d909      	bls.n	8001c06 <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001bf2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001bf6:	f023 0303 	bic.w	r3, r3, #3
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001bfe:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8001c00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c04:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c06:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001c0a:	f023 0303 	bic.w	r3, r3, #3
 8001c0e:	6583      	str	r3, [r0, #88]	@ 0x58
 8001c10:	e7f5      	b.n	8001bfe <DMA_CalcBaseAndBitshift+0x26>
 8001c12:	bf00      	nop
 8001c14:	aaaaaaab 	.word	0xaaaaaaab
 8001c18:	0800346c 	.word	0x0800346c

08001c1c <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c1c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c1e:	6982      	ldr	r2, [r0, #24]
 8001c20:	b992      	cbnz	r2, 8001c48 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d00a      	beq.n	8001c3c <DMA_CheckFifoParam+0x20>
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d002      	beq.n	8001c30 <DMA_CheckFifoParam+0x14>
 8001c2a:	b10b      	cbz	r3, 8001c30 <DMA_CheckFifoParam+0x14>
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c30:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001c32:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001c36:	d128      	bne.n	8001c8a <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8001c38:	2000      	movs	r0, #0
 8001c3a:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c3c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001c3e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001c42:	d024      	beq.n	8001c8e <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8001c44:	2000      	movs	r0, #0
 8001c46:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c48:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8001c4c:	d009      	beq.n	8001c62 <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d925      	bls.n	8001c9e <DMA_CheckFifoParam+0x82>
 8001c52:	2b03      	cmp	r3, #3
 8001c54:	d125      	bne.n	8001ca2 <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c56:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001c58:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001c5c:	d123      	bne.n	8001ca6 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8001c5e:	2000      	movs	r0, #0
 8001c60:	4770      	bx	lr
    switch (tmp)
 8001c62:	2b03      	cmp	r3, #3
 8001c64:	d803      	bhi.n	8001c6e <DMA_CheckFifoParam+0x52>
 8001c66:	e8df f003 	tbb	[pc, r3]
 8001c6a:	0414      	.short	0x0414
 8001c6c:	0a14      	.short	0x0a14
 8001c6e:	2000      	movs	r0, #0
 8001c70:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c72:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001c74:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001c78:	d10d      	bne.n	8001c96 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c7e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001c80:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001c84:	d009      	beq.n	8001c9a <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8001c86:	2000      	movs	r0, #0
 8001c88:	4770      	bx	lr
        status = HAL_ERROR;
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	4770      	bx	lr
        status = HAL_ERROR;
 8001c8e:	2001      	movs	r0, #1
 8001c90:	4770      	bx	lr
      status = HAL_ERROR;
 8001c92:	2001      	movs	r0, #1
 8001c94:	4770      	bx	lr
        status = HAL_ERROR;
 8001c96:	2001      	movs	r0, #1
 8001c98:	4770      	bx	lr
        status = HAL_ERROR;
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	4770      	bx	lr
      status = HAL_ERROR;
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	4770      	bx	lr
    switch (tmp)
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8001ca6:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001ca8:	4770      	bx	lr
	...

08001cac <HAL_DMA_Init>:
{
 8001cac:	b570      	push	{r4, r5, r6, lr}
 8001cae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001cb0:	f7ff fc30 	bl	8001514 <HAL_GetTick>
  if(hdma == NULL)
 8001cb4:	2c00      	cmp	r4, #0
 8001cb6:	d05b      	beq.n	8001d70 <HAL_DMA_Init+0xc4>
 8001cb8:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8001cc6:	6822      	ldr	r2, [r4, #0]
 8001cc8:	6813      	ldr	r3, [r2, #0]
 8001cca:	f023 0301 	bic.w	r3, r3, #1
 8001cce:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cd0:	6823      	ldr	r3, [r4, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	f012 0f01 	tst.w	r2, #1
 8001cd8:	d00a      	beq.n	8001cf0 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cda:	f7ff fc1b 	bl	8001514 <HAL_GetTick>
 8001cde:	1b43      	subs	r3, r0, r5
 8001ce0:	2b05      	cmp	r3, #5
 8001ce2:	d9f5      	bls.n	8001cd0 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ce4:	2320      	movs	r3, #32
 8001ce6:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ce8:	2003      	movs	r0, #3
 8001cea:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8001cee:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8001cf0:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cf2:	4920      	ldr	r1, [pc, #128]	@ (8001d74 <HAL_DMA_Init+0xc8>)
 8001cf4:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cf6:	6862      	ldr	r2, [r4, #4]
 8001cf8:	68a0      	ldr	r0, [r4, #8]
 8001cfa:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cfc:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cfe:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d00:	6920      	ldr	r0, [r4, #16]
 8001d02:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d04:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d06:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d08:	69a0      	ldr	r0, [r4, #24]
 8001d0a:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d0c:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d0e:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d10:	6a20      	ldr	r0, [r4, #32]
 8001d12:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d14:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d16:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001d18:	2904      	cmp	r1, #4
 8001d1a:	d01e      	beq.n	8001d5a <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8001d1c:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001d1e:	6826      	ldr	r6, [r4, #0]
 8001d20:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d22:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8001d26:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001d28:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d107      	bne.n	8001d3e <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8001d2e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001d30:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d32:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001d34:	b11b      	cbz	r3, 8001d3e <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d36:	4620      	mov	r0, r4
 8001d38:	f7ff ff70 	bl	8001c1c <DMA_CheckFifoParam>
 8001d3c:	b990      	cbnz	r0, 8001d64 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8001d3e:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d40:	4620      	mov	r0, r4
 8001d42:	f7ff ff49 	bl	8001bd8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d46:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001d48:	233f      	movs	r3, #63	@ 0x3f
 8001d4a:	4093      	lsls	r3, r2
 8001d4c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d4e:	2000      	movs	r0, #0
 8001d50:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001d52:	2301      	movs	r3, #1
 8001d54:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8001d58:	e7c9      	b.n	8001cee <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d5a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001d5c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8001d5e:	4301      	orrs	r1, r0
 8001d60:	430a      	orrs	r2, r1
 8001d62:	e7db      	b.n	8001d1c <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d64:	2340      	movs	r3, #64	@ 0x40
 8001d66:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001d68:	2001      	movs	r0, #1
 8001d6a:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 8001d6e:	e7be      	b.n	8001cee <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001d70:	2001      	movs	r0, #1
 8001d72:	e7bc      	b.n	8001cee <HAL_DMA_Init+0x42>
 8001d74:	f010803f 	.word	0xf010803f

08001d78 <HAL_DMA_Start_IT>:
{
 8001d78:	b538      	push	{r3, r4, r5, lr}
 8001d7a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d7c:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8001d7e:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8001d82:	2801      	cmp	r0, #1
 8001d84:	d02b      	beq.n	8001dde <HAL_DMA_Start_IT+0x66>
 8001d86:	2001      	movs	r0, #1
 8001d88:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d8c:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8001d90:	b2c0      	uxtb	r0, r0
 8001d92:	2801      	cmp	r0, #1
 8001d94:	d004      	beq.n	8001da0 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8001d96:	2300      	movs	r3, #0
 8001d98:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 8001d9c:	2002      	movs	r0, #2
}
 8001d9e:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001da0:	2002      	movs	r0, #2
 8001da2:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001da6:	2000      	movs	r0, #0
 8001da8:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001daa:	4620      	mov	r0, r4
 8001dac:	f7ff fefe 	bl	8001bac <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001db0:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001db2:	233f      	movs	r3, #63	@ 0x3f
 8001db4:	4093      	lsls	r3, r2
 8001db6:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001db8:	6822      	ldr	r2, [r4, #0]
 8001dba:	6813      	ldr	r3, [r2, #0]
 8001dbc:	f043 0316 	orr.w	r3, r3, #22
 8001dc0:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001dc2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001dc4:	b123      	cbz	r3, 8001dd0 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001dc6:	6822      	ldr	r2, [r4, #0]
 8001dc8:	6813      	ldr	r3, [r2, #0]
 8001dca:	f043 0308 	orr.w	r3, r3, #8
 8001dce:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001dd0:	6822      	ldr	r2, [r4, #0]
 8001dd2:	6813      	ldr	r3, [r2, #0]
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dda:	2000      	movs	r0, #0
 8001ddc:	e7df      	b.n	8001d9e <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8001dde:	2002      	movs	r0, #2
 8001de0:	e7dd      	b.n	8001d9e <HAL_DMA_Start_IT+0x26>
	...

08001de4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001de4:	2300      	movs	r3, #0
 8001de6:	2b0f      	cmp	r3, #15
 8001de8:	f200 80f6 	bhi.w	8001fd8 <HAL_GPIO_Init+0x1f4>
{
 8001dec:	b570      	push	{r4, r5, r6, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	e066      	b.n	8001ec0 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001df2:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001df4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001df8:	2403      	movs	r4, #3
 8001dfa:	fa04 f40e 	lsl.w	r4, r4, lr
 8001dfe:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e02:	68cc      	ldr	r4, [r1, #12]
 8001e04:	fa04 f40e 	lsl.w	r4, r4, lr
 8001e08:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001e0a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e0c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e0e:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e12:	684a      	ldr	r2, [r1, #4]
 8001e14:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001e18:	409a      	lsls	r2, r3
 8001e1a:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001e1c:	6042      	str	r2, [r0, #4]
 8001e1e:	e05d      	b.n	8001edc <HAL_GPIO_Init+0xf8>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e20:	08dc      	lsrs	r4, r3, #3
 8001e22:	3408      	adds	r4, #8
 8001e24:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e28:	f003 0507 	and.w	r5, r3, #7
 8001e2c:	00ad      	lsls	r5, r5, #2
 8001e2e:	f04f 0e0f 	mov.w	lr, #15
 8001e32:	fa0e fe05 	lsl.w	lr, lr, r5
 8001e36:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e3a:	690a      	ldr	r2, [r1, #16]
 8001e3c:	40aa      	lsls	r2, r5
 8001e3e:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001e42:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001e46:	e05d      	b.n	8001f04 <HAL_GPIO_Init+0x120>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e48:	2209      	movs	r2, #9
 8001e4a:	e000      	b.n	8001e4e <HAL_GPIO_Init+0x6a>
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	fa02 f20e 	lsl.w	r2, r2, lr
 8001e52:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e54:	3402      	adds	r4, #2
 8001e56:	4d61      	ldr	r5, [pc, #388]	@ (8001fdc <HAL_GPIO_Init+0x1f8>)
 8001e58:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e5c:	4a60      	ldr	r2, [pc, #384]	@ (8001fe0 <HAL_GPIO_Init+0x1fc>)
 8001e5e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001e60:	ea6f 020c 	mvn.w	r2, ip
 8001e64:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e68:	684e      	ldr	r6, [r1, #4]
 8001e6a:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8001e6e:	d001      	beq.n	8001e74 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8001e70:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001e74:	4c5a      	ldr	r4, [pc, #360]	@ (8001fe0 <HAL_GPIO_Init+0x1fc>)
 8001e76:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001e78:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001e7a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e7e:	684e      	ldr	r6, [r1, #4]
 8001e80:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8001e84:	d001      	beq.n	8001e8a <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8001e86:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001e8a:	4c55      	ldr	r4, [pc, #340]	@ (8001fe0 <HAL_GPIO_Init+0x1fc>)
 8001e8c:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8001e8e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001e90:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e94:	684e      	ldr	r6, [r1, #4]
 8001e96:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8001e9a:	d001      	beq.n	8001ea0 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001e9c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001ea0:	4c4f      	ldr	r4, [pc, #316]	@ (8001fe0 <HAL_GPIO_Init+0x1fc>)
 8001ea2:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ea4:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001ea6:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ea8:	684d      	ldr	r5, [r1, #4]
 8001eaa:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8001eae:	d001      	beq.n	8001eb4 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8001eb0:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001eb4:	4c4a      	ldr	r4, [pc, #296]	@ (8001fe0 <HAL_GPIO_Init+0x1fc>)
 8001eb6:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eb8:	3301      	adds	r3, #1
 8001eba:	2b0f      	cmp	r3, #15
 8001ebc:	f200 808a 	bhi.w	8001fd4 <HAL_GPIO_Init+0x1f0>
    ioposition = 0x01U << position;
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ec4:	680c      	ldr	r4, [r1, #0]
 8001ec6:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001eca:	ea32 0404 	bics.w	r4, r2, r4
 8001ece:	d1f3      	bne.n	8001eb8 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ed0:	684c      	ldr	r4, [r1, #4]
 8001ed2:	f004 0403 	and.w	r4, r4, #3
 8001ed6:	3c01      	subs	r4, #1
 8001ed8:	2c01      	cmp	r4, #1
 8001eda:	d98a      	bls.n	8001df2 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001edc:	684a      	ldr	r2, [r1, #4]
 8001ede:	f002 0203 	and.w	r2, r2, #3
 8001ee2:	2a03      	cmp	r2, #3
 8001ee4:	d009      	beq.n	8001efa <HAL_GPIO_Init+0x116>
        temp = GPIOx->PUPDR;
 8001ee6:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ee8:	005d      	lsls	r5, r3, #1
 8001eea:	2203      	movs	r2, #3
 8001eec:	40aa      	lsls	r2, r5
 8001eee:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ef2:	688a      	ldr	r2, [r1, #8]
 8001ef4:	40aa      	lsls	r2, r5
 8001ef6:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001ef8:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001efa:	684a      	ldr	r2, [r1, #4]
 8001efc:	f002 0203 	and.w	r2, r2, #3
 8001f00:	2a02      	cmp	r2, #2
 8001f02:	d08d      	beq.n	8001e20 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8001f04:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f06:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	fa02 f20e 	lsl.w	r2, r2, lr
 8001f10:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f14:	684a      	ldr	r2, [r1, #4]
 8001f16:	f002 0203 	and.w	r2, r2, #3
 8001f1a:	fa02 f20e 	lsl.w	r2, r2, lr
 8001f1e:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001f20:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f22:	684a      	ldr	r2, [r1, #4]
 8001f24:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8001f28:	d0c6      	beq.n	8001eb8 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	9201      	str	r2, [sp, #4]
 8001f2e:	4a2d      	ldr	r2, [pc, #180]	@ (8001fe4 <HAL_GPIO_Init+0x200>)
 8001f30:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8001f32:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001f36:	6454      	str	r4, [r2, #68]	@ 0x44
 8001f38:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001f3a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001f3e:	9201      	str	r2, [sp, #4]
 8001f40:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001f42:	089c      	lsrs	r4, r3, #2
 8001f44:	1ca5      	adds	r5, r4, #2
 8001f46:	4a25      	ldr	r2, [pc, #148]	@ (8001fdc <HAL_GPIO_Init+0x1f8>)
 8001f48:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f4c:	f003 0e03 	and.w	lr, r3, #3
 8001f50:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001f54:	220f      	movs	r2, #15
 8001f56:	fa02 f20e 	lsl.w	r2, r2, lr
 8001f5a:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f5e:	4a22      	ldr	r2, [pc, #136]	@ (8001fe8 <HAL_GPIO_Init+0x204>)
 8001f60:	4290      	cmp	r0, r2
 8001f62:	f43f af73 	beq.w	8001e4c <HAL_GPIO_Init+0x68>
 8001f66:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001f6a:	4290      	cmp	r0, r2
 8001f6c:	d022      	beq.n	8001fb4 <HAL_GPIO_Init+0x1d0>
 8001f6e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001f72:	4290      	cmp	r0, r2
 8001f74:	d020      	beq.n	8001fb8 <HAL_GPIO_Init+0x1d4>
 8001f76:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001f7a:	4290      	cmp	r0, r2
 8001f7c:	d01e      	beq.n	8001fbc <HAL_GPIO_Init+0x1d8>
 8001f7e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001f82:	4290      	cmp	r0, r2
 8001f84:	d01c      	beq.n	8001fc0 <HAL_GPIO_Init+0x1dc>
 8001f86:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001f8a:	4290      	cmp	r0, r2
 8001f8c:	d01a      	beq.n	8001fc4 <HAL_GPIO_Init+0x1e0>
 8001f8e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001f92:	4290      	cmp	r0, r2
 8001f94:	d018      	beq.n	8001fc8 <HAL_GPIO_Init+0x1e4>
 8001f96:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001f9a:	4290      	cmp	r0, r2
 8001f9c:	d016      	beq.n	8001fcc <HAL_GPIO_Init+0x1e8>
 8001f9e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001fa2:	4290      	cmp	r0, r2
 8001fa4:	d014      	beq.n	8001fd0 <HAL_GPIO_Init+0x1ec>
 8001fa6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001faa:	4290      	cmp	r0, r2
 8001fac:	f43f af4c 	beq.w	8001e48 <HAL_GPIO_Init+0x64>
 8001fb0:	220a      	movs	r2, #10
 8001fb2:	e74c      	b.n	8001e4e <HAL_GPIO_Init+0x6a>
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	e74a      	b.n	8001e4e <HAL_GPIO_Init+0x6a>
 8001fb8:	2202      	movs	r2, #2
 8001fba:	e748      	b.n	8001e4e <HAL_GPIO_Init+0x6a>
 8001fbc:	2203      	movs	r2, #3
 8001fbe:	e746      	b.n	8001e4e <HAL_GPIO_Init+0x6a>
 8001fc0:	2204      	movs	r2, #4
 8001fc2:	e744      	b.n	8001e4e <HAL_GPIO_Init+0x6a>
 8001fc4:	2205      	movs	r2, #5
 8001fc6:	e742      	b.n	8001e4e <HAL_GPIO_Init+0x6a>
 8001fc8:	2206      	movs	r2, #6
 8001fca:	e740      	b.n	8001e4e <HAL_GPIO_Init+0x6a>
 8001fcc:	2207      	movs	r2, #7
 8001fce:	e73e      	b.n	8001e4e <HAL_GPIO_Init+0x6a>
 8001fd0:	2208      	movs	r2, #8
 8001fd2:	e73c      	b.n	8001e4e <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8001fd4:	b002      	add	sp, #8
 8001fd6:	bd70      	pop	{r4, r5, r6, pc}
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40013800 	.word	0x40013800
 8001fe0:	40013c00 	.word	0x40013c00
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40020000 	.word	0x40020000

08001fec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fec:	b10a      	cbz	r2, 8001ff2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fee:	6181      	str	r1, [r0, #24]
 8001ff0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ff2:	0409      	lsls	r1, r1, #16
 8001ff4:	6181      	str	r1, [r0, #24]
  }
}
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ff8:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ffa:	ea01 0203 	and.w	r2, r1, r3
 8001ffe:	ea21 0103 	bic.w	r1, r1, r3
 8002002:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002006:	6181      	str	r1, [r0, #24]
}
 8002008:	4770      	bx	lr
	...

0800200c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800200c:	4b01      	ldr	r3, [pc, #4]	@ (8002014 <HAL_RCC_GetHCLKFreq+0x8>)
 800200e:	6818      	ldr	r0, [r3, #0]
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	20000000 	.word	0x20000000

08002018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002018:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800201a:	f7ff fff7 	bl	800200c <HAL_RCC_GetHCLKFreq>
 800201e:	4b04      	ldr	r3, [pc, #16]	@ (8002030 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002026:	4a03      	ldr	r2, [pc, #12]	@ (8002034 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002028:	5cd3      	ldrb	r3, [r2, r3]
}
 800202a:	40d8      	lsrs	r0, r3
 800202c:	bd08      	pop	{r3, pc}
 800202e:	bf00      	nop
 8002030:	40023800 	.word	0x40023800
 8002034:	08003464 	.word	0x08003464

08002038 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002038:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800203a:	f7ff ffe7 	bl	800200c <HAL_RCC_GetHCLKFreq>
 800203e:	4b04      	ldr	r3, [pc, #16]	@ (8002050 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002046:	4a03      	ldr	r2, [pc, #12]	@ (8002054 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002048:	5cd3      	ldrb	r3, [r2, r3]
}
 800204a:	40d8      	lsrs	r0, r3
 800204c:	bd08      	pop	{r3, pc}
 800204e:	bf00      	nop
 8002050:	40023800 	.word	0x40023800
 8002054:	08003464 	.word	0x08003464

08002058 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002058:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b01      	cmp	r3, #1
 8002060:	d137      	bne.n	80020d2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002062:	2302      	movs	r3, #2
 8002064:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002068:	6802      	ldr	r2, [r0, #0]
 800206a:	68d3      	ldr	r3, [r2, #12]
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002072:	6803      	ldr	r3, [r0, #0]
 8002074:	4a19      	ldr	r2, [pc, #100]	@ (80020dc <HAL_TIM_Base_Start_IT+0x84>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d020      	beq.n	80020bc <HAL_TIM_Base_Start_IT+0x64>
 800207a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800207e:	d01d      	beq.n	80020bc <HAL_TIM_Base_Start_IT+0x64>
 8002080:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002084:	4293      	cmp	r3, r2
 8002086:	d019      	beq.n	80020bc <HAL_TIM_Base_Start_IT+0x64>
 8002088:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800208c:	4293      	cmp	r3, r2
 800208e:	d015      	beq.n	80020bc <HAL_TIM_Base_Start_IT+0x64>
 8002090:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002094:	4293      	cmp	r3, r2
 8002096:	d011      	beq.n	80020bc <HAL_TIM_Base_Start_IT+0x64>
 8002098:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800209c:	4293      	cmp	r3, r2
 800209e:	d00d      	beq.n	80020bc <HAL_TIM_Base_Start_IT+0x64>
 80020a0:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d009      	beq.n	80020bc <HAL_TIM_Base_Start_IT+0x64>
 80020a8:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d005      	beq.n	80020bc <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	f042 0201 	orr.w	r2, r2, #1
 80020b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020b8:	2000      	movs	r0, #0
 80020ba:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020c2:	2a06      	cmp	r2, #6
 80020c4:	d007      	beq.n	80020d6 <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	f042 0201 	orr.w	r2, r2, #1
 80020cc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80020ce:	2000      	movs	r0, #0
 80020d0:	4770      	bx	lr
    return HAL_ERROR;
 80020d2:	2001      	movs	r0, #1
 80020d4:	4770      	bx	lr
  return HAL_OK;
 80020d6:	2000      	movs	r0, #0
}
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40010000 	.word	0x40010000

080020e0 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020e0:	4770      	bx	lr

080020e2 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020e2:	4770      	bx	lr

080020e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020e4:	4770      	bx	lr

080020e6 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020e6:	4770      	bx	lr

080020e8 <HAL_TIM_IRQHandler>:
{
 80020e8:	b570      	push	{r4, r5, r6, lr}
 80020ea:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 80020ec:	6803      	ldr	r3, [r0, #0]
 80020ee:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80020f0:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80020f2:	f015 0f02 	tst.w	r5, #2
 80020f6:	d010      	beq.n	800211a <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80020f8:	f016 0f02 	tst.w	r6, #2
 80020fc:	d00d      	beq.n	800211a <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80020fe:	f06f 0202 	mvn.w	r2, #2
 8002102:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002104:	2301      	movs	r3, #1
 8002106:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002108:	6803      	ldr	r3, [r0, #0]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	f013 0f03 	tst.w	r3, #3
 8002110:	d05e      	beq.n	80021d0 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8002112:	f7ff ffe6 	bl	80020e2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002116:	2300      	movs	r3, #0
 8002118:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800211a:	f015 0f04 	tst.w	r5, #4
 800211e:	d012      	beq.n	8002146 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002120:	f016 0f04 	tst.w	r6, #4
 8002124:	d00f      	beq.n	8002146 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002126:	6823      	ldr	r3, [r4, #0]
 8002128:	f06f 0204 	mvn.w	r2, #4
 800212c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800212e:	2302      	movs	r3, #2
 8002130:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002132:	6823      	ldr	r3, [r4, #0]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800213a:	d04f      	beq.n	80021dc <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 800213c:	4620      	mov	r0, r4
 800213e:	f7ff ffd0 	bl	80020e2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002142:	2300      	movs	r3, #0
 8002144:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002146:	f015 0f08 	tst.w	r5, #8
 800214a:	d012      	beq.n	8002172 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800214c:	f016 0f08 	tst.w	r6, #8
 8002150:	d00f      	beq.n	8002172 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002152:	6823      	ldr	r3, [r4, #0]
 8002154:	f06f 0208 	mvn.w	r2, #8
 8002158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800215a:	2304      	movs	r3, #4
 800215c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800215e:	6823      	ldr	r3, [r4, #0]
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	f013 0f03 	tst.w	r3, #3
 8002166:	d040      	beq.n	80021ea <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8002168:	4620      	mov	r0, r4
 800216a:	f7ff ffba 	bl	80020e2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800216e:	2300      	movs	r3, #0
 8002170:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002172:	f015 0f10 	tst.w	r5, #16
 8002176:	d012      	beq.n	800219e <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002178:	f016 0f10 	tst.w	r6, #16
 800217c:	d00f      	beq.n	800219e <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800217e:	6823      	ldr	r3, [r4, #0]
 8002180:	f06f 0210 	mvn.w	r2, #16
 8002184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002186:	2308      	movs	r3, #8
 8002188:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800218a:	6823      	ldr	r3, [r4, #0]
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8002192:	d031      	beq.n	80021f8 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8002194:	4620      	mov	r0, r4
 8002196:	f7ff ffa4 	bl	80020e2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800219a:	2300      	movs	r3, #0
 800219c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800219e:	f015 0f01 	tst.w	r5, #1
 80021a2:	d002      	beq.n	80021aa <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80021a4:	f016 0f01 	tst.w	r6, #1
 80021a8:	d12d      	bne.n	8002206 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80021aa:	f015 0f80 	tst.w	r5, #128	@ 0x80
 80021ae:	d002      	beq.n	80021b6 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021b0:	f016 0f80 	tst.w	r6, #128	@ 0x80
 80021b4:	d12f      	bne.n	8002216 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80021b6:	f015 0f40 	tst.w	r5, #64	@ 0x40
 80021ba:	d002      	beq.n	80021c2 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80021bc:	f016 0f40 	tst.w	r6, #64	@ 0x40
 80021c0:	d131      	bne.n	8002226 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80021c2:	f015 0f20 	tst.w	r5, #32
 80021c6:	d002      	beq.n	80021ce <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80021c8:	f016 0f20 	tst.w	r6, #32
 80021cc:	d133      	bne.n	8002236 <HAL_TIM_IRQHandler+0x14e>
}
 80021ce:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d0:	f7ff ff86 	bl	80020e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d4:	4620      	mov	r0, r4
 80021d6:	f7ff ff85 	bl	80020e4 <HAL_TIM_PWM_PulseFinishedCallback>
 80021da:	e79c      	b.n	8002116 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021dc:	4620      	mov	r0, r4
 80021de:	f7ff ff7f 	bl	80020e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e2:	4620      	mov	r0, r4
 80021e4:	f7ff ff7e 	bl	80020e4 <HAL_TIM_PWM_PulseFinishedCallback>
 80021e8:	e7ab      	b.n	8002142 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ea:	4620      	mov	r0, r4
 80021ec:	f7ff ff78 	bl	80020e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f0:	4620      	mov	r0, r4
 80021f2:	f7ff ff77 	bl	80020e4 <HAL_TIM_PWM_PulseFinishedCallback>
 80021f6:	e7ba      	b.n	800216e <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021f8:	4620      	mov	r0, r4
 80021fa:	f7ff ff71 	bl	80020e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021fe:	4620      	mov	r0, r4
 8002200:	f7ff ff70 	bl	80020e4 <HAL_TIM_PWM_PulseFinishedCallback>
 8002204:	e7c9      	b.n	800219a <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002206:	6823      	ldr	r3, [r4, #0]
 8002208:	f06f 0201 	mvn.w	r2, #1
 800220c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800220e:	4620      	mov	r0, r4
 8002210:	f7fe fc50 	bl	8000ab4 <HAL_TIM_PeriodElapsedCallback>
 8002214:	e7c9      	b.n	80021aa <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002216:	6823      	ldr	r3, [r4, #0]
 8002218:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800221c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800221e:	4620      	mov	r0, r4
 8002220:	f000 f8ab 	bl	800237a <HAL_TIMEx_BreakCallback>
 8002224:	e7c7      	b.n	80021b6 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002226:	6823      	ldr	r3, [r4, #0]
 8002228:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800222c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800222e:	4620      	mov	r0, r4
 8002230:	f7ff ff59 	bl	80020e6 <HAL_TIM_TriggerCallback>
 8002234:	e7c5      	b.n	80021c2 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002236:	6823      	ldr	r3, [r4, #0]
 8002238:	f06f 0220 	mvn.w	r2, #32
 800223c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800223e:	4620      	mov	r0, r4
 8002240:	f000 f89a 	bl	8002378 <HAL_TIMEx_CommutCallback>
}
 8002244:	e7c3      	b.n	80021ce <HAL_TIM_IRQHandler+0xe6>
	...

08002248 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002248:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800224a:	4a34      	ldr	r2, [pc, #208]	@ (800231c <TIM_Base_SetConfig+0xd4>)
 800224c:	4290      	cmp	r0, r2
 800224e:	d012      	beq.n	8002276 <TIM_Base_SetConfig+0x2e>
 8002250:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002254:	d00f      	beq.n	8002276 <TIM_Base_SetConfig+0x2e>
 8002256:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800225a:	4290      	cmp	r0, r2
 800225c:	d00b      	beq.n	8002276 <TIM_Base_SetConfig+0x2e>
 800225e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002262:	4290      	cmp	r0, r2
 8002264:	d007      	beq.n	8002276 <TIM_Base_SetConfig+0x2e>
 8002266:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800226a:	4290      	cmp	r0, r2
 800226c:	d003      	beq.n	8002276 <TIM_Base_SetConfig+0x2e>
 800226e:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002272:	4290      	cmp	r0, r2
 8002274:	d103      	bne.n	800227e <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002276:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800227a:	684a      	ldr	r2, [r1, #4]
 800227c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800227e:	4a27      	ldr	r2, [pc, #156]	@ (800231c <TIM_Base_SetConfig+0xd4>)
 8002280:	4290      	cmp	r0, r2
 8002282:	d02a      	beq.n	80022da <TIM_Base_SetConfig+0x92>
 8002284:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002288:	d027      	beq.n	80022da <TIM_Base_SetConfig+0x92>
 800228a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800228e:	4290      	cmp	r0, r2
 8002290:	d023      	beq.n	80022da <TIM_Base_SetConfig+0x92>
 8002292:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002296:	4290      	cmp	r0, r2
 8002298:	d01f      	beq.n	80022da <TIM_Base_SetConfig+0x92>
 800229a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800229e:	4290      	cmp	r0, r2
 80022a0:	d01b      	beq.n	80022da <TIM_Base_SetConfig+0x92>
 80022a2:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80022a6:	4290      	cmp	r0, r2
 80022a8:	d017      	beq.n	80022da <TIM_Base_SetConfig+0x92>
 80022aa:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 80022ae:	4290      	cmp	r0, r2
 80022b0:	d013      	beq.n	80022da <TIM_Base_SetConfig+0x92>
 80022b2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80022b6:	4290      	cmp	r0, r2
 80022b8:	d00f      	beq.n	80022da <TIM_Base_SetConfig+0x92>
 80022ba:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80022be:	4290      	cmp	r0, r2
 80022c0:	d00b      	beq.n	80022da <TIM_Base_SetConfig+0x92>
 80022c2:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 80022c6:	4290      	cmp	r0, r2
 80022c8:	d007      	beq.n	80022da <TIM_Base_SetConfig+0x92>
 80022ca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80022ce:	4290      	cmp	r0, r2
 80022d0:	d003      	beq.n	80022da <TIM_Base_SetConfig+0x92>
 80022d2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80022d6:	4290      	cmp	r0, r2
 80022d8:	d103      	bne.n	80022e2 <TIM_Base_SetConfig+0x9a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022de:	68ca      	ldr	r2, [r1, #12]
 80022e0:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022e6:	694a      	ldr	r2, [r1, #20]
 80022e8:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80022ea:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022ec:	688b      	ldr	r3, [r1, #8]
 80022ee:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022f0:	680b      	ldr	r3, [r1, #0]
 80022f2:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022f4:	4b09      	ldr	r3, [pc, #36]	@ (800231c <TIM_Base_SetConfig+0xd4>)
 80022f6:	4298      	cmp	r0, r3
 80022f8:	d003      	beq.n	8002302 <TIM_Base_SetConfig+0xba>
 80022fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80022fe:	4298      	cmp	r0, r3
 8002300:	d101      	bne.n	8002306 <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002302:	690b      	ldr	r3, [r1, #16]
 8002304:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002306:	2301      	movs	r3, #1
 8002308:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800230a:	6903      	ldr	r3, [r0, #16]
 800230c:	f013 0f01 	tst.w	r3, #1
 8002310:	d003      	beq.n	800231a <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002312:	6903      	ldr	r3, [r0, #16]
 8002314:	f023 0301 	bic.w	r3, r3, #1
 8002318:	6103      	str	r3, [r0, #16]
  }
}
 800231a:	4770      	bx	lr
 800231c:	40010000 	.word	0x40010000

08002320 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002320:	b340      	cbz	r0, 8002374 <HAL_TIM_Base_Init+0x54>
{
 8002322:	b510      	push	{r4, lr}
 8002324:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002326:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800232a:	b1f3      	cbz	r3, 800236a <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800232c:	2302      	movs	r3, #2
 800232e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002332:	4621      	mov	r1, r4
 8002334:	f851 0b04 	ldr.w	r0, [r1], #4
 8002338:	f7ff ff86 	bl	8002248 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800233c:	2301      	movs	r3, #1
 800233e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002342:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002346:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800234a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800234e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002352:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002356:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800235a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800235e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002362:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8002366:	2000      	movs	r0, #0
}
 8002368:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800236a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800236e:	f7fe ffa1 	bl	80012b4 <HAL_TIM_Base_MspInit>
 8002372:	e7db      	b.n	800232c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002374:	2001      	movs	r0, #1
}
 8002376:	4770      	bx	lr

08002378 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002378:	4770      	bx	lr

0800237a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800237a:	4770      	bx	lr

0800237c <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800237c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800237e:	f102 030c 	add.w	r3, r2, #12
 8002382:	e853 3f00 	ldrex	r3, [r3]
 8002386:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800238a:	320c      	adds	r2, #12
 800238c:	e842 3100 	strex	r1, r3, [r2]
 8002390:	2900      	cmp	r1, #0
 8002392:	d1f3      	bne.n	800237c <UART_EndTxTransfer>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002394:	2320      	movs	r3, #32
 8002396:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
}
 800239a:	4770      	bx	lr

0800239c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800239c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800239e:	f102 030c 	add.w	r3, r2, #12
 80023a2:	e853 3f00 	ldrex	r3, [r3]
 80023a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023aa:	320c      	adds	r2, #12
 80023ac:	e842 3100 	strex	r1, r3, [r2]
 80023b0:	2900      	cmp	r1, #0
 80023b2:	d1f3      	bne.n	800239c <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023b4:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023b6:	f102 0314 	add.w	r3, r2, #20
 80023ba:	e853 3f00 	ldrex	r3, [r3]
 80023be:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023c2:	3214      	adds	r2, #20
 80023c4:	e842 3100 	strex	r1, r3, [r2]
 80023c8:	2900      	cmp	r1, #0
 80023ca:	d1f3      	bne.n	80023b4 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023cc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d005      	beq.n	80023de <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80023d2:	2320      	movs	r3, #32
 80023d4:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023d8:	2300      	movs	r3, #0
 80023da:	6303      	str	r3, [r0, #48]	@ 0x30
}
 80023dc:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023de:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023e0:	f102 030c 	add.w	r3, r2, #12
 80023e4:	e853 3f00 	ldrex	r3, [r3]
 80023e8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ec:	320c      	adds	r2, #12
 80023ee:	e842 3100 	strex	r1, r3, [r2]
 80023f2:	2900      	cmp	r1, #0
 80023f4:	d1f3      	bne.n	80023de <UART_EndRxTransfer+0x42>
 80023f6:	e7ec      	b.n	80023d2 <UART_EndRxTransfer+0x36>

080023f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023f8:	b510      	push	{r4, lr}
 80023fa:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023fc:	6802      	ldr	r2, [r0, #0]
 80023fe:	6913      	ldr	r3, [r2, #16]
 8002400:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002404:	68c1      	ldr	r1, [r0, #12]
 8002406:	430b      	orrs	r3, r1
 8002408:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800240a:	6883      	ldr	r3, [r0, #8]
 800240c:	6902      	ldr	r2, [r0, #16]
 800240e:	431a      	orrs	r2, r3
 8002410:	6943      	ldr	r3, [r0, #20]
 8002412:	431a      	orrs	r2, r3
 8002414:	69c3      	ldr	r3, [r0, #28]
 8002416:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002418:	6801      	ldr	r1, [r0, #0]
 800241a:	68cb      	ldr	r3, [r1, #12]
 800241c:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002420:	f023 030c 	bic.w	r3, r3, #12
 8002424:	4313      	orrs	r3, r2
 8002426:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002428:	6802      	ldr	r2, [r0, #0]
 800242a:	6953      	ldr	r3, [r2, #20]
 800242c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002430:	6981      	ldr	r1, [r0, #24]
 8002432:	430b      	orrs	r3, r1
 8002434:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002436:	6803      	ldr	r3, [r0, #0]
 8002438:	4a31      	ldr	r2, [pc, #196]	@ (8002500 <UART_SetConfig+0x108>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d006      	beq.n	800244c <UART_SetConfig+0x54>
 800243e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002442:	4293      	cmp	r3, r2
 8002444:	d002      	beq.n	800244c <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002446:	f7ff fde7 	bl	8002018 <HAL_RCC_GetPCLK1Freq>
 800244a:	e001      	b.n	8002450 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 800244c:	f7ff fdf4 	bl	8002038 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002450:	69e3      	ldr	r3, [r4, #28]
 8002452:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002456:	d029      	beq.n	80024ac <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002458:	2100      	movs	r1, #0
 800245a:	1803      	adds	r3, r0, r0
 800245c:	4149      	adcs	r1, r1
 800245e:	181b      	adds	r3, r3, r0
 8002460:	f141 0100 	adc.w	r1, r1, #0
 8002464:	00c9      	lsls	r1, r1, #3
 8002466:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	1818      	adds	r0, r3, r0
 800246e:	6863      	ldr	r3, [r4, #4]
 8002470:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002474:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8002478:	f141 0100 	adc.w	r1, r1, #0
 800247c:	f7fd ff18 	bl	80002b0 <__aeabi_uldivmod>
 8002480:	4a20      	ldr	r2, [pc, #128]	@ (8002504 <UART_SetConfig+0x10c>)
 8002482:	fba2 3100 	umull	r3, r1, r2, r0
 8002486:	0949      	lsrs	r1, r1, #5
 8002488:	2364      	movs	r3, #100	@ 0x64
 800248a:	fb03 0311 	mls	r3, r3, r1, r0
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	3332      	adds	r3, #50	@ 0x32
 8002492:	fba2 2303 	umull	r2, r3, r2, r3
 8002496:	095b      	lsrs	r3, r3, #5
 8002498:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800249c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80024a0:	f003 030f 	and.w	r3, r3, #15
 80024a4:	6821      	ldr	r1, [r4, #0]
 80024a6:	4413      	add	r3, r2
 80024a8:	608b      	str	r3, [r1, #8]
  }
}
 80024aa:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024ac:	2300      	movs	r3, #0
 80024ae:	1802      	adds	r2, r0, r0
 80024b0:	eb43 0103 	adc.w	r1, r3, r3
 80024b4:	1812      	adds	r2, r2, r0
 80024b6:	f141 0100 	adc.w	r1, r1, #0
 80024ba:	00c9      	lsls	r1, r1, #3
 80024bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024c0:	00d2      	lsls	r2, r2, #3
 80024c2:	1810      	adds	r0, r2, r0
 80024c4:	f141 0100 	adc.w	r1, r1, #0
 80024c8:	6862      	ldr	r2, [r4, #4]
 80024ca:	1892      	adds	r2, r2, r2
 80024cc:	415b      	adcs	r3, r3
 80024ce:	f7fd feef 	bl	80002b0 <__aeabi_uldivmod>
 80024d2:	4a0c      	ldr	r2, [pc, #48]	@ (8002504 <UART_SetConfig+0x10c>)
 80024d4:	fba2 3100 	umull	r3, r1, r2, r0
 80024d8:	0949      	lsrs	r1, r1, #5
 80024da:	2364      	movs	r3, #100	@ 0x64
 80024dc:	fb03 0311 	mls	r3, r3, r1, r0
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	3332      	adds	r3, #50	@ 0x32
 80024e4:	fba2 2303 	umull	r2, r3, r2, r3
 80024e8:	095b      	lsrs	r3, r3, #5
 80024ea:	005a      	lsls	r2, r3, #1
 80024ec:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 80024f0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	6821      	ldr	r1, [r4, #0]
 80024fa:	4413      	add	r3, r2
 80024fc:	608b      	str	r3, [r1, #8]
 80024fe:	e7d4      	b.n	80024aa <UART_SetConfig+0xb2>
 8002500:	40011000 	.word	0x40011000
 8002504:	51eb851f 	.word	0x51eb851f

08002508 <UART_WaitOnFlagUntilTimeout>:
{
 8002508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800250c:	b083      	sub	sp, #12
 800250e:	4605      	mov	r5, r0
 8002510:	460e      	mov	r6, r1
 8002512:	4617      	mov	r7, r2
 8002514:	4699      	mov	r9, r3
 8002516:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800251a:	682b      	ldr	r3, [r5, #0]
 800251c:	681c      	ldr	r4, [r3, #0]
 800251e:	ea36 0404 	bics.w	r4, r6, r4
 8002522:	bf0c      	ite	eq
 8002524:	2401      	moveq	r4, #1
 8002526:	2400      	movne	r4, #0
 8002528:	42bc      	cmp	r4, r7
 800252a:	d128      	bne.n	800257e <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 800252c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002530:	d0f3      	beq.n	800251a <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002532:	f7fe ffef 	bl	8001514 <HAL_GetTick>
 8002536:	eba0 0009 	sub.w	r0, r0, r9
 800253a:	4540      	cmp	r0, r8
 800253c:	d823      	bhi.n	8002586 <UART_WaitOnFlagUntilTimeout+0x7e>
 800253e:	f1b8 0f00 	cmp.w	r8, #0
 8002542:	d022      	beq.n	800258a <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002544:	682b      	ldr	r3, [r5, #0]
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	f012 0f04 	tst.w	r2, #4
 800254c:	d0e5      	beq.n	800251a <UART_WaitOnFlagUntilTimeout+0x12>
 800254e:	2e80      	cmp	r6, #128	@ 0x80
 8002550:	d0e3      	beq.n	800251a <UART_WaitOnFlagUntilTimeout+0x12>
 8002552:	2e40      	cmp	r6, #64	@ 0x40
 8002554:	d0e1      	beq.n	800251a <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	f012 0f08 	tst.w	r2, #8
 800255c:	d0dd      	beq.n	800251a <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 800255e:	2400      	movs	r4, #0
 8002560:	9401      	str	r4, [sp, #4]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	9201      	str	r2, [sp, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	9301      	str	r3, [sp, #4]
 800256a:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 800256c:	4628      	mov	r0, r5
 800256e:	f7ff ff15 	bl	800239c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002572:	2308      	movs	r3, #8
 8002574:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8002576:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 800257a:	2001      	movs	r0, #1
 800257c:	e000      	b.n	8002580 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 800257e:	2000      	movs	r0, #0
}
 8002580:	b003      	add	sp, #12
 8002582:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8002586:	2003      	movs	r0, #3
 8002588:	e7fa      	b.n	8002580 <UART_WaitOnFlagUntilTimeout+0x78>
 800258a:	2003      	movs	r0, #3
 800258c:	e7f8      	b.n	8002580 <UART_WaitOnFlagUntilTimeout+0x78>

0800258e <HAL_UART_Init>:
  if (huart == NULL)
 800258e:	b360      	cbz	r0, 80025ea <HAL_UART_Init+0x5c>
{
 8002590:	b510      	push	{r4, lr}
 8002592:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002594:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002598:	b313      	cbz	r3, 80025e0 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 800259a:	2324      	movs	r3, #36	@ 0x24
 800259c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80025a0:	6822      	ldr	r2, [r4, #0]
 80025a2:	68d3      	ldr	r3, [r2, #12]
 80025a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80025a8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80025aa:	4620      	mov	r0, r4
 80025ac:	f7ff ff24 	bl	80023f8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025b0:	6822      	ldr	r2, [r4, #0]
 80025b2:	6913      	ldr	r3, [r2, #16]
 80025b4:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80025b8:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025ba:	6822      	ldr	r2, [r4, #0]
 80025bc:	6953      	ldr	r3, [r2, #20]
 80025be:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80025c2:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80025c4:	6822      	ldr	r2, [r4, #0]
 80025c6:	68d3      	ldr	r3, [r2, #12]
 80025c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80025cc:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ce:	2000      	movs	r0, #0
 80025d0:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80025d2:	2320      	movs	r3, #32
 80025d4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80025d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025dc:	6360      	str	r0, [r4, #52]	@ 0x34
}
 80025de:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80025e0:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 80025e4:	f7fe fe86 	bl	80012f4 <HAL_UART_MspInit>
 80025e8:	e7d7      	b.n	800259a <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80025ea:	2001      	movs	r0, #1
}
 80025ec:	4770      	bx	lr

080025ee <HAL_UART_Transmit>:
{
 80025ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80025f6:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b20      	cmp	r3, #32
 80025fe:	d156      	bne.n	80026ae <HAL_UART_Transmit+0xc0>
 8002600:	4604      	mov	r4, r0
 8002602:	460d      	mov	r5, r1
 8002604:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002606:	2900      	cmp	r1, #0
 8002608:	d055      	beq.n	80026b6 <HAL_UART_Transmit+0xc8>
 800260a:	b90a      	cbnz	r2, 8002610 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 800260c:	2001      	movs	r0, #1
 800260e:	e04f      	b.n	80026b0 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002610:	2300      	movs	r3, #0
 8002612:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002614:	2321      	movs	r3, #33	@ 0x21
 8002616:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 800261a:	f7fe ff7b 	bl	8001514 <HAL_GetTick>
 800261e:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002620:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002624:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002628:	68a3      	ldr	r3, [r4, #8]
 800262a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800262e:	d002      	beq.n	8002636 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8002630:	f04f 0800 	mov.w	r8, #0
 8002634:	e014      	b.n	8002660 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002636:	6923      	ldr	r3, [r4, #16]
 8002638:	b32b      	cbz	r3, 8002686 <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 800263a:	f04f 0800 	mov.w	r8, #0
 800263e:	e00f      	b.n	8002660 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8002640:	2320      	movs	r3, #32
 8002642:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8002646:	2003      	movs	r0, #3
 8002648:	e032      	b.n	80026b0 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800264a:	f838 3b02 	ldrh.w	r3, [r8], #2
 800264e:	6822      	ldr	r2, [r4, #0]
 8002650:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002654:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8002656:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8002658:	b292      	uxth	r2, r2
 800265a:	3a01      	subs	r2, #1
 800265c:	b292      	uxth	r2, r2
 800265e:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002660:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8002662:	b29b      	uxth	r3, r3
 8002664:	b193      	cbz	r3, 800268c <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002666:	9600      	str	r6, [sp, #0]
 8002668:	463b      	mov	r3, r7
 800266a:	2200      	movs	r2, #0
 800266c:	2180      	movs	r1, #128	@ 0x80
 800266e:	4620      	mov	r0, r4
 8002670:	f7ff ff4a 	bl	8002508 <UART_WaitOnFlagUntilTimeout>
 8002674:	2800      	cmp	r0, #0
 8002676:	d1e3      	bne.n	8002640 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8002678:	2d00      	cmp	r5, #0
 800267a:	d0e6      	beq.n	800264a <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800267c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002680:	6823      	ldr	r3, [r4, #0]
 8002682:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002684:	e7e7      	b.n	8002656 <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8002686:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8002688:	2500      	movs	r5, #0
 800268a:	e7e9      	b.n	8002660 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800268c:	9600      	str	r6, [sp, #0]
 800268e:	463b      	mov	r3, r7
 8002690:	2200      	movs	r2, #0
 8002692:	2140      	movs	r1, #64	@ 0x40
 8002694:	4620      	mov	r0, r4
 8002696:	f7ff ff37 	bl	8002508 <UART_WaitOnFlagUntilTimeout>
 800269a:	b918      	cbnz	r0, 80026a4 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 800269c:	2320      	movs	r3, #32
 800269e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 80026a2:	e005      	b.n	80026b0 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 80026a4:	2320      	movs	r3, #32
 80026a6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 80026aa:	2003      	movs	r0, #3
 80026ac:	e000      	b.n	80026b0 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 80026ae:	2002      	movs	r0, #2
}
 80026b0:	b002      	add	sp, #8
 80026b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80026b6:	2001      	movs	r0, #1
 80026b8:	e7fa      	b.n	80026b0 <HAL_UART_Transmit+0xc2>

080026ba <HAL_UART_RxCpltCallback>:
}
 80026ba:	4770      	bx	lr

080026bc <HAL_UART_RxHalfCpltCallback>:
}
 80026bc:	4770      	bx	lr

080026be <HAL_UART_ErrorCallback>:
}
 80026be:	4770      	bx	lr

080026c0 <UART_DMAError>:
{
 80026c0:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026c2:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80026c4:	6823      	ldr	r3, [r4, #0]
 80026c6:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80026c8:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b21      	cmp	r3, #33	@ 0x21
 80026d0:	d010      	beq.n	80026f4 <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026d2:	6823      	ldr	r3, [r4, #0]
 80026d4:	695a      	ldr	r2, [r3, #20]
 80026d6:	f002 0240 	and.w	r2, r2, #64	@ 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80026da:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b22      	cmp	r3, #34	@ 0x22
 80026e2:	d011      	beq.n	8002708 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80026e4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80026e6:	f043 0310 	orr.w	r3, r3, #16
 80026ea:	6463      	str	r3, [r4, #68]	@ 0x44
  HAL_UART_ErrorCallback(huart);
 80026ec:	4620      	mov	r0, r4
 80026ee:	f7ff ffe6 	bl	80026be <HAL_UART_ErrorCallback>
}
 80026f2:	bd10      	pop	{r4, pc}
 80026f4:	f002 0280 	and.w	r2, r2, #128	@ 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80026f8:	2a00      	cmp	r2, #0
 80026fa:	d0ea      	beq.n	80026d2 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	84e3      	strh	r3, [r4, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8002700:	4620      	mov	r0, r4
 8002702:	f7ff fe3b 	bl	800237c <UART_EndTxTransfer>
 8002706:	e7e4      	b.n	80026d2 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002708:	2a00      	cmp	r2, #0
 800270a:	d0eb      	beq.n	80026e4 <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 800270c:	2300      	movs	r3, #0
 800270e:	85e3      	strh	r3, [r4, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8002710:	4620      	mov	r0, r4
 8002712:	f7ff fe43 	bl	800239c <UART_EndRxTransfer>
 8002716:	e7e5      	b.n	80026e4 <UART_DMAError+0x24>

08002718 <HAL_UARTEx_RxEventCallback>:
}
 8002718:	4770      	bx	lr

0800271a <UART_DMARxHalfCplt>:
{
 800271a:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800271c:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800271e:	2301      	movs	r3, #1
 8002720:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002722:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002724:	2b01      	cmp	r3, #1
 8002726:	d002      	beq.n	800272e <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 8002728:	f7ff ffc8 	bl	80026bc <HAL_UART_RxHalfCpltCallback>
}
 800272c:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800272e:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8002730:	0849      	lsrs	r1, r1, #1
 8002732:	f7ff fff1 	bl	8002718 <HAL_UARTEx_RxEventCallback>
 8002736:	e7f9      	b.n	800272c <UART_DMARxHalfCplt+0x12>

08002738 <UART_DMAReceiveCplt>:
{
 8002738:	b508      	push	{r3, lr}
 800273a:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800273c:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002746:	d12b      	bne.n	80027a0 <UART_DMAReceiveCplt+0x68>
    huart->RxXferCount = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800274c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800274e:	f102 030c 	add.w	r3, r2, #12
 8002752:	e853 3f00 	ldrex	r3, [r3]
 8002756:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800275a:	320c      	adds	r2, #12
 800275c:	e842 3100 	strex	r1, r3, [r2]
 8002760:	2900      	cmp	r1, #0
 8002762:	d1f3      	bne.n	800274c <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002764:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002766:	f102 0314 	add.w	r3, r2, #20
 800276a:	e853 3f00 	ldrex	r3, [r3]
 800276e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002772:	3214      	adds	r2, #20
 8002774:	e842 3100 	strex	r1, r3, [r2]
 8002778:	2900      	cmp	r1, #0
 800277a:	d1f3      	bne.n	8002764 <UART_DMAReceiveCplt+0x2c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800277c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800277e:	f102 0314 	add.w	r3, r2, #20
 8002782:	e853 3f00 	ldrex	r3, [r3]
 8002786:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800278a:	3214      	adds	r2, #20
 800278c:	e842 3100 	strex	r1, r3, [r2]
 8002790:	2900      	cmp	r1, #0
 8002792:	d1f3      	bne.n	800277c <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 8002794:	2320      	movs	r3, #32
 8002796:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800279a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800279c:	2b01      	cmp	r3, #1
 800279e:	d007      	beq.n	80027b0 <UART_DMAReceiveCplt+0x78>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027a0:	2300      	movs	r3, #0
 80027a2:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027a4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d00f      	beq.n	80027ca <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 80027aa:	f7ff ff86 	bl	80026ba <HAL_UART_RxCpltCallback>
}
 80027ae:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027b0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027b2:	f102 030c 	add.w	r3, r2, #12
 80027b6:	e853 3f00 	ldrex	r3, [r3]
 80027ba:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027be:	320c      	adds	r2, #12
 80027c0:	e842 3100 	strex	r1, r3, [r2]
 80027c4:	2900      	cmp	r1, #0
 80027c6:	d1f3      	bne.n	80027b0 <UART_DMAReceiveCplt+0x78>
 80027c8:	e7ea      	b.n	80027a0 <UART_DMAReceiveCplt+0x68>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80027ca:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80027cc:	f7ff ffa4 	bl	8002718 <HAL_UARTEx_RxEventCallback>
 80027d0:	e7ed      	b.n	80027ae <UART_DMAReceiveCplt+0x76>
	...

080027d4 <UART_Start_Receive_DMA>:
{
 80027d4:	b530      	push	{r4, r5, lr}
 80027d6:	b083      	sub	sp, #12
 80027d8:	4604      	mov	r4, r0
 80027da:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 80027dc:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->RxXferSize = Size;
 80027de:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027e0:	2500      	movs	r5, #0
 80027e2:	6445      	str	r5, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027e4:	2222      	movs	r2, #34	@ 0x22
 80027e6:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80027ea:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80027ec:	481f      	ldr	r0, [pc, #124]	@ (800286c <UART_Start_Receive_DMA+0x98>)
 80027ee:	63d0      	str	r0, [r2, #60]	@ 0x3c
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80027f0:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80027f2:	481f      	ldr	r0, [pc, #124]	@ (8002870 <UART_Start_Receive_DMA+0x9c>)
 80027f4:	6410      	str	r0, [r2, #64]	@ 0x40
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80027f6:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80027f8:	481e      	ldr	r0, [pc, #120]	@ (8002874 <UART_Start_Receive_DMA+0xa0>)
 80027fa:	64d0      	str	r0, [r2, #76]	@ 0x4c
  huart->hdmarx->XferAbortCallback = NULL;
 80027fc:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80027fe:	6515      	str	r5, [r2, #80]	@ 0x50
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002800:	6820      	ldr	r0, [r4, #0]
 8002802:	460a      	mov	r2, r1
 8002804:	1d01      	adds	r1, r0, #4
 8002806:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8002808:	f7ff fab6 	bl	8001d78 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 800280c:	9501      	str	r5, [sp, #4]
 800280e:	6823      	ldr	r3, [r4, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	9201      	str	r2, [sp, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	9301      	str	r3, [sp, #4]
 8002818:	9b01      	ldr	r3, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 800281a:	6923      	ldr	r3, [r4, #16]
 800281c:	b15b      	cbz	r3, 8002836 <UART_Start_Receive_DMA+0x62>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800281e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002820:	f102 030c 	add.w	r3, r2, #12
 8002824:	e853 3f00 	ldrex	r3, [r3]
 8002828:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800282c:	320c      	adds	r2, #12
 800282e:	e842 3100 	strex	r1, r3, [r2]
 8002832:	2900      	cmp	r1, #0
 8002834:	d1f3      	bne.n	800281e <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002836:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002838:	f102 0314 	add.w	r3, r2, #20
 800283c:	e853 3f00 	ldrex	r3, [r3]
 8002840:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002844:	3214      	adds	r2, #20
 8002846:	e842 3100 	strex	r1, r3, [r2]
 800284a:	2900      	cmp	r1, #0
 800284c:	d1f3      	bne.n	8002836 <UART_Start_Receive_DMA+0x62>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800284e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002850:	f102 0314 	add.w	r3, r2, #20
 8002854:	e853 3f00 	ldrex	r3, [r3]
 8002858:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800285c:	3214      	adds	r2, #20
 800285e:	e842 3100 	strex	r1, r3, [r2]
 8002862:	2900      	cmp	r1, #0
 8002864:	d1f3      	bne.n	800284e <UART_Start_Receive_DMA+0x7a>
}
 8002866:	2000      	movs	r0, #0
 8002868:	b003      	add	sp, #12
 800286a:	bd30      	pop	{r4, r5, pc}
 800286c:	08002739 	.word	0x08002739
 8002870:	0800271b 	.word	0x0800271b
 8002874:	080026c1 	.word	0x080026c1

08002878 <HAL_UART_Receive_DMA>:
{
 8002878:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800287a:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b20      	cmp	r3, #32
 8002882:	d108      	bne.n	8002896 <HAL_UART_Receive_DMA+0x1e>
    if ((pData == NULL) || (Size == 0U))
 8002884:	b149      	cbz	r1, 800289a <HAL_UART_Receive_DMA+0x22>
 8002886:	b90a      	cbnz	r2, 800288c <HAL_UART_Receive_DMA+0x14>
      return HAL_ERROR;
 8002888:	2001      	movs	r0, #1
}
 800288a:	bd08      	pop	{r3, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800288c:	2300      	movs	r3, #0
 800288e:	6303      	str	r3, [r0, #48]	@ 0x30
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002890:	f7ff ffa0 	bl	80027d4 <UART_Start_Receive_DMA>
 8002894:	e7f9      	b.n	800288a <HAL_UART_Receive_DMA+0x12>
    return HAL_BUSY;
 8002896:	2002      	movs	r0, #2
 8002898:	e7f7      	b.n	800288a <HAL_UART_Receive_DMA+0x12>
      return HAL_ERROR;
 800289a:	2001      	movs	r0, #1
 800289c:	e7f5      	b.n	800288a <HAL_UART_Receive_DMA+0x12>
	...

080028a0 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80028a0:	4b01      	ldr	r3, [pc, #4]	@ (80028a8 <LL_SetSystemCoreClock+0x8>)
 80028a2:	6018      	str	r0, [r3, #0]
}
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	20000000 	.word	0x20000000

080028ac <_strtoul_l.constprop.0>:
 80028ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80028b0:	4e34      	ldr	r6, [pc, #208]	@ (8002984 <_strtoul_l.constprop.0+0xd8>)
 80028b2:	4686      	mov	lr, r0
 80028b4:	460d      	mov	r5, r1
 80028b6:	4628      	mov	r0, r5
 80028b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80028bc:	5d37      	ldrb	r7, [r6, r4]
 80028be:	f017 0708 	ands.w	r7, r7, #8
 80028c2:	d1f8      	bne.n	80028b6 <_strtoul_l.constprop.0+0xa>
 80028c4:	2c2d      	cmp	r4, #45	@ 0x2d
 80028c6:	d12f      	bne.n	8002928 <_strtoul_l.constprop.0+0x7c>
 80028c8:	782c      	ldrb	r4, [r5, #0]
 80028ca:	2701      	movs	r7, #1
 80028cc:	1c85      	adds	r5, r0, #2
 80028ce:	f033 0010 	bics.w	r0, r3, #16
 80028d2:	d109      	bne.n	80028e8 <_strtoul_l.constprop.0+0x3c>
 80028d4:	2c30      	cmp	r4, #48	@ 0x30
 80028d6:	d12c      	bne.n	8002932 <_strtoul_l.constprop.0+0x86>
 80028d8:	7828      	ldrb	r0, [r5, #0]
 80028da:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80028de:	2858      	cmp	r0, #88	@ 0x58
 80028e0:	d127      	bne.n	8002932 <_strtoul_l.constprop.0+0x86>
 80028e2:	786c      	ldrb	r4, [r5, #1]
 80028e4:	2310      	movs	r3, #16
 80028e6:	3502      	adds	r5, #2
 80028e8:	f04f 38ff 	mov.w	r8, #4294967295
 80028ec:	2600      	movs	r6, #0
 80028ee:	fbb8 f8f3 	udiv	r8, r8, r3
 80028f2:	fb03 f908 	mul.w	r9, r3, r8
 80028f6:	ea6f 0909 	mvn.w	r9, r9
 80028fa:	4630      	mov	r0, r6
 80028fc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8002900:	f1bc 0f09 	cmp.w	ip, #9
 8002904:	d81c      	bhi.n	8002940 <_strtoul_l.constprop.0+0x94>
 8002906:	4664      	mov	r4, ip
 8002908:	42a3      	cmp	r3, r4
 800290a:	dd2a      	ble.n	8002962 <_strtoul_l.constprop.0+0xb6>
 800290c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8002910:	d007      	beq.n	8002922 <_strtoul_l.constprop.0+0x76>
 8002912:	4580      	cmp	r8, r0
 8002914:	d322      	bcc.n	800295c <_strtoul_l.constprop.0+0xb0>
 8002916:	d101      	bne.n	800291c <_strtoul_l.constprop.0+0x70>
 8002918:	45a1      	cmp	r9, r4
 800291a:	db1f      	blt.n	800295c <_strtoul_l.constprop.0+0xb0>
 800291c:	fb00 4003 	mla	r0, r0, r3, r4
 8002920:	2601      	movs	r6, #1
 8002922:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002926:	e7e9      	b.n	80028fc <_strtoul_l.constprop.0+0x50>
 8002928:	2c2b      	cmp	r4, #43	@ 0x2b
 800292a:	bf04      	itt	eq
 800292c:	782c      	ldrbeq	r4, [r5, #0]
 800292e:	1c85      	addeq	r5, r0, #2
 8002930:	e7cd      	b.n	80028ce <_strtoul_l.constprop.0+0x22>
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1d8      	bne.n	80028e8 <_strtoul_l.constprop.0+0x3c>
 8002936:	2c30      	cmp	r4, #48	@ 0x30
 8002938:	bf0c      	ite	eq
 800293a:	2308      	moveq	r3, #8
 800293c:	230a      	movne	r3, #10
 800293e:	e7d3      	b.n	80028e8 <_strtoul_l.constprop.0+0x3c>
 8002940:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8002944:	f1bc 0f19 	cmp.w	ip, #25
 8002948:	d801      	bhi.n	800294e <_strtoul_l.constprop.0+0xa2>
 800294a:	3c37      	subs	r4, #55	@ 0x37
 800294c:	e7dc      	b.n	8002908 <_strtoul_l.constprop.0+0x5c>
 800294e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8002952:	f1bc 0f19 	cmp.w	ip, #25
 8002956:	d804      	bhi.n	8002962 <_strtoul_l.constprop.0+0xb6>
 8002958:	3c57      	subs	r4, #87	@ 0x57
 800295a:	e7d5      	b.n	8002908 <_strtoul_l.constprop.0+0x5c>
 800295c:	f04f 36ff 	mov.w	r6, #4294967295
 8002960:	e7df      	b.n	8002922 <_strtoul_l.constprop.0+0x76>
 8002962:	1c73      	adds	r3, r6, #1
 8002964:	d106      	bne.n	8002974 <_strtoul_l.constprop.0+0xc8>
 8002966:	2322      	movs	r3, #34	@ 0x22
 8002968:	f8ce 3000 	str.w	r3, [lr]
 800296c:	4630      	mov	r0, r6
 800296e:	b932      	cbnz	r2, 800297e <_strtoul_l.constprop.0+0xd2>
 8002970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002974:	b107      	cbz	r7, 8002978 <_strtoul_l.constprop.0+0xcc>
 8002976:	4240      	negs	r0, r0
 8002978:	2a00      	cmp	r2, #0
 800297a:	d0f9      	beq.n	8002970 <_strtoul_l.constprop.0+0xc4>
 800297c:	b106      	cbz	r6, 8002980 <_strtoul_l.constprop.0+0xd4>
 800297e:	1e69      	subs	r1, r5, #1
 8002980:	6011      	str	r1, [r2, #0]
 8002982:	e7f5      	b.n	8002970 <_strtoul_l.constprop.0+0xc4>
 8002984:	08003475 	.word	0x08003475

08002988 <strtoul>:
 8002988:	4613      	mov	r3, r2
 800298a:	460a      	mov	r2, r1
 800298c:	4601      	mov	r1, r0
 800298e:	4802      	ldr	r0, [pc, #8]	@ (8002998 <strtoul+0x10>)
 8002990:	6800      	ldr	r0, [r0, #0]
 8002992:	f7ff bf8b 	b.w	80028ac <_strtoul_l.constprop.0>
 8002996:	bf00      	nop
 8002998:	2000000c 	.word	0x2000000c

0800299c <_vsniprintf_r>:
 800299c:	b530      	push	{r4, r5, lr}
 800299e:	4614      	mov	r4, r2
 80029a0:	2c00      	cmp	r4, #0
 80029a2:	b09b      	sub	sp, #108	@ 0x6c
 80029a4:	4605      	mov	r5, r0
 80029a6:	461a      	mov	r2, r3
 80029a8:	da05      	bge.n	80029b6 <_vsniprintf_r+0x1a>
 80029aa:	238b      	movs	r3, #139	@ 0x8b
 80029ac:	6003      	str	r3, [r0, #0]
 80029ae:	f04f 30ff 	mov.w	r0, #4294967295
 80029b2:	b01b      	add	sp, #108	@ 0x6c
 80029b4:	bd30      	pop	{r4, r5, pc}
 80029b6:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80029ba:	f8ad 300c 	strh.w	r3, [sp, #12]
 80029be:	bf14      	ite	ne
 80029c0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80029c4:	4623      	moveq	r3, r4
 80029c6:	9302      	str	r3, [sp, #8]
 80029c8:	9305      	str	r3, [sp, #20]
 80029ca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80029ce:	9100      	str	r1, [sp, #0]
 80029d0:	9104      	str	r1, [sp, #16]
 80029d2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80029d6:	4669      	mov	r1, sp
 80029d8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80029da:	f000 f9d7 	bl	8002d8c <_svfiprintf_r>
 80029de:	1c43      	adds	r3, r0, #1
 80029e0:	bfbc      	itt	lt
 80029e2:	238b      	movlt	r3, #139	@ 0x8b
 80029e4:	602b      	strlt	r3, [r5, #0]
 80029e6:	2c00      	cmp	r4, #0
 80029e8:	d0e3      	beq.n	80029b2 <_vsniprintf_r+0x16>
 80029ea:	9b00      	ldr	r3, [sp, #0]
 80029ec:	2200      	movs	r2, #0
 80029ee:	701a      	strb	r2, [r3, #0]
 80029f0:	e7df      	b.n	80029b2 <_vsniprintf_r+0x16>
	...

080029f4 <vsniprintf>:
 80029f4:	b507      	push	{r0, r1, r2, lr}
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	4613      	mov	r3, r2
 80029fa:	460a      	mov	r2, r1
 80029fc:	4601      	mov	r1, r0
 80029fe:	4803      	ldr	r0, [pc, #12]	@ (8002a0c <vsniprintf+0x18>)
 8002a00:	6800      	ldr	r0, [r0, #0]
 8002a02:	f7ff ffcb 	bl	800299c <_vsniprintf_r>
 8002a06:	b003      	add	sp, #12
 8002a08:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a0c:	2000000c 	.word	0x2000000c

08002a10 <strncpy>:
 8002a10:	b510      	push	{r4, lr}
 8002a12:	3901      	subs	r1, #1
 8002a14:	4603      	mov	r3, r0
 8002a16:	b132      	cbz	r2, 8002a26 <strncpy+0x16>
 8002a18:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002a1c:	f803 4b01 	strb.w	r4, [r3], #1
 8002a20:	3a01      	subs	r2, #1
 8002a22:	2c00      	cmp	r4, #0
 8002a24:	d1f7      	bne.n	8002a16 <strncpy+0x6>
 8002a26:	441a      	add	r2, r3
 8002a28:	2100      	movs	r1, #0
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d100      	bne.n	8002a30 <strncpy+0x20>
 8002a2e:	bd10      	pop	{r4, pc}
 8002a30:	f803 1b01 	strb.w	r1, [r3], #1
 8002a34:	e7f9      	b.n	8002a2a <strncpy+0x1a>

08002a36 <__strtok_r>:
 8002a36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a38:	4604      	mov	r4, r0
 8002a3a:	b908      	cbnz	r0, 8002a40 <__strtok_r+0xa>
 8002a3c:	6814      	ldr	r4, [r2, #0]
 8002a3e:	b144      	cbz	r4, 8002a52 <__strtok_r+0x1c>
 8002a40:	4620      	mov	r0, r4
 8002a42:	f814 5b01 	ldrb.w	r5, [r4], #1
 8002a46:	460f      	mov	r7, r1
 8002a48:	f817 6b01 	ldrb.w	r6, [r7], #1
 8002a4c:	b91e      	cbnz	r6, 8002a56 <__strtok_r+0x20>
 8002a4e:	b965      	cbnz	r5, 8002a6a <__strtok_r+0x34>
 8002a50:	6015      	str	r5, [r2, #0]
 8002a52:	2000      	movs	r0, #0
 8002a54:	e005      	b.n	8002a62 <__strtok_r+0x2c>
 8002a56:	42b5      	cmp	r5, r6
 8002a58:	d1f6      	bne.n	8002a48 <__strtok_r+0x12>
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <__strtok_r+0xa>
 8002a5e:	6014      	str	r4, [r2, #0]
 8002a60:	7003      	strb	r3, [r0, #0]
 8002a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a64:	461c      	mov	r4, r3
 8002a66:	e00c      	b.n	8002a82 <__strtok_r+0x4c>
 8002a68:	b915      	cbnz	r5, 8002a70 <__strtok_r+0x3a>
 8002a6a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002a6e:	460e      	mov	r6, r1
 8002a70:	f816 5b01 	ldrb.w	r5, [r6], #1
 8002a74:	42ab      	cmp	r3, r5
 8002a76:	d1f7      	bne.n	8002a68 <__strtok_r+0x32>
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0f3      	beq.n	8002a64 <__strtok_r+0x2e>
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f804 3c01 	strb.w	r3, [r4, #-1]
 8002a82:	6014      	str	r4, [r2, #0]
 8002a84:	e7ed      	b.n	8002a62 <__strtok_r+0x2c>

08002a86 <strtok_r>:
 8002a86:	2301      	movs	r3, #1
 8002a88:	f7ff bfd5 	b.w	8002a36 <__strtok_r>

08002a8c <__errno>:
 8002a8c:	4b01      	ldr	r3, [pc, #4]	@ (8002a94 <__errno+0x8>)
 8002a8e:	6818      	ldr	r0, [r3, #0]
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	2000000c 	.word	0x2000000c

08002a98 <__libc_init_array>:
 8002a98:	b570      	push	{r4, r5, r6, lr}
 8002a9a:	4d0d      	ldr	r5, [pc, #52]	@ (8002ad0 <__libc_init_array+0x38>)
 8002a9c:	4c0d      	ldr	r4, [pc, #52]	@ (8002ad4 <__libc_init_array+0x3c>)
 8002a9e:	1b64      	subs	r4, r4, r5
 8002aa0:	10a4      	asrs	r4, r4, #2
 8002aa2:	2600      	movs	r6, #0
 8002aa4:	42a6      	cmp	r6, r4
 8002aa6:	d109      	bne.n	8002abc <__libc_init_array+0x24>
 8002aa8:	4d0b      	ldr	r5, [pc, #44]	@ (8002ad8 <__libc_init_array+0x40>)
 8002aaa:	4c0c      	ldr	r4, [pc, #48]	@ (8002adc <__libc_init_array+0x44>)
 8002aac:	f000 fc66 	bl	800337c <_init>
 8002ab0:	1b64      	subs	r4, r4, r5
 8002ab2:	10a4      	asrs	r4, r4, #2
 8002ab4:	2600      	movs	r6, #0
 8002ab6:	42a6      	cmp	r6, r4
 8002ab8:	d105      	bne.n	8002ac6 <__libc_init_array+0x2e>
 8002aba:	bd70      	pop	{r4, r5, r6, pc}
 8002abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ac0:	4798      	blx	r3
 8002ac2:	3601      	adds	r6, #1
 8002ac4:	e7ee      	b.n	8002aa4 <__libc_init_array+0xc>
 8002ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aca:	4798      	blx	r3
 8002acc:	3601      	adds	r6, #1
 8002ace:	e7f2      	b.n	8002ab6 <__libc_init_array+0x1e>
 8002ad0:	080035b0 	.word	0x080035b0
 8002ad4:	080035b0 	.word	0x080035b0
 8002ad8:	080035b0 	.word	0x080035b0
 8002adc:	080035b4 	.word	0x080035b4

08002ae0 <__retarget_lock_acquire_recursive>:
 8002ae0:	4770      	bx	lr

08002ae2 <__retarget_lock_release_recursive>:
 8002ae2:	4770      	bx	lr

08002ae4 <_free_r>:
 8002ae4:	b538      	push	{r3, r4, r5, lr}
 8002ae6:	4605      	mov	r5, r0
 8002ae8:	2900      	cmp	r1, #0
 8002aea:	d041      	beq.n	8002b70 <_free_r+0x8c>
 8002aec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002af0:	1f0c      	subs	r4, r1, #4
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	bfb8      	it	lt
 8002af6:	18e4      	addlt	r4, r4, r3
 8002af8:	f000 f8e0 	bl	8002cbc <__malloc_lock>
 8002afc:	4a1d      	ldr	r2, [pc, #116]	@ (8002b74 <_free_r+0x90>)
 8002afe:	6813      	ldr	r3, [r2, #0]
 8002b00:	b933      	cbnz	r3, 8002b10 <_free_r+0x2c>
 8002b02:	6063      	str	r3, [r4, #4]
 8002b04:	6014      	str	r4, [r2, #0]
 8002b06:	4628      	mov	r0, r5
 8002b08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b0c:	f000 b8dc 	b.w	8002cc8 <__malloc_unlock>
 8002b10:	42a3      	cmp	r3, r4
 8002b12:	d908      	bls.n	8002b26 <_free_r+0x42>
 8002b14:	6820      	ldr	r0, [r4, #0]
 8002b16:	1821      	adds	r1, r4, r0
 8002b18:	428b      	cmp	r3, r1
 8002b1a:	bf01      	itttt	eq
 8002b1c:	6819      	ldreq	r1, [r3, #0]
 8002b1e:	685b      	ldreq	r3, [r3, #4]
 8002b20:	1809      	addeq	r1, r1, r0
 8002b22:	6021      	streq	r1, [r4, #0]
 8002b24:	e7ed      	b.n	8002b02 <_free_r+0x1e>
 8002b26:	461a      	mov	r2, r3
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	b10b      	cbz	r3, 8002b30 <_free_r+0x4c>
 8002b2c:	42a3      	cmp	r3, r4
 8002b2e:	d9fa      	bls.n	8002b26 <_free_r+0x42>
 8002b30:	6811      	ldr	r1, [r2, #0]
 8002b32:	1850      	adds	r0, r2, r1
 8002b34:	42a0      	cmp	r0, r4
 8002b36:	d10b      	bne.n	8002b50 <_free_r+0x6c>
 8002b38:	6820      	ldr	r0, [r4, #0]
 8002b3a:	4401      	add	r1, r0
 8002b3c:	1850      	adds	r0, r2, r1
 8002b3e:	4283      	cmp	r3, r0
 8002b40:	6011      	str	r1, [r2, #0]
 8002b42:	d1e0      	bne.n	8002b06 <_free_r+0x22>
 8002b44:	6818      	ldr	r0, [r3, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	6053      	str	r3, [r2, #4]
 8002b4a:	4408      	add	r0, r1
 8002b4c:	6010      	str	r0, [r2, #0]
 8002b4e:	e7da      	b.n	8002b06 <_free_r+0x22>
 8002b50:	d902      	bls.n	8002b58 <_free_r+0x74>
 8002b52:	230c      	movs	r3, #12
 8002b54:	602b      	str	r3, [r5, #0]
 8002b56:	e7d6      	b.n	8002b06 <_free_r+0x22>
 8002b58:	6820      	ldr	r0, [r4, #0]
 8002b5a:	1821      	adds	r1, r4, r0
 8002b5c:	428b      	cmp	r3, r1
 8002b5e:	bf04      	itt	eq
 8002b60:	6819      	ldreq	r1, [r3, #0]
 8002b62:	685b      	ldreq	r3, [r3, #4]
 8002b64:	6063      	str	r3, [r4, #4]
 8002b66:	bf04      	itt	eq
 8002b68:	1809      	addeq	r1, r1, r0
 8002b6a:	6021      	streq	r1, [r4, #0]
 8002b6c:	6054      	str	r4, [r2, #4]
 8002b6e:	e7ca      	b.n	8002b06 <_free_r+0x22>
 8002b70:	bd38      	pop	{r3, r4, r5, pc}
 8002b72:	bf00      	nop
 8002b74:	20000618 	.word	0x20000618

08002b78 <sbrk_aligned>:
 8002b78:	b570      	push	{r4, r5, r6, lr}
 8002b7a:	4e0f      	ldr	r6, [pc, #60]	@ (8002bb8 <sbrk_aligned+0x40>)
 8002b7c:	460c      	mov	r4, r1
 8002b7e:	6831      	ldr	r1, [r6, #0]
 8002b80:	4605      	mov	r5, r0
 8002b82:	b911      	cbnz	r1, 8002b8a <sbrk_aligned+0x12>
 8002b84:	f000 fba6 	bl	80032d4 <_sbrk_r>
 8002b88:	6030      	str	r0, [r6, #0]
 8002b8a:	4621      	mov	r1, r4
 8002b8c:	4628      	mov	r0, r5
 8002b8e:	f000 fba1 	bl	80032d4 <_sbrk_r>
 8002b92:	1c43      	adds	r3, r0, #1
 8002b94:	d103      	bne.n	8002b9e <sbrk_aligned+0x26>
 8002b96:	f04f 34ff 	mov.w	r4, #4294967295
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	bd70      	pop	{r4, r5, r6, pc}
 8002b9e:	1cc4      	adds	r4, r0, #3
 8002ba0:	f024 0403 	bic.w	r4, r4, #3
 8002ba4:	42a0      	cmp	r0, r4
 8002ba6:	d0f8      	beq.n	8002b9a <sbrk_aligned+0x22>
 8002ba8:	1a21      	subs	r1, r4, r0
 8002baa:	4628      	mov	r0, r5
 8002bac:	f000 fb92 	bl	80032d4 <_sbrk_r>
 8002bb0:	3001      	adds	r0, #1
 8002bb2:	d1f2      	bne.n	8002b9a <sbrk_aligned+0x22>
 8002bb4:	e7ef      	b.n	8002b96 <sbrk_aligned+0x1e>
 8002bb6:	bf00      	nop
 8002bb8:	20000614 	.word	0x20000614

08002bbc <_malloc_r>:
 8002bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002bc0:	1ccd      	adds	r5, r1, #3
 8002bc2:	f025 0503 	bic.w	r5, r5, #3
 8002bc6:	3508      	adds	r5, #8
 8002bc8:	2d0c      	cmp	r5, #12
 8002bca:	bf38      	it	cc
 8002bcc:	250c      	movcc	r5, #12
 8002bce:	2d00      	cmp	r5, #0
 8002bd0:	4606      	mov	r6, r0
 8002bd2:	db01      	blt.n	8002bd8 <_malloc_r+0x1c>
 8002bd4:	42a9      	cmp	r1, r5
 8002bd6:	d904      	bls.n	8002be2 <_malloc_r+0x26>
 8002bd8:	230c      	movs	r3, #12
 8002bda:	6033      	str	r3, [r6, #0]
 8002bdc:	2000      	movs	r0, #0
 8002bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002be2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002cb8 <_malloc_r+0xfc>
 8002be6:	f000 f869 	bl	8002cbc <__malloc_lock>
 8002bea:	f8d8 3000 	ldr.w	r3, [r8]
 8002bee:	461c      	mov	r4, r3
 8002bf0:	bb44      	cbnz	r4, 8002c44 <_malloc_r+0x88>
 8002bf2:	4629      	mov	r1, r5
 8002bf4:	4630      	mov	r0, r6
 8002bf6:	f7ff ffbf 	bl	8002b78 <sbrk_aligned>
 8002bfa:	1c43      	adds	r3, r0, #1
 8002bfc:	4604      	mov	r4, r0
 8002bfe:	d158      	bne.n	8002cb2 <_malloc_r+0xf6>
 8002c00:	f8d8 4000 	ldr.w	r4, [r8]
 8002c04:	4627      	mov	r7, r4
 8002c06:	2f00      	cmp	r7, #0
 8002c08:	d143      	bne.n	8002c92 <_malloc_r+0xd6>
 8002c0a:	2c00      	cmp	r4, #0
 8002c0c:	d04b      	beq.n	8002ca6 <_malloc_r+0xea>
 8002c0e:	6823      	ldr	r3, [r4, #0]
 8002c10:	4639      	mov	r1, r7
 8002c12:	4630      	mov	r0, r6
 8002c14:	eb04 0903 	add.w	r9, r4, r3
 8002c18:	f000 fb5c 	bl	80032d4 <_sbrk_r>
 8002c1c:	4581      	cmp	r9, r0
 8002c1e:	d142      	bne.n	8002ca6 <_malloc_r+0xea>
 8002c20:	6821      	ldr	r1, [r4, #0]
 8002c22:	1a6d      	subs	r5, r5, r1
 8002c24:	4629      	mov	r1, r5
 8002c26:	4630      	mov	r0, r6
 8002c28:	f7ff ffa6 	bl	8002b78 <sbrk_aligned>
 8002c2c:	3001      	adds	r0, #1
 8002c2e:	d03a      	beq.n	8002ca6 <_malloc_r+0xea>
 8002c30:	6823      	ldr	r3, [r4, #0]
 8002c32:	442b      	add	r3, r5
 8002c34:	6023      	str	r3, [r4, #0]
 8002c36:	f8d8 3000 	ldr.w	r3, [r8]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	bb62      	cbnz	r2, 8002c98 <_malloc_r+0xdc>
 8002c3e:	f8c8 7000 	str.w	r7, [r8]
 8002c42:	e00f      	b.n	8002c64 <_malloc_r+0xa8>
 8002c44:	6822      	ldr	r2, [r4, #0]
 8002c46:	1b52      	subs	r2, r2, r5
 8002c48:	d420      	bmi.n	8002c8c <_malloc_r+0xd0>
 8002c4a:	2a0b      	cmp	r2, #11
 8002c4c:	d917      	bls.n	8002c7e <_malloc_r+0xc2>
 8002c4e:	1961      	adds	r1, r4, r5
 8002c50:	42a3      	cmp	r3, r4
 8002c52:	6025      	str	r5, [r4, #0]
 8002c54:	bf18      	it	ne
 8002c56:	6059      	strne	r1, [r3, #4]
 8002c58:	6863      	ldr	r3, [r4, #4]
 8002c5a:	bf08      	it	eq
 8002c5c:	f8c8 1000 	streq.w	r1, [r8]
 8002c60:	5162      	str	r2, [r4, r5]
 8002c62:	604b      	str	r3, [r1, #4]
 8002c64:	4630      	mov	r0, r6
 8002c66:	f000 f82f 	bl	8002cc8 <__malloc_unlock>
 8002c6a:	f104 000b 	add.w	r0, r4, #11
 8002c6e:	1d23      	adds	r3, r4, #4
 8002c70:	f020 0007 	bic.w	r0, r0, #7
 8002c74:	1ac2      	subs	r2, r0, r3
 8002c76:	bf1c      	itt	ne
 8002c78:	1a1b      	subne	r3, r3, r0
 8002c7a:	50a3      	strne	r3, [r4, r2]
 8002c7c:	e7af      	b.n	8002bde <_malloc_r+0x22>
 8002c7e:	6862      	ldr	r2, [r4, #4]
 8002c80:	42a3      	cmp	r3, r4
 8002c82:	bf0c      	ite	eq
 8002c84:	f8c8 2000 	streq.w	r2, [r8]
 8002c88:	605a      	strne	r2, [r3, #4]
 8002c8a:	e7eb      	b.n	8002c64 <_malloc_r+0xa8>
 8002c8c:	4623      	mov	r3, r4
 8002c8e:	6864      	ldr	r4, [r4, #4]
 8002c90:	e7ae      	b.n	8002bf0 <_malloc_r+0x34>
 8002c92:	463c      	mov	r4, r7
 8002c94:	687f      	ldr	r7, [r7, #4]
 8002c96:	e7b6      	b.n	8002c06 <_malloc_r+0x4a>
 8002c98:	461a      	mov	r2, r3
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	42a3      	cmp	r3, r4
 8002c9e:	d1fb      	bne.n	8002c98 <_malloc_r+0xdc>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	6053      	str	r3, [r2, #4]
 8002ca4:	e7de      	b.n	8002c64 <_malloc_r+0xa8>
 8002ca6:	230c      	movs	r3, #12
 8002ca8:	6033      	str	r3, [r6, #0]
 8002caa:	4630      	mov	r0, r6
 8002cac:	f000 f80c 	bl	8002cc8 <__malloc_unlock>
 8002cb0:	e794      	b.n	8002bdc <_malloc_r+0x20>
 8002cb2:	6005      	str	r5, [r0, #0]
 8002cb4:	e7d6      	b.n	8002c64 <_malloc_r+0xa8>
 8002cb6:	bf00      	nop
 8002cb8:	20000618 	.word	0x20000618

08002cbc <__malloc_lock>:
 8002cbc:	4801      	ldr	r0, [pc, #4]	@ (8002cc4 <__malloc_lock+0x8>)
 8002cbe:	f7ff bf0f 	b.w	8002ae0 <__retarget_lock_acquire_recursive>
 8002cc2:	bf00      	nop
 8002cc4:	20000610 	.word	0x20000610

08002cc8 <__malloc_unlock>:
 8002cc8:	4801      	ldr	r0, [pc, #4]	@ (8002cd0 <__malloc_unlock+0x8>)
 8002cca:	f7ff bf0a 	b.w	8002ae2 <__retarget_lock_release_recursive>
 8002cce:	bf00      	nop
 8002cd0:	20000610 	.word	0x20000610

08002cd4 <__ssputs_r>:
 8002cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cd8:	688e      	ldr	r6, [r1, #8]
 8002cda:	461f      	mov	r7, r3
 8002cdc:	42be      	cmp	r6, r7
 8002cde:	680b      	ldr	r3, [r1, #0]
 8002ce0:	4682      	mov	sl, r0
 8002ce2:	460c      	mov	r4, r1
 8002ce4:	4690      	mov	r8, r2
 8002ce6:	d82d      	bhi.n	8002d44 <__ssputs_r+0x70>
 8002ce8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002cec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002cf0:	d026      	beq.n	8002d40 <__ssputs_r+0x6c>
 8002cf2:	6965      	ldr	r5, [r4, #20]
 8002cf4:	6909      	ldr	r1, [r1, #16]
 8002cf6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002cfa:	eba3 0901 	sub.w	r9, r3, r1
 8002cfe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002d02:	1c7b      	adds	r3, r7, #1
 8002d04:	444b      	add	r3, r9
 8002d06:	106d      	asrs	r5, r5, #1
 8002d08:	429d      	cmp	r5, r3
 8002d0a:	bf38      	it	cc
 8002d0c:	461d      	movcc	r5, r3
 8002d0e:	0553      	lsls	r3, r2, #21
 8002d10:	d527      	bpl.n	8002d62 <__ssputs_r+0x8e>
 8002d12:	4629      	mov	r1, r5
 8002d14:	f7ff ff52 	bl	8002bbc <_malloc_r>
 8002d18:	4606      	mov	r6, r0
 8002d1a:	b360      	cbz	r0, 8002d76 <__ssputs_r+0xa2>
 8002d1c:	6921      	ldr	r1, [r4, #16]
 8002d1e:	464a      	mov	r2, r9
 8002d20:	f000 fae8 	bl	80032f4 <memcpy>
 8002d24:	89a3      	ldrh	r3, [r4, #12]
 8002d26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002d2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d2e:	81a3      	strh	r3, [r4, #12]
 8002d30:	6126      	str	r6, [r4, #16]
 8002d32:	6165      	str	r5, [r4, #20]
 8002d34:	444e      	add	r6, r9
 8002d36:	eba5 0509 	sub.w	r5, r5, r9
 8002d3a:	6026      	str	r6, [r4, #0]
 8002d3c:	60a5      	str	r5, [r4, #8]
 8002d3e:	463e      	mov	r6, r7
 8002d40:	42be      	cmp	r6, r7
 8002d42:	d900      	bls.n	8002d46 <__ssputs_r+0x72>
 8002d44:	463e      	mov	r6, r7
 8002d46:	6820      	ldr	r0, [r4, #0]
 8002d48:	4632      	mov	r2, r6
 8002d4a:	4641      	mov	r1, r8
 8002d4c:	f000 faa8 	bl	80032a0 <memmove>
 8002d50:	68a3      	ldr	r3, [r4, #8]
 8002d52:	1b9b      	subs	r3, r3, r6
 8002d54:	60a3      	str	r3, [r4, #8]
 8002d56:	6823      	ldr	r3, [r4, #0]
 8002d58:	4433      	add	r3, r6
 8002d5a:	6023      	str	r3, [r4, #0]
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d62:	462a      	mov	r2, r5
 8002d64:	f000 fad4 	bl	8003310 <_realloc_r>
 8002d68:	4606      	mov	r6, r0
 8002d6a:	2800      	cmp	r0, #0
 8002d6c:	d1e0      	bne.n	8002d30 <__ssputs_r+0x5c>
 8002d6e:	6921      	ldr	r1, [r4, #16]
 8002d70:	4650      	mov	r0, sl
 8002d72:	f7ff feb7 	bl	8002ae4 <_free_r>
 8002d76:	230c      	movs	r3, #12
 8002d78:	f8ca 3000 	str.w	r3, [sl]
 8002d7c:	89a3      	ldrh	r3, [r4, #12]
 8002d7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d82:	81a3      	strh	r3, [r4, #12]
 8002d84:	f04f 30ff 	mov.w	r0, #4294967295
 8002d88:	e7e9      	b.n	8002d5e <__ssputs_r+0x8a>
	...

08002d8c <_svfiprintf_r>:
 8002d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d90:	4698      	mov	r8, r3
 8002d92:	898b      	ldrh	r3, [r1, #12]
 8002d94:	061b      	lsls	r3, r3, #24
 8002d96:	b09d      	sub	sp, #116	@ 0x74
 8002d98:	4607      	mov	r7, r0
 8002d9a:	460d      	mov	r5, r1
 8002d9c:	4614      	mov	r4, r2
 8002d9e:	d510      	bpl.n	8002dc2 <_svfiprintf_r+0x36>
 8002da0:	690b      	ldr	r3, [r1, #16]
 8002da2:	b973      	cbnz	r3, 8002dc2 <_svfiprintf_r+0x36>
 8002da4:	2140      	movs	r1, #64	@ 0x40
 8002da6:	f7ff ff09 	bl	8002bbc <_malloc_r>
 8002daa:	6028      	str	r0, [r5, #0]
 8002dac:	6128      	str	r0, [r5, #16]
 8002dae:	b930      	cbnz	r0, 8002dbe <_svfiprintf_r+0x32>
 8002db0:	230c      	movs	r3, #12
 8002db2:	603b      	str	r3, [r7, #0]
 8002db4:	f04f 30ff 	mov.w	r0, #4294967295
 8002db8:	b01d      	add	sp, #116	@ 0x74
 8002dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dbe:	2340      	movs	r3, #64	@ 0x40
 8002dc0:	616b      	str	r3, [r5, #20]
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8002dc6:	2320      	movs	r3, #32
 8002dc8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002dcc:	f8cd 800c 	str.w	r8, [sp, #12]
 8002dd0:	2330      	movs	r3, #48	@ 0x30
 8002dd2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002f70 <_svfiprintf_r+0x1e4>
 8002dd6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002dda:	f04f 0901 	mov.w	r9, #1
 8002dde:	4623      	mov	r3, r4
 8002de0:	469a      	mov	sl, r3
 8002de2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002de6:	b10a      	cbz	r2, 8002dec <_svfiprintf_r+0x60>
 8002de8:	2a25      	cmp	r2, #37	@ 0x25
 8002dea:	d1f9      	bne.n	8002de0 <_svfiprintf_r+0x54>
 8002dec:	ebba 0b04 	subs.w	fp, sl, r4
 8002df0:	d00b      	beq.n	8002e0a <_svfiprintf_r+0x7e>
 8002df2:	465b      	mov	r3, fp
 8002df4:	4622      	mov	r2, r4
 8002df6:	4629      	mov	r1, r5
 8002df8:	4638      	mov	r0, r7
 8002dfa:	f7ff ff6b 	bl	8002cd4 <__ssputs_r>
 8002dfe:	3001      	adds	r0, #1
 8002e00:	f000 80a7 	beq.w	8002f52 <_svfiprintf_r+0x1c6>
 8002e04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002e06:	445a      	add	r2, fp
 8002e08:	9209      	str	r2, [sp, #36]	@ 0x24
 8002e0a:	f89a 3000 	ldrb.w	r3, [sl]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 809f 	beq.w	8002f52 <_svfiprintf_r+0x1c6>
 8002e14:	2300      	movs	r3, #0
 8002e16:	f04f 32ff 	mov.w	r2, #4294967295
 8002e1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e1e:	f10a 0a01 	add.w	sl, sl, #1
 8002e22:	9304      	str	r3, [sp, #16]
 8002e24:	9307      	str	r3, [sp, #28]
 8002e26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002e2a:	931a      	str	r3, [sp, #104]	@ 0x68
 8002e2c:	4654      	mov	r4, sl
 8002e2e:	2205      	movs	r2, #5
 8002e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e34:	484e      	ldr	r0, [pc, #312]	@ (8002f70 <_svfiprintf_r+0x1e4>)
 8002e36:	f7fd f9eb 	bl	8000210 <memchr>
 8002e3a:	9a04      	ldr	r2, [sp, #16]
 8002e3c:	b9d8      	cbnz	r0, 8002e76 <_svfiprintf_r+0xea>
 8002e3e:	06d0      	lsls	r0, r2, #27
 8002e40:	bf44      	itt	mi
 8002e42:	2320      	movmi	r3, #32
 8002e44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002e48:	0711      	lsls	r1, r2, #28
 8002e4a:	bf44      	itt	mi
 8002e4c:	232b      	movmi	r3, #43	@ 0x2b
 8002e4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002e52:	f89a 3000 	ldrb.w	r3, [sl]
 8002e56:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e58:	d015      	beq.n	8002e86 <_svfiprintf_r+0xfa>
 8002e5a:	9a07      	ldr	r2, [sp, #28]
 8002e5c:	4654      	mov	r4, sl
 8002e5e:	2000      	movs	r0, #0
 8002e60:	f04f 0c0a 	mov.w	ip, #10
 8002e64:	4621      	mov	r1, r4
 8002e66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e6a:	3b30      	subs	r3, #48	@ 0x30
 8002e6c:	2b09      	cmp	r3, #9
 8002e6e:	d94b      	bls.n	8002f08 <_svfiprintf_r+0x17c>
 8002e70:	b1b0      	cbz	r0, 8002ea0 <_svfiprintf_r+0x114>
 8002e72:	9207      	str	r2, [sp, #28]
 8002e74:	e014      	b.n	8002ea0 <_svfiprintf_r+0x114>
 8002e76:	eba0 0308 	sub.w	r3, r0, r8
 8002e7a:	fa09 f303 	lsl.w	r3, r9, r3
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	9304      	str	r3, [sp, #16]
 8002e82:	46a2      	mov	sl, r4
 8002e84:	e7d2      	b.n	8002e2c <_svfiprintf_r+0xa0>
 8002e86:	9b03      	ldr	r3, [sp, #12]
 8002e88:	1d19      	adds	r1, r3, #4
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	9103      	str	r1, [sp, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	bfbb      	ittet	lt
 8002e92:	425b      	neglt	r3, r3
 8002e94:	f042 0202 	orrlt.w	r2, r2, #2
 8002e98:	9307      	strge	r3, [sp, #28]
 8002e9a:	9307      	strlt	r3, [sp, #28]
 8002e9c:	bfb8      	it	lt
 8002e9e:	9204      	strlt	r2, [sp, #16]
 8002ea0:	7823      	ldrb	r3, [r4, #0]
 8002ea2:	2b2e      	cmp	r3, #46	@ 0x2e
 8002ea4:	d10a      	bne.n	8002ebc <_svfiprintf_r+0x130>
 8002ea6:	7863      	ldrb	r3, [r4, #1]
 8002ea8:	2b2a      	cmp	r3, #42	@ 0x2a
 8002eaa:	d132      	bne.n	8002f12 <_svfiprintf_r+0x186>
 8002eac:	9b03      	ldr	r3, [sp, #12]
 8002eae:	1d1a      	adds	r2, r3, #4
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	9203      	str	r2, [sp, #12]
 8002eb4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002eb8:	3402      	adds	r4, #2
 8002eba:	9305      	str	r3, [sp, #20]
 8002ebc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002f80 <_svfiprintf_r+0x1f4>
 8002ec0:	7821      	ldrb	r1, [r4, #0]
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	4650      	mov	r0, sl
 8002ec6:	f7fd f9a3 	bl	8000210 <memchr>
 8002eca:	b138      	cbz	r0, 8002edc <_svfiprintf_r+0x150>
 8002ecc:	9b04      	ldr	r3, [sp, #16]
 8002ece:	eba0 000a 	sub.w	r0, r0, sl
 8002ed2:	2240      	movs	r2, #64	@ 0x40
 8002ed4:	4082      	lsls	r2, r0
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	3401      	adds	r4, #1
 8002eda:	9304      	str	r3, [sp, #16]
 8002edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ee0:	4824      	ldr	r0, [pc, #144]	@ (8002f74 <_svfiprintf_r+0x1e8>)
 8002ee2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002ee6:	2206      	movs	r2, #6
 8002ee8:	f7fd f992 	bl	8000210 <memchr>
 8002eec:	2800      	cmp	r0, #0
 8002eee:	d036      	beq.n	8002f5e <_svfiprintf_r+0x1d2>
 8002ef0:	4b21      	ldr	r3, [pc, #132]	@ (8002f78 <_svfiprintf_r+0x1ec>)
 8002ef2:	bb1b      	cbnz	r3, 8002f3c <_svfiprintf_r+0x1b0>
 8002ef4:	9b03      	ldr	r3, [sp, #12]
 8002ef6:	3307      	adds	r3, #7
 8002ef8:	f023 0307 	bic.w	r3, r3, #7
 8002efc:	3308      	adds	r3, #8
 8002efe:	9303      	str	r3, [sp, #12]
 8002f00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002f02:	4433      	add	r3, r6
 8002f04:	9309      	str	r3, [sp, #36]	@ 0x24
 8002f06:	e76a      	b.n	8002dde <_svfiprintf_r+0x52>
 8002f08:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f0c:	460c      	mov	r4, r1
 8002f0e:	2001      	movs	r0, #1
 8002f10:	e7a8      	b.n	8002e64 <_svfiprintf_r+0xd8>
 8002f12:	2300      	movs	r3, #0
 8002f14:	3401      	adds	r4, #1
 8002f16:	9305      	str	r3, [sp, #20]
 8002f18:	4619      	mov	r1, r3
 8002f1a:	f04f 0c0a 	mov.w	ip, #10
 8002f1e:	4620      	mov	r0, r4
 8002f20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f24:	3a30      	subs	r2, #48	@ 0x30
 8002f26:	2a09      	cmp	r2, #9
 8002f28:	d903      	bls.n	8002f32 <_svfiprintf_r+0x1a6>
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0c6      	beq.n	8002ebc <_svfiprintf_r+0x130>
 8002f2e:	9105      	str	r1, [sp, #20]
 8002f30:	e7c4      	b.n	8002ebc <_svfiprintf_r+0x130>
 8002f32:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f36:	4604      	mov	r4, r0
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e7f0      	b.n	8002f1e <_svfiprintf_r+0x192>
 8002f3c:	ab03      	add	r3, sp, #12
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	462a      	mov	r2, r5
 8002f42:	4b0e      	ldr	r3, [pc, #56]	@ (8002f7c <_svfiprintf_r+0x1f0>)
 8002f44:	a904      	add	r1, sp, #16
 8002f46:	4638      	mov	r0, r7
 8002f48:	f3af 8000 	nop.w
 8002f4c:	1c42      	adds	r2, r0, #1
 8002f4e:	4606      	mov	r6, r0
 8002f50:	d1d6      	bne.n	8002f00 <_svfiprintf_r+0x174>
 8002f52:	89ab      	ldrh	r3, [r5, #12]
 8002f54:	065b      	lsls	r3, r3, #25
 8002f56:	f53f af2d 	bmi.w	8002db4 <_svfiprintf_r+0x28>
 8002f5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002f5c:	e72c      	b.n	8002db8 <_svfiprintf_r+0x2c>
 8002f5e:	ab03      	add	r3, sp, #12
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	462a      	mov	r2, r5
 8002f64:	4b05      	ldr	r3, [pc, #20]	@ (8002f7c <_svfiprintf_r+0x1f0>)
 8002f66:	a904      	add	r1, sp, #16
 8002f68:	4638      	mov	r0, r7
 8002f6a:	f000 f879 	bl	8003060 <_printf_i>
 8002f6e:	e7ed      	b.n	8002f4c <_svfiprintf_r+0x1c0>
 8002f70:	08003575 	.word	0x08003575
 8002f74:	0800357f 	.word	0x0800357f
 8002f78:	00000000 	.word	0x00000000
 8002f7c:	08002cd5 	.word	0x08002cd5
 8002f80:	0800357b 	.word	0x0800357b

08002f84 <_printf_common>:
 8002f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f88:	4616      	mov	r6, r2
 8002f8a:	4698      	mov	r8, r3
 8002f8c:	688a      	ldr	r2, [r1, #8]
 8002f8e:	690b      	ldr	r3, [r1, #16]
 8002f90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002f94:	4293      	cmp	r3, r2
 8002f96:	bfb8      	it	lt
 8002f98:	4613      	movlt	r3, r2
 8002f9a:	6033      	str	r3, [r6, #0]
 8002f9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002fa0:	4607      	mov	r7, r0
 8002fa2:	460c      	mov	r4, r1
 8002fa4:	b10a      	cbz	r2, 8002faa <_printf_common+0x26>
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	6033      	str	r3, [r6, #0]
 8002faa:	6823      	ldr	r3, [r4, #0]
 8002fac:	0699      	lsls	r1, r3, #26
 8002fae:	bf42      	ittt	mi
 8002fb0:	6833      	ldrmi	r3, [r6, #0]
 8002fb2:	3302      	addmi	r3, #2
 8002fb4:	6033      	strmi	r3, [r6, #0]
 8002fb6:	6825      	ldr	r5, [r4, #0]
 8002fb8:	f015 0506 	ands.w	r5, r5, #6
 8002fbc:	d106      	bne.n	8002fcc <_printf_common+0x48>
 8002fbe:	f104 0a19 	add.w	sl, r4, #25
 8002fc2:	68e3      	ldr	r3, [r4, #12]
 8002fc4:	6832      	ldr	r2, [r6, #0]
 8002fc6:	1a9b      	subs	r3, r3, r2
 8002fc8:	42ab      	cmp	r3, r5
 8002fca:	dc26      	bgt.n	800301a <_printf_common+0x96>
 8002fcc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002fd0:	6822      	ldr	r2, [r4, #0]
 8002fd2:	3b00      	subs	r3, #0
 8002fd4:	bf18      	it	ne
 8002fd6:	2301      	movne	r3, #1
 8002fd8:	0692      	lsls	r2, r2, #26
 8002fda:	d42b      	bmi.n	8003034 <_printf_common+0xb0>
 8002fdc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002fe0:	4641      	mov	r1, r8
 8002fe2:	4638      	mov	r0, r7
 8002fe4:	47c8      	blx	r9
 8002fe6:	3001      	adds	r0, #1
 8002fe8:	d01e      	beq.n	8003028 <_printf_common+0xa4>
 8002fea:	6823      	ldr	r3, [r4, #0]
 8002fec:	6922      	ldr	r2, [r4, #16]
 8002fee:	f003 0306 	and.w	r3, r3, #6
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	bf02      	ittt	eq
 8002ff6:	68e5      	ldreq	r5, [r4, #12]
 8002ff8:	6833      	ldreq	r3, [r6, #0]
 8002ffa:	1aed      	subeq	r5, r5, r3
 8002ffc:	68a3      	ldr	r3, [r4, #8]
 8002ffe:	bf0c      	ite	eq
 8003000:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003004:	2500      	movne	r5, #0
 8003006:	4293      	cmp	r3, r2
 8003008:	bfc4      	itt	gt
 800300a:	1a9b      	subgt	r3, r3, r2
 800300c:	18ed      	addgt	r5, r5, r3
 800300e:	2600      	movs	r6, #0
 8003010:	341a      	adds	r4, #26
 8003012:	42b5      	cmp	r5, r6
 8003014:	d11a      	bne.n	800304c <_printf_common+0xc8>
 8003016:	2000      	movs	r0, #0
 8003018:	e008      	b.n	800302c <_printf_common+0xa8>
 800301a:	2301      	movs	r3, #1
 800301c:	4652      	mov	r2, sl
 800301e:	4641      	mov	r1, r8
 8003020:	4638      	mov	r0, r7
 8003022:	47c8      	blx	r9
 8003024:	3001      	adds	r0, #1
 8003026:	d103      	bne.n	8003030 <_printf_common+0xac>
 8003028:	f04f 30ff 	mov.w	r0, #4294967295
 800302c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003030:	3501      	adds	r5, #1
 8003032:	e7c6      	b.n	8002fc2 <_printf_common+0x3e>
 8003034:	18e1      	adds	r1, r4, r3
 8003036:	1c5a      	adds	r2, r3, #1
 8003038:	2030      	movs	r0, #48	@ 0x30
 800303a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800303e:	4422      	add	r2, r4
 8003040:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003044:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003048:	3302      	adds	r3, #2
 800304a:	e7c7      	b.n	8002fdc <_printf_common+0x58>
 800304c:	2301      	movs	r3, #1
 800304e:	4622      	mov	r2, r4
 8003050:	4641      	mov	r1, r8
 8003052:	4638      	mov	r0, r7
 8003054:	47c8      	blx	r9
 8003056:	3001      	adds	r0, #1
 8003058:	d0e6      	beq.n	8003028 <_printf_common+0xa4>
 800305a:	3601      	adds	r6, #1
 800305c:	e7d9      	b.n	8003012 <_printf_common+0x8e>
	...

08003060 <_printf_i>:
 8003060:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003064:	7e0f      	ldrb	r7, [r1, #24]
 8003066:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003068:	2f78      	cmp	r7, #120	@ 0x78
 800306a:	4691      	mov	r9, r2
 800306c:	4680      	mov	r8, r0
 800306e:	460c      	mov	r4, r1
 8003070:	469a      	mov	sl, r3
 8003072:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003076:	d807      	bhi.n	8003088 <_printf_i+0x28>
 8003078:	2f62      	cmp	r7, #98	@ 0x62
 800307a:	d80a      	bhi.n	8003092 <_printf_i+0x32>
 800307c:	2f00      	cmp	r7, #0
 800307e:	f000 80d2 	beq.w	8003226 <_printf_i+0x1c6>
 8003082:	2f58      	cmp	r7, #88	@ 0x58
 8003084:	f000 80b9 	beq.w	80031fa <_printf_i+0x19a>
 8003088:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800308c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003090:	e03a      	b.n	8003108 <_printf_i+0xa8>
 8003092:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003096:	2b15      	cmp	r3, #21
 8003098:	d8f6      	bhi.n	8003088 <_printf_i+0x28>
 800309a:	a101      	add	r1, pc, #4	@ (adr r1, 80030a0 <_printf_i+0x40>)
 800309c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80030a0:	080030f9 	.word	0x080030f9
 80030a4:	0800310d 	.word	0x0800310d
 80030a8:	08003089 	.word	0x08003089
 80030ac:	08003089 	.word	0x08003089
 80030b0:	08003089 	.word	0x08003089
 80030b4:	08003089 	.word	0x08003089
 80030b8:	0800310d 	.word	0x0800310d
 80030bc:	08003089 	.word	0x08003089
 80030c0:	08003089 	.word	0x08003089
 80030c4:	08003089 	.word	0x08003089
 80030c8:	08003089 	.word	0x08003089
 80030cc:	0800320d 	.word	0x0800320d
 80030d0:	08003137 	.word	0x08003137
 80030d4:	080031c7 	.word	0x080031c7
 80030d8:	08003089 	.word	0x08003089
 80030dc:	08003089 	.word	0x08003089
 80030e0:	0800322f 	.word	0x0800322f
 80030e4:	08003089 	.word	0x08003089
 80030e8:	08003137 	.word	0x08003137
 80030ec:	08003089 	.word	0x08003089
 80030f0:	08003089 	.word	0x08003089
 80030f4:	080031cf 	.word	0x080031cf
 80030f8:	6833      	ldr	r3, [r6, #0]
 80030fa:	1d1a      	adds	r2, r3, #4
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6032      	str	r2, [r6, #0]
 8003100:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003104:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003108:	2301      	movs	r3, #1
 800310a:	e09d      	b.n	8003248 <_printf_i+0x1e8>
 800310c:	6833      	ldr	r3, [r6, #0]
 800310e:	6820      	ldr	r0, [r4, #0]
 8003110:	1d19      	adds	r1, r3, #4
 8003112:	6031      	str	r1, [r6, #0]
 8003114:	0606      	lsls	r6, r0, #24
 8003116:	d501      	bpl.n	800311c <_printf_i+0xbc>
 8003118:	681d      	ldr	r5, [r3, #0]
 800311a:	e003      	b.n	8003124 <_printf_i+0xc4>
 800311c:	0645      	lsls	r5, r0, #25
 800311e:	d5fb      	bpl.n	8003118 <_printf_i+0xb8>
 8003120:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003124:	2d00      	cmp	r5, #0
 8003126:	da03      	bge.n	8003130 <_printf_i+0xd0>
 8003128:	232d      	movs	r3, #45	@ 0x2d
 800312a:	426d      	negs	r5, r5
 800312c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003130:	4859      	ldr	r0, [pc, #356]	@ (8003298 <_printf_i+0x238>)
 8003132:	230a      	movs	r3, #10
 8003134:	e011      	b.n	800315a <_printf_i+0xfa>
 8003136:	6821      	ldr	r1, [r4, #0]
 8003138:	6833      	ldr	r3, [r6, #0]
 800313a:	0608      	lsls	r0, r1, #24
 800313c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003140:	d402      	bmi.n	8003148 <_printf_i+0xe8>
 8003142:	0649      	lsls	r1, r1, #25
 8003144:	bf48      	it	mi
 8003146:	b2ad      	uxthmi	r5, r5
 8003148:	2f6f      	cmp	r7, #111	@ 0x6f
 800314a:	4853      	ldr	r0, [pc, #332]	@ (8003298 <_printf_i+0x238>)
 800314c:	6033      	str	r3, [r6, #0]
 800314e:	bf14      	ite	ne
 8003150:	230a      	movne	r3, #10
 8003152:	2308      	moveq	r3, #8
 8003154:	2100      	movs	r1, #0
 8003156:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800315a:	6866      	ldr	r6, [r4, #4]
 800315c:	60a6      	str	r6, [r4, #8]
 800315e:	2e00      	cmp	r6, #0
 8003160:	bfa2      	ittt	ge
 8003162:	6821      	ldrge	r1, [r4, #0]
 8003164:	f021 0104 	bicge.w	r1, r1, #4
 8003168:	6021      	strge	r1, [r4, #0]
 800316a:	b90d      	cbnz	r5, 8003170 <_printf_i+0x110>
 800316c:	2e00      	cmp	r6, #0
 800316e:	d04b      	beq.n	8003208 <_printf_i+0x1a8>
 8003170:	4616      	mov	r6, r2
 8003172:	fbb5 f1f3 	udiv	r1, r5, r3
 8003176:	fb03 5711 	mls	r7, r3, r1, r5
 800317a:	5dc7      	ldrb	r7, [r0, r7]
 800317c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003180:	462f      	mov	r7, r5
 8003182:	42bb      	cmp	r3, r7
 8003184:	460d      	mov	r5, r1
 8003186:	d9f4      	bls.n	8003172 <_printf_i+0x112>
 8003188:	2b08      	cmp	r3, #8
 800318a:	d10b      	bne.n	80031a4 <_printf_i+0x144>
 800318c:	6823      	ldr	r3, [r4, #0]
 800318e:	07df      	lsls	r7, r3, #31
 8003190:	d508      	bpl.n	80031a4 <_printf_i+0x144>
 8003192:	6923      	ldr	r3, [r4, #16]
 8003194:	6861      	ldr	r1, [r4, #4]
 8003196:	4299      	cmp	r1, r3
 8003198:	bfde      	ittt	le
 800319a:	2330      	movle	r3, #48	@ 0x30
 800319c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80031a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80031a4:	1b92      	subs	r2, r2, r6
 80031a6:	6122      	str	r2, [r4, #16]
 80031a8:	f8cd a000 	str.w	sl, [sp]
 80031ac:	464b      	mov	r3, r9
 80031ae:	aa03      	add	r2, sp, #12
 80031b0:	4621      	mov	r1, r4
 80031b2:	4640      	mov	r0, r8
 80031b4:	f7ff fee6 	bl	8002f84 <_printf_common>
 80031b8:	3001      	adds	r0, #1
 80031ba:	d14a      	bne.n	8003252 <_printf_i+0x1f2>
 80031bc:	f04f 30ff 	mov.w	r0, #4294967295
 80031c0:	b004      	add	sp, #16
 80031c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031c6:	6823      	ldr	r3, [r4, #0]
 80031c8:	f043 0320 	orr.w	r3, r3, #32
 80031cc:	6023      	str	r3, [r4, #0]
 80031ce:	4833      	ldr	r0, [pc, #204]	@ (800329c <_printf_i+0x23c>)
 80031d0:	2778      	movs	r7, #120	@ 0x78
 80031d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80031d6:	6823      	ldr	r3, [r4, #0]
 80031d8:	6831      	ldr	r1, [r6, #0]
 80031da:	061f      	lsls	r7, r3, #24
 80031dc:	f851 5b04 	ldr.w	r5, [r1], #4
 80031e0:	d402      	bmi.n	80031e8 <_printf_i+0x188>
 80031e2:	065f      	lsls	r7, r3, #25
 80031e4:	bf48      	it	mi
 80031e6:	b2ad      	uxthmi	r5, r5
 80031e8:	6031      	str	r1, [r6, #0]
 80031ea:	07d9      	lsls	r1, r3, #31
 80031ec:	bf44      	itt	mi
 80031ee:	f043 0320 	orrmi.w	r3, r3, #32
 80031f2:	6023      	strmi	r3, [r4, #0]
 80031f4:	b11d      	cbz	r5, 80031fe <_printf_i+0x19e>
 80031f6:	2310      	movs	r3, #16
 80031f8:	e7ac      	b.n	8003154 <_printf_i+0xf4>
 80031fa:	4827      	ldr	r0, [pc, #156]	@ (8003298 <_printf_i+0x238>)
 80031fc:	e7e9      	b.n	80031d2 <_printf_i+0x172>
 80031fe:	6823      	ldr	r3, [r4, #0]
 8003200:	f023 0320 	bic.w	r3, r3, #32
 8003204:	6023      	str	r3, [r4, #0]
 8003206:	e7f6      	b.n	80031f6 <_printf_i+0x196>
 8003208:	4616      	mov	r6, r2
 800320a:	e7bd      	b.n	8003188 <_printf_i+0x128>
 800320c:	6833      	ldr	r3, [r6, #0]
 800320e:	6825      	ldr	r5, [r4, #0]
 8003210:	6961      	ldr	r1, [r4, #20]
 8003212:	1d18      	adds	r0, r3, #4
 8003214:	6030      	str	r0, [r6, #0]
 8003216:	062e      	lsls	r6, r5, #24
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	d501      	bpl.n	8003220 <_printf_i+0x1c0>
 800321c:	6019      	str	r1, [r3, #0]
 800321e:	e002      	b.n	8003226 <_printf_i+0x1c6>
 8003220:	0668      	lsls	r0, r5, #25
 8003222:	d5fb      	bpl.n	800321c <_printf_i+0x1bc>
 8003224:	8019      	strh	r1, [r3, #0]
 8003226:	2300      	movs	r3, #0
 8003228:	6123      	str	r3, [r4, #16]
 800322a:	4616      	mov	r6, r2
 800322c:	e7bc      	b.n	80031a8 <_printf_i+0x148>
 800322e:	6833      	ldr	r3, [r6, #0]
 8003230:	1d1a      	adds	r2, r3, #4
 8003232:	6032      	str	r2, [r6, #0]
 8003234:	681e      	ldr	r6, [r3, #0]
 8003236:	6862      	ldr	r2, [r4, #4]
 8003238:	2100      	movs	r1, #0
 800323a:	4630      	mov	r0, r6
 800323c:	f7fc ffe8 	bl	8000210 <memchr>
 8003240:	b108      	cbz	r0, 8003246 <_printf_i+0x1e6>
 8003242:	1b80      	subs	r0, r0, r6
 8003244:	6060      	str	r0, [r4, #4]
 8003246:	6863      	ldr	r3, [r4, #4]
 8003248:	6123      	str	r3, [r4, #16]
 800324a:	2300      	movs	r3, #0
 800324c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003250:	e7aa      	b.n	80031a8 <_printf_i+0x148>
 8003252:	6923      	ldr	r3, [r4, #16]
 8003254:	4632      	mov	r2, r6
 8003256:	4649      	mov	r1, r9
 8003258:	4640      	mov	r0, r8
 800325a:	47d0      	blx	sl
 800325c:	3001      	adds	r0, #1
 800325e:	d0ad      	beq.n	80031bc <_printf_i+0x15c>
 8003260:	6823      	ldr	r3, [r4, #0]
 8003262:	079b      	lsls	r3, r3, #30
 8003264:	d413      	bmi.n	800328e <_printf_i+0x22e>
 8003266:	68e0      	ldr	r0, [r4, #12]
 8003268:	9b03      	ldr	r3, [sp, #12]
 800326a:	4298      	cmp	r0, r3
 800326c:	bfb8      	it	lt
 800326e:	4618      	movlt	r0, r3
 8003270:	e7a6      	b.n	80031c0 <_printf_i+0x160>
 8003272:	2301      	movs	r3, #1
 8003274:	4632      	mov	r2, r6
 8003276:	4649      	mov	r1, r9
 8003278:	4640      	mov	r0, r8
 800327a:	47d0      	blx	sl
 800327c:	3001      	adds	r0, #1
 800327e:	d09d      	beq.n	80031bc <_printf_i+0x15c>
 8003280:	3501      	adds	r5, #1
 8003282:	68e3      	ldr	r3, [r4, #12]
 8003284:	9903      	ldr	r1, [sp, #12]
 8003286:	1a5b      	subs	r3, r3, r1
 8003288:	42ab      	cmp	r3, r5
 800328a:	dcf2      	bgt.n	8003272 <_printf_i+0x212>
 800328c:	e7eb      	b.n	8003266 <_printf_i+0x206>
 800328e:	2500      	movs	r5, #0
 8003290:	f104 0619 	add.w	r6, r4, #25
 8003294:	e7f5      	b.n	8003282 <_printf_i+0x222>
 8003296:	bf00      	nop
 8003298:	08003586 	.word	0x08003586
 800329c:	08003597 	.word	0x08003597

080032a0 <memmove>:
 80032a0:	4288      	cmp	r0, r1
 80032a2:	b510      	push	{r4, lr}
 80032a4:	eb01 0402 	add.w	r4, r1, r2
 80032a8:	d902      	bls.n	80032b0 <memmove+0x10>
 80032aa:	4284      	cmp	r4, r0
 80032ac:	4623      	mov	r3, r4
 80032ae:	d807      	bhi.n	80032c0 <memmove+0x20>
 80032b0:	1e43      	subs	r3, r0, #1
 80032b2:	42a1      	cmp	r1, r4
 80032b4:	d008      	beq.n	80032c8 <memmove+0x28>
 80032b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80032ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80032be:	e7f8      	b.n	80032b2 <memmove+0x12>
 80032c0:	4402      	add	r2, r0
 80032c2:	4601      	mov	r1, r0
 80032c4:	428a      	cmp	r2, r1
 80032c6:	d100      	bne.n	80032ca <memmove+0x2a>
 80032c8:	bd10      	pop	{r4, pc}
 80032ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80032ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80032d2:	e7f7      	b.n	80032c4 <memmove+0x24>

080032d4 <_sbrk_r>:
 80032d4:	b538      	push	{r3, r4, r5, lr}
 80032d6:	4d06      	ldr	r5, [pc, #24]	@ (80032f0 <_sbrk_r+0x1c>)
 80032d8:	2300      	movs	r3, #0
 80032da:	4604      	mov	r4, r0
 80032dc:	4608      	mov	r0, r1
 80032de:	602b      	str	r3, [r5, #0]
 80032e0:	f7fe f874 	bl	80013cc <_sbrk>
 80032e4:	1c43      	adds	r3, r0, #1
 80032e6:	d102      	bne.n	80032ee <_sbrk_r+0x1a>
 80032e8:	682b      	ldr	r3, [r5, #0]
 80032ea:	b103      	cbz	r3, 80032ee <_sbrk_r+0x1a>
 80032ec:	6023      	str	r3, [r4, #0]
 80032ee:	bd38      	pop	{r3, r4, r5, pc}
 80032f0:	2000060c 	.word	0x2000060c

080032f4 <memcpy>:
 80032f4:	440a      	add	r2, r1
 80032f6:	4291      	cmp	r1, r2
 80032f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80032fc:	d100      	bne.n	8003300 <memcpy+0xc>
 80032fe:	4770      	bx	lr
 8003300:	b510      	push	{r4, lr}
 8003302:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003306:	f803 4f01 	strb.w	r4, [r3, #1]!
 800330a:	4291      	cmp	r1, r2
 800330c:	d1f9      	bne.n	8003302 <memcpy+0xe>
 800330e:	bd10      	pop	{r4, pc}

08003310 <_realloc_r>:
 8003310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003314:	4680      	mov	r8, r0
 8003316:	4615      	mov	r5, r2
 8003318:	460c      	mov	r4, r1
 800331a:	b921      	cbnz	r1, 8003326 <_realloc_r+0x16>
 800331c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003320:	4611      	mov	r1, r2
 8003322:	f7ff bc4b 	b.w	8002bbc <_malloc_r>
 8003326:	b92a      	cbnz	r2, 8003334 <_realloc_r+0x24>
 8003328:	f7ff fbdc 	bl	8002ae4 <_free_r>
 800332c:	2400      	movs	r4, #0
 800332e:	4620      	mov	r0, r4
 8003330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003334:	f000 f81a 	bl	800336c <_malloc_usable_size_r>
 8003338:	4285      	cmp	r5, r0
 800333a:	4606      	mov	r6, r0
 800333c:	d802      	bhi.n	8003344 <_realloc_r+0x34>
 800333e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003342:	d8f4      	bhi.n	800332e <_realloc_r+0x1e>
 8003344:	4629      	mov	r1, r5
 8003346:	4640      	mov	r0, r8
 8003348:	f7ff fc38 	bl	8002bbc <_malloc_r>
 800334c:	4607      	mov	r7, r0
 800334e:	2800      	cmp	r0, #0
 8003350:	d0ec      	beq.n	800332c <_realloc_r+0x1c>
 8003352:	42b5      	cmp	r5, r6
 8003354:	462a      	mov	r2, r5
 8003356:	4621      	mov	r1, r4
 8003358:	bf28      	it	cs
 800335a:	4632      	movcs	r2, r6
 800335c:	f7ff ffca 	bl	80032f4 <memcpy>
 8003360:	4621      	mov	r1, r4
 8003362:	4640      	mov	r0, r8
 8003364:	f7ff fbbe 	bl	8002ae4 <_free_r>
 8003368:	463c      	mov	r4, r7
 800336a:	e7e0      	b.n	800332e <_realloc_r+0x1e>

0800336c <_malloc_usable_size_r>:
 800336c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003370:	1f18      	subs	r0, r3, #4
 8003372:	2b00      	cmp	r3, #0
 8003374:	bfbc      	itt	lt
 8003376:	580b      	ldrlt	r3, [r1, r0]
 8003378:	18c0      	addlt	r0, r0, r3
 800337a:	4770      	bx	lr

0800337c <_init>:
 800337c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800337e:	bf00      	nop
 8003380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003382:	bc08      	pop	{r3}
 8003384:	469e      	mov	lr, r3
 8003386:	4770      	bx	lr

08003388 <_fini>:
 8003388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800338a:	bf00      	nop
 800338c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800338e:	bc08      	pop	{r3}
 8003390:	469e      	mov	lr, r3
 8003392:	4770      	bx	lr
