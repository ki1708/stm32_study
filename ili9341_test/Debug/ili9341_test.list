
ili9341_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d58  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003f08  08003f08  00004f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f60  08003f60  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003f60  08003f60  00004f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f68  08003f68  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f68  08003f68  00004f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f6c  08003f6c  00004f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003f70  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000505c  2**0
                  CONTENTS
 10 .bss          0000048c  2000005c  2000005c  0000505c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004e8  200004e8  0000505c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000203b6  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cff  00000000  00000000  00025442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000f613  00000000  00000000  00029141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001728  00000000  00000000  00038758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000011b9  00000000  00000000  00039e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a402  00000000  00000000  0003b039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00028326  00000000  00000000  0006543b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00100452  00000000  00000000  0008d761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0018dbb3  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004538  00000000  00000000  0018dbf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000061  00000000  00000000  00192130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003ef0 	.word	0x08003ef0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	08003ef0 	.word	0x08003ef0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <apInit>:

//uint32_t adc_vol = 0 ;
float adc_vol = 0 ;

void apInit(void)
{
 8000580:	b508      	push	{r3, lr}
	adcInit();
 8000582:	f000 f849 	bl	8000618 <adcInit>
}
 8000586:	bd08      	pop	{r3, pc}

08000588 <apMain>:

void apMain(void)
{
 8000588:	b510      	push	{r4, lr}
	uint32_t pre_time ;

	pre_time = millis();
 800058a:	f000 f891 	bl	80006b0 <millis>
 800058e:	4604      	mov	r4, r0
 8000590:	e031      	b.n	80005f6 <apMain+0x6e>
	while(1)
	{
		if (millis() - pre_time >= 500)	// 논블락킹 코드
		{
			pre_time = millis();
 8000592:	f000 f88d 	bl	80006b0 <millis>
 8000596:	4604      	mov	r4, r0
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000598:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800059c:	4819      	ldr	r0, [pc, #100]	@ (8000604 <apMain+0x7c>)
 800059e:	f001 fd53 	bl	8002048 <HAL_GPIO_TogglePin>


			//uartWrite(_DEF_CH1, (uint8_t *)"test\n", 5); // uart test code

			//uartPrintf(_DEF_CH1,"test %d\n",millis() );	//uartprintf 구현 code
			uartPrintf(_DEF_CH1,"adc_vol : %d.%d\n",(int)adc_vol, ((int)(adc_vol * 100)) %100 );	//uartprintf 구현 code + printf에서 float을 정수로 변경해서 출력
 80005a2:	4b19      	ldr	r3, [pc, #100]	@ (8000608 <apMain+0x80>)
 80005a4:	ed93 7a00 	vldr	s14, [r3]
 80005a8:	eddf 7a18 	vldr	s15, [pc, #96]	@ 800060c <apMain+0x84>
 80005ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005b4:	ee17 2a90 	vmov	r2, s15
 80005b8:	4915      	ldr	r1, [pc, #84]	@ (8000610 <apMain+0x88>)
 80005ba:	fb81 3102 	smull	r3, r1, r1, r2
 80005be:	17d3      	asrs	r3, r2, #31
 80005c0:	ebc3 1361 	rsb	r3, r3, r1, asr #5
 80005c4:	2164      	movs	r1, #100	@ 0x64
 80005c6:	fb01 2313 	mls	r3, r1, r3, r2
 80005ca:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80005ce:	ee17 2a90 	vmov	r2, s15
 80005d2:	4910      	ldr	r1, [pc, #64]	@ (8000614 <apMain+0x8c>)
 80005d4:	2000      	movs	r0, #0
 80005d6:	f000 f851 	bl	800067c <uartPrintf>


		//HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
		//HAL_Delay(500);

		adc_vol = (float)adcReadVoltage(_DEF_CH1) / 100.f;
 80005da:	2000      	movs	r0, #0
 80005dc:	f000 f832 	bl	8000644 <adcReadVoltage>
 80005e0:	ee07 0a90 	vmov	s15, r0
 80005e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005e8:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800060c <apMain+0x84>
 80005ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80005f0:	4b05      	ldr	r3, [pc, #20]	@ (8000608 <apMain+0x80>)
 80005f2:	ed83 7a00 	vstr	s14, [r3]
		if (millis() - pre_time >= 500)	// 논블락킹 코드
 80005f6:	f000 f85b 	bl	80006b0 <millis>
 80005fa:	1b03      	subs	r3, r0, r4
 80005fc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000600:	d2c7      	bcs.n	8000592 <apMain+0xa>
 8000602:	e7ea      	b.n	80005da <apMain+0x52>
 8000604:	40021800 	.word	0x40021800
 8000608:	20000078 	.word	0x20000078
 800060c:	42c80000 	.word	0x42c80000
 8000610:	51eb851f 	.word	0x51eb851f
 8000614:	08003f08 	.word	0x08003f08

08000618 <adcInit>:
uint16_t adc_data[3];



bool adcInit(void)
{
 8000618:	b508      	push	{r3, lr}
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_data, 3);		//핸들러, 배열, 채널 수
 800061a:	2203      	movs	r2, #3
 800061c:	4902      	ldr	r1, [pc, #8]	@ (8000628 <adcInit+0x10>)
 800061e:	4803      	ldr	r0, [pc, #12]	@ (800062c <adcInit+0x14>)
 8000620:	f001 f828 	bl	8001674 <HAL_ADC_Start_DMA>
	return true;
}
 8000624:	2001      	movs	r0, #1
 8000626:	bd08      	pop	{r3, pc}
 8000628:	2000007c 	.word	0x2000007c
 800062c:	20000304 	.word	0x20000304

08000630 <adcRead>:
uint16_t adcRead(uint8_t ch)
{
	uint16_t cali_value = 0;
	uint16_t ret = 0;
	switch(ch)
 8000630:	b918      	cbnz	r0, 800063a <adcRead+0xa>
	{
		case _DEF_CH1 :
			if(adc_data[ch] > cali_value)
 8000632:	4a03      	ldr	r2, [pc, #12]	@ (8000640 <adcRead+0x10>)
 8000634:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
 8000638:	4770      	bx	lr
	uint16_t ret = 0;
 800063a:	2000      	movs	r0, #0
			}

		break;
	}
	return ret;
}
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	2000007c 	.word	0x2000007c

08000644 <adcReadVoltage>:


uint32_t adcReadVoltage(uint8_t ch)
{
 8000644:	b508      	push	{r3, lr}
	uint32_t ret ;
	uint32_t adc_data;
	adc_data = adcRead(ch);
 8000646:	f7ff fff3 	bl	8000630 <adcRead>
	ret = (330 * adc_data ) / 4096 ;	// float 안쓰고 330 (3.3v) * adc_data / 2의 12승(해상도)
 800064a:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 800064e:	fb03 f000 	mul.w	r0, r3, r0
	return ret ;
}
 8000652:	0b00      	lsrs	r0, r0, #12
 8000654:	bd08      	pop	{r3, pc}
	...

08000658 <uartWrite>:
uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
	uint32_t ret = 0;
	HAL_StatusTypeDef hal_ret;

	switch(ch)
 8000658:	b108      	cbz	r0, 800065e <uartWrite+0x6>
	uint32_t ret = 0;
 800065a:	2000      	movs	r0, #0
				ret = length ;	// HAL_OK일 경우가 아니면 ret은 0으로 초기화된그대로,.
			}
			break;
	}
	return ret ;
}
 800065c:	4770      	bx	lr
{
 800065e:	b510      	push	{r4, lr}
 8000660:	4614      	mov	r4, r2
			hal_ret = HAL_UART_Transmit(&huart1, p_data, length, 100); //timeout으로 100ms 주기
 8000662:	2364      	movs	r3, #100	@ 0x64
 8000664:	b292      	uxth	r2, r2
 8000666:	4804      	ldr	r0, [pc, #16]	@ (8000678 <uartWrite+0x20>)
 8000668:	f002 fcbd 	bl	8002fe6 <HAL_UART_Transmit>
			if(hal_ret == HAL_OK)
 800066c:	b108      	cbz	r0, 8000672 <uartWrite+0x1a>
	uint32_t ret = 0;
 800066e:	2000      	movs	r0, #0
}
 8000670:	bd10      	pop	{r4, pc}
				ret = length ;	// HAL_OK일 경우가 아니면 ret은 0으로 초기화된그대로,.
 8000672:	4620      	mov	r0, r4
	return ret ;
 8000674:	e7fc      	b.n	8000670 <uartWrite+0x18>
 8000676:	bf00      	nop
 8000678:	200000b8 	.word	0x200000b8

0800067c <uartPrintf>:

}


uint32_t uartPrintf(uint8_t ch ,const char *fmt, ... ) //가변인자를 사용한 형식화 출력함수, 프로그램만들때 매우 용이
{
 800067c:	b40e      	push	{r1, r2, r3}
 800067e:	b510      	push	{r4, lr}
 8000680:	b0c3      	sub	sp, #268	@ 0x10c
 8000682:	4604      	mov	r4, r0
 8000684:	ab45      	add	r3, sp, #276	@ 0x114
 8000686:	f853 2b04 	ldr.w	r2, [r3], #4
	uint32_t ret = 0;

	va_list arg ;
	char print_buf[256];

	va_start(arg,fmt);
 800068a:	9341      	str	r3, [sp, #260]	@ 0x104
	int len;
	len = vsnprintf(print_buf , 256, fmt, arg);
 800068c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000690:	a801      	add	r0, sp, #4
 8000692:	f002 ff9f 	bl	80035d4 <vsniprintf>
	va_end(arg);

	if (len > 0)
 8000696:	1e02      	subs	r2, r0, #0
 8000698:	dc05      	bgt.n	80006a6 <uartPrintf+0x2a>
	uint32_t ret = 0;
 800069a:	2000      	movs	r0, #0
	{
		ret = uartWrite(ch,(uint8_t *)print_buf,len);
	}

	return ret;
}
 800069c:	b043      	add	sp, #268	@ 0x10c
 800069e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006a2:	b003      	add	sp, #12
 80006a4:	4770      	bx	lr
		ret = uartWrite(ch,(uint8_t *)print_buf,len);
 80006a6:	a901      	add	r1, sp, #4
 80006a8:	4620      	mov	r0, r4
 80006aa:	f7ff ffd5 	bl	8000658 <uartWrite>
 80006ae:	e7f5      	b.n	800069c <uartPrintf+0x20>

080006b0 <millis>:
}



uint32_t millis(void)
{
 80006b0:	b508      	push	{r3, lr}
	return HAL_GetTick();
 80006b2:	f000 ff13 	bl	80014dc <HAL_GetTick>
}
 80006b6:	bd08      	pop	{r3, pc}

080006b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006b8:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	9301      	str	r3, [sp, #4]
 80006be:	4b06      	ldr	r3, [pc, #24]	@ (80006d8 <MX_DMA_Init+0x20>)
 80006c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006c2:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80006c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006ce:	9301      	str	r3, [sp, #4]
 80006d0:	9b01      	ldr	r3, [sp, #4]

}
 80006d2:	b002      	add	sp, #8
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006e0:	b08e      	sub	sp, #56	@ 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	2400      	movs	r4, #0
 80006e4:	9409      	str	r4, [sp, #36]	@ 0x24
 80006e6:	940a      	str	r4, [sp, #40]	@ 0x28
 80006e8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80006ea:	940c      	str	r4, [sp, #48]	@ 0x30
 80006ec:	940d      	str	r4, [sp, #52]	@ 0x34
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ee:	9401      	str	r4, [sp, #4]
 80006f0:	4b69      	ldr	r3, [pc, #420]	@ (8000898 <MX_GPIO_Init+0x1bc>)
 80006f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006f4:	f042 0204 	orr.w	r2, r2, #4
 80006f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80006fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006fc:	f002 0204 	and.w	r2, r2, #4
 8000700:	9201      	str	r2, [sp, #4]
 8000702:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000704:	9402      	str	r4, [sp, #8]
 8000706:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000708:	f042 0220 	orr.w	r2, r2, #32
 800070c:	631a      	str	r2, [r3, #48]	@ 0x30
 800070e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000710:	f002 0220 	and.w	r2, r2, #32
 8000714:	9202      	str	r2, [sp, #8]
 8000716:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000718:	9403      	str	r4, [sp, #12]
 800071a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800071c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000720:	631a      	str	r2, [r3, #48]	@ 0x30
 8000722:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000724:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000728:	9203      	str	r2, [sp, #12]
 800072a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072c:	9404      	str	r4, [sp, #16]
 800072e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000730:	f042 0201 	orr.w	r2, r2, #1
 8000734:	631a      	str	r2, [r3, #48]	@ 0x30
 8000736:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000738:	f002 0201 	and.w	r2, r2, #1
 800073c:	9204      	str	r2, [sp, #16]
 800073e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000740:	9405      	str	r4, [sp, #20]
 8000742:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000744:	f042 0202 	orr.w	r2, r2, #2
 8000748:	631a      	str	r2, [r3, #48]	@ 0x30
 800074a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800074c:	f002 0202 	and.w	r2, r2, #2
 8000750:	9205      	str	r2, [sp, #20]
 8000752:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000754:	9406      	str	r4, [sp, #24]
 8000756:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000758:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800075c:	631a      	str	r2, [r3, #48]	@ 0x30
 800075e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000760:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8000764:	9206      	str	r2, [sp, #24]
 8000766:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000768:	9407      	str	r4, [sp, #28]
 800076a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800076c:	f042 0210 	orr.w	r2, r2, #16
 8000770:	631a      	str	r2, [r3, #48]	@ 0x30
 8000772:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000774:	f002 0210 	and.w	r2, r2, #16
 8000778:	9207      	str	r2, [sp, #28]
 800077a:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800077c:	9408      	str	r4, [sp, #32]
 800077e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000780:	f042 0208 	orr.w	r2, r2, #8
 8000784:	631a      	str	r2, [r3, #48]	@ 0x30
 8000786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000788:	f003 0308 	and.w	r3, r3, #8
 800078c:	9308      	str	r3, [sp, #32]
 800078e:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000790:	4f42      	ldr	r7, [pc, #264]	@ (800089c <MX_GPIO_Init+0x1c0>)
 8000792:	4622      	mov	r2, r4
 8000794:	2116      	movs	r1, #22
 8000796:	4638      	mov	r0, r7
 8000798:	f001 fc50 	bl	800203c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800079c:	f8df 8104 	ldr.w	r8, [pc, #260]	@ 80008a4 <MX_GPIO_Init+0x1c8>
 80007a0:	4622      	mov	r2, r4
 80007a2:	2180      	movs	r1, #128	@ 0x80
 80007a4:	4640      	mov	r0, r8
 80007a6:	f001 fc49 	bl	800203c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80007aa:	4e3d      	ldr	r6, [pc, #244]	@ (80008a0 <MX_GPIO_Init+0x1c4>)
 80007ac:	4622      	mov	r2, r4
 80007ae:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80007b2:	4630      	mov	r0, r6
 80007b4:	f001 fc42 	bl	800203c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80007b8:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 80008a8 <MX_GPIO_Init+0x1cc>
 80007bc:	4622      	mov	r2, r4
 80007be:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80007c2:	4648      	mov	r0, r9
 80007c4:	f001 fc3a 	bl	800203c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80007c8:	2316      	movs	r3, #22
 80007ca:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007cc:	2501      	movs	r5, #1
 80007ce:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007d4:	a909      	add	r1, sp, #36	@ 0x24
 80007d6:	4638      	mov	r0, r7
 80007d8:	f001 fb2c 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80007dc:	f248 0307 	movw	r3, #32775	@ 0x8007
 80007e0:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007e2:	f44f 1a90 	mov.w	sl, #1179648	@ 0x120000
 80007e6:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ec:	a909      	add	r1, sp, #36	@ 0x24
 80007ee:	4640      	mov	r0, r8
 80007f0:	f001 fb20 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80007f4:	2380      	movs	r3, #128	@ 0x80
 80007f6:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80007fe:	a909      	add	r1, sp, #36	@ 0x24
 8000800:	4640      	mov	r0, r8
 8000802:	f001 fb17 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000806:	2320      	movs	r3, #32
 8000808:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800080a:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000810:	a909      	add	r1, sp, #36	@ 0x24
 8000812:	4638      	mov	r0, r7
 8000814:	f001 fb0e 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000818:	2304      	movs	r3, #4
 800081a:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081c:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000820:	f5a7 6780 	sub.w	r7, r7, #1024	@ 0x400
 8000824:	a909      	add	r1, sp, #36	@ 0x24
 8000826:	4638      	mov	r0, r7
 8000828:	f001 fb04 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800082c:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8000830:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	930a      	str	r3, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	940c      	str	r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800083a:	230c      	movs	r3, #12
 800083c:	930d      	str	r3, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083e:	a909      	add	r1, sp, #36	@ 0x24
 8000840:	4638      	mov	r0, r7
 8000842:	f001 faf7 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000846:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800084a:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084c:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000850:	a909      	add	r1, sp, #36	@ 0x24
 8000852:	4638      	mov	r0, r7
 8000854:	f001 faee 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000858:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800085c:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085e:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000862:	a909      	add	r1, sp, #36	@ 0x24
 8000864:	4630      	mov	r0, r6
 8000866:	f001 fae5 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800086a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800086e:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000870:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000876:	a909      	add	r1, sp, #36	@ 0x24
 8000878:	4630      	mov	r0, r6
 800087a:	f001 fadb 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800087e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000882:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000884:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800088a:	a909      	add	r1, sp, #36	@ 0x24
 800088c:	4648      	mov	r0, r9
 800088e:	f001 fad1 	bl	8001e34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000892:	b00e      	add	sp, #56	@ 0x38
 8000894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000898:	40023800 	.word	0x40023800
 800089c:	40020800 	.word	0x40020800
 80008a0:	40020c00 	.word	0x40020c00
 80008a4:	40020000 	.word	0x40020000
 80008a8:	40021800 	.word	0x40021800

080008ac <PeriphCommonClock_Config>:
  *         @arg @ref LL_RCC_PLLSAIDIVR_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLSAI_ConfigDomain_LTDC(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR, uint32_t PLLDIVR)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, Source | PLLM);
 80008ac:	4a12      	ldr	r2, [pc, #72]	@ (80008f8 <PeriphCommonClock_Config+0x4c>)
 80008ae:	6853      	ldr	r3, [r2, #4]
 80008b0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80008b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80008b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008bc:	f043 0304 	orr.w	r3, r3, #4
 80008c0:	6053      	str	r3, [r2, #4]
  MODIFY_REG(RCC->PLLSAICFGR, RCC_PLLSAICFGR_PLLSAIN | RCC_PLLSAICFGR_PLLSAIR, PLLN << RCC_PLLSAICFGR_PLLSAIN_Pos | PLLR);
 80008c2:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
 80008c6:	4b0d      	ldr	r3, [pc, #52]	@ (80008fc <PeriphCommonClock_Config+0x50>)
 80008c8:	400b      	ands	r3, r1
 80008ca:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80008ce:	f443 6348 	orr.w	r3, r3, #3200	@ 0xc80
 80008d2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_PLLSAIDIVR, PLLDIVR);
 80008d6:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 80008da:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80008de:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  SET_BIT(RCC->CR, RCC_CR_PLLSAION);
 80008e2:	6813      	ldr	r3, [r2, #0]
 80008e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008e8:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) == (RCC_CR_PLLSAIRDY));
 80008ea:	4b03      	ldr	r3, [pc, #12]	@ (80008f8 <PeriphCommonClock_Config+0x4c>)
 80008ec:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_PLLSAI_IsReady() != 1)
 80008ee:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 80008f2:	d0fa      	beq.n	80008ea <PeriphCommonClock_Config+0x3e>
}
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800
 80008fc:	8fff803f 	.word	0x8fff803f

08000900 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000900:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000902:	6802      	ldr	r2, [r0, #0]
 8000904:	4b03      	ldr	r3, [pc, #12]	@ (8000914 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8000906:	429a      	cmp	r2, r3
 8000908:	d000      	beq.n	800090c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800090a:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 800090c:	f000 fdda 	bl	80014c4 <HAL_IncTick>
}
 8000910:	e7fb      	b.n	800090a <HAL_TIM_PeriodElapsedCallback+0xa>
 8000912:	bf00      	nop
 8000914:	40001000 	.word	0x40001000

08000918 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000918:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800091a:	e7fe      	b.n	800091a <Error_Handler+0x2>

0800091c <MX_CRC_Init>:
{
 800091c:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 800091e:	4804      	ldr	r0, [pc, #16]	@ (8000930 <MX_CRC_Init+0x14>)
 8000920:	4b04      	ldr	r3, [pc, #16]	@ (8000934 <MX_CRC_Init+0x18>)
 8000922:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000924:	f001 f8fe 	bl	8001b24 <HAL_CRC_Init>
 8000928:	b900      	cbnz	r0, 800092c <MX_CRC_Init+0x10>
}
 800092a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800092c:	f7ff fff4 	bl	8000918 <Error_Handler>
 8000930:	2000029c 	.word	0x2000029c
 8000934:	40023000 	.word	0x40023000

08000938 <MX_FMC_Init>:
{
 8000938:	b500      	push	{lr}
 800093a:	b089      	sub	sp, #36	@ 0x24
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800093c:	2300      	movs	r3, #0
 800093e:	9301      	str	r3, [sp, #4]
 8000940:	9302      	str	r3, [sp, #8]
 8000942:	9303      	str	r3, [sp, #12]
 8000944:	9304      	str	r3, [sp, #16]
 8000946:	9305      	str	r3, [sp, #20]
 8000948:	9306      	str	r3, [sp, #24]
 800094a:	9307      	str	r3, [sp, #28]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800094c:	4814      	ldr	r0, [pc, #80]	@ (80009a0 <MX_FMC_Init+0x68>)
 800094e:	4a15      	ldr	r2, [pc, #84]	@ (80009a4 <MX_FMC_Init+0x6c>)
 8000950:	6002      	str	r2, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000952:	2201      	movs	r2, #1
 8000954:	6042      	str	r2, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000956:	6083      	str	r3, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000958:	2104      	movs	r1, #4
 800095a:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800095c:	2210      	movs	r2, #16
 800095e:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000960:	2240      	movs	r2, #64	@ 0x40
 8000962:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000964:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000968:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800096a:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800096c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000970:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000972:	6243      	str	r3, [r0, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000974:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000978:	6283      	str	r3, [r0, #40]	@ 0x28
  SdramTiming.LoadToActiveDelay = 2;
 800097a:	2302      	movs	r3, #2
 800097c:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800097e:	2207      	movs	r2, #7
 8000980:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000982:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 7;
 8000984:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000986:	2203      	movs	r2, #3
 8000988:	9205      	str	r2, [sp, #20]
  SdramTiming.RPDelay = 2;
 800098a:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 800098c:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800098e:	4469      	add	r1, sp
 8000990:	f001 febe 	bl	8002710 <HAL_SDRAM_Init>
 8000994:	b910      	cbnz	r0, 800099c <MX_FMC_Init+0x64>
}
 8000996:	b009      	add	sp, #36	@ 0x24
 8000998:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 800099c:	f7ff ffbc 	bl	8000918 <Error_Handler>
 80009a0:	20000084 	.word	0x20000084
 80009a4:	a0000140 	.word	0xa0000140

080009a8 <MX_I2C3_Init>:
{
 80009a8:	b508      	push	{r3, lr}
  hi2c3.Instance = I2C3;
 80009aa:	4811      	ldr	r0, [pc, #68]	@ (80009f0 <MX_I2C3_Init+0x48>)
 80009ac:	4b11      	ldr	r3, [pc, #68]	@ (80009f4 <MX_I2C3_Init+0x4c>)
 80009ae:	6003      	str	r3, [r0, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80009b0:	4b11      	ldr	r3, [pc, #68]	@ (80009f8 <MX_I2C3_Init+0x50>)
 80009b2:	6043      	str	r3, [r0, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009b4:	2300      	movs	r3, #0
 80009b6:	6083      	str	r3, [r0, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80009b8:	60c3      	str	r3, [r0, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009be:	6102      	str	r2, [r0, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c0:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80009c2:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009c4:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009c6:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80009c8:	f001 fb48 	bl	800205c <HAL_I2C_Init>
 80009cc:	b950      	cbnz	r0, 80009e4 <MX_I2C3_Init+0x3c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ce:	2100      	movs	r1, #0
 80009d0:	4807      	ldr	r0, [pc, #28]	@ (80009f0 <MX_I2C3_Init+0x48>)
 80009d2:	f001 fc21 	bl	8002218 <HAL_I2CEx_ConfigAnalogFilter>
 80009d6:	b938      	cbnz	r0, 80009e8 <MX_I2C3_Init+0x40>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80009d8:	2100      	movs	r1, #0
 80009da:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <MX_I2C3_Init+0x48>)
 80009dc:	f001 fc3e 	bl	800225c <HAL_I2CEx_ConfigDigitalFilter>
 80009e0:	b920      	cbnz	r0, 80009ec <MX_I2C3_Init+0x44>
}
 80009e2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80009e4:	f7ff ff98 	bl	8000918 <Error_Handler>
    Error_Handler();
 80009e8:	f7ff ff96 	bl	8000918 <Error_Handler>
    Error_Handler();
 80009ec:	f7ff ff94 	bl	8000918 <Error_Handler>
 80009f0:	20000248 	.word	0x20000248
 80009f4:	40005c00 	.word	0x40005c00
 80009f8:	000186a0 	.word	0x000186a0

080009fc <MX_SPI5_Init>:
{
 80009fc:	b508      	push	{r3, lr}
  hspi5.Instance = SPI5;
 80009fe:	480d      	ldr	r0, [pc, #52]	@ (8000a34 <MX_SPI5_Init+0x38>)
 8000a00:	4b0d      	ldr	r3, [pc, #52]	@ (8000a38 <MX_SPI5_Init+0x3c>)
 8000a02:	6003      	str	r3, [r0, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000a04:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8000a08:	6043      	str	r3, [r0, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	6083      	str	r3, [r0, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a0e:	60c3      	str	r3, [r0, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a10:	6103      	str	r3, [r0, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a12:	6143      	str	r3, [r0, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000a14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a18:	6182      	str	r2, [r0, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a1a:	2218      	movs	r2, #24
 8000a1c:	61c2      	str	r2, [r0, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a1e:	6203      	str	r3, [r0, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a20:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a22:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000a24:	230a      	movs	r3, #10
 8000a26:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000a28:	f001 fe92 	bl	8002750 <HAL_SPI_Init>
 8000a2c:	b900      	cbnz	r0, 8000a30 <MX_SPI5_Init+0x34>
}
 8000a2e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000a30:	f7ff ff72 	bl	8000918 <Error_Handler>
 8000a34:	20000148 	.word	0x20000148
 8000a38:	40015000 	.word	0x40015000

08000a3c <MX_TIM1_Init>:
{
 8000a3c:	b500      	push	{lr}
 8000a3e:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a40:	2300      	movs	r3, #0
 8000a42:	9302      	str	r3, [sp, #8]
 8000a44:	9303      	str	r3, [sp, #12]
 8000a46:	9304      	str	r3, [sp, #16]
 8000a48:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a4a:	9300      	str	r3, [sp, #0]
 8000a4c:	9301      	str	r3, [sp, #4]
  htim1.Instance = TIM1;
 8000a4e:	4813      	ldr	r0, [pc, #76]	@ (8000a9c <MX_TIM1_Init+0x60>)
 8000a50:	4a13      	ldr	r2, [pc, #76]	@ (8000aa0 <MX_TIM1_Init+0x64>)
 8000a52:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 0;
 8000a54:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a56:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 8000a58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a5c:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a5e:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a60:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a62:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a64:	f002 f866 	bl	8002b34 <HAL_TIM_Base_Init>
 8000a68:	b990      	cbnz	r0, 8000a90 <MX_TIM1_Init+0x54>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a6e:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a70:	a902      	add	r1, sp, #8
 8000a72:	480a      	ldr	r0, [pc, #40]	@ (8000a9c <MX_TIM1_Init+0x60>)
 8000a74:	f002 f897 	bl	8002ba6 <HAL_TIM_ConfigClockSource>
 8000a78:	b960      	cbnz	r0, 8000a94 <MX_TIM1_Init+0x58>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a7e:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a80:	4669      	mov	r1, sp
 8000a82:	4806      	ldr	r0, [pc, #24]	@ (8000a9c <MX_TIM1_Init+0x60>)
 8000a84:	f002 f90e 	bl	8002ca4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a88:	b930      	cbnz	r0, 8000a98 <MX_TIM1_Init+0x5c>
}
 8000a8a:	b007      	add	sp, #28
 8000a8c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000a90:	f7ff ff42 	bl	8000918 <Error_Handler>
    Error_Handler();
 8000a94:	f7ff ff40 	bl	8000918 <Error_Handler>
    Error_Handler();
 8000a98:	f7ff ff3e 	bl	8000918 <Error_Handler>
 8000a9c:	20000100 	.word	0x20000100
 8000aa0:	40010000 	.word	0x40010000

08000aa4 <MX_USART1_UART_Init>:
{
 8000aa4:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8000aa6:	480a      	ldr	r0, [pc, #40]	@ (8000ad0 <MX_USART1_UART_Init+0x2c>)
 8000aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad4 <MX_USART1_UART_Init+0x30>)
 8000aaa:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8000aac:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000ab0:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ab6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ab8:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aba:	220c      	movs	r2, #12
 8000abc:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000abe:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ac2:	f002 fa60 	bl	8002f86 <HAL_UART_Init>
 8000ac6:	b900      	cbnz	r0, 8000aca <MX_USART1_UART_Init+0x26>
}
 8000ac8:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000aca:	f7ff ff25 	bl	8000918 <Error_Handler>
 8000ace:	bf00      	nop
 8000ad0:	200000b8 	.word	0x200000b8
 8000ad4:	40011000 	.word	0x40011000

08000ad8 <MX_ADC1_Init>:
{
 8000ad8:	b500      	push	{lr}
 8000ada:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8000adc:	2300      	movs	r3, #0
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	9301      	str	r3, [sp, #4]
 8000ae2:	9302      	str	r3, [sp, #8]
 8000ae4:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 8000ae6:	481e      	ldr	r0, [pc, #120]	@ (8000b60 <MX_ADC1_Init+0x88>)
 8000ae8:	4a1e      	ldr	r2, [pc, #120]	@ (8000b64 <MX_ADC1_Init+0x8c>)
 8000aea:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000aec:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000aee:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000af0:	2201      	movs	r2, #1
 8000af2:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000af4:	7602      	strb	r2, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000af6:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000afa:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000afc:	491a      	ldr	r1, [pc, #104]	@ (8000b68 <MX_ADC1_Init+0x90>)
 8000afe:	6281      	str	r1, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b00:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000b02:	2303      	movs	r3, #3
 8000b04:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b06:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b0a:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b0c:	f000 fd86 	bl	800161c <HAL_ADC_Init>
 8000b10:	b9f0      	cbnz	r0, 8000b50 <MX_ADC1_Init+0x78>
  sConfig.Channel = ADC_CHANNEL_5;
 8000b12:	2305      	movs	r3, #5
 8000b14:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8000b16:	2301      	movs	r3, #1
 8000b18:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000b1a:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b1c:	4669      	mov	r1, sp
 8000b1e:	4810      	ldr	r0, [pc, #64]	@ (8000b60 <MX_ADC1_Init+0x88>)
 8000b20:	f000 fec2 	bl	80018a8 <HAL_ADC_ConfigChannel>
 8000b24:	b9b0      	cbnz	r0, 8000b54 <MX_ADC1_Init+0x7c>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000b26:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <MX_ADC1_Init+0x94>)
 8000b28:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b2e:	4669      	mov	r1, sp
 8000b30:	480b      	ldr	r0, [pc, #44]	@ (8000b60 <MX_ADC1_Init+0x88>)
 8000b32:	f000 feb9 	bl	80018a8 <HAL_ADC_ConfigChannel>
 8000b36:	b978      	cbnz	r0, 8000b58 <MX_ADC1_Init+0x80>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000b38:	2311      	movs	r3, #17
 8000b3a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b40:	4669      	mov	r1, sp
 8000b42:	4807      	ldr	r0, [pc, #28]	@ (8000b60 <MX_ADC1_Init+0x88>)
 8000b44:	f000 feb0 	bl	80018a8 <HAL_ADC_ConfigChannel>
 8000b48:	b940      	cbnz	r0, 8000b5c <MX_ADC1_Init+0x84>
}
 8000b4a:	b005      	add	sp, #20
 8000b4c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000b50:	f7ff fee2 	bl	8000918 <Error_Handler>
    Error_Handler();
 8000b54:	f7ff fee0 	bl	8000918 <Error_Handler>
    Error_Handler();
 8000b58:	f7ff fede 	bl	8000918 <Error_Handler>
    Error_Handler();
 8000b5c:	f7ff fedc 	bl	8000918 <Error_Handler>
 8000b60:	20000304 	.word	0x20000304
 8000b64:	40012000 	.word	0x40012000
 8000b68:	0f000001 	.word	0x0f000001
 8000b6c:	10000012 	.word	0x10000012

08000b70 <MX_LTDC_Init>:
{
 8000b70:	b500      	push	{lr}
 8000b72:	b08f      	sub	sp, #60	@ 0x3c
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b74:	2234      	movs	r2, #52	@ 0x34
 8000b76:	2100      	movs	r1, #0
 8000b78:	a801      	add	r0, sp, #4
 8000b7a:	f002 fd39 	bl	80035f0 <memset>
  hltdc.Instance = LTDC;
 8000b7e:	4825      	ldr	r0, [pc, #148]	@ (8000c14 <MX_LTDC_Init+0xa4>)
 8000b80:	4b25      	ldr	r3, [pc, #148]	@ (8000c18 <MX_LTDC_Init+0xa8>)
 8000b82:	6003      	str	r3, [r0, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	6043      	str	r3, [r0, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b88:	6083      	str	r3, [r0, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b8a:	60c3      	str	r3, [r0, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b8c:	6103      	str	r3, [r0, #16]
  hltdc.Init.HorizontalSync = 7;
 8000b8e:	2207      	movs	r2, #7
 8000b90:	6142      	str	r2, [r0, #20]
  hltdc.Init.VerticalSync = 3;
 8000b92:	2203      	movs	r2, #3
 8000b94:	6182      	str	r2, [r0, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000b96:	220e      	movs	r2, #14
 8000b98:	61c2      	str	r2, [r0, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000b9a:	2205      	movs	r2, #5
 8000b9c:	6202      	str	r2, [r0, #32]
  hltdc.Init.AccumulatedActiveW = 334;
 8000b9e:	f44f 72a7 	mov.w	r2, #334	@ 0x14e
 8000ba2:	6242      	str	r2, [r0, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 245;
 8000ba4:	22f5      	movs	r2, #245	@ 0xf5
 8000ba6:	6282      	str	r2, [r0, #40]	@ 0x28
  hltdc.Init.TotalWidth = 340;
 8000ba8:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 8000bac:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 247;
 8000bae:	22f7      	movs	r2, #247	@ 0xf7
 8000bb0:	6302      	str	r2, [r0, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000bb2:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000bb6:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000bba:	f880 3036 	strb.w	r3, [r0, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000bbe:	f001 fc45 	bl	800244c <HAL_LTDC_Init>
 8000bc2:	bb10      	cbnz	r0, 8000c0a <MX_LTDC_Init+0x9a>
  pLayerCfg.WindowX0 = 0;
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	9201      	str	r2, [sp, #4]
  pLayerCfg.WindowX1 = 320;
 8000bc8:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8000bcc:	9102      	str	r1, [sp, #8]
  pLayerCfg.WindowY0 = 0;
 8000bce:	9203      	str	r2, [sp, #12]
  pLayerCfg.WindowY1 = 240;
 8000bd0:	23f0      	movs	r3, #240	@ 0xf0
 8000bd2:	9304      	str	r3, [sp, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000bd4:	2002      	movs	r0, #2
 8000bd6:	9005      	str	r0, [sp, #20]
  pLayerCfg.Alpha = 255;
 8000bd8:	20ff      	movs	r0, #255	@ 0xff
 8000bda:	9006      	str	r0, [sp, #24]
  pLayerCfg.Alpha0 = 0;
 8000bdc:	9207      	str	r2, [sp, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000bde:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8000be2:	9008      	str	r0, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000be4:	2007      	movs	r0, #7
 8000be6:	9009      	str	r0, [sp, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 8000be8:	920a      	str	r2, [sp, #40]	@ 0x28
  pLayerCfg.ImageWidth = 320;
 8000bea:	910b      	str	r1, [sp, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 240;
 8000bec:	930c      	str	r3, [sp, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000bee:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000bf2:	f88d 2035 	strb.w	r2, [sp, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000bf6:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bfa:	a901      	add	r1, sp, #4
 8000bfc:	4805      	ldr	r0, [pc, #20]	@ (8000c14 <MX_LTDC_Init+0xa4>)
 8000bfe:	f001 fd0f 	bl	8002620 <HAL_LTDC_ConfigLayer>
 8000c02:	b920      	cbnz	r0, 8000c0e <MX_LTDC_Init+0x9e>
}
 8000c04:	b00f      	add	sp, #60	@ 0x3c
 8000c06:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000c0a:	f7ff fe85 	bl	8000918 <Error_Handler>
    Error_Handler();
 8000c0e:	f7ff fe83 	bl	8000918 <Error_Handler>
 8000c12:	bf00      	nop
 8000c14:	200001a0 	.word	0x200001a0
 8000c18:	40016800 	.word	0x40016800

08000c1c <SystemClock_Config>:
{
 8000c1c:	b508      	push	{r3, lr}
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000c1e:	4a35      	ldr	r2, [pc, #212]	@ (8000cf4 <SystemClock_Config+0xd8>)
 8000c20:	6813      	ldr	r3, [r2, #0]
 8000c22:	f023 030f 	bic.w	r3, r3, #15
 8000c26:	f043 0303 	orr.w	r3, r3, #3
 8000c2a:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000c2c:	4b31      	ldr	r3, [pc, #196]	@ (8000cf4 <SystemClock_Config+0xd8>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f003 030f 	and.w	r3, r3, #15
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 8000c34:	2b03      	cmp	r3, #3
 8000c36:	d1f9      	bne.n	8000c2c <SystemClock_Config+0x10>
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000c38:	4a2f      	ldr	r2, [pc, #188]	@ (8000cf8 <SystemClock_Config+0xdc>)
 8000c3a:	6813      	ldr	r3, [r2, #0]
 8000c3c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c44:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(PWR->CR, PWR_CR_ODEN);
 8000c46:	6813      	ldr	r3, [r2, #0]
 8000c48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c4c:	6013      	str	r3, [r2, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000c4e:	f502 32e4 	add.w	r2, r2, #116736	@ 0x1c800
 8000c52:	6813      	ldr	r3, [r2, #0]
 8000c54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c58:	6013      	str	r3, [r2, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000c5a:	4b28      	ldr	r3, [pc, #160]	@ (8000cfc <SystemClock_Config+0xe0>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_HSE_IsReady() != 1)
 8000c5e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000c62:	d0fa      	beq.n	8000c5a <SystemClock_Config+0x3e>
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000c64:	4b25      	ldr	r3, [pc, #148]	@ (8000cfc <SystemClock_Config+0xe0>)
 8000c66:	685a      	ldr	r2, [r3, #4]
 8000c68:	4925      	ldr	r1, [pc, #148]	@ (8000d00 <SystemClock_Config+0xe4>)
 8000c6a:	4011      	ands	r1, r2
 8000c6c:	4a25      	ldr	r2, [pc, #148]	@ (8000d04 <SystemClock_Config+0xe8>)
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000c72:	685a      	ldr	r2, [r3, #4]
 8000c74:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8000c78:	605a      	str	r2, [r3, #4]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8000c80:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000c82:	4b1e      	ldr	r3, [pc, #120]	@ (8000cfc <SystemClock_Config+0xe0>)
 8000c84:	681b      	ldr	r3, [r3, #0]
  while(LL_RCC_PLL_IsReady() != 1)
 8000c86:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000c8a:	d0fa      	beq.n	8000c82 <SystemClock_Config+0x66>
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8000c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf8 <SystemClock_Config+0xdc>)
 8000c8e:	685b      	ldr	r3, [r3, #4]
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8000c90:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8000c94:	d0fa      	beq.n	8000c8c <SystemClock_Config+0x70>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000c96:	4b19      	ldr	r3, [pc, #100]	@ (8000cfc <SystemClock_Config+0xe0>)
 8000c98:	689a      	ldr	r2, [r3, #8]
 8000c9a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8000c9e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000ca0:	689a      	ldr	r2, [r3, #8]
 8000ca2:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8000ca6:	f442 52a0 	orr.w	r2, r2, #5120	@ 0x1400
 8000caa:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000cac:	689a      	ldr	r2, [r3, #8]
 8000cae:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8000cb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000cb6:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000cb8:	689a      	ldr	r2, [r3, #8]
 8000cba:	f022 0203 	bic.w	r2, r2, #3
 8000cbe:	f042 0202 	orr.w	r2, r2, #2
 8000cc2:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000cc4:	4b0d      	ldr	r3, [pc, #52]	@ (8000cfc <SystemClock_Config+0xe0>)
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	f003 030c 	and.w	r3, r3, #12
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000ccc:	2b08      	cmp	r3, #8
 8000cce:	d1f9      	bne.n	8000cc4 <SystemClock_Config+0xa8>
  LL_SetSystemCoreClock(96000000);
 8000cd0:	480d      	ldr	r0, [pc, #52]	@ (8000d08 <SystemClock_Config+0xec>)
 8000cd2:	f002 fc4d 	bl	8003570 <LL_SetSystemCoreClock>
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000cd6:	200f      	movs	r0, #15
 8000cd8:	f000 fb06 	bl	80012e8 <HAL_InitTick>
 8000cdc:	b938      	cbnz	r0, 8000cee <SystemClock_Config+0xd2>
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8000cde:	4a07      	ldr	r2, [pc, #28]	@ (8000cfc <SystemClock_Config+0xe0>)
 8000ce0:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8000ce4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000ce8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
}
 8000cec:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000cee:	f7ff fe13 	bl	8000918 <Error_Handler>
 8000cf2:	bf00      	nop
 8000cf4:	40023c00 	.word	0x40023c00
 8000cf8:	40007000 	.word	0x40007000
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	ffbf8000 	.word	0xffbf8000
 8000d04:	00401804 	.word	0x00401804
 8000d08:	05b8d800 	.word	0x05b8d800

08000d0c <main>:
{
 8000d0c:	b508      	push	{r3, lr}
  HAL_Init();
 8000d0e:	f000 fbbf 	bl	8001490 <HAL_Init>
  SystemClock_Config();
 8000d12:	f7ff ff83 	bl	8000c1c <SystemClock_Config>
  PeriphCommonClock_Config();
 8000d16:	f7ff fdc9 	bl	80008ac <PeriphCommonClock_Config>
  MX_GPIO_Init();
 8000d1a:	f7ff fcdf 	bl	80006dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000d1e:	f7ff fccb 	bl	80006b8 <MX_DMA_Init>
  MX_CRC_Init();
 8000d22:	f7ff fdfb 	bl	800091c <MX_CRC_Init>
  MX_FMC_Init();
 8000d26:	f7ff fe07 	bl	8000938 <MX_FMC_Init>
  MX_I2C3_Init();
 8000d2a:	f7ff fe3d 	bl	80009a8 <MX_I2C3_Init>
  MX_SPI5_Init();
 8000d2e:	f7ff fe65 	bl	80009fc <MX_SPI5_Init>
  MX_TIM1_Init();
 8000d32:	f7ff fe83 	bl	8000a3c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000d36:	f7ff feb5 	bl	8000aa4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000d3a:	f7ff fecd 	bl	8000ad8 <MX_ADC1_Init>
  MX_LTDC_Init();
 8000d3e:	f7ff ff17 	bl	8000b70 <MX_LTDC_Init>
  apInit();
 8000d42:	f7ff fc1d 	bl	8000580 <apInit>
  apMain(); // 안에 while문이 있음.
 8000d46:	f7ff fc1f 	bl	8000588 <apMain>
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <main+0x3e>

08000d4c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d50:	b086      	sub	sp, #24
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000d52:	2300      	movs	r3, #0
 8000d54:	9301      	str	r3, [sp, #4]
 8000d56:	9302      	str	r3, [sp, #8]
 8000d58:	9303      	str	r3, [sp, #12]
 8000d5a:	9304      	str	r3, [sp, #16]
 8000d5c:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 8000d5e:	4b2d      	ldr	r3, [pc, #180]	@ (8000e14 <HAL_FMC_MspInit+0xc8>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	b113      	cbz	r3, 8000d6a <HAL_FMC_MspInit+0x1e>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000d64:	b006      	add	sp, #24
 8000d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  FMC_Initialized = 1;
 8000d6a:	f04f 0801 	mov.w	r8, #1
 8000d6e:	4b29      	ldr	r3, [pc, #164]	@ (8000e14 <HAL_FMC_MspInit+0xc8>)
 8000d70:	f8c3 8000 	str.w	r8, [r3]
  __HAL_RCC_FMC_CLK_ENABLE();
 8000d74:	2600      	movs	r6, #0
 8000d76:	9600      	str	r6, [sp, #0]
 8000d78:	4b27      	ldr	r3, [pc, #156]	@ (8000e18 <HAL_FMC_MspInit+0xcc>)
 8000d7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000d7c:	ea42 0208 	orr.w	r2, r2, r8
 8000d80:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d84:	ea03 0308 	and.w	r3, r3, r8
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000d8c:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000d90:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2702      	movs	r7, #2
 8000d94:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d96:	2503      	movs	r5, #3
 8000d98:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d9a:	240c      	movs	r4, #12
 8000d9c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d9e:	a901      	add	r1, sp, #4
 8000da0:	481e      	ldr	r0, [pc, #120]	@ (8000e1c <HAL_FMC_MspInit+0xd0>)
 8000da2:	f001 f847 	bl	8001e34 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000da6:	f8cd 8004 	str.w	r8, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dae:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000db0:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000db2:	a901      	add	r1, sp, #4
 8000db4:	481a      	ldr	r0, [pc, #104]	@ (8000e20 <HAL_FMC_MspInit+0xd4>)
 8000db6:	f001 f83d 	bl	8001e34 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000dba:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000dbe:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc4:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000dc6:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dc8:	a901      	add	r1, sp, #4
 8000dca:	4816      	ldr	r0, [pc, #88]	@ (8000e24 <HAL_FMC_MspInit+0xd8>)
 8000dcc:	f001 f832 	bl	8001e34 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000dd0:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000dd4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dda:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ddc:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dde:	a901      	add	r1, sp, #4
 8000de0:	4811      	ldr	r0, [pc, #68]	@ (8000e28 <HAL_FMC_MspInit+0xdc>)
 8000de2:	f001 f827 	bl	8001e34 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000de6:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000dea:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df0:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000df2:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000df4:	a901      	add	r1, sp, #4
 8000df6:	480d      	ldr	r0, [pc, #52]	@ (8000e2c <HAL_FMC_MspInit+0xe0>)
 8000df8:	f001 f81c 	bl	8001e34 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000dfc:	2360      	movs	r3, #96	@ 0x60
 8000dfe:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e04:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e06:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e08:	a901      	add	r1, sp, #4
 8000e0a:	4809      	ldr	r0, [pc, #36]	@ (8000e30 <HAL_FMC_MspInit+0xe4>)
 8000e0c:	f001 f812 	bl	8001e34 <HAL_GPIO_Init>
 8000e10:	e7a8      	b.n	8000d64 <HAL_FMC_MspInit+0x18>
 8000e12:	bf00      	nop
 8000e14:	2000034c 	.word	0x2000034c
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40021400 	.word	0x40021400
 8000e20:	40020800 	.word	0x40020800
 8000e24:	40021800 	.word	0x40021800
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	40020c00 	.word	0x40020c00
 8000e30:	40020400 	.word	0x40020400

08000e34 <HAL_MspInit>:
{
 8000e34:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e36:	2100      	movs	r1, #0
 8000e38:	9100      	str	r1, [sp, #0]
 8000e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e68 <HAL_MspInit+0x34>)
 8000e3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000e3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000e42:	645a      	str	r2, [r3, #68]	@ 0x44
 8000e44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000e46:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000e4a:	9200      	str	r2, [sp, #0]
 8000e4c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4e:	9101      	str	r1, [sp, #4]
 8000e50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e52:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000e56:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e5e:	9301      	str	r3, [sp, #4]
 8000e60:	9b01      	ldr	r3, [sp, #4]
}
 8000e62:	b002      	add	sp, #8
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	40023800 	.word	0x40023800

08000e6c <HAL_ADC_MspInit>:
{
 8000e6c:	b530      	push	{r4, r5, lr}
 8000e6e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	2300      	movs	r3, #0
 8000e72:	9303      	str	r3, [sp, #12]
 8000e74:	9304      	str	r3, [sp, #16]
 8000e76:	9305      	str	r3, [sp, #20]
 8000e78:	9306      	str	r3, [sp, #24]
 8000e7a:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 8000e7c:	6802      	ldr	r2, [r0, #0]
 8000e7e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000e82:	f503 3390 	add.w	r3, r3, #73728	@ 0x12000
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d001      	beq.n	8000e8e <HAL_ADC_MspInit+0x22>
}
 8000e8a:	b009      	add	sp, #36	@ 0x24
 8000e8c:	bd30      	pop	{r4, r5, pc}
 8000e8e:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e90:	2500      	movs	r5, #0
 8000e92:	9501      	str	r5, [sp, #4]
 8000e94:	f503 338c 	add.w	r3, r3, #71680	@ 0x11800
 8000e98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000e9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000e9e:	645a      	str	r2, [r3, #68]	@ 0x44
 8000ea0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000ea2:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8000ea6:	9201      	str	r2, [sp, #4]
 8000ea8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	9502      	str	r5, [sp, #8]
 8000eac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000eae:	f042 0201 	orr.w	r2, r2, #1
 8000eb2:	631a      	str	r2, [r3, #48]	@ 0x30
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	9302      	str	r3, [sp, #8]
 8000ebc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ebe:	2320      	movs	r3, #32
 8000ec0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec6:	a903      	add	r1, sp, #12
 8000ec8:	4810      	ldr	r0, [pc, #64]	@ (8000f0c <HAL_ADC_MspInit+0xa0>)
 8000eca:	f000 ffb3 	bl	8001e34 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8000ece:	4810      	ldr	r0, [pc, #64]	@ (8000f10 <HAL_ADC_MspInit+0xa4>)
 8000ed0:	4b10      	ldr	r3, [pc, #64]	@ (8000f14 <HAL_ADC_MspInit+0xa8>)
 8000ed2:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ed4:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ed6:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ed8:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000eda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ede:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ee0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ee4:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ee6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eea:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000eec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ef0:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ef2:	6205      	str	r5, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ef4:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ef6:	f000 fea5 	bl	8001c44 <HAL_DMA_Init>
 8000efa:	b918      	cbnz	r0, 8000f04 <HAL_ADC_MspInit+0x98>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000efc:	4b04      	ldr	r3, [pc, #16]	@ (8000f10 <HAL_ADC_MspInit+0xa4>)
 8000efe:	63a3      	str	r3, [r4, #56]	@ 0x38
 8000f00:	639c      	str	r4, [r3, #56]	@ 0x38
}
 8000f02:	e7c2      	b.n	8000e8a <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 8000f04:	f7ff fd08 	bl	8000918 <Error_Handler>
 8000f08:	e7f8      	b.n	8000efc <HAL_ADC_MspInit+0x90>
 8000f0a:	bf00      	nop
 8000f0c:	40020000 	.word	0x40020000
 8000f10:	200002a4 	.word	0x200002a4
 8000f14:	40026410 	.word	0x40026410

08000f18 <HAL_CRC_MspInit>:
  if(hcrc->Instance==CRC)
 8000f18:	6802      	ldr	r2, [r0, #0]
 8000f1a:	4b09      	ldr	r3, [pc, #36]	@ (8000f40 <HAL_CRC_MspInit+0x28>)
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d000      	beq.n	8000f22 <HAL_CRC_MspInit+0xa>
 8000f20:	4770      	bx	lr
{
 8000f22:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f24:	2300      	movs	r3, #0
 8000f26:	9301      	str	r3, [sp, #4]
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <HAL_CRC_MspInit+0x2c>)
 8000f2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000f2c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000f30:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f38:	9301      	str	r3, [sp, #4]
 8000f3a:	9b01      	ldr	r3, [sp, #4]
}
 8000f3c:	b002      	add	sp, #8
 8000f3e:	4770      	bx	lr
 8000f40:	40023000 	.word	0x40023000
 8000f44:	40023800 	.word	0x40023800

08000f48 <HAL_I2C_MspInit>:
{
 8000f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f4c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4e:	2300      	movs	r3, #0
 8000f50:	9303      	str	r3, [sp, #12]
 8000f52:	9304      	str	r3, [sp, #16]
 8000f54:	9305      	str	r3, [sp, #20]
 8000f56:	9306      	str	r3, [sp, #24]
 8000f58:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C3)
 8000f5a:	6802      	ldr	r2, [r0, #0]
 8000f5c:	4b20      	ldr	r3, [pc, #128]	@ (8000fe0 <HAL_I2C_MspInit+0x98>)
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d002      	beq.n	8000f68 <HAL_I2C_MspInit+0x20>
}
 8000f62:	b008      	add	sp, #32
 8000f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f68:	2500      	movs	r5, #0
 8000f6a:	9500      	str	r5, [sp, #0]
 8000f6c:	4c1d      	ldr	r4, [pc, #116]	@ (8000fe4 <HAL_I2C_MspInit+0x9c>)
 8000f6e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000f70:	f043 0304 	orr.w	r3, r3, #4
 8000f74:	6323      	str	r3, [r4, #48]	@ 0x30
 8000f76:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000f78:	f003 0304 	and.w	r3, r3, #4
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f80:	9501      	str	r5, [sp, #4]
 8000f82:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6323      	str	r3, [r4, #48]	@ 0x30
 8000f8a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	9301      	str	r3, [sp, #4]
 8000f92:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000f94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f98:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f9a:	f04f 0812 	mov.w	r8, #18
 8000f9e:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fa2:	2701      	movs	r7, #1
 8000fa4:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000fa6:	2604      	movs	r6, #4
 8000fa8:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000faa:	a903      	add	r1, sp, #12
 8000fac:	480e      	ldr	r0, [pc, #56]	@ (8000fe8 <HAL_I2C_MspInit+0xa0>)
 8000fae:	f000 ff41 	bl	8001e34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000fb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fb6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb8:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fbc:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000fc0:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000fc2:	a903      	add	r1, sp, #12
 8000fc4:	4809      	ldr	r0, [pc, #36]	@ (8000fec <HAL_I2C_MspInit+0xa4>)
 8000fc6:	f000 ff35 	bl	8001e34 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000fca:	9502      	str	r5, [sp, #8]
 8000fcc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000fce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000fd2:	6423      	str	r3, [r4, #64]	@ 0x40
 8000fd4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000fd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000fda:	9302      	str	r3, [sp, #8]
 8000fdc:	9b02      	ldr	r3, [sp, #8]
}
 8000fde:	e7c0      	b.n	8000f62 <HAL_I2C_MspInit+0x1a>
 8000fe0:	40005c00 	.word	0x40005c00
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40020800 	.word	0x40020800
 8000fec:	40020000 	.word	0x40020000

08000ff0 <HAL_LTDC_MspInit>:
{
 8000ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ff4:	b08c      	sub	sp, #48	@ 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	9307      	str	r3, [sp, #28]
 8000ffa:	9308      	str	r3, [sp, #32]
 8000ffc:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ffe:	930a      	str	r3, [sp, #40]	@ 0x28
 8001000:	930b      	str	r3, [sp, #44]	@ 0x2c
  if(hltdc->Instance==LTDC)
 8001002:	6802      	ldr	r2, [r0, #0]
 8001004:	4b6a      	ldr	r3, [pc, #424]	@ (80011b0 <HAL_LTDC_MspInit+0x1c0>)
 8001006:	429a      	cmp	r2, r3
 8001008:	d002      	beq.n	8001010 <HAL_LTDC_MspInit+0x20>
}
 800100a:	b00c      	add	sp, #48	@ 0x30
 800100c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001010:	2400      	movs	r4, #0
 8001012:	9400      	str	r4, [sp, #0]
 8001014:	f503 4350 	add.w	r3, r3, #53248	@ 0xd000
 8001018:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800101a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800101e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001020:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001022:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 8001026:	9200      	str	r2, [sp, #0]
 8001028:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800102a:	9401      	str	r4, [sp, #4]
 800102c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800102e:	f042 0220 	orr.w	r2, r2, #32
 8001032:	631a      	str	r2, [r3, #48]	@ 0x30
 8001034:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001036:	f002 0220 	and.w	r2, r2, #32
 800103a:	9201      	str	r2, [sp, #4]
 800103c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	9402      	str	r4, [sp, #8]
 8001040:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001042:	f042 0201 	orr.w	r2, r2, #1
 8001046:	631a      	str	r2, [r3, #48]	@ 0x30
 8001048:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800104a:	f002 0201 	and.w	r2, r2, #1
 800104e:	9202      	str	r2, [sp, #8]
 8001050:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001052:	9403      	str	r4, [sp, #12]
 8001054:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001056:	f042 0202 	orr.w	r2, r2, #2
 800105a:	631a      	str	r2, [r3, #48]	@ 0x30
 800105c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800105e:	f002 0202 	and.w	r2, r2, #2
 8001062:	9203      	str	r2, [sp, #12]
 8001064:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001066:	9404      	str	r4, [sp, #16]
 8001068:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800106a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800106e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001070:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001072:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001076:	9204      	str	r2, [sp, #16]
 8001078:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800107a:	9405      	str	r4, [sp, #20]
 800107c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800107e:	f042 0204 	orr.w	r2, r2, #4
 8001082:	631a      	str	r2, [r3, #48]	@ 0x30
 8001084:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001086:	f002 0204 	and.w	r2, r2, #4
 800108a:	9205      	str	r2, [sp, #20]
 800108c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800108e:	9406      	str	r4, [sp, #24]
 8001090:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001092:	f042 0208 	orr.w	r2, r2, #8
 8001096:	631a      	str	r2, [r3, #48]	@ 0x30
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	f003 0308 	and.w	r3, r3, #8
 800109e:	9306      	str	r3, [sp, #24]
 80010a0:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80010a2:	f44f 6a80 	mov.w	sl, #1024	@ 0x400
 80010a6:	f8cd a01c 	str.w	sl, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2502      	movs	r5, #2
 80010ac:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ae:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010b0:	260e      	movs	r6, #14
 80010b2:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80010b4:	a907      	add	r1, sp, #28
 80010b6:	483f      	ldr	r0, [pc, #252]	@ (80011b4 <HAL_LTDC_MspInit+0x1c4>)
 80010b8:	f000 febc 	bl	8001e34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80010bc:	f641 0358 	movw	r3, #6232	@ 0x1858
 80010c0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c6:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010c8:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ca:	a907      	add	r1, sp, #28
 80010cc:	483a      	ldr	r0, [pc, #232]	@ (80011b8 <HAL_LTDC_MspInit+0x1c8>)
 80010ce:	f000 feb1 	bl	8001e34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80010d2:	2303      	movs	r3, #3
 80010d4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010da:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80010dc:	f04f 0809 	mov.w	r8, #9
 80010e0:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e4:	4f35      	ldr	r7, [pc, #212]	@ (80011bc <HAL_LTDC_MspInit+0x1cc>)
 80010e6:	a907      	add	r1, sp, #28
 80010e8:	4638      	mov	r0, r7
 80010ea:	f000 fea3 	bl	8001e34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80010ee:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80010f2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010f8:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010fa:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fc:	a907      	add	r1, sp, #28
 80010fe:	4638      	mov	r0, r7
 8001100:	f000 fe98 	bl	8001e34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001104:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001108:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800110e:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001110:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001112:	f507 57a0 	add.w	r7, r7, #5120	@ 0x1400
 8001116:	a907      	add	r1, sp, #28
 8001118:	4638      	mov	r0, r7
 800111a:	f000 fe8b 	bl	8001e34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin;
 800111e:	23c0      	movs	r3, #192	@ 0xc0
 8001120:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001122:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001126:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001128:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112a:	f8df 9094 	ldr.w	r9, [pc, #148]	@ 80011c0 <HAL_LTDC_MspInit+0x1d0>
 800112e:	a907      	add	r1, sp, #28
 8001130:	4648      	mov	r0, r9
 8001132:	f000 fe7f 	bl	8001e34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = R2_Pin;
 8001136:	f8cd a01c 	str.w	sl, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	940a      	str	r4, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001140:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(R2_GPIO_Port, &GPIO_InitStruct);
 8001142:	a907      	add	r1, sp, #28
 8001144:	4648      	mov	r0, r9
 8001146:	f000 fe75 	bl	8001e34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = G7_Pin;
 800114a:	2308      	movs	r3, #8
 800114c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114e:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001152:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001154:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(G7_GPIO_Port, &GPIO_InitStruct);
 8001156:	f509 6980 	add.w	r9, r9, #1024	@ 0x400
 800115a:	a907      	add	r1, sp, #28
 800115c:	4648      	mov	r0, r9
 800115e:	f000 fe69 	bl	8001e34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = B2_Pin;
 8001162:	2340      	movs	r3, #64	@ 0x40
 8001164:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116a:	940a      	str	r4, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800116c:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 800116e:	a907      	add	r1, sp, #28
 8001170:	4648      	mov	r0, r9
 8001172:	f000 fe5f 	bl	8001e34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001176:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800117a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	9409      	str	r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001180:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001182:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001186:	a907      	add	r1, sp, #28
 8001188:	4638      	mov	r0, r7
 800118a:	f000 fe53 	bl	8001e34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800118e:	4622      	mov	r2, r4
 8001190:	4621      	mov	r1, r4
 8001192:	2058      	movs	r0, #88	@ 0x58
 8001194:	f000 fcb2 	bl	8001afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001198:	2058      	movs	r0, #88	@ 0x58
 800119a:	f000 fcbf 	bl	8001b1c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 800119e:	4622      	mov	r2, r4
 80011a0:	4621      	mov	r1, r4
 80011a2:	2059      	movs	r0, #89	@ 0x59
 80011a4:	f000 fcaa 	bl	8001afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 80011a8:	2059      	movs	r0, #89	@ 0x59
 80011aa:	f000 fcb7 	bl	8001b1c <HAL_NVIC_EnableIRQ>
}
 80011ae:	e72c      	b.n	800100a <HAL_LTDC_MspInit+0x1a>
 80011b0:	40016800 	.word	0x40016800
 80011b4:	40021400 	.word	0x40021400
 80011b8:	40020000 	.word	0x40020000
 80011bc:	40020400 	.word	0x40020400
 80011c0:	40020800 	.word	0x40020800

080011c4 <HAL_SPI_MspInit>:
{
 80011c4:	b500      	push	{lr}
 80011c6:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	2300      	movs	r3, #0
 80011ca:	9303      	str	r3, [sp, #12]
 80011cc:	9304      	str	r3, [sp, #16]
 80011ce:	9305      	str	r3, [sp, #20]
 80011d0:	9306      	str	r3, [sp, #24]
 80011d2:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI5)
 80011d4:	6802      	ldr	r2, [r0, #0]
 80011d6:	4b14      	ldr	r3, [pc, #80]	@ (8001228 <HAL_SPI_MspInit+0x64>)
 80011d8:	429a      	cmp	r2, r3
 80011da:	d002      	beq.n	80011e2 <HAL_SPI_MspInit+0x1e>
}
 80011dc:	b009      	add	sp, #36	@ 0x24
 80011de:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI5_CLK_ENABLE();
 80011e2:	2100      	movs	r1, #0
 80011e4:	9101      	str	r1, [sp, #4]
 80011e6:	f503 4368 	add.w	r3, r3, #59392	@ 0xe800
 80011ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80011ec:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80011f0:	645a      	str	r2, [r3, #68]	@ 0x44
 80011f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80011f4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80011f8:	9201      	str	r2, [sp, #4]
 80011fa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011fc:	9102      	str	r1, [sp, #8]
 80011fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001200:	f042 0220 	orr.w	r2, r2, #32
 8001204:	631a      	str	r2, [r3, #48]	@ 0x30
 8001206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001208:	f003 0320 	and.w	r3, r3, #32
 800120c:	9302      	str	r3, [sp, #8]
 800120e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001210:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001214:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800121a:	2305      	movs	r3, #5
 800121c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800121e:	a903      	add	r1, sp, #12
 8001220:	4802      	ldr	r0, [pc, #8]	@ (800122c <HAL_SPI_MspInit+0x68>)
 8001222:	f000 fe07 	bl	8001e34 <HAL_GPIO_Init>
}
 8001226:	e7d9      	b.n	80011dc <HAL_SPI_MspInit+0x18>
 8001228:	40015000 	.word	0x40015000
 800122c:	40021400 	.word	0x40021400

08001230 <HAL_TIM_Base_MspInit>:
  if(htim_base->Instance==TIM1)
 8001230:	6802      	ldr	r2, [r0, #0]
 8001232:	4b09      	ldr	r3, [pc, #36]	@ (8001258 <HAL_TIM_Base_MspInit+0x28>)
 8001234:	429a      	cmp	r2, r3
 8001236:	d000      	beq.n	800123a <HAL_TIM_Base_MspInit+0xa>
 8001238:	4770      	bx	lr
{
 800123a:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 800123c:	2300      	movs	r3, #0
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	4b06      	ldr	r3, [pc, #24]	@ (800125c <HAL_TIM_Base_MspInit+0x2c>)
 8001242:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001244:	f042 0201 	orr.w	r2, r2, #1
 8001248:	645a      	str	r2, [r3, #68]	@ 0x44
 800124a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	9301      	str	r3, [sp, #4]
 8001252:	9b01      	ldr	r3, [sp, #4]
}
 8001254:	b002      	add	sp, #8
 8001256:	4770      	bx	lr
 8001258:	40010000 	.word	0x40010000
 800125c:	40023800 	.word	0x40023800

08001260 <HAL_UART_MspInit>:
{
 8001260:	b510      	push	{r4, lr}
 8001262:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	2300      	movs	r3, #0
 8001266:	9303      	str	r3, [sp, #12]
 8001268:	9304      	str	r3, [sp, #16]
 800126a:	9305      	str	r3, [sp, #20]
 800126c:	9306      	str	r3, [sp, #24]
 800126e:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8001270:	6802      	ldr	r2, [r0, #0]
 8001272:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001276:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 800127a:	429a      	cmp	r2, r3
 800127c:	d001      	beq.n	8001282 <HAL_UART_MspInit+0x22>
}
 800127e:	b008      	add	sp, #32
 8001280:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001282:	2400      	movs	r4, #0
 8001284:	9401      	str	r4, [sp, #4]
 8001286:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 800128a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800128c:	f042 0210 	orr.w	r2, r2, #16
 8001290:	645a      	str	r2, [r3, #68]	@ 0x44
 8001292:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001294:	f002 0210 	and.w	r2, r2, #16
 8001298:	9201      	str	r2, [sp, #4]
 800129a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129c:	9402      	str	r4, [sp, #8]
 800129e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012a0:	f042 0201 	orr.w	r2, r2, #1
 80012a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80012a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	9302      	str	r3, [sp, #8]
 80012ae:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80012b0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80012b4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ba:	2303      	movs	r3, #3
 80012bc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012be:	2307      	movs	r3, #7
 80012c0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c2:	a903      	add	r1, sp, #12
 80012c4:	4805      	ldr	r0, [pc, #20]	@ (80012dc <HAL_UART_MspInit+0x7c>)
 80012c6:	f000 fdb5 	bl	8001e34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80012ca:	4622      	mov	r2, r4
 80012cc:	4621      	mov	r1, r4
 80012ce:	2025      	movs	r0, #37	@ 0x25
 80012d0:	f000 fc14 	bl	8001afc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012d4:	2025      	movs	r0, #37	@ 0x25
 80012d6:	f000 fc21 	bl	8001b1c <HAL_NVIC_EnableIRQ>
}
 80012da:	e7d0      	b.n	800127e <HAL_UART_MspInit+0x1e>
 80012dc:	40020000 	.word	0x40020000

080012e0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80012e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80012e2:	f7ff fd33 	bl	8000d4c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80012e6:	bd08      	pop	{r3, pc}

080012e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e8:	b530      	push	{r4, r5, lr}
 80012ea:	b089      	sub	sp, #36	@ 0x24
 80012ec:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	9301      	str	r3, [sp, #4]
 80012f2:	4b21      	ldr	r3, [pc, #132]	@ (8001378 <HAL_InitTick+0x90>)
 80012f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012f6:	f042 0210 	orr.w	r2, r2, #16
 80012fa:	641a      	str	r2, [r3, #64]	@ 0x40
 80012fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fe:	f003 0310 	and.w	r3, r3, #16
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	9b01      	ldr	r3, [sp, #4]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001306:	a902      	add	r1, sp, #8
 8001308:	a803      	add	r0, sp, #12
 800130a:	f001 f9e3 	bl	80026d4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800130e:	9b06      	ldr	r3, [sp, #24]
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001310:	b9cb      	cbnz	r3, 8001346 <HAL_InitTick+0x5e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001312:	f001 f9bf 	bl	8002694 <HAL_RCC_GetPCLK1Freq>
 8001316:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001318:	4a18      	ldr	r2, [pc, #96]	@ (800137c <HAL_InitTick+0x94>)
 800131a:	fba2 2303 	umull	r2, r3, r2, r3
 800131e:	0c9b      	lsrs	r3, r3, #18
 8001320:	3b01      	subs	r3, #1

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001322:	4817      	ldr	r0, [pc, #92]	@ (8001380 <HAL_InitTick+0x98>)
 8001324:	4a17      	ldr	r2, [pc, #92]	@ (8001384 <HAL_InitTick+0x9c>)
 8001326:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001328:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800132c:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800132e:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001334:	6083      	str	r3, [r0, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001336:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001338:	f001 fbfc 	bl	8002b34 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800133c:	4605      	mov	r5, r0
 800133e:	b130      	cbz	r0, 800134e <HAL_InitTick+0x66>
    }
  }

 /* Return function status */
  return status;
}
 8001340:	4628      	mov	r0, r5
 8001342:	b009      	add	sp, #36	@ 0x24
 8001344:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001346:	f001 f9a5 	bl	8002694 <HAL_RCC_GetPCLK1Freq>
 800134a:	0043      	lsls	r3, r0, #1
 800134c:	e7e4      	b.n	8001318 <HAL_InitTick+0x30>
    status = HAL_TIM_Base_Start_IT(&htim6);
 800134e:	480c      	ldr	r0, [pc, #48]	@ (8001380 <HAL_InitTick+0x98>)
 8001350:	f001 fa8c 	bl	800286c <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8001354:	4605      	mov	r5, r0
 8001356:	2800      	cmp	r0, #0
 8001358:	d1f2      	bne.n	8001340 <HAL_InitTick+0x58>
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800135a:	2036      	movs	r0, #54	@ 0x36
 800135c:	f000 fbde 	bl	8001b1c <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001360:	2c0f      	cmp	r4, #15
 8001362:	d901      	bls.n	8001368 <HAL_InitTick+0x80>
        status = HAL_ERROR;
 8001364:	2501      	movs	r5, #1
 8001366:	e7eb      	b.n	8001340 <HAL_InitTick+0x58>
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001368:	2200      	movs	r2, #0
 800136a:	4621      	mov	r1, r4
 800136c:	2036      	movs	r0, #54	@ 0x36
 800136e:	f000 fbc5 	bl	8001afc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001372:	4b05      	ldr	r3, [pc, #20]	@ (8001388 <HAL_InitTick+0xa0>)
 8001374:	601c      	str	r4, [r3, #0]
 8001376:	e7e3      	b.n	8001340 <HAL_InitTick+0x58>
 8001378:	40023800 	.word	0x40023800
 800137c:	431bde83 	.word	0x431bde83
 8001380:	20000350 	.word	0x20000350
 8001384:	40001000 	.word	0x40001000
 8001388:	20000008 	.word	0x20000008

0800138c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800138c:	e7fe      	b.n	800138c <NMI_Handler>

0800138e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800138e:	e7fe      	b.n	800138e <HardFault_Handler>

08001390 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <MemManage_Handler>

08001392 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001392:	e7fe      	b.n	8001392 <BusFault_Handler>

08001394 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <UsageFault_Handler>

08001396 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001396:	4770      	bx	lr

08001398 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001398:	4770      	bx	lr

0800139a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800139a:	4770      	bx	lr

0800139c <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800139c:	4770      	bx	lr
	...

080013a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013a2:	4802      	ldr	r0, [pc, #8]	@ (80013ac <USART1_IRQHandler+0xc>)
 80013a4:	f001 ff12 	bl	80031cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013a8:	bd08      	pop	{r3, pc}
 80013aa:	bf00      	nop
 80013ac:	200000b8 	.word	0x200000b8

080013b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013b2:	4802      	ldr	r0, [pc, #8]	@ (80013bc <TIM6_DAC_IRQHandler+0xc>)
 80013b4:	f001 faa2 	bl	80028fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80013b8:	bd08      	pop	{r3, pc}
 80013ba:	bf00      	nop
 80013bc:	20000350 	.word	0x20000350

080013c0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80013c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80013c2:	4802      	ldr	r0, [pc, #8]	@ (80013cc <LTDC_IRQHandler+0xc>)
 80013c4:	f001 f8bf 	bl	8002546 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80013c8:	bd08      	pop	{r3, pc}
 80013ca:	bf00      	nop
 80013cc:	200001a0 	.word	0x200001a0

080013d0 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC global error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 80013d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80013d2:	4802      	ldr	r0, [pc, #8]	@ (80013dc <LTDC_ER_IRQHandler+0xc>)
 80013d4:	f001 f8b7 	bl	8002546 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 80013d8:	bd08      	pop	{r3, pc}
 80013da:	bf00      	nop
 80013dc:	200001a0 	.word	0x200001a0

080013e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013e0:	b510      	push	{r4, lr}
 80013e2:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001418 <_sbrk+0x38>)
 80013e6:	490d      	ldr	r1, [pc, #52]	@ (800141c <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013e8:	480d      	ldr	r0, [pc, #52]	@ (8001420 <_sbrk+0x40>)
 80013ea:	6800      	ldr	r0, [r0, #0]
 80013ec:	b140      	cbz	r0, 8001400 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ee:	480c      	ldr	r0, [pc, #48]	@ (8001420 <_sbrk+0x40>)
 80013f0:	6800      	ldr	r0, [r0, #0]
 80013f2:	4403      	add	r3, r0
 80013f4:	1a52      	subs	r2, r2, r1
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d806      	bhi.n	8001408 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80013fa:	4a09      	ldr	r2, [pc, #36]	@ (8001420 <_sbrk+0x40>)
 80013fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80013fe:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001400:	4807      	ldr	r0, [pc, #28]	@ (8001420 <_sbrk+0x40>)
 8001402:	4c08      	ldr	r4, [pc, #32]	@ (8001424 <_sbrk+0x44>)
 8001404:	6004      	str	r4, [r0, #0]
 8001406:	e7f2      	b.n	80013ee <_sbrk+0xe>
    errno = ENOMEM;
 8001408:	f002 f8fa 	bl	8003600 <__errno>
 800140c:	230c      	movs	r3, #12
 800140e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001410:	f04f 30ff 	mov.w	r0, #4294967295
 8001414:	e7f3      	b.n	80013fe <_sbrk+0x1e>
 8001416:	bf00      	nop
 8001418:	20030000 	.word	0x20030000
 800141c:	00000400 	.word	0x00000400
 8001420:	20000398 	.word	0x20000398
 8001424:	200004e8 	.word	0x200004e8

08001428 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001428:	4a03      	ldr	r2, [pc, #12]	@ (8001438 <SystemInit+0x10>)
 800142a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800142e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001432:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001436:	4770      	bx	lr
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800143c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001474 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001440:	f7ff fff2 	bl	8001428 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001444:	480c      	ldr	r0, [pc, #48]	@ (8001478 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001446:	490d      	ldr	r1, [pc, #52]	@ (800147c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001448:	4a0d      	ldr	r2, [pc, #52]	@ (8001480 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800144a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800144c:	e002      	b.n	8001454 <LoopCopyDataInit>

0800144e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800144e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001452:	3304      	adds	r3, #4

08001454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001458:	d3f9      	bcc.n	800144e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145a:	4a0a      	ldr	r2, [pc, #40]	@ (8001484 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800145c:	4c0a      	ldr	r4, [pc, #40]	@ (8001488 <LoopFillZerobss+0x22>)
  movs r3, #0
 800145e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001460:	e001      	b.n	8001466 <LoopFillZerobss>

08001462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001464:	3204      	adds	r2, #4

08001466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001468:	d3fb      	bcc.n	8001462 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800146a:	f002 f8cf 	bl	800360c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800146e:	f7ff fc4d 	bl	8000d0c <main>
  bx  lr    
 8001472:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001474:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800147c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001480:	08003f70 	.word	0x08003f70
  ldr r2, =_sbss
 8001484:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001488:	200004e8 	.word	0x200004e8

0800148c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800148c:	e7fe      	b.n	800148c <ADC_IRQHandler>
	...

08001490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001490:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001492:	4b0b      	ldr	r3, [pc, #44]	@ (80014c0 <HAL_Init+0x30>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800149a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80014a2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80014aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ac:	2003      	movs	r0, #3
 80014ae:	f000 fb13 	bl	8001ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014b2:	200f      	movs	r0, #15
 80014b4:	f7ff ff18 	bl	80012e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014b8:	f7ff fcbc 	bl	8000e34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80014bc:	2000      	movs	r0, #0
 80014be:	bd08      	pop	{r3, pc}
 80014c0:	40023c00 	.word	0x40023c00

080014c4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80014c4:	4a03      	ldr	r2, [pc, #12]	@ (80014d4 <HAL_IncTick+0x10>)
 80014c6:	6811      	ldr	r1, [r2, #0]
 80014c8:	4b03      	ldr	r3, [pc, #12]	@ (80014d8 <HAL_IncTick+0x14>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	440b      	add	r3, r1
 80014ce:	6013      	str	r3, [r2, #0]
}
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	2000039c 	.word	0x2000039c
 80014d8:	20000004 	.word	0x20000004

080014dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80014dc:	4b01      	ldr	r3, [pc, #4]	@ (80014e4 <HAL_GetTick+0x8>)
 80014de:	6818      	ldr	r0, [r3, #0]
}
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	2000039c 	.word	0x2000039c

080014e8 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014e8:	4b4a      	ldr	r3, [pc, #296]	@ (8001614 <ADC_Init+0x12c>)
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80014f0:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	6841      	ldr	r1, [r0, #4]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014fa:	6802      	ldr	r2, [r0, #0]
 80014fc:	6853      	ldr	r3, [r2, #4]
 80014fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001502:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001504:	6802      	ldr	r2, [r0, #0]
 8001506:	6853      	ldr	r3, [r2, #4]
 8001508:	6901      	ldr	r1, [r0, #16]
 800150a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800150e:	6053      	str	r3, [r2, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001510:	6802      	ldr	r2, [r0, #0]
 8001512:	6853      	ldr	r3, [r2, #4]
 8001514:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8001518:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800151a:	6802      	ldr	r2, [r0, #0]
 800151c:	6853      	ldr	r3, [r2, #4]
 800151e:	6881      	ldr	r1, [r0, #8]
 8001520:	430b      	orrs	r3, r1
 8001522:	6053      	str	r3, [r2, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001524:	6802      	ldr	r2, [r0, #0]
 8001526:	6893      	ldr	r3, [r2, #8]
 8001528:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800152c:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800152e:	6802      	ldr	r2, [r0, #0]
 8001530:	6893      	ldr	r3, [r2, #8]
 8001532:	68c1      	ldr	r1, [r0, #12]
 8001534:	430b      	orrs	r3, r1
 8001536:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001538:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800153a:	4b37      	ldr	r3, [pc, #220]	@ (8001618 <ADC_Init+0x130>)
 800153c:	429a      	cmp	r2, r3
 800153e:	d057      	beq.n	80015f0 <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001540:	6802      	ldr	r2, [r0, #0]
 8001542:	6893      	ldr	r3, [r2, #8]
 8001544:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001548:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800154a:	6802      	ldr	r2, [r0, #0]
 800154c:	6893      	ldr	r3, [r2, #8]
 800154e:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8001550:	430b      	orrs	r3, r1
 8001552:	6093      	str	r3, [r2, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001554:	6802      	ldr	r2, [r0, #0]
 8001556:	6893      	ldr	r3, [r2, #8]
 8001558:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800155c:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800155e:	6802      	ldr	r2, [r0, #0]
 8001560:	6893      	ldr	r3, [r2, #8]
 8001562:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8001564:	430b      	orrs	r3, r1
 8001566:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001568:	6802      	ldr	r2, [r0, #0]
 800156a:	6893      	ldr	r3, [r2, #8]
 800156c:	f023 0302 	bic.w	r3, r3, #2
 8001570:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001572:	6802      	ldr	r2, [r0, #0]
 8001574:	6893      	ldr	r3, [r2, #8]
 8001576:	7e01      	ldrb	r1, [r0, #24]
 8001578:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800157c:	6093      	str	r3, [r2, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800157e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d03f      	beq.n	8001606 <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001586:	6802      	ldr	r2, [r0, #0]
 8001588:	6853      	ldr	r3, [r2, #4]
 800158a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800158e:	6053      	str	r3, [r2, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001590:	6802      	ldr	r2, [r0, #0]
 8001592:	6853      	ldr	r3, [r2, #4]
 8001594:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001598:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800159a:	6801      	ldr	r1, [r0, #0]
 800159c:	684b      	ldr	r3, [r1, #4]
 800159e:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 80015a0:	3a01      	subs	r2, #1
 80015a2:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80015a6:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015a8:	6802      	ldr	r2, [r0, #0]
 80015aa:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80015ac:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80015b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015b2:	6801      	ldr	r1, [r0, #0]
 80015b4:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 80015b6:	69c2      	ldr	r2, [r0, #28]
 80015b8:	3a01      	subs	r2, #1
 80015ba:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80015be:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015c0:	6802      	ldr	r2, [r0, #0]
 80015c2:	6893      	ldr	r3, [r2, #8]
 80015c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80015c8:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015ca:	6802      	ldr	r2, [r0, #0]
 80015cc:	6893      	ldr	r3, [r2, #8]
 80015ce:	f890 1030 	ldrb.w	r1, [r0, #48]	@ 0x30
 80015d2:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 80015d6:	6093      	str	r3, [r2, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015d8:	6802      	ldr	r2, [r0, #0]
 80015da:	6893      	ldr	r3, [r2, #8]
 80015dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80015e0:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015e2:	6802      	ldr	r2, [r0, #0]
 80015e4:	6893      	ldr	r3, [r2, #8]
 80015e6:	6941      	ldr	r1, [r0, #20]
 80015e8:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80015ec:	6093      	str	r3, [r2, #8]
}
 80015ee:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015f0:	6802      	ldr	r2, [r0, #0]
 80015f2:	6893      	ldr	r3, [r2, #8]
 80015f4:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80015f8:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015fa:	6802      	ldr	r2, [r0, #0]
 80015fc:	6893      	ldr	r3, [r2, #8]
 80015fe:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8001602:	6093      	str	r3, [r2, #8]
 8001604:	e7b0      	b.n	8001568 <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001606:	6802      	ldr	r2, [r0, #0]
 8001608:	6853      	ldr	r3, [r2, #4]
 800160a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800160e:	6053      	str	r3, [r2, #4]
 8001610:	e7ca      	b.n	80015a8 <ADC_Init+0xc0>
 8001612:	bf00      	nop
 8001614:	40012300 	.word	0x40012300
 8001618:	0f000001 	.word	0x0f000001

0800161c <HAL_ADC_Init>:
  if (hadc == NULL)
 800161c:	b338      	cbz	r0, 800166e <HAL_ADC_Init+0x52>
{
 800161e:	b510      	push	{r4, lr}
 8001620:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001622:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001624:	b143      	cbz	r3, 8001638 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001626:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001628:	f013 0f10 	tst.w	r3, #16
 800162c:	d00b      	beq.n	8001646 <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 800162e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001630:	2300      	movs	r3, #0
 8001632:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001636:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8001638:	f7ff fc18 	bl	8000e6c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800163c:	2300      	movs	r3, #0
 800163e:	6463      	str	r3, [r4, #68]	@ 0x44
    hadc->Lock = HAL_UNLOCKED;
 8001640:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 8001644:	e7ef      	b.n	8001626 <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8001646:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001648:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800164c:	f023 0302 	bic.w	r3, r3, #2
 8001650:	f043 0302 	orr.w	r3, r3, #2
 8001654:	6423      	str	r3, [r4, #64]	@ 0x40
    ADC_Init(hadc);
 8001656:	4620      	mov	r0, r4
 8001658:	f7ff ff46 	bl	80014e8 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 800165c:	2000      	movs	r0, #0
 800165e:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001660:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001662:	f023 0303 	bic.w	r3, r3, #3
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	6423      	str	r3, [r4, #64]	@ 0x40
 800166c:	e7e0      	b.n	8001630 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 800166e:	2001      	movs	r0, #1
}
 8001670:	4770      	bx	lr
	...

08001674 <HAL_ADC_Start_DMA>:
{
 8001674:	b510      	push	{r4, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 800167a:	2200      	movs	r2, #0
 800167c:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800167e:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8001682:	2a01      	cmp	r2, #1
 8001684:	f000 80ae 	beq.w	80017e4 <HAL_ADC_Start_DMA+0x170>
 8001688:	4604      	mov	r4, r0
 800168a:	2201      	movs	r2, #1
 800168c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001690:	6802      	ldr	r2, [r0, #0]
 8001692:	6890      	ldr	r0, [r2, #8]
 8001694:	f010 0f01 	tst.w	r0, #1
 8001698:	d113      	bne.n	80016c2 <HAL_ADC_Start_DMA+0x4e>
    __HAL_ADC_ENABLE(hadc);
 800169a:	6890      	ldr	r0, [r2, #8]
 800169c:	f040 0001 	orr.w	r0, r0, #1
 80016a0:	6090      	str	r0, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80016a2:	4a53      	ldr	r2, [pc, #332]	@ (80017f0 <HAL_ADC_Start_DMA+0x17c>)
 80016a4:	6810      	ldr	r0, [r2, #0]
 80016a6:	4a53      	ldr	r2, [pc, #332]	@ (80017f4 <HAL_ADC_Start_DMA+0x180>)
 80016a8:	fba2 2000 	umull	r2, r0, r2, r0
 80016ac:	0c80      	lsrs	r0, r0, #18
 80016ae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80016b2:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 80016b4:	e002      	b.n	80016bc <HAL_ADC_Start_DMA+0x48>
      counter--;
 80016b6:	9801      	ldr	r0, [sp, #4]
 80016b8:	3801      	subs	r0, #1
 80016ba:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 80016bc:	9801      	ldr	r0, [sp, #4]
 80016be:	2800      	cmp	r0, #0
 80016c0:	d1f9      	bne.n	80016b6 <HAL_ADC_Start_DMA+0x42>
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80016c2:	6822      	ldr	r2, [r4, #0]
 80016c4:	6890      	ldr	r0, [r2, #8]
 80016c6:	f410 7f80 	tst.w	r0, #256	@ 0x100
 80016ca:	d003      	beq.n	80016d4 <HAL_ADC_Start_DMA+0x60>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80016cc:	6890      	ldr	r0, [r2, #8]
 80016ce:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 80016d2:	6090      	str	r0, [r2, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80016d4:	6822      	ldr	r2, [r4, #0]
 80016d6:	6890      	ldr	r0, [r2, #8]
 80016d8:	f010 0f01 	tst.w	r0, #1
 80016dc:	d077      	beq.n	80017ce <HAL_ADC_Start_DMA+0x15a>
    ADC_STATE_CLR_SET(hadc->State,
 80016de:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80016e0:	f420 60e0 	bic.w	r0, r0, #1792	@ 0x700
 80016e4:	f020 0001 	bic.w	r0, r0, #1
 80016e8:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 80016ec:	6420      	str	r0, [r4, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016ee:	6852      	ldr	r2, [r2, #4]
 80016f0:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80016f4:	d005      	beq.n	8001702 <HAL_ADC_Start_DMA+0x8e>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016f6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80016f8:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80016fc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001700:	6422      	str	r2, [r4, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001702:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001704:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 8001708:	d036      	beq.n	8001778 <HAL_ADC_Start_DMA+0x104>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800170a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800170c:	f022 0206 	bic.w	r2, r2, #6
 8001710:	6462      	str	r2, [r4, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 8001712:	2200      	movs	r2, #0
 8001714:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001718:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800171a:	4837      	ldr	r0, [pc, #220]	@ (80017f8 <HAL_ADC_Start_DMA+0x184>)
 800171c:	63d0      	str	r0, [r2, #60]	@ 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800171e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001720:	4836      	ldr	r0, [pc, #216]	@ (80017fc <HAL_ADC_Start_DMA+0x188>)
 8001722:	6410      	str	r0, [r2, #64]	@ 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001724:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001726:	4836      	ldr	r0, [pc, #216]	@ (8001800 <HAL_ADC_Start_DMA+0x18c>)
 8001728:	64d0      	str	r0, [r2, #76]	@ 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800172a:	6822      	ldr	r2, [r4, #0]
 800172c:	f06f 0022 	mvn.w	r0, #34	@ 0x22
 8001730:	6010      	str	r0, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001732:	6820      	ldr	r0, [r4, #0]
 8001734:	6842      	ldr	r2, [r0, #4]
 8001736:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800173a:	6042      	str	r2, [r0, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800173c:	6820      	ldr	r0, [r4, #0]
 800173e:	6882      	ldr	r2, [r0, #8]
 8001740:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001744:	6082      	str	r2, [r0, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001746:	6820      	ldr	r0, [r4, #0]
 8001748:	460a      	mov	r2, r1
 800174a:	f100 014c 	add.w	r1, r0, #76	@ 0x4c
 800174e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001750:	f000 fade 	bl	8001d10 <HAL_DMA_Start_IT>
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001754:	4b2b      	ldr	r3, [pc, #172]	@ (8001804 <HAL_ADC_Start_DMA+0x190>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f013 0f1f 	tst.w	r3, #31
 800175c:	d127      	bne.n	80017ae <HAL_ADC_Start_DMA+0x13a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800175e:	6823      	ldr	r3, [r4, #0]
 8001760:	4a29      	ldr	r2, [pc, #164]	@ (8001808 <HAL_ADC_Start_DMA+0x194>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d011      	beq.n	800178a <HAL_ADC_Start_DMA+0x116>
 8001766:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 800176a:	4293      	cmp	r3, r2
 800176c:	d007      	beq.n	800177e <HAL_ADC_Start_DMA+0x10a>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800176e:	4a27      	ldr	r2, [pc, #156]	@ (800180c <HAL_ADC_Start_DMA+0x198>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d014      	beq.n	800179e <HAL_ADC_Start_DMA+0x12a>
  return HAL_OK;
 8001774:	2000      	movs	r0, #0
 8001776:	e033      	b.n	80017e0 <HAL_ADC_Start_DMA+0x16c>
      ADC_CLEAR_ERRORCODE(hadc);
 8001778:	2200      	movs	r2, #0
 800177a:	6462      	str	r2, [r4, #68]	@ 0x44
 800177c:	e7c9      	b.n	8001712 <HAL_ADC_Start_DMA+0x9e>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800177e:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 8001782:	6852      	ldr	r2, [r2, #4]
 8001784:	f012 0f1f 	tst.w	r2, #31
 8001788:	d1f1      	bne.n	800176e <HAL_ADC_Start_DMA+0xfa>
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001790:	d12a      	bne.n	80017e8 <HAL_ADC_Start_DMA+0x174>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001798:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800179a:	2000      	movs	r0, #0
 800179c:	e020      	b.n	80017e0 <HAL_ADC_Start_DMA+0x16c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800179e:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 80017a2:	6852      	ldr	r2, [r2, #4]
 80017a4:	f012 0f10 	tst.w	r2, #16
 80017a8:	d0ef      	beq.n	800178a <HAL_ADC_Start_DMA+0x116>
  return HAL_OK;
 80017aa:	2000      	movs	r0, #0
 80017ac:	e018      	b.n	80017e0 <HAL_ADC_Start_DMA+0x16c>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80017ae:	6823      	ldr	r3, [r4, #0]
 80017b0:	4a15      	ldr	r2, [pc, #84]	@ (8001808 <HAL_ADC_Start_DMA+0x194>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d001      	beq.n	80017ba <HAL_ADC_Start_DMA+0x146>
  return HAL_OK;
 80017b6:	2000      	movs	r0, #0
 80017b8:	e012      	b.n	80017e0 <HAL_ADC_Start_DMA+0x16c>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 80017c0:	d114      	bne.n	80017ec <HAL_ADC_Start_DMA+0x178>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80017c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80017ca:	2000      	movs	r0, #0
 80017cc:	e008      	b.n	80017e0 <HAL_ADC_Start_DMA+0x16c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80017d0:	f043 0310 	orr.w	r3, r3, #16
 80017d4:	6423      	str	r3, [r4, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017d6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6463      	str	r3, [r4, #68]	@ 0x44
  return HAL_OK;
 80017de:	2000      	movs	r0, #0
}
 80017e0:	b002      	add	sp, #8
 80017e2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80017e4:	2002      	movs	r0, #2
 80017e6:	e7fb      	b.n	80017e0 <HAL_ADC_Start_DMA+0x16c>
  return HAL_OK;
 80017e8:	2000      	movs	r0, #0
 80017ea:	e7f9      	b.n	80017e0 <HAL_ADC_Start_DMA+0x16c>
 80017ec:	2000      	movs	r0, #0
 80017ee:	e7f7      	b.n	80017e0 <HAL_ADC_Start_DMA+0x16c>
 80017f0:	20000000 	.word	0x20000000
 80017f4:	431bde83 	.word	0x431bde83
 80017f8:	08001837 	.word	0x08001837
 80017fc:	08001815 	.word	0x08001815
 8001800:	08001821 	.word	0x08001821
 8001804:	40012300 	.word	0x40012300
 8001808:	40012000 	.word	0x40012000
 800180c:	40012200 	.word	0x40012200

08001810 <HAL_ADC_ConvCpltCallback>:
}
 8001810:	4770      	bx	lr

08001812 <HAL_ADC_ConvHalfCpltCallback>:
}
 8001812:	4770      	bx	lr

08001814 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001814:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001816:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8001818:	f7ff fffb 	bl	8001812 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800181c:	bd08      	pop	{r3, pc}

0800181e <HAL_ADC_ErrorCallback>:
}
 800181e:	4770      	bx	lr

08001820 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001820:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001822:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001824:	2340      	movs	r3, #64	@ 0x40
 8001826:	6403      	str	r3, [r0, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001828:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800182a:	f043 0304 	orr.w	r3, r3, #4
 800182e:	6443      	str	r3, [r0, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001830:	f7ff fff5 	bl	800181e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001834:	bd08      	pop	{r3, pc}

08001836 <ADC_DMAConvCplt>:
{
 8001836:	b508      	push	{r3, lr}
 8001838:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800183a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800183c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800183e:	f012 0f50 	tst.w	r2, #80	@ 0x50
 8001842:	d125      	bne.n	8001890 <ADC_DMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001844:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001846:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800184a:	6403      	str	r3, [r0, #64]	@ 0x40
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800184c:	6803      	ldr	r3, [r0, #0]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8001854:	d119      	bne.n	800188a <ADC_DMAConvCplt+0x54>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001856:	7e02      	ldrb	r2, [r0, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001858:	b9ba      	cbnz	r2, 800188a <ADC_DMAConvCplt+0x54>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800185a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800185c:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 8001860:	d003      	beq.n	800186a <ADC_DMAConvCplt+0x34>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001862:	689a      	ldr	r2, [r3, #8]
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001864:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8001868:	d10f      	bne.n	800188a <ADC_DMAConvCplt+0x54>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	f022 0220 	bic.w	r2, r2, #32
 8001870:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001872:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001874:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001878:	6403      	str	r3, [r0, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800187a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800187c:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8001880:	d103      	bne.n	800188a <ADC_DMAConvCplt+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001882:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6403      	str	r3, [r0, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800188a:	f7ff ffc1 	bl	8001810 <HAL_ADC_ConvCpltCallback>
}
 800188e:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001890:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001892:	f012 0f10 	tst.w	r2, #16
 8001896:	d104      	bne.n	80018a2 <ADC_DMAConvCplt+0x6c>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001898:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 800189a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800189c:	4618      	mov	r0, r3
 800189e:	4790      	blx	r2
}
 80018a0:	e7f5      	b.n	800188e <ADC_DMAConvCplt+0x58>
      HAL_ADC_ErrorCallback(hadc);
 80018a2:	f7ff ffbc 	bl	800181e <HAL_ADC_ErrorCallback>
 80018a6:	e7f2      	b.n	800188e <ADC_DMAConvCplt+0x58>

080018a8 <HAL_ADC_ConfigChannel>:
{
 80018a8:	b430      	push	{r4, r5}
 80018aa:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80018ac:	2200      	movs	r2, #0
 80018ae:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80018b0:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80018b4:	2a01      	cmp	r2, #1
 80018b6:	f000 80c0 	beq.w	8001a3a <HAL_ADC_ConfigChannel+0x192>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2201      	movs	r2, #1
 80018be:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018c2:	680a      	ldr	r2, [r1, #0]
 80018c4:	2a09      	cmp	r2, #9
 80018c6:	d940      	bls.n	800194a <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018c8:	6804      	ldr	r4, [r0, #0]
 80018ca:	68e0      	ldr	r0, [r4, #12]
 80018cc:	b292      	uxth	r2, r2
 80018ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80018d2:	3a1e      	subs	r2, #30
 80018d4:	f04f 0c07 	mov.w	ip, #7
 80018d8:	fa0c f202 	lsl.w	r2, ip, r2
 80018dc:	ea20 0202 	bic.w	r2, r0, r2
 80018e0:	60e2      	str	r2, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018e2:	681c      	ldr	r4, [r3, #0]
 80018e4:	68e0      	ldr	r0, [r4, #12]
 80018e6:	880a      	ldrh	r2, [r1, #0]
 80018e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80018ec:	3a1e      	subs	r2, #30
 80018ee:	688d      	ldr	r5, [r1, #8]
 80018f0:	fa05 f202 	lsl.w	r2, r5, r2
 80018f4:	4302      	orrs	r2, r0
 80018f6:	60e2      	str	r2, [r4, #12]
  if (sConfig->Rank < 7U)
 80018f8:	684a      	ldr	r2, [r1, #4]
 80018fa:	2a06      	cmp	r2, #6
 80018fc:	d83c      	bhi.n	8001978 <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018fe:	681c      	ldr	r4, [r3, #0]
 8001900:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8001902:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001906:	3a05      	subs	r2, #5
 8001908:	f04f 0c1f 	mov.w	ip, #31
 800190c:	fa0c f202 	lsl.w	r2, ip, r2
 8001910:	ea20 0202 	bic.w	r2, r0, r2
 8001914:	6362      	str	r2, [r4, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001916:	681c      	ldr	r4, [r3, #0]
 8001918:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800191a:	684a      	ldr	r2, [r1, #4]
 800191c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001920:	3a05      	subs	r2, #5
 8001922:	f8b1 c000 	ldrh.w	ip, [r1]
 8001926:	fa0c f202 	lsl.w	r2, ip, r2
 800192a:	4302      	orrs	r2, r0
 800192c:	6362      	str	r2, [r4, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800192e:	6818      	ldr	r0, [r3, #0]
 8001930:	4a43      	ldr	r2, [pc, #268]	@ (8001a40 <HAL_ADC_ConfigChannel+0x198>)
 8001932:	4290      	cmp	r0, r2
 8001934:	d050      	beq.n	80019d8 <HAL_ADC_ConfigChannel+0x130>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001936:	6818      	ldr	r0, [r3, #0]
 8001938:	4a41      	ldr	r2, [pc, #260]	@ (8001a40 <HAL_ADC_ConfigChannel+0x198>)
 800193a:	4290      	cmp	r0, r2
 800193c:	d059      	beq.n	80019f2 <HAL_ADC_ConfigChannel+0x14a>
  __HAL_UNLOCK(hadc);
 800193e:	2000      	movs	r0, #0
 8001940:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 8001944:	b002      	add	sp, #8
 8001946:	bc30      	pop	{r4, r5}
 8001948:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800194a:	6804      	ldr	r4, [r0, #0]
 800194c:	6920      	ldr	r0, [r4, #16]
 800194e:	b292      	uxth	r2, r2
 8001950:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001954:	f04f 0c07 	mov.w	ip, #7
 8001958:	fa0c f202 	lsl.w	r2, ip, r2
 800195c:	ea20 0202 	bic.w	r2, r0, r2
 8001960:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001962:	681c      	ldr	r4, [r3, #0]
 8001964:	6920      	ldr	r0, [r4, #16]
 8001966:	880a      	ldrh	r2, [r1, #0]
 8001968:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800196c:	688d      	ldr	r5, [r1, #8]
 800196e:	fa05 f202 	lsl.w	r2, r5, r2
 8001972:	4302      	orrs	r2, r0
 8001974:	6122      	str	r2, [r4, #16]
 8001976:	e7bf      	b.n	80018f8 <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 8001978:	2a0c      	cmp	r2, #12
 800197a:	d816      	bhi.n	80019aa <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800197c:	681d      	ldr	r5, [r3, #0]
 800197e:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8001980:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001984:	3a23      	subs	r2, #35	@ 0x23
 8001986:	241f      	movs	r4, #31
 8001988:	fa04 f202 	lsl.w	r2, r4, r2
 800198c:	ea20 0202 	bic.w	r2, r0, r2
 8001990:	632a      	str	r2, [r5, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001992:	681d      	ldr	r5, [r3, #0]
 8001994:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8001996:	684a      	ldr	r2, [r1, #4]
 8001998:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800199c:	3a23      	subs	r2, #35	@ 0x23
 800199e:	880c      	ldrh	r4, [r1, #0]
 80019a0:	fa04 f202 	lsl.w	r2, r4, r2
 80019a4:	4302      	orrs	r2, r0
 80019a6:	632a      	str	r2, [r5, #48]	@ 0x30
 80019a8:	e7c1      	b.n	800192e <HAL_ADC_ConfigChannel+0x86>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019aa:	681d      	ldr	r5, [r3, #0]
 80019ac:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80019ae:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80019b2:	3a41      	subs	r2, #65	@ 0x41
 80019b4:	241f      	movs	r4, #31
 80019b6:	fa04 f202 	lsl.w	r2, r4, r2
 80019ba:	ea20 0202 	bic.w	r2, r0, r2
 80019be:	62ea      	str	r2, [r5, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019c0:	681d      	ldr	r5, [r3, #0]
 80019c2:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80019c4:	684a      	ldr	r2, [r1, #4]
 80019c6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80019ca:	3a41      	subs	r2, #65	@ 0x41
 80019cc:	880c      	ldrh	r4, [r1, #0]
 80019ce:	fa04 f202 	lsl.w	r2, r4, r2
 80019d2:	4302      	orrs	r2, r0
 80019d4:	62ea      	str	r2, [r5, #44]	@ 0x2c
 80019d6:	e7aa      	b.n	800192e <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019d8:	680a      	ldr	r2, [r1, #0]
 80019da:	2a12      	cmp	r2, #18
 80019dc:	d1ab      	bne.n	8001936 <HAL_ADC_ConfigChannel+0x8e>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80019de:	4a19      	ldr	r2, [pc, #100]	@ (8001a44 <HAL_ADC_ConfigChannel+0x19c>)
 80019e0:	6850      	ldr	r0, [r2, #4]
 80019e2:	f420 0000 	bic.w	r0, r0, #8388608	@ 0x800000
 80019e6:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019e8:	6850      	ldr	r0, [r2, #4]
 80019ea:	f440 0080 	orr.w	r0, r0, #4194304	@ 0x400000
 80019ee:	6050      	str	r0, [r2, #4]
 80019f0:	e7a1      	b.n	8001936 <HAL_ADC_ConfigChannel+0x8e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019f2:	680a      	ldr	r2, [r1, #0]
 80019f4:	4814      	ldr	r0, [pc, #80]	@ (8001a48 <HAL_ADC_ConfigChannel+0x1a0>)
 80019f6:	4282      	cmp	r2, r0
 80019f8:	d001      	beq.n	80019fe <HAL_ADC_ConfigChannel+0x156>
 80019fa:	2a11      	cmp	r2, #17
 80019fc:	d19f      	bne.n	800193e <HAL_ADC_ConfigChannel+0x96>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80019fe:	4a11      	ldr	r2, [pc, #68]	@ (8001a44 <HAL_ADC_ConfigChannel+0x19c>)
 8001a00:	6850      	ldr	r0, [r2, #4]
 8001a02:	f420 0080 	bic.w	r0, r0, #4194304	@ 0x400000
 8001a06:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a08:	6850      	ldr	r0, [r2, #4]
 8001a0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001a0e:	6050      	str	r0, [r2, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a10:	6809      	ldr	r1, [r1, #0]
 8001a12:	4a0d      	ldr	r2, [pc, #52]	@ (8001a48 <HAL_ADC_ConfigChannel+0x1a0>)
 8001a14:	4291      	cmp	r1, r2
 8001a16:	d192      	bne.n	800193e <HAL_ADC_ConfigChannel+0x96>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a18:	4a0c      	ldr	r2, [pc, #48]	@ (8001a4c <HAL_ADC_ConfigChannel+0x1a4>)
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	490c      	ldr	r1, [pc, #48]	@ (8001a50 <HAL_ADC_ConfigChannel+0x1a8>)
 8001a1e:	fba1 1202 	umull	r1, r2, r1, r2
 8001a22:	0c92      	lsrs	r2, r2, #18
 8001a24:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001a28:	0052      	lsls	r2, r2, #1
 8001a2a:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 8001a2c:	9a01      	ldr	r2, [sp, #4]
 8001a2e:	2a00      	cmp	r2, #0
 8001a30:	d085      	beq.n	800193e <HAL_ADC_ConfigChannel+0x96>
        counter--;
 8001a32:	9a01      	ldr	r2, [sp, #4]
 8001a34:	3a01      	subs	r2, #1
 8001a36:	9201      	str	r2, [sp, #4]
 8001a38:	e7f8      	b.n	8001a2c <HAL_ADC_ConfigChannel+0x184>
  __HAL_LOCK(hadc);
 8001a3a:	2002      	movs	r0, #2
 8001a3c:	e782      	b.n	8001944 <HAL_ADC_ConfigChannel+0x9c>
 8001a3e:	bf00      	nop
 8001a40:	40012000 	.word	0x40012000
 8001a44:	40012300 	.word	0x40012300
 8001a48:	10000012 	.word	0x10000012
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	431bde83 	.word	0x431bde83

08001a54 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8001a54:	2800      	cmp	r0, #0
 8001a56:	db07      	blt.n	8001a68 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a58:	f000 021f 	and.w	r2, r0, #31
 8001a5c:	0940      	lsrs	r0, r0, #5
 8001a5e:	2301      	movs	r3, #1
 8001a60:	4093      	lsls	r3, r2
 8001a62:	4a02      	ldr	r2, [pc, #8]	@ (8001a6c <__NVIC_EnableIRQ+0x18>)
 8001a64:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000e100 	.word	0xe000e100

08001a70 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001a70:	2800      	cmp	r0, #0
 8001a72:	db08      	blt.n	8001a86 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a74:	0109      	lsls	r1, r1, #4
 8001a76:	b2c9      	uxtb	r1, r1
 8001a78:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001a7c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001a80:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001a84:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a86:	f000 000f 	and.w	r0, r0, #15
 8001a8a:	0109      	lsls	r1, r1, #4
 8001a8c:	b2c9      	uxtb	r1, r1
 8001a8e:	4b01      	ldr	r3, [pc, #4]	@ (8001a94 <__NVIC_SetPriority+0x24>)
 8001a90:	5419      	strb	r1, [r3, r0]
  }
}
 8001a92:	4770      	bx	lr
 8001a94:	e000ed14 	.word	0xe000ed14

08001a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a98:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a9a:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a9e:	f1c0 0c07 	rsb	ip, r0, #7
 8001aa2:	f1bc 0f04 	cmp.w	ip, #4
 8001aa6:	bf28      	it	cs
 8001aa8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aac:	1d03      	adds	r3, r0, #4
 8001aae:	2b06      	cmp	r3, #6
 8001ab0:	d90f      	bls.n	8001ad2 <NVIC_EncodePriority+0x3a>
 8001ab2:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab4:	f04f 3eff 	mov.w	lr, #4294967295
 8001ab8:	fa0e f00c 	lsl.w	r0, lr, ip
 8001abc:	ea21 0100 	bic.w	r1, r1, r0
 8001ac0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac2:	fa0e fe03 	lsl.w	lr, lr, r3
 8001ac6:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8001aca:	ea41 0002 	orr.w	r0, r1, r2
 8001ace:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	e7ee      	b.n	8001ab4 <NVIC_EncodePriority+0x1c>
	...

08001ad8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad8:	4a07      	ldr	r2, [pc, #28]	@ (8001af8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001ada:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001adc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001ae0:	041b      	lsls	r3, r3, #16
 8001ae2:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ae4:	0200      	lsls	r0, r0, #8
 8001ae6:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aea:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001aec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001af0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001af4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001af6:	4770      	bx	lr
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001afc:	b510      	push	{r4, lr}
 8001afe:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b00:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <HAL_NVIC_SetPriority+0x1c>)
 8001b02:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b04:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001b08:	f7ff ffc6 	bl	8001a98 <NVIC_EncodePriority>
 8001b0c:	4601      	mov	r1, r0
 8001b0e:	4620      	mov	r0, r4
 8001b10:	f7ff ffae 	bl	8001a70 <__NVIC_SetPriority>
}
 8001b14:	bd10      	pop	{r4, pc}
 8001b16:	bf00      	nop
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b1c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b1e:	f7ff ff99 	bl	8001a54 <__NVIC_EnableIRQ>
}
 8001b22:	bd08      	pop	{r3, pc}

08001b24 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001b24:	b158      	cbz	r0, 8001b3e <HAL_CRC_Init+0x1a>
{
 8001b26:	b510      	push	{r4, lr}
 8001b28:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001b2a:	7943      	ldrb	r3, [r0, #5]
 8001b2c:	b11b      	cbz	r3, 8001b36 <HAL_CRC_Init+0x12>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8001b32:	2000      	movs	r0, #0
}
 8001b34:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8001b36:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8001b38:	f7ff f9ee 	bl	8000f18 <HAL_CRC_MspInit>
 8001b3c:	e7f7      	b.n	8001b2e <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 8001b3e:	2001      	movs	r0, #1
}
 8001b40:	4770      	bx	lr

08001b42 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b42:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b44:	6805      	ldr	r5, [r0, #0]
 8001b46:	682c      	ldr	r4, [r5, #0]
 8001b48:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 8001b4c:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b4e:	6804      	ldr	r4, [r0, #0]
 8001b50:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b52:	6883      	ldr	r3, [r0, #8]
 8001b54:	2b40      	cmp	r3, #64	@ 0x40
 8001b56:	d005      	beq.n	8001b64 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8001b58:	6803      	ldr	r3, [r0, #0]
 8001b5a:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8001b5c:	6803      	ldr	r3, [r0, #0]
 8001b5e:	60da      	str	r2, [r3, #12]
  }
}
 8001b60:	bc30      	pop	{r4, r5}
 8001b62:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8001b64:	6803      	ldr	r3, [r0, #0]
 8001b66:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8001b68:	6803      	ldr	r3, [r0, #0]
 8001b6a:	60d9      	str	r1, [r3, #12]
 8001b6c:	e7f8      	b.n	8001b60 <DMA_SetConfig+0x1e>
	...

08001b70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b70:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b72:	6803      	ldr	r3, [r0, #0]
 8001b74:	b2d9      	uxtb	r1, r3
 8001b76:	3910      	subs	r1, #16
 8001b78:	4a0c      	ldr	r2, [pc, #48]	@ (8001bac <DMA_CalcBaseAndBitshift+0x3c>)
 8001b7a:	fba2 4201 	umull	r4, r2, r2, r1
 8001b7e:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b80:	4c0b      	ldr	r4, [pc, #44]	@ (8001bb0 <DMA_CalcBaseAndBitshift+0x40>)
 8001b82:	5ca2      	ldrb	r2, [r4, r2]
 8001b84:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001b86:	295f      	cmp	r1, #95	@ 0x5f
 8001b88:	d909      	bls.n	8001b9e <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b8a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001b8e:	f023 0303 	bic.w	r3, r3, #3
 8001b92:	3304      	adds	r3, #4
 8001b94:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001b96:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 8001b98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b9c:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b9e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001ba2:	f023 0303 	bic.w	r3, r3, #3
 8001ba6:	6583      	str	r3, [r0, #88]	@ 0x58
 8001ba8:	e7f5      	b.n	8001b96 <DMA_CalcBaseAndBitshift+0x26>
 8001baa:	bf00      	nop
 8001bac:	aaaaaaab 	.word	0xaaaaaaab
 8001bb0:	08003f24 	.word	0x08003f24

08001bb4 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001bb4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001bb6:	6982      	ldr	r2, [r0, #24]
 8001bb8:	b992      	cbnz	r2, 8001be0 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d00a      	beq.n	8001bd4 <DMA_CheckFifoParam+0x20>
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d002      	beq.n	8001bc8 <DMA_CheckFifoParam+0x14>
 8001bc2:	b10b      	cbz	r3, 8001bc8 <DMA_CheckFifoParam+0x14>
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bc8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001bca:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001bce:	d128      	bne.n	8001c22 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bd4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001bd6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001bda:	d024      	beq.n	8001c26 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8001bdc:	2000      	movs	r0, #0
 8001bde:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001be0:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8001be4:	d009      	beq.n	8001bfa <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d925      	bls.n	8001c36 <DMA_CheckFifoParam+0x82>
 8001bea:	2b03      	cmp	r3, #3
 8001bec:	d125      	bne.n	8001c3a <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bee:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001bf0:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001bf4:	d123      	bne.n	8001c3e <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	4770      	bx	lr
    switch (tmp)
 8001bfa:	2b03      	cmp	r3, #3
 8001bfc:	d803      	bhi.n	8001c06 <DMA_CheckFifoParam+0x52>
 8001bfe:	e8df f003 	tbb	[pc, r3]
 8001c02:	0414      	.short	0x0414
 8001c04:	0a14      	.short	0x0a14
 8001c06:	2000      	movs	r0, #0
 8001c08:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c0a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001c0c:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8001c10:	d10d      	bne.n	8001c2e <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001c12:	2000      	movs	r0, #0
 8001c14:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c16:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001c18:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001c1c:	d009      	beq.n	8001c32 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8001c1e:	2000      	movs	r0, #0
 8001c20:	4770      	bx	lr
        status = HAL_ERROR;
 8001c22:	2001      	movs	r0, #1
 8001c24:	4770      	bx	lr
        status = HAL_ERROR;
 8001c26:	2001      	movs	r0, #1
 8001c28:	4770      	bx	lr
      status = HAL_ERROR;
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	4770      	bx	lr
        status = HAL_ERROR;
 8001c2e:	2001      	movs	r0, #1
 8001c30:	4770      	bx	lr
        status = HAL_ERROR;
 8001c32:	2001      	movs	r0, #1
 8001c34:	4770      	bx	lr
      status = HAL_ERROR;
 8001c36:	2001      	movs	r0, #1
 8001c38:	4770      	bx	lr
    switch (tmp)
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	4770      	bx	lr
      {
        status = HAL_ERROR;
 8001c3e:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8001c40:	4770      	bx	lr
	...

08001c44 <HAL_DMA_Init>:
{
 8001c44:	b570      	push	{r4, r5, r6, lr}
 8001c46:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001c48:	f7ff fc48 	bl	80014dc <HAL_GetTick>
  if(hdma == NULL)
 8001c4c:	2c00      	cmp	r4, #0
 8001c4e:	d05b      	beq.n	8001d08 <HAL_DMA_Init+0xc4>
 8001c50:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c52:	2302      	movs	r3, #2
 8001c54:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8001c5e:	6822      	ldr	r2, [r4, #0]
 8001c60:	6813      	ldr	r3, [r2, #0]
 8001c62:	f023 0301 	bic.w	r3, r3, #1
 8001c66:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c68:	6823      	ldr	r3, [r4, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	f012 0f01 	tst.w	r2, #1
 8001c70:	d00a      	beq.n	8001c88 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c72:	f7ff fc33 	bl	80014dc <HAL_GetTick>
 8001c76:	1b43      	subs	r3, r0, r5
 8001c78:	2b05      	cmp	r3, #5
 8001c7a:	d9f5      	bls.n	8001c68 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c7c:	2320      	movs	r3, #32
 8001c7e:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c80:	2003      	movs	r0, #3
 8001c82:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8001c86:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8001c88:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c8a:	4920      	ldr	r1, [pc, #128]	@ (8001d0c <HAL_DMA_Init+0xc8>)
 8001c8c:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c8e:	6862      	ldr	r2, [r4, #4]
 8001c90:	68a0      	ldr	r0, [r4, #8]
 8001c92:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c94:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c96:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c98:	6920      	ldr	r0, [r4, #16]
 8001c9a:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c9c:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c9e:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ca0:	69a0      	ldr	r0, [r4, #24]
 8001ca2:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ca4:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ca6:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ca8:	6a20      	ldr	r0, [r4, #32]
 8001caa:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cac:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cae:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001cb0:	2904      	cmp	r1, #4
 8001cb2:	d01e      	beq.n	8001cf2 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8001cb4:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001cb6:	6826      	ldr	r6, [r4, #0]
 8001cb8:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cba:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8001cbe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001cc0:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d107      	bne.n	8001cd6 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8001cc6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001cc8:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cca:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001ccc:	b11b      	cbz	r3, 8001cd6 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cce:	4620      	mov	r0, r4
 8001cd0:	f7ff ff70 	bl	8001bb4 <DMA_CheckFifoParam>
 8001cd4:	b990      	cbnz	r0, 8001cfc <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8001cd6:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cd8:	4620      	mov	r0, r4
 8001cda:	f7ff ff49 	bl	8001b70 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cde:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001ce0:	233f      	movs	r3, #63	@ 0x3f
 8001ce2:	4093      	lsls	r3, r2
 8001ce4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001cea:	2301      	movs	r3, #1
 8001cec:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8001cf0:	e7c9      	b.n	8001c86 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cf2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001cf4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8001cf6:	4301      	orrs	r1, r0
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	e7db      	b.n	8001cb4 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cfc:	2340      	movs	r3, #64	@ 0x40
 8001cfe:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001d00:	2001      	movs	r0, #1
 8001d02:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 8001d06:	e7be      	b.n	8001c86 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8001d08:	2001      	movs	r0, #1
 8001d0a:	e7bc      	b.n	8001c86 <HAL_DMA_Init+0x42>
 8001d0c:	f010803f 	.word	0xf010803f

08001d10 <HAL_DMA_Start_IT>:
{
 8001d10:	b538      	push	{r3, r4, r5, lr}
 8001d12:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d14:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8001d16:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 8001d1a:	2801      	cmp	r0, #1
 8001d1c:	d02b      	beq.n	8001d76 <HAL_DMA_Start_IT+0x66>
 8001d1e:	2001      	movs	r0, #1
 8001d20:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d24:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8001d28:	b2c0      	uxtb	r0, r0
 8001d2a:	2801      	cmp	r0, #1
 8001d2c:	d004      	beq.n	8001d38 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 8001d34:	2002      	movs	r0, #2
}
 8001d36:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d38:	2002      	movs	r0, #2
 8001d3a:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d3e:	2000      	movs	r0, #0
 8001d40:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d42:	4620      	mov	r0, r4
 8001d44:	f7ff fefd 	bl	8001b42 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d48:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001d4a:	233f      	movs	r3, #63	@ 0x3f
 8001d4c:	4093      	lsls	r3, r2
 8001d4e:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d50:	6822      	ldr	r2, [r4, #0]
 8001d52:	6813      	ldr	r3, [r2, #0]
 8001d54:	f043 0316 	orr.w	r3, r3, #22
 8001d58:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001d5a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001d5c:	b123      	cbz	r3, 8001d68 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d5e:	6822      	ldr	r2, [r4, #0]
 8001d60:	6813      	ldr	r3, [r2, #0]
 8001d62:	f043 0308 	orr.w	r3, r3, #8
 8001d66:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001d68:	6822      	ldr	r2, [r4, #0]
 8001d6a:	6813      	ldr	r3, [r2, #0]
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d72:	2000      	movs	r0, #0
 8001d74:	e7df      	b.n	8001d36 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8001d76:	2002      	movs	r0, #2
 8001d78:	e7dd      	b.n	8001d36 <HAL_DMA_Start_IT+0x26>

08001d7a <HAL_DMA_Abort>:
{
 8001d7a:	b570      	push	{r4, r5, r6, lr}
 8001d7c:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d7e:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 8001d80:	f7ff fbac 	bl	80014dc <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d84:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d006      	beq.n	8001d9c <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d8e:	2380      	movs	r3, #128	@ 0x80
 8001d90:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8001d92:	2300      	movs	r3, #0
 8001d94:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8001d98:	2001      	movs	r0, #1
}
 8001d9a:	bd70      	pop	{r4, r5, r6, pc}
 8001d9c:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d9e:	6822      	ldr	r2, [r4, #0]
 8001da0:	6813      	ldr	r3, [r2, #0]
 8001da2:	f023 0316 	bic.w	r3, r3, #22
 8001da6:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001da8:	6822      	ldr	r2, [r4, #0]
 8001daa:	6953      	ldr	r3, [r2, #20]
 8001dac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001db0:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001db2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001db4:	b1e3      	cbz	r3, 8001df0 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001db6:	6822      	ldr	r2, [r4, #0]
 8001db8:	6813      	ldr	r3, [r2, #0]
 8001dba:	f023 0308 	bic.w	r3, r3, #8
 8001dbe:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001dc0:	6822      	ldr	r2, [r4, #0]
 8001dc2:	6813      	ldr	r3, [r2, #0]
 8001dc4:	f023 0301 	bic.w	r3, r3, #1
 8001dc8:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dca:	6823      	ldr	r3, [r4, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f013 0f01 	tst.w	r3, #1
 8001dd2:	d011      	beq.n	8001df8 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dd4:	f7ff fb82 	bl	80014dc <HAL_GetTick>
 8001dd8:	1b43      	subs	r3, r0, r5
 8001dda:	2b05      	cmp	r3, #5
 8001ddc:	d9f5      	bls.n	8001dca <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dde:	2320      	movs	r3, #32
 8001de0:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001de2:	2003      	movs	r0, #3
 8001de4:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8001de8:	2300      	movs	r3, #0
 8001dea:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        return HAL_TIMEOUT;
 8001dee:	e7d4      	b.n	8001d9a <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001df0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1df      	bne.n	8001db6 <HAL_DMA_Abort+0x3c>
 8001df6:	e7e3      	b.n	8001dc0 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001df8:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001dfa:	233f      	movs	r3, #63	@ 0x3f
 8001dfc:	4093      	lsls	r3, r2
 8001dfe:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8001e00:	2301      	movs	r3, #1
 8001e02:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8001e06:	2000      	movs	r0, #0
 8001e08:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  return HAL_OK;
 8001e0c:	e7c5      	b.n	8001d9a <HAL_DMA_Abort+0x20>

08001e0e <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e0e:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d003      	beq.n	8001e20 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e18:	2380      	movs	r3, #128	@ 0x80
 8001e1a:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8001e1c:	2001      	movs	r0, #1
 8001e1e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e20:	2305      	movs	r3, #5
 8001e22:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8001e26:	6802      	ldr	r2, [r0, #0]
 8001e28:	6813      	ldr	r3, [r2, #0]
 8001e2a:	f023 0301 	bic.w	r3, r3, #1
 8001e2e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001e30:	2000      	movs	r0, #0
}
 8001e32:	4770      	bx	lr

08001e34 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e34:	2300      	movs	r3, #0
 8001e36:	2b0f      	cmp	r3, #15
 8001e38:	f200 80f6 	bhi.w	8002028 <HAL_GPIO_Init+0x1f4>
{
 8001e3c:	b570      	push	{r4, r5, r6, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	e066      	b.n	8001f10 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e42:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e44:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001e48:	2403      	movs	r4, #3
 8001e4a:	fa04 f40e 	lsl.w	r4, r4, lr
 8001e4e:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e52:	68cc      	ldr	r4, [r1, #12]
 8001e54:	fa04 f40e 	lsl.w	r4, r4, lr
 8001e58:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8001e5a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e5c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e5e:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e62:	684a      	ldr	r2, [r1, #4]
 8001e64:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001e68:	409a      	lsls	r2, r3
 8001e6a:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8001e6c:	6042      	str	r2, [r0, #4]
 8001e6e:	e05d      	b.n	8001f2c <HAL_GPIO_Init+0xf8>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e70:	08dc      	lsrs	r4, r3, #3
 8001e72:	3408      	adds	r4, #8
 8001e74:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e78:	f003 0507 	and.w	r5, r3, #7
 8001e7c:	00ad      	lsls	r5, r5, #2
 8001e7e:	f04f 0e0f 	mov.w	lr, #15
 8001e82:	fa0e fe05 	lsl.w	lr, lr, r5
 8001e86:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e8a:	690a      	ldr	r2, [r1, #16]
 8001e8c:	40aa      	lsls	r2, r5
 8001e8e:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001e92:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8001e96:	e05d      	b.n	8001f54 <HAL_GPIO_Init+0x120>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e98:	2209      	movs	r2, #9
 8001e9a:	e000      	b.n	8001e9e <HAL_GPIO_Init+0x6a>
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	fa02 f20e 	lsl.w	r2, r2, lr
 8001ea2:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ea4:	3402      	adds	r4, #2
 8001ea6:	4d61      	ldr	r5, [pc, #388]	@ (800202c <HAL_GPIO_Init+0x1f8>)
 8001ea8:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eac:	4a60      	ldr	r2, [pc, #384]	@ (8002030 <HAL_GPIO_Init+0x1fc>)
 8001eae:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001eb0:	ea6f 020c 	mvn.w	r2, ip
 8001eb4:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eb8:	684e      	ldr	r6, [r1, #4]
 8001eba:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8001ebe:	d001      	beq.n	8001ec4 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8001ec0:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8001ec4:	4c5a      	ldr	r4, [pc, #360]	@ (8002030 <HAL_GPIO_Init+0x1fc>)
 8001ec6:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8001ec8:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001eca:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ece:	684e      	ldr	r6, [r1, #4]
 8001ed0:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8001ed4:	d001      	beq.n	8001eda <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8001ed6:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8001eda:	4c55      	ldr	r4, [pc, #340]	@ (8002030 <HAL_GPIO_Init+0x1fc>)
 8001edc:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8001ede:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001ee0:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ee4:	684e      	ldr	r6, [r1, #4]
 8001ee6:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8001eea:	d001      	beq.n	8001ef0 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8001eec:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001ef0:	4c4f      	ldr	r4, [pc, #316]	@ (8002030 <HAL_GPIO_Init+0x1fc>)
 8001ef2:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ef4:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001ef6:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ef8:	684d      	ldr	r5, [r1, #4]
 8001efa:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 8001efe:	d001      	beq.n	8001f04 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8001f00:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001f04:	4c4a      	ldr	r4, [pc, #296]	@ (8002030 <HAL_GPIO_Init+0x1fc>)
 8001f06:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f08:	3301      	adds	r3, #1
 8001f0a:	2b0f      	cmp	r3, #15
 8001f0c:	f200 808a 	bhi.w	8002024 <HAL_GPIO_Init+0x1f0>
    ioposition = 0x01U << position;
 8001f10:	2201      	movs	r2, #1
 8001f12:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f14:	680c      	ldr	r4, [r1, #0]
 8001f16:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001f1a:	ea32 0404 	bics.w	r4, r2, r4
 8001f1e:	d1f3      	bne.n	8001f08 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f20:	684c      	ldr	r4, [r1, #4]
 8001f22:	f004 0403 	and.w	r4, r4, #3
 8001f26:	3c01      	subs	r4, #1
 8001f28:	2c01      	cmp	r4, #1
 8001f2a:	d98a      	bls.n	8001e42 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f2c:	684a      	ldr	r2, [r1, #4]
 8001f2e:	f002 0203 	and.w	r2, r2, #3
 8001f32:	2a03      	cmp	r2, #3
 8001f34:	d009      	beq.n	8001f4a <HAL_GPIO_Init+0x116>
        temp = GPIOx->PUPDR;
 8001f36:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f38:	005d      	lsls	r5, r3, #1
 8001f3a:	2203      	movs	r2, #3
 8001f3c:	40aa      	lsls	r2, r5
 8001f3e:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f42:	688a      	ldr	r2, [r1, #8]
 8001f44:	40aa      	lsls	r2, r5
 8001f46:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001f48:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f4a:	684a      	ldr	r2, [r1, #4]
 8001f4c:	f002 0203 	and.w	r2, r2, #3
 8001f50:	2a02      	cmp	r2, #2
 8001f52:	d08d      	beq.n	8001e70 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8001f54:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f56:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	fa02 f20e 	lsl.w	r2, r2, lr
 8001f60:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f64:	684a      	ldr	r2, [r1, #4]
 8001f66:	f002 0203 	and.w	r2, r2, #3
 8001f6a:	fa02 f20e 	lsl.w	r2, r2, lr
 8001f6e:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8001f70:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f72:	684a      	ldr	r2, [r1, #4]
 8001f74:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8001f78:	d0c6      	beq.n	8001f08 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	9201      	str	r2, [sp, #4]
 8001f7e:	4a2d      	ldr	r2, [pc, #180]	@ (8002034 <HAL_GPIO_Init+0x200>)
 8001f80:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 8001f82:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8001f86:	6454      	str	r4, [r2, #68]	@ 0x44
 8001f88:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001f8a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001f8e:	9201      	str	r2, [sp, #4]
 8001f90:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001f92:	089c      	lsrs	r4, r3, #2
 8001f94:	1ca5      	adds	r5, r4, #2
 8001f96:	4a25      	ldr	r2, [pc, #148]	@ (800202c <HAL_GPIO_Init+0x1f8>)
 8001f98:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f9c:	f003 0e03 	and.w	lr, r3, #3
 8001fa0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001fa4:	220f      	movs	r2, #15
 8001fa6:	fa02 f20e 	lsl.w	r2, r2, lr
 8001faa:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fae:	4a22      	ldr	r2, [pc, #136]	@ (8002038 <HAL_GPIO_Init+0x204>)
 8001fb0:	4290      	cmp	r0, r2
 8001fb2:	f43f af73 	beq.w	8001e9c <HAL_GPIO_Init+0x68>
 8001fb6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001fba:	4290      	cmp	r0, r2
 8001fbc:	d022      	beq.n	8002004 <HAL_GPIO_Init+0x1d0>
 8001fbe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001fc2:	4290      	cmp	r0, r2
 8001fc4:	d020      	beq.n	8002008 <HAL_GPIO_Init+0x1d4>
 8001fc6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001fca:	4290      	cmp	r0, r2
 8001fcc:	d01e      	beq.n	800200c <HAL_GPIO_Init+0x1d8>
 8001fce:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001fd2:	4290      	cmp	r0, r2
 8001fd4:	d01c      	beq.n	8002010 <HAL_GPIO_Init+0x1dc>
 8001fd6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001fda:	4290      	cmp	r0, r2
 8001fdc:	d01a      	beq.n	8002014 <HAL_GPIO_Init+0x1e0>
 8001fde:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001fe2:	4290      	cmp	r0, r2
 8001fe4:	d018      	beq.n	8002018 <HAL_GPIO_Init+0x1e4>
 8001fe6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001fea:	4290      	cmp	r0, r2
 8001fec:	d016      	beq.n	800201c <HAL_GPIO_Init+0x1e8>
 8001fee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001ff2:	4290      	cmp	r0, r2
 8001ff4:	d014      	beq.n	8002020 <HAL_GPIO_Init+0x1ec>
 8001ff6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001ffa:	4290      	cmp	r0, r2
 8001ffc:	f43f af4c 	beq.w	8001e98 <HAL_GPIO_Init+0x64>
 8002000:	220a      	movs	r2, #10
 8002002:	e74c      	b.n	8001e9e <HAL_GPIO_Init+0x6a>
 8002004:	2201      	movs	r2, #1
 8002006:	e74a      	b.n	8001e9e <HAL_GPIO_Init+0x6a>
 8002008:	2202      	movs	r2, #2
 800200a:	e748      	b.n	8001e9e <HAL_GPIO_Init+0x6a>
 800200c:	2203      	movs	r2, #3
 800200e:	e746      	b.n	8001e9e <HAL_GPIO_Init+0x6a>
 8002010:	2204      	movs	r2, #4
 8002012:	e744      	b.n	8001e9e <HAL_GPIO_Init+0x6a>
 8002014:	2205      	movs	r2, #5
 8002016:	e742      	b.n	8001e9e <HAL_GPIO_Init+0x6a>
 8002018:	2206      	movs	r2, #6
 800201a:	e740      	b.n	8001e9e <HAL_GPIO_Init+0x6a>
 800201c:	2207      	movs	r2, #7
 800201e:	e73e      	b.n	8001e9e <HAL_GPIO_Init+0x6a>
 8002020:	2208      	movs	r2, #8
 8002022:	e73c      	b.n	8001e9e <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8002024:	b002      	add	sp, #8
 8002026:	bd70      	pop	{r4, r5, r6, pc}
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40013800 	.word	0x40013800
 8002030:	40013c00 	.word	0x40013c00
 8002034:	40023800 	.word	0x40023800
 8002038:	40020000 	.word	0x40020000

0800203c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800203c:	b10a      	cbz	r2, 8002042 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800203e:	6181      	str	r1, [r0, #24]
 8002040:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002042:	0409      	lsls	r1, r1, #16
 8002044:	6181      	str	r1, [r0, #24]
  }
}
 8002046:	4770      	bx	lr

08002048 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002048:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800204a:	ea01 0203 	and.w	r2, r1, r3
 800204e:	ea21 0103 	bic.w	r1, r1, r3
 8002052:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002056:	6181      	str	r1, [r0, #24]
}
 8002058:	4770      	bx	lr
	...

0800205c <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800205c:	2800      	cmp	r0, #0
 800205e:	f000 80cc 	beq.w	80021fa <HAL_I2C_Init+0x19e>
{
 8002062:	b570      	push	{r4, r5, r6, lr}
 8002064:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002066:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800206a:	2b00      	cmp	r3, #0
 800206c:	d077      	beq.n	800215e <HAL_I2C_Init+0x102>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800206e:	2324      	movs	r3, #36	@ 0x24
 8002070:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002074:	6822      	ldr	r2, [r4, #0]
 8002076:	6813      	ldr	r3, [r2, #0]
 8002078:	f023 0301 	bic.w	r3, r3, #1
 800207c:	6013      	str	r3, [r2, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800207e:	6822      	ldr	r2, [r4, #0]
 8002080:	6813      	ldr	r3, [r2, #0]
 8002082:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002086:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002088:	6822      	ldr	r2, [r4, #0]
 800208a:	6813      	ldr	r3, [r2, #0]
 800208c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002090:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002092:	f000 faff 	bl	8002694 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002096:	6862      	ldr	r2, [r4, #4]
 8002098:	4b5a      	ldr	r3, [pc, #360]	@ (8002204 <HAL_I2C_Init+0x1a8>)
 800209a:	429a      	cmp	r2, r3
 800209c:	d864      	bhi.n	8002168 <HAL_I2C_Init+0x10c>
 800209e:	4b5a      	ldr	r3, [pc, #360]	@ (8002208 <HAL_I2C_Init+0x1ac>)
 80020a0:	4298      	cmp	r0, r3
 80020a2:	bf8c      	ite	hi
 80020a4:	2300      	movhi	r3, #0
 80020a6:	2301      	movls	r3, #1
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f040 80a8 	bne.w	80021fe <HAL_I2C_Init+0x1a2>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020ae:	4957      	ldr	r1, [pc, #348]	@ (800220c <HAL_I2C_Init+0x1b0>)
 80020b0:	fba1 3100 	umull	r3, r1, r1, r0
 80020b4:	0c8b      	lsrs	r3, r1, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020b6:	6825      	ldr	r5, [r4, #0]
 80020b8:	686a      	ldr	r2, [r5, #4]
 80020ba:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80020be:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 80020c2:	606a      	str	r2, [r5, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020c4:	6821      	ldr	r1, [r4, #0]
 80020c6:	6a0a      	ldr	r2, [r1, #32]
 80020c8:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80020cc:	6866      	ldr	r6, [r4, #4]
 80020ce:	4d4d      	ldr	r5, [pc, #308]	@ (8002204 <HAL_I2C_Init+0x1a8>)
 80020d0:	42ae      	cmp	r6, r5
 80020d2:	d84f      	bhi.n	8002174 <HAL_I2C_Init+0x118>
 80020d4:	3301      	adds	r3, #1
 80020d6:	4313      	orrs	r3, r2
 80020d8:	620b      	str	r3, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020da:	6821      	ldr	r1, [r4, #0]
 80020dc:	69ca      	ldr	r2, [r1, #28]
 80020de:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 80020e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80020e6:	6865      	ldr	r5, [r4, #4]
 80020e8:	4b46      	ldr	r3, [pc, #280]	@ (8002204 <HAL_I2C_Init+0x1a8>)
 80020ea:	429d      	cmp	r5, r3
 80020ec:	d84c      	bhi.n	8002188 <HAL_I2C_Init+0x12c>
 80020ee:	1e43      	subs	r3, r0, #1
 80020f0:	006d      	lsls	r5, r5, #1
 80020f2:	fbb3 f3f5 	udiv	r3, r3, r5
 80020f6:	3301      	adds	r3, #1
 80020f8:	f640 70fc 	movw	r0, #4092	@ 0xffc
 80020fc:	4203      	tst	r3, r0
 80020fe:	d078      	beq.n	80021f2 <HAL_I2C_Init+0x196>
 8002100:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002104:	431a      	orrs	r2, r3
 8002106:	61ca      	str	r2, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002108:	6821      	ldr	r1, [r4, #0]
 800210a:	680b      	ldr	r3, [r1, #0]
 800210c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002110:	69e2      	ldr	r2, [r4, #28]
 8002112:	6a20      	ldr	r0, [r4, #32]
 8002114:	4302      	orrs	r2, r0
 8002116:	4313      	orrs	r3, r2
 8002118:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800211a:	6821      	ldr	r1, [r4, #0]
 800211c:	688b      	ldr	r3, [r1, #8]
 800211e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002122:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002126:	6922      	ldr	r2, [r4, #16]
 8002128:	68e0      	ldr	r0, [r4, #12]
 800212a:	4302      	orrs	r2, r0
 800212c:	4313      	orrs	r3, r2
 800212e:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002130:	6821      	ldr	r1, [r4, #0]
 8002132:	68cb      	ldr	r3, [r1, #12]
 8002134:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002138:	6962      	ldr	r2, [r4, #20]
 800213a:	69a0      	ldr	r0, [r4, #24]
 800213c:	4302      	orrs	r2, r0
 800213e:	4313      	orrs	r3, r2
 8002140:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002142:	6822      	ldr	r2, [r4, #0]
 8002144:	6813      	ldr	r3, [r2, #0]
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800214c:	2000      	movs	r0, #0
 800214e:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002150:	2320      	movs	r3, #32
 8002152:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002156:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002158:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e

  return HAL_OK;
}
 800215c:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800215e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8002162:	f7fe fef1 	bl	8000f48 <HAL_I2C_MspInit>
 8002166:	e782      	b.n	800206e <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002168:	4b29      	ldr	r3, [pc, #164]	@ (8002210 <HAL_I2C_Init+0x1b4>)
 800216a:	4298      	cmp	r0, r3
 800216c:	bf8c      	ite	hi
 800216e:	2300      	movhi	r3, #0
 8002170:	2301      	movls	r3, #1
 8002172:	e799      	b.n	80020a8 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002174:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 8002178:	fb05 f303 	mul.w	r3, r5, r3
 800217c:	4d25      	ldr	r5, [pc, #148]	@ (8002214 <HAL_I2C_Init+0x1b8>)
 800217e:	fba5 5303 	umull	r5, r3, r5, r3
 8002182:	099b      	lsrs	r3, r3, #6
 8002184:	3301      	adds	r3, #1
 8002186:	e7a6      	b.n	80020d6 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002188:	68a6      	ldr	r6, [r4, #8]
 800218a:	b9be      	cbnz	r6, 80021bc <HAL_I2C_Init+0x160>
 800218c:	1e43      	subs	r3, r0, #1
 800218e:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8002192:	fbb3 f3fc 	udiv	r3, r3, ip
 8002196:	3301      	adds	r3, #1
 8002198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800219c:	fab3 f383 	clz	r3, r3
 80021a0:	095b      	lsrs	r3, r3, #5
 80021a2:	bb43      	cbnz	r3, 80021f6 <HAL_I2C_Init+0x19a>
 80021a4:	b9c6      	cbnz	r6, 80021d8 <HAL_I2C_Init+0x17c>
 80021a6:	1e43      	subs	r3, r0, #1
 80021a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80021ac:	fbb3 f3f5 	udiv	r3, r3, r5
 80021b0:	3301      	adds	r3, #1
 80021b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021ba:	e7a3      	b.n	8002104 <HAL_I2C_Init+0xa8>
 80021bc:	1e43      	subs	r3, r0, #1
 80021be:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 80021c2:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80021c6:	fbb3 f3fc 	udiv	r3, r3, ip
 80021ca:	3301      	adds	r3, #1
 80021cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021d0:	fab3 f383 	clz	r3, r3
 80021d4:	095b      	lsrs	r3, r3, #5
 80021d6:	e7e4      	b.n	80021a2 <HAL_I2C_Init+0x146>
 80021d8:	1e43      	subs	r3, r0, #1
 80021da:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80021de:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80021e2:	fbb3 f3f5 	udiv	r3, r3, r5
 80021e6:	3301      	adds	r3, #1
 80021e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021f0:	e788      	b.n	8002104 <HAL_I2C_Init+0xa8>
 80021f2:	2304      	movs	r3, #4
 80021f4:	e786      	b.n	8002104 <HAL_I2C_Init+0xa8>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e784      	b.n	8002104 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 80021fa:	2001      	movs	r0, #1
}
 80021fc:	4770      	bx	lr
    return HAL_ERROR;
 80021fe:	2001      	movs	r0, #1
 8002200:	e7ac      	b.n	800215c <HAL_I2C_Init+0x100>
 8002202:	bf00      	nop
 8002204:	000186a0 	.word	0x000186a0
 8002208:	001e847f 	.word	0x001e847f
 800220c:	431bde83 	.word	0x431bde83
 8002210:	003d08ff 	.word	0x003d08ff
 8002214:	10624dd3 	.word	0x10624dd3

08002218 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002218:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b20      	cmp	r3, #32
 8002220:	d001      	beq.n	8002226 <HAL_I2CEx_ConfigAnalogFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002222:	2002      	movs	r0, #2
  }
}
 8002224:	4770      	bx	lr
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002226:	2324      	movs	r3, #36	@ 0x24
 8002228:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    __HAL_I2C_DISABLE(hi2c);
 800222c:	6802      	ldr	r2, [r0, #0]
 800222e:	6813      	ldr	r3, [r2, #0]
 8002230:	f023 0301 	bic.w	r3, r3, #1
 8002234:	6013      	str	r3, [r2, #0]
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002236:	6802      	ldr	r2, [r0, #0]
 8002238:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 800223a:	f023 0310 	bic.w	r3, r3, #16
 800223e:	6253      	str	r3, [r2, #36]	@ 0x24
    hi2c->Instance->FLTR |= AnalogFilter;
 8002240:	6802      	ldr	r2, [r0, #0]
 8002242:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8002244:	430b      	orrs	r3, r1
 8002246:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_I2C_ENABLE(hi2c);
 8002248:	6802      	ldr	r2, [r0, #0]
 800224a:	6813      	ldr	r3, [r2, #0]
 800224c:	f043 0301 	orr.w	r3, r3, #1
 8002250:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002252:	2320      	movs	r3, #32
 8002254:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    return HAL_OK;
 8002258:	2000      	movs	r0, #0
 800225a:	4770      	bx	lr

0800225c <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800225c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b20      	cmp	r3, #32
 8002264:	d001      	beq.n	800226a <HAL_I2CEx_ConfigDigitalFilter+0xe>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002266:	2002      	movs	r0, #2
  }
}
 8002268:	4770      	bx	lr
    hi2c->State = HAL_I2C_STATE_BUSY;
 800226a:	2324      	movs	r3, #36	@ 0x24
 800226c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    __HAL_I2C_DISABLE(hi2c);
 8002270:	6802      	ldr	r2, [r0, #0]
 8002272:	6813      	ldr	r3, [r2, #0]
 8002274:	f023 0301 	bic.w	r3, r3, #1
 8002278:	6013      	str	r3, [r2, #0]
    tmpreg = hi2c->Instance->FLTR;
 800227a:	6802      	ldr	r2, [r0, #0]
 800227c:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 800227e:	b29b      	uxth	r3, r3
    tmpreg &= ~(I2C_FLTR_DNF);
 8002280:	f023 030f 	bic.w	r3, r3, #15
    tmpreg |= DigitalFilter;
 8002284:	4319      	orrs	r1, r3
 8002286:	b289      	uxth	r1, r1
    hi2c->Instance->FLTR = tmpreg;
 8002288:	6251      	str	r1, [r2, #36]	@ 0x24
    __HAL_I2C_ENABLE(hi2c);
 800228a:	6802      	ldr	r2, [r0, #0]
 800228c:	6813      	ldr	r3, [r2, #0]
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002294:	2320      	movs	r3, #32
 8002296:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    return HAL_OK;
 800229a:	2000      	movs	r0, #0
 800229c:	4770      	bx	lr

0800229e <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800229e:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80022a0:	684d      	ldr	r5, [r1, #4]
 80022a2:	6803      	ldr	r3, [r0, #0]
 80022a4:	68dc      	ldr	r4, [r3, #12]
 80022a6:	f3c4 440b 	ubfx	r4, r4, #16, #12
 80022aa:	4425      	add	r5, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80022ac:	ea4f 1cc2 	mov.w	ip, r2, lsl #7
 80022b0:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80022b4:	f8d3 4088 	ldr.w	r4, [r3, #136]	@ 0x88
 80022b8:	f404 4470 	and.w	r4, r4, #61440	@ 0xf000
 80022bc:	f8c3 4088 	str.w	r4, [r3, #136]	@ 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80022c0:	680b      	ldr	r3, [r1, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80022c2:	6804      	ldr	r4, [r0, #0]
 80022c4:	68e6      	ldr	r6, [r4, #12]
 80022c6:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80022ca:	4433      	add	r3, r6
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80022cc:	3301      	adds	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80022ce:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80022d2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80022d6:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80022da:	68cd      	ldr	r5, [r1, #12]
 80022dc:	6803      	ldr	r3, [r0, #0]
 80022de:	68dc      	ldr	r4, [r3, #12]
 80022e0:	f3c4 040a 	ubfx	r4, r4, #0, #11
 80022e4:	4425      	add	r5, r4
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80022e6:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80022ea:	f8d3 408c 	ldr.w	r4, [r3, #140]	@ 0x8c
 80022ee:	f404 4470 	and.w	r4, r4, #61440	@ 0xf000
 80022f2:	f8c3 408c 	str.w	r4, [r3, #140]	@ 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80022f6:	688b      	ldr	r3, [r1, #8]
 80022f8:	6804      	ldr	r4, [r0, #0]
 80022fa:	68e6      	ldr	r6, [r4, #12]
 80022fc:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8002300:	4433      	add	r3, r6
 8002302:	3301      	adds	r3, #1
 8002304:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 8002308:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800230c:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002310:	6803      	ldr	r3, [r0, #0]
 8002312:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8002316:	f8d3 4094 	ldr.w	r4, [r3, #148]	@ 0x94
 800231a:	f024 0407 	bic.w	r4, r4, #7
 800231e:	f8c3 4094 	str.w	r4, [r3, #148]	@ 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002322:	6803      	ldr	r3, [r0, #0]
 8002324:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8002328:	690c      	ldr	r4, [r1, #16]
 800232a:	f8c3 4094 	str.w	r4, [r3, #148]	@ 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800232e:	f891 e031 	ldrb.w	lr, [r1, #49]	@ 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002332:	f891 5032 	ldrb.w	r5, [r1, #50]	@ 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002336:	698e      	ldr	r6, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002338:	6803      	ldr	r3, [r0, #0]
 800233a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800233e:	f8d3 409c 	ldr.w	r4, [r3, #156]	@ 0x9c
 8002342:	2400      	movs	r4, #0
 8002344:	f8c3 409c 	str.w	r4, [r3, #156]	@ 0x9c
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002348:	f891 3030 	ldrb.w	r3, [r1, #48]	@ 0x30
 800234c:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
 8002350:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8002354:	6805      	ldr	r5, [r0, #0]
 8002356:	eb05 15c2 	add.w	r5, r5, r2, lsl #7
 800235a:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 800235e:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002362:	6803      	ldr	r3, [r0, #0]
 8002364:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8002368:	f8d3 5098 	ldr.w	r5, [r3, #152]	@ 0x98
 800236c:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 8002370:	f8c3 5098 	str.w	r5, [r3, #152]	@ 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002374:	6803      	ldr	r3, [r0, #0]
 8002376:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800237a:	694d      	ldr	r5, [r1, #20]
 800237c:	f8c3 5098 	str.w	r5, [r3, #152]	@ 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002380:	6803      	ldr	r3, [r0, #0]
 8002382:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8002386:	f8d3 50a0 	ldr.w	r5, [r3, #160]	@ 0xa0
 800238a:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 800238e:	f025 0507 	bic.w	r5, r5, #7
 8002392:	f8c3 50a0 	str.w	r5, [r3, #160]	@ 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002396:	6a0d      	ldr	r5, [r1, #32]
 8002398:	6803      	ldr	r3, [r0, #0]
 800239a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 800239e:	69ce      	ldr	r6, [r1, #28]
 80023a0:	4335      	orrs	r5, r6
 80023a2:	f8c3 50a0 	str.w	r5, [r3, #160]	@ 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80023a6:	6803      	ldr	r3, [r0, #0]
 80023a8:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80023ac:	f8d3 50ac 	ldr.w	r5, [r3, #172]	@ 0xac
 80023b0:	f8c3 40ac 	str.w	r4, [r3, #172]	@ 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80023b4:	6803      	ldr	r3, [r0, #0]
 80023b6:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 80023ba:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 80023bc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80023c0:	690a      	ldr	r2, [r1, #16]
 80023c2:	b182      	cbz	r2, 80023e6 <LTDC_SetConfig+0x148>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80023c4:	1e53      	subs	r3, r2, #1
 80023c6:	2b06      	cmp	r3, #6
 80023c8:	d805      	bhi.n	80023d6 <LTDC_SetConfig+0x138>
 80023ca:	e8df f003 	tbb	[pc, r3]
 80023ce:	0d3c      	.short	0x0d3c
 80023d0:	04040608 	.word	0x04040608
 80023d4:	0a          	.byte	0x0a
 80023d5:	00          	.byte	0x00
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80023d6:	2201      	movs	r2, #1
 80023d8:	e006      	b.n	80023e8 <LTDC_SetConfig+0x14a>
 80023da:	2202      	movs	r2, #2
 80023dc:	e004      	b.n	80023e8 <LTDC_SetConfig+0x14a>
 80023de:	2202      	movs	r2, #2
 80023e0:	e002      	b.n	80023e8 <LTDC_SetConfig+0x14a>
 80023e2:	2202      	movs	r2, #2
 80023e4:	e000      	b.n	80023e8 <LTDC_SetConfig+0x14a>
    tmp = 4U;
 80023e6:	2204      	movs	r2, #4
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80023e8:	6803      	ldr	r3, [r0, #0]
 80023ea:	4463      	add	r3, ip
 80023ec:	f8d3 40b0 	ldr.w	r4, [r3, #176]	@ 0xb0
 80023f0:	f004 24e0 	and.w	r4, r4, #3758153728	@ 0xe000e000
 80023f4:	f8c3 40b0 	str.w	r4, [r3, #176]	@ 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80023f8:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80023fa:	fb02 f403 	mul.w	r4, r2, r3
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80023fe:	684b      	ldr	r3, [r1, #4]
 8002400:	680d      	ldr	r5, [r1, #0]
 8002402:	1b5b      	subs	r3, r3, r5
 8002404:	fb02 f303 	mul.w	r3, r2, r3
 8002408:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800240a:	6802      	ldr	r2, [r0, #0]
 800240c:	4462      	add	r2, ip
 800240e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8002412:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002416:	6803      	ldr	r3, [r0, #0]
 8002418:	4463      	add	r3, ip
 800241a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800241e:	f422 62ff 	bic.w	r2, r2, #2040	@ 0x7f8
 8002422:	f022 0207 	bic.w	r2, r2, #7
 8002426:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800242a:	6803      	ldr	r3, [r0, #0]
 800242c:	4463      	add	r3, ip
 800242e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8002430:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002434:	6803      	ldr	r3, [r0, #0]
 8002436:	4463      	add	r3, ip
 8002438:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800243c:	f042 0201 	orr.w	r2, r2, #1
 8002440:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 8002444:	bd70      	pop	{r4, r5, r6, pc}
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002446:	2203      	movs	r2, #3
 8002448:	e7ce      	b.n	80023e8 <LTDC_SetConfig+0x14a>
	...

0800244c <HAL_LTDC_Init>:
  if (hltdc == NULL)
 800244c:	2800      	cmp	r0, #0
 800244e:	d072      	beq.n	8002536 <HAL_LTDC_Init+0xea>
{
 8002450:	b538      	push	{r3, r4, r5, lr}
 8002452:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002454:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 8002458:	2b00      	cmp	r3, #0
 800245a:	d067      	beq.n	800252c <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800245c:	2302      	movs	r3, #2
 800245e:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002462:	6822      	ldr	r2, [r4, #0]
 8002464:	6993      	ldr	r3, [r2, #24]
 8002466:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800246a:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800246c:	6821      	ldr	r1, [r4, #0]
 800246e:	698a      	ldr	r2, [r1, #24]
 8002470:	6863      	ldr	r3, [r4, #4]
 8002472:	68a0      	ldr	r0, [r4, #8]
 8002474:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002476:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002478:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800247a:	6920      	ldr	r0, [r4, #16]
 800247c:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800247e:	4313      	orrs	r3, r2
 8002480:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002482:	6821      	ldr	r1, [r4, #0]
 8002484:	688a      	ldr	r2, [r1, #8]
 8002486:	4b2d      	ldr	r3, [pc, #180]	@ (800253c <HAL_LTDC_Init+0xf0>)
 8002488:	401a      	ands	r2, r3
 800248a:	608a      	str	r2, [r1, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800248c:	6820      	ldr	r0, [r4, #0]
 800248e:	6882      	ldr	r2, [r0, #8]
 8002490:	69a1      	ldr	r1, [r4, #24]
 8002492:	6965      	ldr	r5, [r4, #20]
 8002494:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8002498:	430a      	orrs	r2, r1
 800249a:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800249c:	6821      	ldr	r1, [r4, #0]
 800249e:	68ca      	ldr	r2, [r1, #12]
 80024a0:	401a      	ands	r2, r3
 80024a2:	60ca      	str	r2, [r1, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80024a4:	6820      	ldr	r0, [r4, #0]
 80024a6:	68c2      	ldr	r2, [r0, #12]
 80024a8:	6a21      	ldr	r1, [r4, #32]
 80024aa:	69e5      	ldr	r5, [r4, #28]
 80024ac:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80024b0:	430a      	orrs	r2, r1
 80024b2:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80024b4:	6821      	ldr	r1, [r4, #0]
 80024b6:	690a      	ldr	r2, [r1, #16]
 80024b8:	401a      	ands	r2, r3
 80024ba:	610a      	str	r2, [r1, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80024bc:	6820      	ldr	r0, [r4, #0]
 80024be:	6902      	ldr	r2, [r0, #16]
 80024c0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80024c2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80024c4:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80024c8:	430a      	orrs	r2, r1
 80024ca:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80024cc:	6821      	ldr	r1, [r4, #0]
 80024ce:	694a      	ldr	r2, [r1, #20]
 80024d0:	4013      	ands	r3, r2
 80024d2:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80024d4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80024d6:	6821      	ldr	r1, [r4, #0]
 80024d8:	694b      	ldr	r3, [r1, #20]
 80024da:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80024dc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80024e0:	4313      	orrs	r3, r2
 80024e2:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80024e4:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80024e8:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 80024ec:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80024ee:	6821      	ldr	r1, [r4, #0]
 80024f0:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80024f2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80024f6:	62ca      	str	r2, [r1, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80024f8:	6821      	ldr	r1, [r4, #0]
 80024fa:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80024fc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002500:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 8002504:	4303      	orrs	r3, r0
 8002506:	4313      	orrs	r3, r2
 8002508:	62cb      	str	r3, [r1, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800250a:	6822      	ldr	r2, [r4, #0]
 800250c:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800250e:	f043 0306 	orr.w	r3, r3, #6
 8002512:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8002514:	6822      	ldr	r2, [r4, #0]
 8002516:	6993      	ldr	r3, [r2, #24]
 8002518:	f043 0301 	orr.w	r3, r3, #1
 800251c:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800251e:	2000      	movs	r0, #0
 8002520:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8002524:	2301      	movs	r3, #1
 8002526:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 800252a:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 800252c:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 8002530:	f7fe fd5e 	bl	8000ff0 <HAL_LTDC_MspInit>
 8002534:	e792      	b.n	800245c <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 8002536:	2001      	movs	r0, #1
}
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	f000f800 	.word	0xf000f800

08002540 <HAL_LTDC_ErrorCallback>:
}
 8002540:	4770      	bx	lr

08002542 <HAL_LTDC_LineEventCallback>:
}
 8002542:	4770      	bx	lr

08002544 <HAL_LTDC_ReloadEventCallback>:
}
 8002544:	4770      	bx	lr

08002546 <HAL_LTDC_IRQHandler>:
{
 8002546:	b570      	push	{r4, r5, r6, lr}
 8002548:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800254a:	6803      	ldr	r3, [r0, #0]
 800254c:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800254e:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8002550:	f015 0f04 	tst.w	r5, #4
 8002554:	d002      	beq.n	800255c <HAL_LTDC_IRQHandler+0x16>
 8002556:	f016 0f04 	tst.w	r6, #4
 800255a:	d112      	bne.n	8002582 <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800255c:	f015 0f02 	tst.w	r5, #2
 8002560:	d002      	beq.n	8002568 <HAL_LTDC_IRQHandler+0x22>
 8002562:	f016 0f02 	tst.w	r6, #2
 8002566:	d121      	bne.n	80025ac <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8002568:	f015 0f01 	tst.w	r5, #1
 800256c:	d002      	beq.n	8002574 <HAL_LTDC_IRQHandler+0x2e>
 800256e:	f016 0f01 	tst.w	r6, #1
 8002572:	d132      	bne.n	80025da <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8002574:	f015 0f08 	tst.w	r5, #8
 8002578:	d002      	beq.n	8002580 <HAL_LTDC_IRQHandler+0x3a>
 800257a:	f016 0f08 	tst.w	r6, #8
 800257e:	d13d      	bne.n	80025fc <HAL_LTDC_IRQHandler+0xb6>
}
 8002580:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8002582:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002584:	f022 0204 	bic.w	r2, r2, #4
 8002588:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800258a:	6803      	ldr	r3, [r0, #0]
 800258c:	2204      	movs	r2, #4
 800258e:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8002590:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800259c:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 80025a0:	2300      	movs	r3, #0
 80025a2:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80025a6:	f7ff ffcb 	bl	8002540 <HAL_LTDC_ErrorCallback>
 80025aa:	e7d7      	b.n	800255c <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80025ac:	6822      	ldr	r2, [r4, #0]
 80025ae:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80025b0:	f023 0302 	bic.w	r3, r3, #2
 80025b4:	6353      	str	r3, [r2, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80025b6:	6823      	ldr	r3, [r4, #0]
 80025b8:	2202      	movs	r2, #2
 80025ba:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80025bc:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 80025c0:	4313      	orrs	r3, r2
 80025c2:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80025c6:	2304      	movs	r3, #4
 80025c8:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 80025cc:	2300      	movs	r3, #0
 80025ce:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80025d2:	4620      	mov	r0, r4
 80025d4:	f7ff ffb4 	bl	8002540 <HAL_LTDC_ErrorCallback>
 80025d8:	e7c6      	b.n	8002568 <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80025da:	6822      	ldr	r2, [r4, #0]
 80025dc:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 80025de:	f023 0301 	bic.w	r3, r3, #1
 80025e2:	6353      	str	r3, [r2, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80025e4:	6822      	ldr	r2, [r4, #0]
 80025e6:	2301      	movs	r3, #1
 80025e8:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80025ea:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 80025ee:	2300      	movs	r3, #0
 80025f0:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 80025f4:	4620      	mov	r0, r4
 80025f6:	f7ff ffa4 	bl	8002542 <HAL_LTDC_LineEventCallback>
 80025fa:	e7bb      	b.n	8002574 <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80025fc:	6822      	ldr	r2, [r4, #0]
 80025fe:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8002600:	f023 0308 	bic.w	r3, r3, #8
 8002604:	6353      	str	r3, [r2, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8002606:	6823      	ldr	r3, [r4, #0]
 8002608:	2208      	movs	r2, #8
 800260a:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800260c:	2301      	movs	r3, #1
 800260e:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8002612:	2300      	movs	r3, #0
 8002614:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8002618:	4620      	mov	r0, r4
 800261a:	f7ff ff93 	bl	8002544 <HAL_LTDC_ReloadEventCallback>
}
 800261e:	e7af      	b.n	8002580 <HAL_LTDC_IRQHandler+0x3a>

08002620 <HAL_LTDC_ConfigLayer>:
{
 8002620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8002622:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 8002626:	2b01      	cmp	r3, #1
 8002628:	d02c      	beq.n	8002684 <HAL_LTDC_ConfigLayer+0x64>
 800262a:	4604      	mov	r4, r0
 800262c:	460d      	mov	r5, r1
 800262e:	4616      	mov	r6, r2
 8002630:	2701      	movs	r7, #1
 8002632:	f880 70a0 	strb.w	r7, [r0, #160]	@ 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002636:	2302      	movs	r3, #2
 8002638:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800263c:	f04f 0c34 	mov.w	ip, #52	@ 0x34
 8002640:	fb0c 0c02 	mla	ip, ip, r2, r0
 8002644:	f10c 0c38 	add.w	ip, ip, #56	@ 0x38
 8002648:	468e      	mov	lr, r1
 800264a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800264e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002652:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002656:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800265a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800265e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002662:	f8de 3000 	ldr.w	r3, [lr]
 8002666:	f8cc 3000 	str.w	r3, [ip]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800266a:	4632      	mov	r2, r6
 800266c:	4629      	mov	r1, r5
 800266e:	4620      	mov	r0, r4
 8002670:	f7ff fe15 	bl	800229e <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002674:	6823      	ldr	r3, [r4, #0]
 8002676:	625f      	str	r7, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002678:	f884 70a1 	strb.w	r7, [r4, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800267c:	2000      	movs	r0, #0
 800267e:	f884 00a0 	strb.w	r0, [r4, #160]	@ 0xa0
}
 8002682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 8002684:	2002      	movs	r0, #2
 8002686:	e7fc      	b.n	8002682 <HAL_LTDC_ConfigLayer+0x62>

08002688 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002688:	4b01      	ldr	r3, [pc, #4]	@ (8002690 <HAL_RCC_GetHCLKFreq+0x8>)
 800268a:	6818      	ldr	r0, [r3, #0]
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	20000000 	.word	0x20000000

08002694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002694:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002696:	f7ff fff7 	bl	8002688 <HAL_RCC_GetHCLKFreq>
 800269a:	4b04      	ldr	r3, [pc, #16]	@ (80026ac <HAL_RCC_GetPCLK1Freq+0x18>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80026a2:	4a03      	ldr	r2, [pc, #12]	@ (80026b0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80026a4:	5cd3      	ldrb	r3, [r2, r3]
}
 80026a6:	40d8      	lsrs	r0, r3
 80026a8:	bd08      	pop	{r3, pc}
 80026aa:	bf00      	nop
 80026ac:	40023800 	.word	0x40023800
 80026b0:	08003f1c 	.word	0x08003f1c

080026b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026b4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026b6:	f7ff ffe7 	bl	8002688 <HAL_RCC_GetHCLKFreq>
 80026ba:	4b04      	ldr	r3, [pc, #16]	@ (80026cc <HAL_RCC_GetPCLK2Freq+0x18>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80026c2:	4a03      	ldr	r2, [pc, #12]	@ (80026d0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80026c4:	5cd3      	ldrb	r3, [r2, r3]
}
 80026c6:	40d8      	lsrs	r0, r3
 80026c8:	bd08      	pop	{r3, pc}
 80026ca:	bf00      	nop
 80026cc:	40023800 	.word	0x40023800
 80026d0:	08003f1c 	.word	0x08003f1c

080026d4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80026d4:	230f      	movs	r3, #15
 80026d6:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80026d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002708 <HAL_RCC_GetClockConfig+0x34>)
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	f002 0203 	and.w	r2, r2, #3
 80026e0:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 80026e8:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 80026f0:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	08db      	lsrs	r3, r3, #3
 80026f6:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80026fa:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80026fc:	4b03      	ldr	r3, [pc, #12]	@ (800270c <HAL_RCC_GetClockConfig+0x38>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 030f 	and.w	r3, r3, #15
 8002704:	600b      	str	r3, [r1, #0]
}
 8002706:	4770      	bx	lr
 8002708:	40023800 	.word	0x40023800
 800270c:	40023c00 	.word	0x40023c00

08002710 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8002710:	b1e0      	cbz	r0, 800274c <HAL_SDRAM_Init+0x3c>
{
 8002712:	b538      	push	{r3, r4, r5, lr}
 8002714:	460d      	mov	r5, r1
 8002716:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8002718:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800271c:	b18b      	cbz	r3, 8002742 <HAL_SDRAM_Init+0x32>
    HAL_SDRAM_MspInit(hsdram);
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800271e:	2302      	movs	r3, #2
 8002720:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8002724:	4621      	mov	r1, r4
 8002726:	f851 0b04 	ldr.w	r0, [r1], #4
 800272a:	f000 fe91 	bl	8003450 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800272e:	6862      	ldr	r2, [r4, #4]
 8002730:	4629      	mov	r1, r5
 8002732:	6820      	ldr	r0, [r4, #0]
 8002734:	f000 fec8 	bl	80034c8 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002738:	2301      	movs	r3, #1
 800273a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  return HAL_OK;
 800273e:	2000      	movs	r0, #0
}
 8002740:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8002742:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8002746:	f7fe fdcb 	bl	80012e0 <HAL_SDRAM_MspInit>
 800274a:	e7e8      	b.n	800271e <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 800274c:	2001      	movs	r0, #1
}
 800274e:	4770      	bx	lr

08002750 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002750:	2800      	cmp	r0, #0
 8002752:	d05a      	beq.n	800280a <HAL_SPI_Init+0xba>
{
 8002754:	b510      	push	{r4, lr}
 8002756:	4604      	mov	r4, r0
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002758:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800275a:	b933      	cbnz	r3, 800276a <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800275c:	6843      	ldr	r3, [r0, #4]
 800275e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002762:	d005      	beq.n	8002770 <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002764:	2300      	movs	r3, #0
 8002766:	61c3      	str	r3, [r0, #28]
 8002768:	e002      	b.n	8002770 <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800276a:	2300      	movs	r3, #0
 800276c:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800276e:	6143      	str	r3, [r0, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002770:	2300      	movs	r3, #0
 8002772:	62a3      	str	r3, [r4, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002774:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8002778:	2b00      	cmp	r3, #0
 800277a:	d040      	beq.n	80027fe <HAL_SPI_Init+0xae>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800277c:	2302      	movs	r3, #2
 800277e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002782:	6822      	ldr	r2, [r4, #0]
 8002784:	6813      	ldr	r3, [r2, #0]
 8002786:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800278a:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800278c:	6863      	ldr	r3, [r4, #4]
 800278e:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8002792:	68a2      	ldr	r2, [r4, #8]
 8002794:	f402 4204 	and.w	r2, r2, #33792	@ 0x8400
 8002798:	4313      	orrs	r3, r2
 800279a:	68e2      	ldr	r2, [r4, #12]
 800279c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80027a0:	4313      	orrs	r3, r2
 80027a2:	6922      	ldr	r2, [r4, #16]
 80027a4:	f002 0202 	and.w	r2, r2, #2
 80027a8:	4313      	orrs	r3, r2
 80027aa:	6962      	ldr	r2, [r4, #20]
 80027ac:	f002 0201 	and.w	r2, r2, #1
 80027b0:	4313      	orrs	r3, r2
 80027b2:	69a2      	ldr	r2, [r4, #24]
 80027b4:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 80027b8:	4313      	orrs	r3, r2
 80027ba:	69e2      	ldr	r2, [r4, #28]
 80027bc:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 80027c0:	4313      	orrs	r3, r2
 80027c2:	6a22      	ldr	r2, [r4, #32]
 80027c4:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80027c8:	4313      	orrs	r3, r2
 80027ca:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80027cc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80027d0:	6821      	ldr	r1, [r4, #0]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	600b      	str	r3, [r1, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80027d6:	8b63      	ldrh	r3, [r4, #26]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80027de:	f002 0210 	and.w	r2, r2, #16
 80027e2:	6821      	ldr	r1, [r4, #0]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80027e8:	6822      	ldr	r2, [r4, #0]
 80027ea:	69d3      	ldr	r3, [r2, #28]
 80027ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80027f0:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027f2:	2000      	movs	r0, #0
 80027f4:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80027f6:	2301      	movs	r3, #1
 80027f8:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51

  return HAL_OK;
}
 80027fc:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80027fe:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8002802:	4620      	mov	r0, r4
 8002804:	f7fe fcde 	bl	80011c4 <HAL_SPI_MspInit>
 8002808:	e7b8      	b.n	800277c <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 800280a:	2001      	movs	r0, #1
}
 800280c:	4770      	bx	lr

0800280e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800280e:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002810:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002812:	6a04      	ldr	r4, [r0, #32]
 8002814:	f024 0401 	bic.w	r4, r4, #1
 8002818:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800281a:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800281c:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002820:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002824:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8002828:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800282a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800282c:	6203      	str	r3, [r0, #32]
}
 800282e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002832:	4770      	bx	lr

08002834 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002834:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002836:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002838:	6a04      	ldr	r4, [r0, #32]
 800283a:	f024 0410 	bic.w	r4, r4, #16
 800283e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002840:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002842:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002846:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800284a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800284e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002852:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002854:	6203      	str	r3, [r0, #32]
}
 8002856:	f85d 4b04 	ldr.w	r4, [sp], #4
 800285a:	4770      	bx	lr

0800285c <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800285c:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800285e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002862:	430b      	orrs	r3, r1
 8002864:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002868:	6083      	str	r3, [r0, #8]
}
 800286a:	4770      	bx	lr

0800286c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800286c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b01      	cmp	r3, #1
 8002874:	d137      	bne.n	80028e6 <HAL_TIM_Base_Start_IT+0x7a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002876:	2302      	movs	r3, #2
 8002878:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800287c:	6802      	ldr	r2, [r0, #0]
 800287e:	68d3      	ldr	r3, [r2, #12]
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002886:	6803      	ldr	r3, [r0, #0]
 8002888:	4a19      	ldr	r2, [pc, #100]	@ (80028f0 <HAL_TIM_Base_Start_IT+0x84>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d020      	beq.n	80028d0 <HAL_TIM_Base_Start_IT+0x64>
 800288e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002892:	d01d      	beq.n	80028d0 <HAL_TIM_Base_Start_IT+0x64>
 8002894:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002898:	4293      	cmp	r3, r2
 800289a:	d019      	beq.n	80028d0 <HAL_TIM_Base_Start_IT+0x64>
 800289c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d015      	beq.n	80028d0 <HAL_TIM_Base_Start_IT+0x64>
 80028a4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d011      	beq.n	80028d0 <HAL_TIM_Base_Start_IT+0x64>
 80028ac:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d00d      	beq.n	80028d0 <HAL_TIM_Base_Start_IT+0x64>
 80028b4:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d009      	beq.n	80028d0 <HAL_TIM_Base_Start_IT+0x64>
 80028bc:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d005      	beq.n	80028d0 <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	f042 0201 	orr.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80028cc:	2000      	movs	r0, #0
 80028ce:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028d6:	2a06      	cmp	r2, #6
 80028d8:	d007      	beq.n	80028ea <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	f042 0201 	orr.w	r2, r2, #1
 80028e0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80028e2:	2000      	movs	r0, #0
 80028e4:	4770      	bx	lr
    return HAL_ERROR;
 80028e6:	2001      	movs	r0, #1
 80028e8:	4770      	bx	lr
  return HAL_OK;
 80028ea:	2000      	movs	r0, #0
}
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40010000 	.word	0x40010000

080028f4 <HAL_TIM_OC_DelayElapsedCallback>:
}
 80028f4:	4770      	bx	lr

080028f6 <HAL_TIM_IC_CaptureCallback>:
}
 80028f6:	4770      	bx	lr

080028f8 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80028f8:	4770      	bx	lr

080028fa <HAL_TIM_TriggerCallback>:
}
 80028fa:	4770      	bx	lr

080028fc <HAL_TIM_IRQHandler>:
{
 80028fc:	b570      	push	{r4, r5, r6, lr}
 80028fe:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8002900:	6803      	ldr	r3, [r0, #0]
 8002902:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002904:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002906:	f015 0f02 	tst.w	r5, #2
 800290a:	d010      	beq.n	800292e <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800290c:	f016 0f02 	tst.w	r6, #2
 8002910:	d00d      	beq.n	800292e <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002912:	f06f 0202 	mvn.w	r2, #2
 8002916:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002918:	2301      	movs	r3, #1
 800291a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800291c:	6803      	ldr	r3, [r0, #0]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	f013 0f03 	tst.w	r3, #3
 8002924:	d05e      	beq.n	80029e4 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8002926:	f7ff ffe6 	bl	80028f6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800292a:	2300      	movs	r3, #0
 800292c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800292e:	f015 0f04 	tst.w	r5, #4
 8002932:	d012      	beq.n	800295a <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002934:	f016 0f04 	tst.w	r6, #4
 8002938:	d00f      	beq.n	800295a <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800293a:	6823      	ldr	r3, [r4, #0]
 800293c:	f06f 0204 	mvn.w	r2, #4
 8002940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002942:	2302      	movs	r3, #2
 8002944:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002946:	6823      	ldr	r3, [r4, #0]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800294e:	d04f      	beq.n	80029f0 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8002950:	4620      	mov	r0, r4
 8002952:	f7ff ffd0 	bl	80028f6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002956:	2300      	movs	r3, #0
 8002958:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800295a:	f015 0f08 	tst.w	r5, #8
 800295e:	d012      	beq.n	8002986 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002960:	f016 0f08 	tst.w	r6, #8
 8002964:	d00f      	beq.n	8002986 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002966:	6823      	ldr	r3, [r4, #0]
 8002968:	f06f 0208 	mvn.w	r2, #8
 800296c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800296e:	2304      	movs	r3, #4
 8002970:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002972:	6823      	ldr	r3, [r4, #0]
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	f013 0f03 	tst.w	r3, #3
 800297a:	d040      	beq.n	80029fe <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 800297c:	4620      	mov	r0, r4
 800297e:	f7ff ffba 	bl	80028f6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002982:	2300      	movs	r3, #0
 8002984:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002986:	f015 0f10 	tst.w	r5, #16
 800298a:	d012      	beq.n	80029b2 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800298c:	f016 0f10 	tst.w	r6, #16
 8002990:	d00f      	beq.n	80029b2 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002992:	6823      	ldr	r3, [r4, #0]
 8002994:	f06f 0210 	mvn.w	r2, #16
 8002998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800299a:	2308      	movs	r3, #8
 800299c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800299e:	6823      	ldr	r3, [r4, #0]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80029a6:	d031      	beq.n	8002a0c <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 80029a8:	4620      	mov	r0, r4
 80029aa:	f7ff ffa4 	bl	80028f6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ae:	2300      	movs	r3, #0
 80029b0:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80029b2:	f015 0f01 	tst.w	r5, #1
 80029b6:	d002      	beq.n	80029be <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80029b8:	f016 0f01 	tst.w	r6, #1
 80029bc:	d12d      	bne.n	8002a1a <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80029be:	f015 0f80 	tst.w	r5, #128	@ 0x80
 80029c2:	d002      	beq.n	80029ca <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029c4:	f016 0f80 	tst.w	r6, #128	@ 0x80
 80029c8:	d12f      	bne.n	8002a2a <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80029ca:	f015 0f40 	tst.w	r5, #64	@ 0x40
 80029ce:	d002      	beq.n	80029d6 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80029d0:	f016 0f40 	tst.w	r6, #64	@ 0x40
 80029d4:	d131      	bne.n	8002a3a <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80029d6:	f015 0f20 	tst.w	r5, #32
 80029da:	d002      	beq.n	80029e2 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80029dc:	f016 0f20 	tst.w	r6, #32
 80029e0:	d133      	bne.n	8002a4a <HAL_TIM_IRQHandler+0x14e>
}
 80029e2:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e4:	f7ff ff86 	bl	80028f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e8:	4620      	mov	r0, r4
 80029ea:	f7ff ff85 	bl	80028f8 <HAL_TIM_PWM_PulseFinishedCallback>
 80029ee:	e79c      	b.n	800292a <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f0:	4620      	mov	r0, r4
 80029f2:	f7ff ff7f 	bl	80028f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f6:	4620      	mov	r0, r4
 80029f8:	f7ff ff7e 	bl	80028f8 <HAL_TIM_PWM_PulseFinishedCallback>
 80029fc:	e7ab      	b.n	8002956 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fe:	4620      	mov	r0, r4
 8002a00:	f7ff ff78 	bl	80028f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a04:	4620      	mov	r0, r4
 8002a06:	f7ff ff77 	bl	80028f8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002a0a:	e7ba      	b.n	8002982 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	f7ff ff71 	bl	80028f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a12:	4620      	mov	r0, r4
 8002a14:	f7ff ff70 	bl	80028f8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002a18:	e7c9      	b.n	80029ae <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a1a:	6823      	ldr	r3, [r4, #0]
 8002a1c:	f06f 0201 	mvn.w	r2, #1
 8002a20:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a22:	4620      	mov	r0, r4
 8002a24:	f7fd ff6c 	bl	8000900 <HAL_TIM_PeriodElapsedCallback>
 8002a28:	e7c9      	b.n	80029be <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a2a:	6823      	ldr	r3, [r4, #0]
 8002a2c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002a30:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002a32:	4620      	mov	r0, r4
 8002a34:	f000 f97d 	bl	8002d32 <HAL_TIMEx_BreakCallback>
 8002a38:	e7c7      	b.n	80029ca <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a3a:	6823      	ldr	r3, [r4, #0]
 8002a3c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002a40:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002a42:	4620      	mov	r0, r4
 8002a44:	f7ff ff59 	bl	80028fa <HAL_TIM_TriggerCallback>
 8002a48:	e7c5      	b.n	80029d6 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a4a:	6823      	ldr	r3, [r4, #0]
 8002a4c:	f06f 0220 	mvn.w	r2, #32
 8002a50:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002a52:	4620      	mov	r0, r4
 8002a54:	f000 f96c 	bl	8002d30 <HAL_TIMEx_CommutCallback>
}
 8002a58:	e7c3      	b.n	80029e2 <HAL_TIM_IRQHandler+0xe6>
	...

08002a5c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002a5c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a5e:	4a34      	ldr	r2, [pc, #208]	@ (8002b30 <TIM_Base_SetConfig+0xd4>)
 8002a60:	4290      	cmp	r0, r2
 8002a62:	d012      	beq.n	8002a8a <TIM_Base_SetConfig+0x2e>
 8002a64:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002a68:	d00f      	beq.n	8002a8a <TIM_Base_SetConfig+0x2e>
 8002a6a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002a6e:	4290      	cmp	r0, r2
 8002a70:	d00b      	beq.n	8002a8a <TIM_Base_SetConfig+0x2e>
 8002a72:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a76:	4290      	cmp	r0, r2
 8002a78:	d007      	beq.n	8002a8a <TIM_Base_SetConfig+0x2e>
 8002a7a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002a7e:	4290      	cmp	r0, r2
 8002a80:	d003      	beq.n	8002a8a <TIM_Base_SetConfig+0x2e>
 8002a82:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002a86:	4290      	cmp	r0, r2
 8002a88:	d103      	bne.n	8002a92 <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002a8e:	684a      	ldr	r2, [r1, #4]
 8002a90:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a92:	4a27      	ldr	r2, [pc, #156]	@ (8002b30 <TIM_Base_SetConfig+0xd4>)
 8002a94:	4290      	cmp	r0, r2
 8002a96:	d02a      	beq.n	8002aee <TIM_Base_SetConfig+0x92>
 8002a98:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8002a9c:	d027      	beq.n	8002aee <TIM_Base_SetConfig+0x92>
 8002a9e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8002aa2:	4290      	cmp	r0, r2
 8002aa4:	d023      	beq.n	8002aee <TIM_Base_SetConfig+0x92>
 8002aa6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002aaa:	4290      	cmp	r0, r2
 8002aac:	d01f      	beq.n	8002aee <TIM_Base_SetConfig+0x92>
 8002aae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002ab2:	4290      	cmp	r0, r2
 8002ab4:	d01b      	beq.n	8002aee <TIM_Base_SetConfig+0x92>
 8002ab6:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8002aba:	4290      	cmp	r0, r2
 8002abc:	d017      	beq.n	8002aee <TIM_Base_SetConfig+0x92>
 8002abe:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8002ac2:	4290      	cmp	r0, r2
 8002ac4:	d013      	beq.n	8002aee <TIM_Base_SetConfig+0x92>
 8002ac6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002aca:	4290      	cmp	r0, r2
 8002acc:	d00f      	beq.n	8002aee <TIM_Base_SetConfig+0x92>
 8002ace:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002ad2:	4290      	cmp	r0, r2
 8002ad4:	d00b      	beq.n	8002aee <TIM_Base_SetConfig+0x92>
 8002ad6:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8002ada:	4290      	cmp	r0, r2
 8002adc:	d007      	beq.n	8002aee <TIM_Base_SetConfig+0x92>
 8002ade:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002ae2:	4290      	cmp	r0, r2
 8002ae4:	d003      	beq.n	8002aee <TIM_Base_SetConfig+0x92>
 8002ae6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002aea:	4290      	cmp	r0, r2
 8002aec:	d103      	bne.n	8002af6 <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002aee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002af2:	68ca      	ldr	r2, [r1, #12]
 8002af4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002af6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002afa:	694a      	ldr	r2, [r1, #20]
 8002afc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002afe:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b00:	688b      	ldr	r3, [r1, #8]
 8002b02:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002b04:	680b      	ldr	r3, [r1, #0]
 8002b06:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b08:	4b09      	ldr	r3, [pc, #36]	@ (8002b30 <TIM_Base_SetConfig+0xd4>)
 8002b0a:	4298      	cmp	r0, r3
 8002b0c:	d003      	beq.n	8002b16 <TIM_Base_SetConfig+0xba>
 8002b0e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002b12:	4298      	cmp	r0, r3
 8002b14:	d101      	bne.n	8002b1a <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 8002b16:	690b      	ldr	r3, [r1, #16]
 8002b18:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b1e:	6903      	ldr	r3, [r0, #16]
 8002b20:	f013 0f01 	tst.w	r3, #1
 8002b24:	d003      	beq.n	8002b2e <TIM_Base_SetConfig+0xd2>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b26:	6903      	ldr	r3, [r0, #16]
 8002b28:	f023 0301 	bic.w	r3, r3, #1
 8002b2c:	6103      	str	r3, [r0, #16]
}
 8002b2e:	4770      	bx	lr
 8002b30:	40010000 	.word	0x40010000

08002b34 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002b34:	b340      	cbz	r0, 8002b88 <HAL_TIM_Base_Init+0x54>
{
 8002b36:	b510      	push	{r4, lr}
 8002b38:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002b3a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002b3e:	b1f3      	cbz	r3, 8002b7e <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002b40:	2302      	movs	r3, #2
 8002b42:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b46:	4621      	mov	r1, r4
 8002b48:	f851 0b04 	ldr.w	r0, [r1], #4
 8002b4c:	f7ff ff86 	bl	8002a5c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b50:	2301      	movs	r3, #1
 8002b52:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b56:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002b5a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002b5e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002b62:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b66:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002b6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002b6e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002b72:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002b76:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8002b7a:	2000      	movs	r0, #0
}
 8002b7c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002b7e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002b82:	f7fe fb55 	bl	8001230 <HAL_TIM_Base_MspInit>
 8002b86:	e7db      	b.n	8002b40 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002b88:	2001      	movs	r0, #1
}
 8002b8a:	4770      	bx	lr

08002b8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b8c:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b8e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b90:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b94:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b9e:	6082      	str	r2, [r0, #8]
}
 8002ba0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002ba6:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d078      	beq.n	8002ca0 <HAL_TIM_ConfigClockSource+0xfa>
{
 8002bae:	b510      	push	{r4, lr}
 8002bb0:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002bbe:	6802      	ldr	r2, [r0, #0]
 8002bc0:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bc2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002bc6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002bca:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002bcc:	680b      	ldr	r3, [r1, #0]
 8002bce:	2b60      	cmp	r3, #96	@ 0x60
 8002bd0:	d04c      	beq.n	8002c6c <HAL_TIM_ConfigClockSource+0xc6>
 8002bd2:	d829      	bhi.n	8002c28 <HAL_TIM_ConfigClockSource+0x82>
 8002bd4:	2b40      	cmp	r3, #64	@ 0x40
 8002bd6:	d054      	beq.n	8002c82 <HAL_TIM_ConfigClockSource+0xdc>
 8002bd8:	d90c      	bls.n	8002bf4 <HAL_TIM_ConfigClockSource+0x4e>
 8002bda:	2b50      	cmp	r3, #80	@ 0x50
 8002bdc:	d122      	bne.n	8002c24 <HAL_TIM_ConfigClockSource+0x7e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bde:	68ca      	ldr	r2, [r1, #12]
 8002be0:	6849      	ldr	r1, [r1, #4]
 8002be2:	6800      	ldr	r0, [r0, #0]
 8002be4:	f7ff fe13 	bl	800280e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002be8:	2150      	movs	r1, #80	@ 0x50
 8002bea:	6820      	ldr	r0, [r4, #0]
 8002bec:	f7ff fe36 	bl	800285c <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002bf0:	2000      	movs	r0, #0
      break;
 8002bf2:	e005      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002bf4:	2b20      	cmp	r3, #32
 8002bf6:	d00d      	beq.n	8002c14 <HAL_TIM_ConfigClockSource+0x6e>
 8002bf8:	d909      	bls.n	8002c0e <HAL_TIM_ConfigClockSource+0x68>
 8002bfa:	2b30      	cmp	r3, #48	@ 0x30
 8002bfc:	d00a      	beq.n	8002c14 <HAL_TIM_ConfigClockSource+0x6e>
      status = HAL_ERROR;
 8002bfe:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8002c00:	2301      	movs	r3, #1
 8002c02:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8002c06:	2300      	movs	r3, #0
 8002c08:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002c0c:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8002c0e:	b10b      	cbz	r3, 8002c14 <HAL_TIM_ConfigClockSource+0x6e>
 8002c10:	2b10      	cmp	r3, #16
 8002c12:	d105      	bne.n	8002c20 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c14:	4619      	mov	r1, r3
 8002c16:	6820      	ldr	r0, [r4, #0]
 8002c18:	f7ff fe20 	bl	800285c <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002c1c:	2000      	movs	r0, #0
      break;
 8002c1e:	e7ef      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8002c20:	2001      	movs	r0, #1
 8002c22:	e7ed      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x5a>
 8002c24:	2001      	movs	r0, #1
 8002c26:	e7eb      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002c28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c2c:	d034      	beq.n	8002c98 <HAL_TIM_ConfigClockSource+0xf2>
 8002c2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c32:	d10c      	bne.n	8002c4e <HAL_TIM_ConfigClockSource+0xa8>
      TIM_ETR_SetConfig(htim->Instance,
 8002c34:	68cb      	ldr	r3, [r1, #12]
 8002c36:	684a      	ldr	r2, [r1, #4]
 8002c38:	6889      	ldr	r1, [r1, #8]
 8002c3a:	6800      	ldr	r0, [r0, #0]
 8002c3c:	f7ff ffa6 	bl	8002b8c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c40:	6822      	ldr	r2, [r4, #0]
 8002c42:	6893      	ldr	r3, [r2, #8]
 8002c44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c48:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002c4a:	2000      	movs	r0, #0
      break;
 8002c4c:	e7d8      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002c4e:	2b70      	cmp	r3, #112	@ 0x70
 8002c50:	d124      	bne.n	8002c9c <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8002c52:	68cb      	ldr	r3, [r1, #12]
 8002c54:	684a      	ldr	r2, [r1, #4]
 8002c56:	6889      	ldr	r1, [r1, #8]
 8002c58:	6800      	ldr	r0, [r0, #0]
 8002c5a:	f7ff ff97 	bl	8002b8c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c5e:	6822      	ldr	r2, [r4, #0]
 8002c60:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c62:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002c66:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002c68:	2000      	movs	r0, #0
      break;
 8002c6a:	e7c9      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c6c:	68ca      	ldr	r2, [r1, #12]
 8002c6e:	6849      	ldr	r1, [r1, #4]
 8002c70:	6800      	ldr	r0, [r0, #0]
 8002c72:	f7ff fddf 	bl	8002834 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c76:	2160      	movs	r1, #96	@ 0x60
 8002c78:	6820      	ldr	r0, [r4, #0]
 8002c7a:	f7ff fdef 	bl	800285c <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002c7e:	2000      	movs	r0, #0
      break;
 8002c80:	e7be      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x5a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c82:	68ca      	ldr	r2, [r1, #12]
 8002c84:	6849      	ldr	r1, [r1, #4]
 8002c86:	6800      	ldr	r0, [r0, #0]
 8002c88:	f7ff fdc1 	bl	800280e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c8c:	2140      	movs	r1, #64	@ 0x40
 8002c8e:	6820      	ldr	r0, [r4, #0]
 8002c90:	f7ff fde4 	bl	800285c <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8002c94:	2000      	movs	r0, #0
      break;
 8002c96:	e7b3      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8002c98:	2000      	movs	r0, #0
 8002c9a:	e7b1      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8002c9c:	2001      	movs	r0, #1
 8002c9e:	e7af      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8002ca0:	2002      	movs	r0, #2
}
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ca4:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8002ca8:	2a01      	cmp	r2, #1
 8002caa:	d03d      	beq.n	8002d28 <HAL_TIMEx_MasterConfigSynchronization+0x84>
{
 8002cac:	b410      	push	{r4}
 8002cae:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cbc:	6802      	ldr	r2, [r0, #0]
 8002cbe:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cc0:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cc2:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cc6:	6808      	ldr	r0, [r1, #0]
 8002cc8:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ccc:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	4816      	ldr	r0, [pc, #88]	@ (8002d2c <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8002cd2:	4282      	cmp	r2, r0
 8002cd4:	d01a      	beq.n	8002d0c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002cd6:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002cda:	d017      	beq.n	8002d0c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002cdc:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8002ce0:	4282      	cmp	r2, r0
 8002ce2:	d013      	beq.n	8002d0c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002ce4:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8002ce8:	4282      	cmp	r2, r0
 8002cea:	d00f      	beq.n	8002d0c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002cec:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8002cf0:	4282      	cmp	r2, r0
 8002cf2:	d00b      	beq.n	8002d0c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002cf4:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 8002cf8:	4282      	cmp	r2, r0
 8002cfa:	d007      	beq.n	8002d0c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002cfc:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 8002d00:	4282      	cmp	r2, r0
 8002d02:	d003      	beq.n	8002d0c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8002d04:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8002d08:	4282      	cmp	r2, r0
 8002d0a:	d104      	bne.n	8002d16 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d0c:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d10:	6849      	ldr	r1, [r1, #4]
 8002d12:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d14:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d1c:	2000      	movs	r0, #0
 8002d1e:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8002d22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d26:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002d28:	2002      	movs	r0, #2
}
 8002d2a:	4770      	bx	lr
 8002d2c:	40010000 	.word	0x40010000

08002d30 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d30:	4770      	bx	lr

08002d32 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d32:	4770      	bx	lr

08002d34 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d34:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d36:	f102 030c 	add.w	r3, r2, #12
 8002d3a:	e853 3f00 	ldrex	r3, [r3]
 8002d3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d42:	320c      	adds	r2, #12
 8002d44:	e842 3100 	strex	r1, r3, [r2]
 8002d48:	2900      	cmp	r1, #0
 8002d4a:	d1f3      	bne.n	8002d34 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d4c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d4e:	f102 0314 	add.w	r3, r2, #20
 8002d52:	e853 3f00 	ldrex	r3, [r3]
 8002d56:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5a:	3214      	adds	r2, #20
 8002d5c:	e842 3100 	strex	r1, r3, [r2]
 8002d60:	2900      	cmp	r1, #0
 8002d62:	d1f3      	bne.n	8002d4c <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d64:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d005      	beq.n	8002d76 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d6a:	2320      	movs	r3, #32
 8002d6c:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d70:	2300      	movs	r3, #0
 8002d72:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8002d74:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d76:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d78:	f102 030c 	add.w	r3, r2, #12
 8002d7c:	e853 3f00 	ldrex	r3, [r3]
 8002d80:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d84:	320c      	adds	r2, #12
 8002d86:	e842 3100 	strex	r1, r3, [r2]
 8002d8a:	2900      	cmp	r1, #0
 8002d8c:	d1f3      	bne.n	8002d76 <UART_EndRxTransfer+0x42>
 8002d8e:	e7ec      	b.n	8002d6a <UART_EndRxTransfer+0x36>

08002d90 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d90:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b21      	cmp	r3, #33	@ 0x21
 8002d98:	d001      	beq.n	8002d9e <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002d9a:	2002      	movs	r0, #2
  }
}
 8002d9c:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d9e:	6883      	ldr	r3, [r0, #8]
 8002da0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002da4:	d017      	beq.n	8002dd6 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002da6:	6a03      	ldr	r3, [r0, #32]
 8002da8:	1c5a      	adds	r2, r3, #1
 8002daa:	6202      	str	r2, [r0, #32]
 8002dac:	781a      	ldrb	r2, [r3, #0]
 8002dae:	6803      	ldr	r3, [r0, #0]
 8002db0:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8002db2:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8002dbc:	b94b      	cbnz	r3, 8002dd2 <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002dbe:	6802      	ldr	r2, [r0, #0]
 8002dc0:	68d3      	ldr	r3, [r2, #12]
 8002dc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002dc6:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002dc8:	6802      	ldr	r2, [r0, #0]
 8002dca:	68d3      	ldr	r3, [r2, #12]
 8002dcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002dd0:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dd6:	6903      	ldr	r3, [r0, #16]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1e4      	bne.n	8002da6 <UART_Transmit_IT+0x16>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002ddc:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	6802      	ldr	r2, [r0, #0]
 8002de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002de6:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8002de8:	6a03      	ldr	r3, [r0, #32]
 8002dea:	3302      	adds	r3, #2
 8002dec:	6203      	str	r3, [r0, #32]
 8002dee:	e7e0      	b.n	8002db2 <UART_Transmit_IT+0x22>

08002df0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002df0:	b510      	push	{r4, lr}
 8002df2:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002df4:	6802      	ldr	r2, [r0, #0]
 8002df6:	6913      	ldr	r3, [r2, #16]
 8002df8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002dfc:	68c1      	ldr	r1, [r0, #12]
 8002dfe:	430b      	orrs	r3, r1
 8002e00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e02:	6883      	ldr	r3, [r0, #8]
 8002e04:	6902      	ldr	r2, [r0, #16]
 8002e06:	431a      	orrs	r2, r3
 8002e08:	6943      	ldr	r3, [r0, #20]
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	69c3      	ldr	r3, [r0, #28]
 8002e0e:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8002e10:	6801      	ldr	r1, [r0, #0]
 8002e12:	68cb      	ldr	r3, [r1, #12]
 8002e14:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002e18:	f023 030c 	bic.w	r3, r3, #12
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e20:	6802      	ldr	r2, [r0, #0]
 8002e22:	6953      	ldr	r3, [r2, #20]
 8002e24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e28:	6981      	ldr	r1, [r0, #24]
 8002e2a:	430b      	orrs	r3, r1
 8002e2c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e2e:	6803      	ldr	r3, [r0, #0]
 8002e30:	4a31      	ldr	r2, [pc, #196]	@ (8002ef8 <UART_SetConfig+0x108>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d006      	beq.n	8002e44 <UART_SetConfig+0x54>
 8002e36:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d002      	beq.n	8002e44 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e3e:	f7ff fc29 	bl	8002694 <HAL_RCC_GetPCLK1Freq>
 8002e42:	e001      	b.n	8002e48 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e44:	f7ff fc36 	bl	80026b4 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e48:	69e3      	ldr	r3, [r4, #28]
 8002e4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e4e:	d029      	beq.n	8002ea4 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e50:	2100      	movs	r1, #0
 8002e52:	1803      	adds	r3, r0, r0
 8002e54:	4149      	adcs	r1, r1
 8002e56:	181b      	adds	r3, r3, r0
 8002e58:	f141 0100 	adc.w	r1, r1, #0
 8002e5c:	00c9      	lsls	r1, r1, #3
 8002e5e:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	1818      	adds	r0, r3, r0
 8002e66:	6863      	ldr	r3, [r4, #4]
 8002e68:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002e6c:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8002e70:	f141 0100 	adc.w	r1, r1, #0
 8002e74:	f7fd fa0c 	bl	8000290 <__aeabi_uldivmod>
 8002e78:	4a20      	ldr	r2, [pc, #128]	@ (8002efc <UART_SetConfig+0x10c>)
 8002e7a:	fba2 3100 	umull	r3, r1, r2, r0
 8002e7e:	0949      	lsrs	r1, r1, #5
 8002e80:	2364      	movs	r3, #100	@ 0x64
 8002e82:	fb03 0311 	mls	r3, r3, r1, r0
 8002e86:	011b      	lsls	r3, r3, #4
 8002e88:	3332      	adds	r3, #50	@ 0x32
 8002e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8e:	095b      	lsrs	r3, r3, #5
 8002e90:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002e94:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002e98:	f003 030f 	and.w	r3, r3, #15
 8002e9c:	6821      	ldr	r1, [r4, #0]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	608b      	str	r3, [r1, #8]
  }
}
 8002ea2:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	1802      	adds	r2, r0, r0
 8002ea8:	eb43 0103 	adc.w	r1, r3, r3
 8002eac:	1812      	adds	r2, r2, r0
 8002eae:	f141 0100 	adc.w	r1, r1, #0
 8002eb2:	00c9      	lsls	r1, r1, #3
 8002eb4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002eb8:	00d2      	lsls	r2, r2, #3
 8002eba:	1810      	adds	r0, r2, r0
 8002ebc:	f141 0100 	adc.w	r1, r1, #0
 8002ec0:	6862      	ldr	r2, [r4, #4]
 8002ec2:	1892      	adds	r2, r2, r2
 8002ec4:	415b      	adcs	r3, r3
 8002ec6:	f7fd f9e3 	bl	8000290 <__aeabi_uldivmod>
 8002eca:	4a0c      	ldr	r2, [pc, #48]	@ (8002efc <UART_SetConfig+0x10c>)
 8002ecc:	fba2 3100 	umull	r3, r1, r2, r0
 8002ed0:	0949      	lsrs	r1, r1, #5
 8002ed2:	2364      	movs	r3, #100	@ 0x64
 8002ed4:	fb03 0311 	mls	r3, r3, r1, r0
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	3332      	adds	r3, #50	@ 0x32
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	095b      	lsrs	r3, r3, #5
 8002ee2:	005a      	lsls	r2, r3, #1
 8002ee4:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8002ee8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	6821      	ldr	r1, [r4, #0]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	608b      	str	r3, [r1, #8]
 8002ef6:	e7d4      	b.n	8002ea2 <UART_SetConfig+0xb2>
 8002ef8:	40011000 	.word	0x40011000
 8002efc:	51eb851f 	.word	0x51eb851f

08002f00 <UART_WaitOnFlagUntilTimeout>:
{
 8002f00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f04:	b083      	sub	sp, #12
 8002f06:	4605      	mov	r5, r0
 8002f08:	460e      	mov	r6, r1
 8002f0a:	4617      	mov	r7, r2
 8002f0c:	4699      	mov	r9, r3
 8002f0e:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f12:	682b      	ldr	r3, [r5, #0]
 8002f14:	681c      	ldr	r4, [r3, #0]
 8002f16:	ea36 0404 	bics.w	r4, r6, r4
 8002f1a:	bf0c      	ite	eq
 8002f1c:	2401      	moveq	r4, #1
 8002f1e:	2400      	movne	r4, #0
 8002f20:	42bc      	cmp	r4, r7
 8002f22:	d128      	bne.n	8002f76 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8002f24:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002f28:	d0f3      	beq.n	8002f12 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f2a:	f7fe fad7 	bl	80014dc <HAL_GetTick>
 8002f2e:	eba0 0009 	sub.w	r0, r0, r9
 8002f32:	4540      	cmp	r0, r8
 8002f34:	d823      	bhi.n	8002f7e <UART_WaitOnFlagUntilTimeout+0x7e>
 8002f36:	f1b8 0f00 	cmp.w	r8, #0
 8002f3a:	d022      	beq.n	8002f82 <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f3c:	682b      	ldr	r3, [r5, #0]
 8002f3e:	68da      	ldr	r2, [r3, #12]
 8002f40:	f012 0f04 	tst.w	r2, #4
 8002f44:	d0e5      	beq.n	8002f12 <UART_WaitOnFlagUntilTimeout+0x12>
 8002f46:	2e80      	cmp	r6, #128	@ 0x80
 8002f48:	d0e3      	beq.n	8002f12 <UART_WaitOnFlagUntilTimeout+0x12>
 8002f4a:	2e40      	cmp	r6, #64	@ 0x40
 8002f4c:	d0e1      	beq.n	8002f12 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	f012 0f08 	tst.w	r2, #8
 8002f54:	d0dd      	beq.n	8002f12 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002f56:	2400      	movs	r4, #0
 8002f58:	9401      	str	r4, [sp, #4]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	9201      	str	r2, [sp, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	9301      	str	r3, [sp, #4]
 8002f62:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8002f64:	4628      	mov	r0, r5
 8002f66:	f7ff fee5 	bl	8002d34 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f6a:	2308      	movs	r3, #8
 8002f6c:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8002f6e:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8002f72:	2001      	movs	r0, #1
 8002f74:	e000      	b.n	8002f78 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8002f76:	2000      	movs	r0, #0
}
 8002f78:	b003      	add	sp, #12
 8002f7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8002f7e:	2003      	movs	r0, #3
 8002f80:	e7fa      	b.n	8002f78 <UART_WaitOnFlagUntilTimeout+0x78>
 8002f82:	2003      	movs	r0, #3
 8002f84:	e7f8      	b.n	8002f78 <UART_WaitOnFlagUntilTimeout+0x78>

08002f86 <HAL_UART_Init>:
  if (huart == NULL)
 8002f86:	b360      	cbz	r0, 8002fe2 <HAL_UART_Init+0x5c>
{
 8002f88:	b510      	push	{r4, lr}
 8002f8a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002f8c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002f90:	b313      	cbz	r3, 8002fd8 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8002f92:	2324      	movs	r3, #36	@ 0x24
 8002f94:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8002f98:	6822      	ldr	r2, [r4, #0]
 8002f9a:	68d3      	ldr	r3, [r2, #12]
 8002f9c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002fa0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	f7ff ff24 	bl	8002df0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fa8:	6822      	ldr	r2, [r4, #0]
 8002faa:	6913      	ldr	r3, [r2, #16]
 8002fac:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8002fb0:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fb2:	6822      	ldr	r2, [r4, #0]
 8002fb4:	6953      	ldr	r3, [r2, #20]
 8002fb6:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8002fba:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002fbc:	6822      	ldr	r2, [r4, #0]
 8002fbe:	68d3      	ldr	r3, [r2, #12]
 8002fc0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002fc4:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002fca:	2320      	movs	r3, #32
 8002fcc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002fd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fd4:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8002fd6:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002fd8:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8002fdc:	f7fe f940 	bl	8001260 <HAL_UART_MspInit>
 8002fe0:	e7d7      	b.n	8002f92 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002fe2:	2001      	movs	r0, #1
}
 8002fe4:	4770      	bx	lr

08002fe6 <HAL_UART_Transmit>:
{
 8002fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002fee:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b20      	cmp	r3, #32
 8002ff6:	d156      	bne.n	80030a6 <HAL_UART_Transmit+0xc0>
 8002ff8:	4604      	mov	r4, r0
 8002ffa:	460d      	mov	r5, r1
 8002ffc:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002ffe:	2900      	cmp	r1, #0
 8003000:	d055      	beq.n	80030ae <HAL_UART_Transmit+0xc8>
 8003002:	b90a      	cbnz	r2, 8003008 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8003004:	2001      	movs	r0, #1
 8003006:	e04f      	b.n	80030a8 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003008:	2300      	movs	r3, #0
 800300a:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800300c:	2321      	movs	r3, #33	@ 0x21
 800300e:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8003012:	f7fe fa63 	bl	80014dc <HAL_GetTick>
 8003016:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8003018:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 800301c:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003020:	68a3      	ldr	r3, [r4, #8]
 8003022:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003026:	d002      	beq.n	800302e <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8003028:	f04f 0800 	mov.w	r8, #0
 800302c:	e014      	b.n	8003058 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800302e:	6923      	ldr	r3, [r4, #16]
 8003030:	b32b      	cbz	r3, 800307e <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 8003032:	f04f 0800 	mov.w	r8, #0
 8003036:	e00f      	b.n	8003058 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8003038:	2320      	movs	r3, #32
 800303a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 800303e:	2003      	movs	r0, #3
 8003040:	e032      	b.n	80030a8 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003042:	f838 3b02 	ldrh.w	r3, [r8], #2
 8003046:	6822      	ldr	r2, [r4, #0]
 8003048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800304c:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 800304e:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8003050:	b292      	uxth	r2, r2
 8003052:	3a01      	subs	r2, #1
 8003054:	b292      	uxth	r2, r2
 8003056:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003058:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 800305a:	b29b      	uxth	r3, r3
 800305c:	b193      	cbz	r3, 8003084 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800305e:	9600      	str	r6, [sp, #0]
 8003060:	463b      	mov	r3, r7
 8003062:	2200      	movs	r2, #0
 8003064:	2180      	movs	r1, #128	@ 0x80
 8003066:	4620      	mov	r0, r4
 8003068:	f7ff ff4a 	bl	8002f00 <UART_WaitOnFlagUntilTimeout>
 800306c:	2800      	cmp	r0, #0
 800306e:	d1e3      	bne.n	8003038 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8003070:	2d00      	cmp	r5, #0
 8003072:	d0e6      	beq.n	8003042 <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003074:	f815 2b01 	ldrb.w	r2, [r5], #1
 8003078:	6823      	ldr	r3, [r4, #0]
 800307a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800307c:	e7e7      	b.n	800304e <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 800307e:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8003080:	2500      	movs	r5, #0
 8003082:	e7e9      	b.n	8003058 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003084:	9600      	str	r6, [sp, #0]
 8003086:	463b      	mov	r3, r7
 8003088:	2200      	movs	r2, #0
 800308a:	2140      	movs	r1, #64	@ 0x40
 800308c:	4620      	mov	r0, r4
 800308e:	f7ff ff37 	bl	8002f00 <UART_WaitOnFlagUntilTimeout>
 8003092:	b918      	cbnz	r0, 800309c <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8003094:	2320      	movs	r3, #32
 8003096:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 800309a:	e005      	b.n	80030a8 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 800309c:	2320      	movs	r3, #32
 800309e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 80030a2:	2003      	movs	r0, #3
 80030a4:	e000      	b.n	80030a8 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 80030a6:	2002      	movs	r0, #2
}
 80030a8:	b002      	add	sp, #8
 80030aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80030ae:	2001      	movs	r0, #1
 80030b0:	e7fa      	b.n	80030a8 <HAL_UART_Transmit+0xc2>

080030b2 <HAL_UART_TxCpltCallback>:
}
 80030b2:	4770      	bx	lr

080030b4 <UART_EndTransmit_IT>:
{
 80030b4:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80030b6:	6801      	ldr	r1, [r0, #0]
 80030b8:	68ca      	ldr	r2, [r1, #12]
 80030ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030be:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 80030c0:	2220      	movs	r2, #32
 80030c2:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 80030c6:	f7ff fff4 	bl	80030b2 <HAL_UART_TxCpltCallback>
}
 80030ca:	2000      	movs	r0, #0
 80030cc:	bd08      	pop	{r3, pc}

080030ce <HAL_UART_RxCpltCallback>:
}
 80030ce:	4770      	bx	lr

080030d0 <HAL_UART_ErrorCallback>:
}
 80030d0:	4770      	bx	lr

080030d2 <UART_DMAAbortOnError>:
{
 80030d2:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030d4:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80030da:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 80030dc:	f7ff fff8 	bl	80030d0 <HAL_UART_ErrorCallback>
}
 80030e0:	bd08      	pop	{r3, pc}

080030e2 <HAL_UARTEx_RxEventCallback>:
}
 80030e2:	4770      	bx	lr

080030e4 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030e4:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b22      	cmp	r3, #34	@ 0x22
 80030ec:	d169      	bne.n	80031c2 <UART_Receive_IT+0xde>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030ee:	6883      	ldr	r3, [r0, #8]
 80030f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030f4:	d04f      	beq.n	8003196 <UART_Receive_IT+0xb2>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80030f6:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80030f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030fc:	d004      	beq.n	8003108 <UART_Receive_IT+0x24>
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d156      	bne.n	80031b0 <UART_Receive_IT+0xcc>
 8003102:	6903      	ldr	r3, [r0, #16]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d153      	bne.n	80031b0 <UART_Receive_IT+0xcc>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003108:	6803      	ldr	r3, [r0, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 800310e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003110:	3301      	adds	r3, #1
 8003112:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8003114:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8003116:	b29b      	uxth	r3, r3
 8003118:	3b01      	subs	r3, #1
 800311a:	b29b      	uxth	r3, r3
 800311c:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 800311e:	2b00      	cmp	r3, #0
 8003120:	d151      	bne.n	80031c6 <UART_Receive_IT+0xe2>
{
 8003122:	b500      	push	{lr}
 8003124:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003126:	6802      	ldr	r2, [r0, #0]
 8003128:	68d3      	ldr	r3, [r2, #12]
 800312a:	f023 0320 	bic.w	r3, r3, #32
 800312e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003130:	6802      	ldr	r2, [r0, #0]
 8003132:	68d3      	ldr	r3, [r2, #12]
 8003134:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003138:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800313a:	6802      	ldr	r2, [r0, #0]
 800313c:	6953      	ldr	r3, [r2, #20]
 800313e:	f023 0301 	bic.w	r3, r3, #1
 8003142:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003144:	2320      	movs	r3, #32
 8003146:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800314a:	2300      	movs	r3, #0
 800314c:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800314e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003150:	2b01      	cmp	r3, #1
 8003152:	d133      	bne.n	80031bc <UART_Receive_IT+0xd8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003154:	2300      	movs	r3, #0
 8003156:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003158:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315a:	f102 030c 	add.w	r3, r2, #12
 800315e:	e853 3f00 	ldrex	r3, [r3]
 8003162:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003166:	320c      	adds	r2, #12
 8003168:	e842 3100 	strex	r1, r3, [r2]
 800316c:	2900      	cmp	r1, #0
 800316e:	d1f3      	bne.n	8003158 <UART_Receive_IT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003170:	6803      	ldr	r3, [r0, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	f012 0f10 	tst.w	r2, #16
 8003178:	d006      	beq.n	8003188 <UART_Receive_IT+0xa4>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800317a:	2200      	movs	r2, #0
 800317c:	9201      	str	r2, [sp, #4]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	9201      	str	r2, [sp, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	9301      	str	r3, [sp, #4]
 8003186:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003188:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800318a:	f7ff ffaa 	bl	80030e2 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 800318e:	2000      	movs	r0, #0
}
 8003190:	b003      	add	sp, #12
 8003192:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003196:	6902      	ldr	r2, [r0, #16]
 8003198:	2a00      	cmp	r2, #0
 800319a:	d1ac      	bne.n	80030f6 <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800319c:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800319e:	6803      	ldr	r3, [r0, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031a6:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80031a8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80031aa:	3302      	adds	r3, #2
 80031ac:	6283      	str	r3, [r0, #40]	@ 0x28
 80031ae:	e7b1      	b.n	8003114 <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031b0:	6803      	ldr	r3, [r0, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031b8:	7013      	strb	r3, [r2, #0]
 80031ba:	e7a8      	b.n	800310e <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 80031bc:	f7ff ff87 	bl	80030ce <HAL_UART_RxCpltCallback>
 80031c0:	e7e5      	b.n	800318e <UART_Receive_IT+0xaa>
    return HAL_BUSY;
 80031c2:	2002      	movs	r0, #2
 80031c4:	4770      	bx	lr
    return HAL_OK;
 80031c6:	2000      	movs	r0, #0
}
 80031c8:	4770      	bx	lr
	...

080031cc <HAL_UART_IRQHandler>:
{
 80031cc:	b510      	push	{r4, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031d2:	6802      	ldr	r2, [r0, #0]
 80031d4:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031d6:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031d8:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 80031da:	f013 0f0f 	tst.w	r3, #15
 80031de:	d109      	bne.n	80031f4 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031e0:	f013 0f20 	tst.w	r3, #32
 80031e4:	d00c      	beq.n	8003200 <HAL_UART_IRQHandler+0x34>
 80031e6:	f010 0f20 	tst.w	r0, #32
 80031ea:	d009      	beq.n	8003200 <HAL_UART_IRQHandler+0x34>
      UART_Receive_IT(huart);
 80031ec:	4620      	mov	r0, r4
 80031ee:	f7ff ff79 	bl	80030e4 <UART_Receive_IT>
      return;
 80031f2:	e016      	b.n	8003222 <HAL_UART_IRQHandler+0x56>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80031f4:	f011 0101 	ands.w	r1, r1, #1
 80031f8:	d115      	bne.n	8003226 <HAL_UART_IRQHandler+0x5a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80031fa:	f410 7f90 	tst.w	r0, #288	@ 0x120
 80031fe:	d112      	bne.n	8003226 <HAL_UART_IRQHandler+0x5a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003200:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003202:	2901      	cmp	r1, #1
 8003204:	d079      	beq.n	80032fa <HAL_UART_IRQHandler+0x12e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003206:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800320a:	d003      	beq.n	8003214 <HAL_UART_IRQHandler+0x48>
 800320c:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8003210:	f040 8114 	bne.w	800343c <HAL_UART_IRQHandler+0x270>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003214:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003218:	d003      	beq.n	8003222 <HAL_UART_IRQHandler+0x56>
 800321a:	f010 0f40 	tst.w	r0, #64	@ 0x40
 800321e:	f040 8111 	bne.w	8003444 <HAL_UART_IRQHandler+0x278>
}
 8003222:	b002      	add	sp, #8
 8003224:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003226:	f013 0f01 	tst.w	r3, #1
 800322a:	d006      	beq.n	800323a <HAL_UART_IRQHandler+0x6e>
 800322c:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8003230:	d003      	beq.n	800323a <HAL_UART_IRQHandler+0x6e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003232:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003234:	f042 0201 	orr.w	r2, r2, #1
 8003238:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800323a:	f013 0f04 	tst.w	r3, #4
 800323e:	d004      	beq.n	800324a <HAL_UART_IRQHandler+0x7e>
 8003240:	b119      	cbz	r1, 800324a <HAL_UART_IRQHandler+0x7e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003242:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003244:	f042 0202 	orr.w	r2, r2, #2
 8003248:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800324a:	f013 0f02 	tst.w	r3, #2
 800324e:	d004      	beq.n	800325a <HAL_UART_IRQHandler+0x8e>
 8003250:	b119      	cbz	r1, 800325a <HAL_UART_IRQHandler+0x8e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003252:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003254:	f042 0204 	orr.w	r2, r2, #4
 8003258:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800325a:	f013 0f08 	tst.w	r3, #8
 800325e:	d007      	beq.n	8003270 <HAL_UART_IRQHandler+0xa4>
 8003260:	f010 0f20 	tst.w	r0, #32
 8003264:	d100      	bne.n	8003268 <HAL_UART_IRQHandler+0x9c>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003266:	b119      	cbz	r1, 8003270 <HAL_UART_IRQHandler+0xa4>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003268:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800326a:	f042 0208 	orr.w	r2, r2, #8
 800326e:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003270:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003272:	2a00      	cmp	r2, #0
 8003274:	d0d5      	beq.n	8003222 <HAL_UART_IRQHandler+0x56>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003276:	f013 0f20 	tst.w	r3, #32
 800327a:	d002      	beq.n	8003282 <HAL_UART_IRQHandler+0xb6>
 800327c:	f010 0f20 	tst.w	r0, #32
 8003280:	d129      	bne.n	80032d6 <HAL_UART_IRQHandler+0x10a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003282:	6823      	ldr	r3, [r4, #0]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800328a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800328c:	f012 0f08 	tst.w	r2, #8
 8003290:	d100      	bne.n	8003294 <HAL_UART_IRQHandler+0xc8>
 8003292:	b363      	cbz	r3, 80032ee <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 8003294:	4620      	mov	r0, r4
 8003296:	f7ff fd4d 	bl	8002d34 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800329a:	6823      	ldr	r3, [r4, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80032a2:	d020      	beq.n	80032e6 <HAL_UART_IRQHandler+0x11a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032a4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a6:	f102 0314 	add.w	r3, r2, #20
 80032aa:	e853 3f00 	ldrex	r3, [r3]
 80032ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b2:	3214      	adds	r2, #20
 80032b4:	e842 3100 	strex	r1, r3, [r2]
 80032b8:	2900      	cmp	r1, #0
 80032ba:	d1f3      	bne.n	80032a4 <HAL_UART_IRQHandler+0xd8>
          if (huart->hdmarx != NULL)
 80032bc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80032be:	b173      	cbz	r3, 80032de <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032c0:	4a62      	ldr	r2, [pc, #392]	@ (800344c <HAL_UART_IRQHandler+0x280>)
 80032c2:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032c4:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80032c6:	f7fe fda2 	bl	8001e0e <HAL_DMA_Abort_IT>
 80032ca:	2800      	cmp	r0, #0
 80032cc:	d0a9      	beq.n	8003222 <HAL_UART_IRQHandler+0x56>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032ce:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80032d0:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80032d2:	4798      	blx	r3
 80032d4:	e7a5      	b.n	8003222 <HAL_UART_IRQHandler+0x56>
        UART_Receive_IT(huart);
 80032d6:	4620      	mov	r0, r4
 80032d8:	f7ff ff04 	bl	80030e4 <UART_Receive_IT>
 80032dc:	e7d1      	b.n	8003282 <HAL_UART_IRQHandler+0xb6>
            HAL_UART_ErrorCallback(huart);
 80032de:	4620      	mov	r0, r4
 80032e0:	f7ff fef6 	bl	80030d0 <HAL_UART_ErrorCallback>
 80032e4:	e79d      	b.n	8003222 <HAL_UART_IRQHandler+0x56>
          HAL_UART_ErrorCallback(huart);
 80032e6:	4620      	mov	r0, r4
 80032e8:	f7ff fef2 	bl	80030d0 <HAL_UART_ErrorCallback>
 80032ec:	e799      	b.n	8003222 <HAL_UART_IRQHandler+0x56>
        HAL_UART_ErrorCallback(huart);
 80032ee:	4620      	mov	r0, r4
 80032f0:	f7ff feee 	bl	80030d0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f4:	2300      	movs	r3, #0
 80032f6:	6463      	str	r3, [r4, #68]	@ 0x44
    return;
 80032f8:	e793      	b.n	8003222 <HAL_UART_IRQHandler+0x56>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80032fa:	f013 0f10 	tst.w	r3, #16
 80032fe:	d082      	beq.n	8003206 <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003300:	f010 0f10 	tst.w	r0, #16
 8003304:	f43f af7f 	beq.w	8003206 <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003308:	2300      	movs	r3, #0
 800330a:	9301      	str	r3, [sp, #4]
 800330c:	6813      	ldr	r3, [r2, #0]
 800330e:	9301      	str	r3, [sp, #4]
 8003310:	6853      	ldr	r3, [r2, #4]
 8003312:	9301      	str	r3, [sp, #4]
 8003314:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003316:	6953      	ldr	r3, [r2, #20]
 8003318:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800331c:	d052      	beq.n	80033c4 <HAL_UART_IRQHandler+0x1f8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800331e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003320:	6813      	ldr	r3, [r2, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8003326:	2b00      	cmp	r3, #0
 8003328:	f43f af7b 	beq.w	8003222 <HAL_UART_IRQHandler+0x56>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800332c:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800332e:	4299      	cmp	r1, r3
 8003330:	f67f af77 	bls.w	8003222 <HAL_UART_IRQHandler+0x56>
        huart->RxXferCount = nb_remaining_rx_data;
 8003334:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003336:	69d3      	ldr	r3, [r2, #28]
 8003338:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800333c:	d037      	beq.n	80033ae <HAL_UART_IRQHandler+0x1e2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800333e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003340:	f102 030c 	add.w	r3, r2, #12
 8003344:	e853 3f00 	ldrex	r3, [r3]
 8003348:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334c:	320c      	adds	r2, #12
 800334e:	e842 3100 	strex	r1, r3, [r2]
 8003352:	2900      	cmp	r1, #0
 8003354:	d1f3      	bne.n	800333e <HAL_UART_IRQHandler+0x172>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003356:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003358:	f102 0314 	add.w	r3, r2, #20
 800335c:	e853 3f00 	ldrex	r3, [r3]
 8003360:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003364:	3214      	adds	r2, #20
 8003366:	e842 3100 	strex	r1, r3, [r2]
 800336a:	2900      	cmp	r1, #0
 800336c:	d1f3      	bne.n	8003356 <HAL_UART_IRQHandler+0x18a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800336e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003370:	f102 0314 	add.w	r3, r2, #20
 8003374:	e853 3f00 	ldrex	r3, [r3]
 8003378:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337c:	3214      	adds	r2, #20
 800337e:	e842 3100 	strex	r1, r3, [r2]
 8003382:	2900      	cmp	r1, #0
 8003384:	d1f3      	bne.n	800336e <HAL_UART_IRQHandler+0x1a2>
          huart->RxState = HAL_UART_STATE_READY;
 8003386:	2320      	movs	r3, #32
 8003388:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800338c:	2300      	movs	r3, #0
 800338e:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003390:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003392:	f102 030c 	add.w	r3, r2, #12
 8003396:	e853 3f00 	ldrex	r3, [r3]
 800339a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339e:	320c      	adds	r2, #12
 80033a0:	e842 3100 	strex	r1, r3, [r2]
 80033a4:	2900      	cmp	r1, #0
 80033a6:	d1f3      	bne.n	8003390 <HAL_UART_IRQHandler+0x1c4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033a8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80033aa:	f7fe fce6 	bl	8001d7a <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033ae:	2302      	movs	r3, #2
 80033b0:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033b2:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80033b4:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	1ac9      	subs	r1, r1, r3
 80033ba:	b289      	uxth	r1, r1
 80033bc:	4620      	mov	r0, r4
 80033be:	f7ff fe90 	bl	80030e2 <HAL_UARTEx_RxEventCallback>
      return;
 80033c2:	e72e      	b.n	8003222 <HAL_UART_IRQHandler+0x56>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033c4:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80033c6:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	1ac9      	subs	r1, r1, r3
 80033cc:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80033ce:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f43f af25 	beq.w	8003222 <HAL_UART_IRQHandler+0x56>
          && (nb_rx_data > 0U))
 80033d8:	2900      	cmp	r1, #0
 80033da:	f43f af22 	beq.w	8003222 <HAL_UART_IRQHandler+0x56>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033de:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e0:	f102 030c 	add.w	r3, r2, #12
 80033e4:	e853 3f00 	ldrex	r3, [r3]
 80033e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ec:	320c      	adds	r2, #12
 80033ee:	e842 3000 	strex	r0, r3, [r2]
 80033f2:	2800      	cmp	r0, #0
 80033f4:	d1f3      	bne.n	80033de <HAL_UART_IRQHandler+0x212>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f8:	f102 0314 	add.w	r3, r2, #20
 80033fc:	e853 3f00 	ldrex	r3, [r3]
 8003400:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003404:	3214      	adds	r2, #20
 8003406:	e842 3000 	strex	r0, r3, [r2]
 800340a:	2800      	cmp	r0, #0
 800340c:	d1f3      	bne.n	80033f6 <HAL_UART_IRQHandler+0x22a>
        huart->RxState = HAL_UART_STATE_READY;
 800340e:	2320      	movs	r3, #32
 8003410:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003414:	2300      	movs	r3, #0
 8003416:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003418:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341a:	f102 030c 	add.w	r3, r2, #12
 800341e:	e853 3f00 	ldrex	r3, [r3]
 8003422:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003426:	320c      	adds	r2, #12
 8003428:	e842 3000 	strex	r0, r3, [r2]
 800342c:	2800      	cmp	r0, #0
 800342e:	d1f3      	bne.n	8003418 <HAL_UART_IRQHandler+0x24c>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003430:	2302      	movs	r3, #2
 8003432:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003434:	4620      	mov	r0, r4
 8003436:	f7ff fe54 	bl	80030e2 <HAL_UARTEx_RxEventCallback>
      return;
 800343a:	e6f2      	b.n	8003222 <HAL_UART_IRQHandler+0x56>
    UART_Transmit_IT(huart);
 800343c:	4620      	mov	r0, r4
 800343e:	f7ff fca7 	bl	8002d90 <UART_Transmit_IT>
    return;
 8003442:	e6ee      	b.n	8003222 <HAL_UART_IRQHandler+0x56>
    UART_EndTransmit_IT(huart);
 8003444:	4620      	mov	r0, r4
 8003446:	f7ff fe35 	bl	80030b4 <UART_EndTransmit_IT>
    return;
 800344a:	e6ea      	b.n	8003222 <HAL_UART_IRQHandler+0x56>
 800344c:	080030d3 	.word	0x080030d3

08003450 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8003450:	b410      	push	{r4}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8003452:	680b      	ldr	r3, [r1, #0]
 8003454:	b9db      	cbnz	r3, 800348e <FMC_SDRAM_Init+0x3e>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8003456:	6802      	ldr	r2, [r0, #0]
 8003458:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 800345c:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8003460:	684b      	ldr	r3, [r1, #4]
 8003462:	688c      	ldr	r4, [r1, #8]
 8003464:	4323      	orrs	r3, r4
 8003466:	68cc      	ldr	r4, [r1, #12]
 8003468:	4323      	orrs	r3, r4
 800346a:	690c      	ldr	r4, [r1, #16]
 800346c:	4323      	orrs	r3, r4
 800346e:	694c      	ldr	r4, [r1, #20]
 8003470:	4323      	orrs	r3, r4
 8003472:	698c      	ldr	r4, [r1, #24]
 8003474:	4323      	orrs	r3, r4
 8003476:	69cc      	ldr	r4, [r1, #28]
 8003478:	4323      	orrs	r3, r4
 800347a:	6a0c      	ldr	r4, [r1, #32]
 800347c:	4323      	orrs	r3, r4
 800347e:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8003480:	430b      	orrs	r3, r1
 8003482:	431a      	orrs	r2, r3
 8003484:	6002      	str	r2, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8003486:	2000      	movs	r0, #0
 8003488:	f85d 4b04 	ldr.w	r4, [sp], #4
 800348c:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800348e:	6803      	ldr	r3, [r0, #0]
 8003490:	f423 43f8 	bic.w	r3, r3, #31744	@ 0x7c00
 8003494:	69ca      	ldr	r2, [r1, #28]
 8003496:	6a0c      	ldr	r4, [r1, #32]
 8003498:	4322      	orrs	r2, r4
 800349a:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
 800349c:	4322      	orrs	r2, r4
 800349e:	4313      	orrs	r3, r2
 80034a0:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80034a2:	6842      	ldr	r2, [r0, #4]
 80034a4:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 80034a8:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 80034ac:	684b      	ldr	r3, [r1, #4]
 80034ae:	688c      	ldr	r4, [r1, #8]
 80034b0:	4323      	orrs	r3, r4
 80034b2:	68cc      	ldr	r4, [r1, #12]
 80034b4:	4323      	orrs	r3, r4
 80034b6:	690c      	ldr	r4, [r1, #16]
 80034b8:	4323      	orrs	r3, r4
 80034ba:	694c      	ldr	r4, [r1, #20]
 80034bc:	4323      	orrs	r3, r4
 80034be:	6989      	ldr	r1, [r1, #24]
 80034c0:	430b      	orrs	r3, r1
 80034c2:	431a      	orrs	r2, r3
 80034c4:	6042      	str	r2, [r0, #4]
 80034c6:	e7de      	b.n	8003486 <FMC_SDRAM_Init+0x36>

080034c8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80034c8:	b410      	push	{r4}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80034ca:	bb3a      	cbnz	r2, 800351c <FMC_SDRAM_Timing_Init+0x54>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80034cc:	6882      	ldr	r2, [r0, #8]
 80034ce:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 80034d2:	680b      	ldr	r3, [r1, #0]
 80034d4:	3b01      	subs	r3, #1
 80034d6:	684c      	ldr	r4, [r1, #4]
 80034d8:	f104 3cff 	add.w	ip, r4, #4294967295
 80034dc:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 80034e0:	688c      	ldr	r4, [r1, #8]
 80034e2:	f104 3cff 	add.w	ip, r4, #4294967295
 80034e6:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80034ea:	68cc      	ldr	r4, [r1, #12]
 80034ec:	f104 3cff 	add.w	ip, r4, #4294967295
 80034f0:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 80034f4:	690c      	ldr	r4, [r1, #16]
 80034f6:	f104 3cff 	add.w	ip, r4, #4294967295
 80034fa:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80034fe:	694c      	ldr	r4, [r1, #20]
 8003500:	f104 3cff 	add.w	ip, r4, #4294967295
 8003504:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 8003508:	6989      	ldr	r1, [r1, #24]
 800350a:	3901      	subs	r1, #1
 800350c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003510:	4313      	orrs	r3, r2
 8003512:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8003514:	2000      	movs	r0, #0
 8003516:	f85d 4b04 	ldr.w	r4, [sp], #4
 800351a:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800351c:	6883      	ldr	r3, [r0, #8]
 800351e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003522:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003526:	68ca      	ldr	r2, [r1, #12]
 8003528:	f102 3cff 	add.w	ip, r2, #4294967295
 800352c:	694a      	ldr	r2, [r1, #20]
 800352e:	3a01      	subs	r2, #1
 8003530:	0512      	lsls	r2, r2, #20
 8003532:	ea42 320c 	orr.w	r2, r2, ip, lsl #12
 8003536:	4313      	orrs	r3, r2
 8003538:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800353a:	68c2      	ldr	r2, [r0, #12]
 800353c:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8003540:	680b      	ldr	r3, [r1, #0]
 8003542:	3b01      	subs	r3, #1
 8003544:	684c      	ldr	r4, [r1, #4]
 8003546:	f104 3cff 	add.w	ip, r4, #4294967295
 800354a:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 800354e:	688c      	ldr	r4, [r1, #8]
 8003550:	f104 3cff 	add.w	ip, r4, #4294967295
 8003554:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8003558:	690c      	ldr	r4, [r1, #16]
 800355a:	f104 3cff 	add.w	ip, r4, #4294967295
 800355e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8003562:	6989      	ldr	r1, [r1, #24]
 8003564:	3901      	subs	r1, #1
 8003566:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800356a:	4313      	orrs	r3, r2
 800356c:	60c3      	str	r3, [r0, #12]
 800356e:	e7d1      	b.n	8003514 <FMC_SDRAM_Timing_Init+0x4c>

08003570 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003570:	4b01      	ldr	r3, [pc, #4]	@ (8003578 <LL_SetSystemCoreClock+0x8>)
 8003572:	6018      	str	r0, [r3, #0]
}
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	20000000 	.word	0x20000000

0800357c <_vsniprintf_r>:
 800357c:	b530      	push	{r4, r5, lr}
 800357e:	4614      	mov	r4, r2
 8003580:	2c00      	cmp	r4, #0
 8003582:	b09b      	sub	sp, #108	@ 0x6c
 8003584:	4605      	mov	r5, r0
 8003586:	461a      	mov	r2, r3
 8003588:	da05      	bge.n	8003596 <_vsniprintf_r+0x1a>
 800358a:	238b      	movs	r3, #139	@ 0x8b
 800358c:	6003      	str	r3, [r0, #0]
 800358e:	f04f 30ff 	mov.w	r0, #4294967295
 8003592:	b01b      	add	sp, #108	@ 0x6c
 8003594:	bd30      	pop	{r4, r5, pc}
 8003596:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800359a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800359e:	bf14      	ite	ne
 80035a0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80035a4:	4623      	moveq	r3, r4
 80035a6:	9302      	str	r3, [sp, #8]
 80035a8:	9305      	str	r3, [sp, #20]
 80035aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80035ae:	9100      	str	r1, [sp, #0]
 80035b0:	9104      	str	r1, [sp, #16]
 80035b2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80035b6:	4669      	mov	r1, sp
 80035b8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80035ba:	f000 f9a1 	bl	8003900 <_svfiprintf_r>
 80035be:	1c43      	adds	r3, r0, #1
 80035c0:	bfbc      	itt	lt
 80035c2:	238b      	movlt	r3, #139	@ 0x8b
 80035c4:	602b      	strlt	r3, [r5, #0]
 80035c6:	2c00      	cmp	r4, #0
 80035c8:	d0e3      	beq.n	8003592 <_vsniprintf_r+0x16>
 80035ca:	9b00      	ldr	r3, [sp, #0]
 80035cc:	2200      	movs	r2, #0
 80035ce:	701a      	strb	r2, [r3, #0]
 80035d0:	e7df      	b.n	8003592 <_vsniprintf_r+0x16>
	...

080035d4 <vsniprintf>:
 80035d4:	b507      	push	{r0, r1, r2, lr}
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	4613      	mov	r3, r2
 80035da:	460a      	mov	r2, r1
 80035dc:	4601      	mov	r1, r0
 80035de:	4803      	ldr	r0, [pc, #12]	@ (80035ec <vsniprintf+0x18>)
 80035e0:	6800      	ldr	r0, [r0, #0]
 80035e2:	f7ff ffcb 	bl	800357c <_vsniprintf_r>
 80035e6:	b003      	add	sp, #12
 80035e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80035ec:	2000000c 	.word	0x2000000c

080035f0 <memset>:
 80035f0:	4402      	add	r2, r0
 80035f2:	4603      	mov	r3, r0
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d100      	bne.n	80035fa <memset+0xa>
 80035f8:	4770      	bx	lr
 80035fa:	f803 1b01 	strb.w	r1, [r3], #1
 80035fe:	e7f9      	b.n	80035f4 <memset+0x4>

08003600 <__errno>:
 8003600:	4b01      	ldr	r3, [pc, #4]	@ (8003608 <__errno+0x8>)
 8003602:	6818      	ldr	r0, [r3, #0]
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	2000000c 	.word	0x2000000c

0800360c <__libc_init_array>:
 800360c:	b570      	push	{r4, r5, r6, lr}
 800360e:	4d0d      	ldr	r5, [pc, #52]	@ (8003644 <__libc_init_array+0x38>)
 8003610:	4c0d      	ldr	r4, [pc, #52]	@ (8003648 <__libc_init_array+0x3c>)
 8003612:	1b64      	subs	r4, r4, r5
 8003614:	10a4      	asrs	r4, r4, #2
 8003616:	2600      	movs	r6, #0
 8003618:	42a6      	cmp	r6, r4
 800361a:	d109      	bne.n	8003630 <__libc_init_array+0x24>
 800361c:	4d0b      	ldr	r5, [pc, #44]	@ (800364c <__libc_init_array+0x40>)
 800361e:	4c0c      	ldr	r4, [pc, #48]	@ (8003650 <__libc_init_array+0x44>)
 8003620:	f000 fc66 	bl	8003ef0 <_init>
 8003624:	1b64      	subs	r4, r4, r5
 8003626:	10a4      	asrs	r4, r4, #2
 8003628:	2600      	movs	r6, #0
 800362a:	42a6      	cmp	r6, r4
 800362c:	d105      	bne.n	800363a <__libc_init_array+0x2e>
 800362e:	bd70      	pop	{r4, r5, r6, pc}
 8003630:	f855 3b04 	ldr.w	r3, [r5], #4
 8003634:	4798      	blx	r3
 8003636:	3601      	adds	r6, #1
 8003638:	e7ee      	b.n	8003618 <__libc_init_array+0xc>
 800363a:	f855 3b04 	ldr.w	r3, [r5], #4
 800363e:	4798      	blx	r3
 8003640:	3601      	adds	r6, #1
 8003642:	e7f2      	b.n	800362a <__libc_init_array+0x1e>
 8003644:	08003f68 	.word	0x08003f68
 8003648:	08003f68 	.word	0x08003f68
 800364c:	08003f68 	.word	0x08003f68
 8003650:	08003f6c 	.word	0x08003f6c

08003654 <__retarget_lock_acquire_recursive>:
 8003654:	4770      	bx	lr

08003656 <__retarget_lock_release_recursive>:
 8003656:	4770      	bx	lr

08003658 <_free_r>:
 8003658:	b538      	push	{r3, r4, r5, lr}
 800365a:	4605      	mov	r5, r0
 800365c:	2900      	cmp	r1, #0
 800365e:	d041      	beq.n	80036e4 <_free_r+0x8c>
 8003660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003664:	1f0c      	subs	r4, r1, #4
 8003666:	2b00      	cmp	r3, #0
 8003668:	bfb8      	it	lt
 800366a:	18e4      	addlt	r4, r4, r3
 800366c:	f000 f8e0 	bl	8003830 <__malloc_lock>
 8003670:	4a1d      	ldr	r2, [pc, #116]	@ (80036e8 <_free_r+0x90>)
 8003672:	6813      	ldr	r3, [r2, #0]
 8003674:	b933      	cbnz	r3, 8003684 <_free_r+0x2c>
 8003676:	6063      	str	r3, [r4, #4]
 8003678:	6014      	str	r4, [r2, #0]
 800367a:	4628      	mov	r0, r5
 800367c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003680:	f000 b8dc 	b.w	800383c <__malloc_unlock>
 8003684:	42a3      	cmp	r3, r4
 8003686:	d908      	bls.n	800369a <_free_r+0x42>
 8003688:	6820      	ldr	r0, [r4, #0]
 800368a:	1821      	adds	r1, r4, r0
 800368c:	428b      	cmp	r3, r1
 800368e:	bf01      	itttt	eq
 8003690:	6819      	ldreq	r1, [r3, #0]
 8003692:	685b      	ldreq	r3, [r3, #4]
 8003694:	1809      	addeq	r1, r1, r0
 8003696:	6021      	streq	r1, [r4, #0]
 8003698:	e7ed      	b.n	8003676 <_free_r+0x1e>
 800369a:	461a      	mov	r2, r3
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	b10b      	cbz	r3, 80036a4 <_free_r+0x4c>
 80036a0:	42a3      	cmp	r3, r4
 80036a2:	d9fa      	bls.n	800369a <_free_r+0x42>
 80036a4:	6811      	ldr	r1, [r2, #0]
 80036a6:	1850      	adds	r0, r2, r1
 80036a8:	42a0      	cmp	r0, r4
 80036aa:	d10b      	bne.n	80036c4 <_free_r+0x6c>
 80036ac:	6820      	ldr	r0, [r4, #0]
 80036ae:	4401      	add	r1, r0
 80036b0:	1850      	adds	r0, r2, r1
 80036b2:	4283      	cmp	r3, r0
 80036b4:	6011      	str	r1, [r2, #0]
 80036b6:	d1e0      	bne.n	800367a <_free_r+0x22>
 80036b8:	6818      	ldr	r0, [r3, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	6053      	str	r3, [r2, #4]
 80036be:	4408      	add	r0, r1
 80036c0:	6010      	str	r0, [r2, #0]
 80036c2:	e7da      	b.n	800367a <_free_r+0x22>
 80036c4:	d902      	bls.n	80036cc <_free_r+0x74>
 80036c6:	230c      	movs	r3, #12
 80036c8:	602b      	str	r3, [r5, #0]
 80036ca:	e7d6      	b.n	800367a <_free_r+0x22>
 80036cc:	6820      	ldr	r0, [r4, #0]
 80036ce:	1821      	adds	r1, r4, r0
 80036d0:	428b      	cmp	r3, r1
 80036d2:	bf04      	itt	eq
 80036d4:	6819      	ldreq	r1, [r3, #0]
 80036d6:	685b      	ldreq	r3, [r3, #4]
 80036d8:	6063      	str	r3, [r4, #4]
 80036da:	bf04      	itt	eq
 80036dc:	1809      	addeq	r1, r1, r0
 80036de:	6021      	streq	r1, [r4, #0]
 80036e0:	6054      	str	r4, [r2, #4]
 80036e2:	e7ca      	b.n	800367a <_free_r+0x22>
 80036e4:	bd38      	pop	{r3, r4, r5, pc}
 80036e6:	bf00      	nop
 80036e8:	200004e4 	.word	0x200004e4

080036ec <sbrk_aligned>:
 80036ec:	b570      	push	{r4, r5, r6, lr}
 80036ee:	4e0f      	ldr	r6, [pc, #60]	@ (800372c <sbrk_aligned+0x40>)
 80036f0:	460c      	mov	r4, r1
 80036f2:	6831      	ldr	r1, [r6, #0]
 80036f4:	4605      	mov	r5, r0
 80036f6:	b911      	cbnz	r1, 80036fe <sbrk_aligned+0x12>
 80036f8:	f000 fba6 	bl	8003e48 <_sbrk_r>
 80036fc:	6030      	str	r0, [r6, #0]
 80036fe:	4621      	mov	r1, r4
 8003700:	4628      	mov	r0, r5
 8003702:	f000 fba1 	bl	8003e48 <_sbrk_r>
 8003706:	1c43      	adds	r3, r0, #1
 8003708:	d103      	bne.n	8003712 <sbrk_aligned+0x26>
 800370a:	f04f 34ff 	mov.w	r4, #4294967295
 800370e:	4620      	mov	r0, r4
 8003710:	bd70      	pop	{r4, r5, r6, pc}
 8003712:	1cc4      	adds	r4, r0, #3
 8003714:	f024 0403 	bic.w	r4, r4, #3
 8003718:	42a0      	cmp	r0, r4
 800371a:	d0f8      	beq.n	800370e <sbrk_aligned+0x22>
 800371c:	1a21      	subs	r1, r4, r0
 800371e:	4628      	mov	r0, r5
 8003720:	f000 fb92 	bl	8003e48 <_sbrk_r>
 8003724:	3001      	adds	r0, #1
 8003726:	d1f2      	bne.n	800370e <sbrk_aligned+0x22>
 8003728:	e7ef      	b.n	800370a <sbrk_aligned+0x1e>
 800372a:	bf00      	nop
 800372c:	200004e0 	.word	0x200004e0

08003730 <_malloc_r>:
 8003730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003734:	1ccd      	adds	r5, r1, #3
 8003736:	f025 0503 	bic.w	r5, r5, #3
 800373a:	3508      	adds	r5, #8
 800373c:	2d0c      	cmp	r5, #12
 800373e:	bf38      	it	cc
 8003740:	250c      	movcc	r5, #12
 8003742:	2d00      	cmp	r5, #0
 8003744:	4606      	mov	r6, r0
 8003746:	db01      	blt.n	800374c <_malloc_r+0x1c>
 8003748:	42a9      	cmp	r1, r5
 800374a:	d904      	bls.n	8003756 <_malloc_r+0x26>
 800374c:	230c      	movs	r3, #12
 800374e:	6033      	str	r3, [r6, #0]
 8003750:	2000      	movs	r0, #0
 8003752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003756:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800382c <_malloc_r+0xfc>
 800375a:	f000 f869 	bl	8003830 <__malloc_lock>
 800375e:	f8d8 3000 	ldr.w	r3, [r8]
 8003762:	461c      	mov	r4, r3
 8003764:	bb44      	cbnz	r4, 80037b8 <_malloc_r+0x88>
 8003766:	4629      	mov	r1, r5
 8003768:	4630      	mov	r0, r6
 800376a:	f7ff ffbf 	bl	80036ec <sbrk_aligned>
 800376e:	1c43      	adds	r3, r0, #1
 8003770:	4604      	mov	r4, r0
 8003772:	d158      	bne.n	8003826 <_malloc_r+0xf6>
 8003774:	f8d8 4000 	ldr.w	r4, [r8]
 8003778:	4627      	mov	r7, r4
 800377a:	2f00      	cmp	r7, #0
 800377c:	d143      	bne.n	8003806 <_malloc_r+0xd6>
 800377e:	2c00      	cmp	r4, #0
 8003780:	d04b      	beq.n	800381a <_malloc_r+0xea>
 8003782:	6823      	ldr	r3, [r4, #0]
 8003784:	4639      	mov	r1, r7
 8003786:	4630      	mov	r0, r6
 8003788:	eb04 0903 	add.w	r9, r4, r3
 800378c:	f000 fb5c 	bl	8003e48 <_sbrk_r>
 8003790:	4581      	cmp	r9, r0
 8003792:	d142      	bne.n	800381a <_malloc_r+0xea>
 8003794:	6821      	ldr	r1, [r4, #0]
 8003796:	1a6d      	subs	r5, r5, r1
 8003798:	4629      	mov	r1, r5
 800379a:	4630      	mov	r0, r6
 800379c:	f7ff ffa6 	bl	80036ec <sbrk_aligned>
 80037a0:	3001      	adds	r0, #1
 80037a2:	d03a      	beq.n	800381a <_malloc_r+0xea>
 80037a4:	6823      	ldr	r3, [r4, #0]
 80037a6:	442b      	add	r3, r5
 80037a8:	6023      	str	r3, [r4, #0]
 80037aa:	f8d8 3000 	ldr.w	r3, [r8]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	bb62      	cbnz	r2, 800380c <_malloc_r+0xdc>
 80037b2:	f8c8 7000 	str.w	r7, [r8]
 80037b6:	e00f      	b.n	80037d8 <_malloc_r+0xa8>
 80037b8:	6822      	ldr	r2, [r4, #0]
 80037ba:	1b52      	subs	r2, r2, r5
 80037bc:	d420      	bmi.n	8003800 <_malloc_r+0xd0>
 80037be:	2a0b      	cmp	r2, #11
 80037c0:	d917      	bls.n	80037f2 <_malloc_r+0xc2>
 80037c2:	1961      	adds	r1, r4, r5
 80037c4:	42a3      	cmp	r3, r4
 80037c6:	6025      	str	r5, [r4, #0]
 80037c8:	bf18      	it	ne
 80037ca:	6059      	strne	r1, [r3, #4]
 80037cc:	6863      	ldr	r3, [r4, #4]
 80037ce:	bf08      	it	eq
 80037d0:	f8c8 1000 	streq.w	r1, [r8]
 80037d4:	5162      	str	r2, [r4, r5]
 80037d6:	604b      	str	r3, [r1, #4]
 80037d8:	4630      	mov	r0, r6
 80037da:	f000 f82f 	bl	800383c <__malloc_unlock>
 80037de:	f104 000b 	add.w	r0, r4, #11
 80037e2:	1d23      	adds	r3, r4, #4
 80037e4:	f020 0007 	bic.w	r0, r0, #7
 80037e8:	1ac2      	subs	r2, r0, r3
 80037ea:	bf1c      	itt	ne
 80037ec:	1a1b      	subne	r3, r3, r0
 80037ee:	50a3      	strne	r3, [r4, r2]
 80037f0:	e7af      	b.n	8003752 <_malloc_r+0x22>
 80037f2:	6862      	ldr	r2, [r4, #4]
 80037f4:	42a3      	cmp	r3, r4
 80037f6:	bf0c      	ite	eq
 80037f8:	f8c8 2000 	streq.w	r2, [r8]
 80037fc:	605a      	strne	r2, [r3, #4]
 80037fe:	e7eb      	b.n	80037d8 <_malloc_r+0xa8>
 8003800:	4623      	mov	r3, r4
 8003802:	6864      	ldr	r4, [r4, #4]
 8003804:	e7ae      	b.n	8003764 <_malloc_r+0x34>
 8003806:	463c      	mov	r4, r7
 8003808:	687f      	ldr	r7, [r7, #4]
 800380a:	e7b6      	b.n	800377a <_malloc_r+0x4a>
 800380c:	461a      	mov	r2, r3
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	42a3      	cmp	r3, r4
 8003812:	d1fb      	bne.n	800380c <_malloc_r+0xdc>
 8003814:	2300      	movs	r3, #0
 8003816:	6053      	str	r3, [r2, #4]
 8003818:	e7de      	b.n	80037d8 <_malloc_r+0xa8>
 800381a:	230c      	movs	r3, #12
 800381c:	6033      	str	r3, [r6, #0]
 800381e:	4630      	mov	r0, r6
 8003820:	f000 f80c 	bl	800383c <__malloc_unlock>
 8003824:	e794      	b.n	8003750 <_malloc_r+0x20>
 8003826:	6005      	str	r5, [r0, #0]
 8003828:	e7d6      	b.n	80037d8 <_malloc_r+0xa8>
 800382a:	bf00      	nop
 800382c:	200004e4 	.word	0x200004e4

08003830 <__malloc_lock>:
 8003830:	4801      	ldr	r0, [pc, #4]	@ (8003838 <__malloc_lock+0x8>)
 8003832:	f7ff bf0f 	b.w	8003654 <__retarget_lock_acquire_recursive>
 8003836:	bf00      	nop
 8003838:	200004dc 	.word	0x200004dc

0800383c <__malloc_unlock>:
 800383c:	4801      	ldr	r0, [pc, #4]	@ (8003844 <__malloc_unlock+0x8>)
 800383e:	f7ff bf0a 	b.w	8003656 <__retarget_lock_release_recursive>
 8003842:	bf00      	nop
 8003844:	200004dc 	.word	0x200004dc

08003848 <__ssputs_r>:
 8003848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800384c:	688e      	ldr	r6, [r1, #8]
 800384e:	461f      	mov	r7, r3
 8003850:	42be      	cmp	r6, r7
 8003852:	680b      	ldr	r3, [r1, #0]
 8003854:	4682      	mov	sl, r0
 8003856:	460c      	mov	r4, r1
 8003858:	4690      	mov	r8, r2
 800385a:	d82d      	bhi.n	80038b8 <__ssputs_r+0x70>
 800385c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003860:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003864:	d026      	beq.n	80038b4 <__ssputs_r+0x6c>
 8003866:	6965      	ldr	r5, [r4, #20]
 8003868:	6909      	ldr	r1, [r1, #16]
 800386a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800386e:	eba3 0901 	sub.w	r9, r3, r1
 8003872:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003876:	1c7b      	adds	r3, r7, #1
 8003878:	444b      	add	r3, r9
 800387a:	106d      	asrs	r5, r5, #1
 800387c:	429d      	cmp	r5, r3
 800387e:	bf38      	it	cc
 8003880:	461d      	movcc	r5, r3
 8003882:	0553      	lsls	r3, r2, #21
 8003884:	d527      	bpl.n	80038d6 <__ssputs_r+0x8e>
 8003886:	4629      	mov	r1, r5
 8003888:	f7ff ff52 	bl	8003730 <_malloc_r>
 800388c:	4606      	mov	r6, r0
 800388e:	b360      	cbz	r0, 80038ea <__ssputs_r+0xa2>
 8003890:	6921      	ldr	r1, [r4, #16]
 8003892:	464a      	mov	r2, r9
 8003894:	f000 fae8 	bl	8003e68 <memcpy>
 8003898:	89a3      	ldrh	r3, [r4, #12]
 800389a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800389e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038a2:	81a3      	strh	r3, [r4, #12]
 80038a4:	6126      	str	r6, [r4, #16]
 80038a6:	6165      	str	r5, [r4, #20]
 80038a8:	444e      	add	r6, r9
 80038aa:	eba5 0509 	sub.w	r5, r5, r9
 80038ae:	6026      	str	r6, [r4, #0]
 80038b0:	60a5      	str	r5, [r4, #8]
 80038b2:	463e      	mov	r6, r7
 80038b4:	42be      	cmp	r6, r7
 80038b6:	d900      	bls.n	80038ba <__ssputs_r+0x72>
 80038b8:	463e      	mov	r6, r7
 80038ba:	6820      	ldr	r0, [r4, #0]
 80038bc:	4632      	mov	r2, r6
 80038be:	4641      	mov	r1, r8
 80038c0:	f000 faa8 	bl	8003e14 <memmove>
 80038c4:	68a3      	ldr	r3, [r4, #8]
 80038c6:	1b9b      	subs	r3, r3, r6
 80038c8:	60a3      	str	r3, [r4, #8]
 80038ca:	6823      	ldr	r3, [r4, #0]
 80038cc:	4433      	add	r3, r6
 80038ce:	6023      	str	r3, [r4, #0]
 80038d0:	2000      	movs	r0, #0
 80038d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038d6:	462a      	mov	r2, r5
 80038d8:	f000 fad4 	bl	8003e84 <_realloc_r>
 80038dc:	4606      	mov	r6, r0
 80038de:	2800      	cmp	r0, #0
 80038e0:	d1e0      	bne.n	80038a4 <__ssputs_r+0x5c>
 80038e2:	6921      	ldr	r1, [r4, #16]
 80038e4:	4650      	mov	r0, sl
 80038e6:	f7ff feb7 	bl	8003658 <_free_r>
 80038ea:	230c      	movs	r3, #12
 80038ec:	f8ca 3000 	str.w	r3, [sl]
 80038f0:	89a3      	ldrh	r3, [r4, #12]
 80038f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038f6:	81a3      	strh	r3, [r4, #12]
 80038f8:	f04f 30ff 	mov.w	r0, #4294967295
 80038fc:	e7e9      	b.n	80038d2 <__ssputs_r+0x8a>
	...

08003900 <_svfiprintf_r>:
 8003900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003904:	4698      	mov	r8, r3
 8003906:	898b      	ldrh	r3, [r1, #12]
 8003908:	061b      	lsls	r3, r3, #24
 800390a:	b09d      	sub	sp, #116	@ 0x74
 800390c:	4607      	mov	r7, r0
 800390e:	460d      	mov	r5, r1
 8003910:	4614      	mov	r4, r2
 8003912:	d510      	bpl.n	8003936 <_svfiprintf_r+0x36>
 8003914:	690b      	ldr	r3, [r1, #16]
 8003916:	b973      	cbnz	r3, 8003936 <_svfiprintf_r+0x36>
 8003918:	2140      	movs	r1, #64	@ 0x40
 800391a:	f7ff ff09 	bl	8003730 <_malloc_r>
 800391e:	6028      	str	r0, [r5, #0]
 8003920:	6128      	str	r0, [r5, #16]
 8003922:	b930      	cbnz	r0, 8003932 <_svfiprintf_r+0x32>
 8003924:	230c      	movs	r3, #12
 8003926:	603b      	str	r3, [r7, #0]
 8003928:	f04f 30ff 	mov.w	r0, #4294967295
 800392c:	b01d      	add	sp, #116	@ 0x74
 800392e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003932:	2340      	movs	r3, #64	@ 0x40
 8003934:	616b      	str	r3, [r5, #20]
 8003936:	2300      	movs	r3, #0
 8003938:	9309      	str	r3, [sp, #36]	@ 0x24
 800393a:	2320      	movs	r3, #32
 800393c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003940:	f8cd 800c 	str.w	r8, [sp, #12]
 8003944:	2330      	movs	r3, #48	@ 0x30
 8003946:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003ae4 <_svfiprintf_r+0x1e4>
 800394a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800394e:	f04f 0901 	mov.w	r9, #1
 8003952:	4623      	mov	r3, r4
 8003954:	469a      	mov	sl, r3
 8003956:	f813 2b01 	ldrb.w	r2, [r3], #1
 800395a:	b10a      	cbz	r2, 8003960 <_svfiprintf_r+0x60>
 800395c:	2a25      	cmp	r2, #37	@ 0x25
 800395e:	d1f9      	bne.n	8003954 <_svfiprintf_r+0x54>
 8003960:	ebba 0b04 	subs.w	fp, sl, r4
 8003964:	d00b      	beq.n	800397e <_svfiprintf_r+0x7e>
 8003966:	465b      	mov	r3, fp
 8003968:	4622      	mov	r2, r4
 800396a:	4629      	mov	r1, r5
 800396c:	4638      	mov	r0, r7
 800396e:	f7ff ff6b 	bl	8003848 <__ssputs_r>
 8003972:	3001      	adds	r0, #1
 8003974:	f000 80a7 	beq.w	8003ac6 <_svfiprintf_r+0x1c6>
 8003978:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800397a:	445a      	add	r2, fp
 800397c:	9209      	str	r2, [sp, #36]	@ 0x24
 800397e:	f89a 3000 	ldrb.w	r3, [sl]
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 809f 	beq.w	8003ac6 <_svfiprintf_r+0x1c6>
 8003988:	2300      	movs	r3, #0
 800398a:	f04f 32ff 	mov.w	r2, #4294967295
 800398e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003992:	f10a 0a01 	add.w	sl, sl, #1
 8003996:	9304      	str	r3, [sp, #16]
 8003998:	9307      	str	r3, [sp, #28]
 800399a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800399e:	931a      	str	r3, [sp, #104]	@ 0x68
 80039a0:	4654      	mov	r4, sl
 80039a2:	2205      	movs	r2, #5
 80039a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039a8:	484e      	ldr	r0, [pc, #312]	@ (8003ae4 <_svfiprintf_r+0x1e4>)
 80039aa:	f7fc fc21 	bl	80001f0 <memchr>
 80039ae:	9a04      	ldr	r2, [sp, #16]
 80039b0:	b9d8      	cbnz	r0, 80039ea <_svfiprintf_r+0xea>
 80039b2:	06d0      	lsls	r0, r2, #27
 80039b4:	bf44      	itt	mi
 80039b6:	2320      	movmi	r3, #32
 80039b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80039bc:	0711      	lsls	r1, r2, #28
 80039be:	bf44      	itt	mi
 80039c0:	232b      	movmi	r3, #43	@ 0x2b
 80039c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80039c6:	f89a 3000 	ldrb.w	r3, [sl]
 80039ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80039cc:	d015      	beq.n	80039fa <_svfiprintf_r+0xfa>
 80039ce:	9a07      	ldr	r2, [sp, #28]
 80039d0:	4654      	mov	r4, sl
 80039d2:	2000      	movs	r0, #0
 80039d4:	f04f 0c0a 	mov.w	ip, #10
 80039d8:	4621      	mov	r1, r4
 80039da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039de:	3b30      	subs	r3, #48	@ 0x30
 80039e0:	2b09      	cmp	r3, #9
 80039e2:	d94b      	bls.n	8003a7c <_svfiprintf_r+0x17c>
 80039e4:	b1b0      	cbz	r0, 8003a14 <_svfiprintf_r+0x114>
 80039e6:	9207      	str	r2, [sp, #28]
 80039e8:	e014      	b.n	8003a14 <_svfiprintf_r+0x114>
 80039ea:	eba0 0308 	sub.w	r3, r0, r8
 80039ee:	fa09 f303 	lsl.w	r3, r9, r3
 80039f2:	4313      	orrs	r3, r2
 80039f4:	9304      	str	r3, [sp, #16]
 80039f6:	46a2      	mov	sl, r4
 80039f8:	e7d2      	b.n	80039a0 <_svfiprintf_r+0xa0>
 80039fa:	9b03      	ldr	r3, [sp, #12]
 80039fc:	1d19      	adds	r1, r3, #4
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	9103      	str	r1, [sp, #12]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	bfbb      	ittet	lt
 8003a06:	425b      	neglt	r3, r3
 8003a08:	f042 0202 	orrlt.w	r2, r2, #2
 8003a0c:	9307      	strge	r3, [sp, #28]
 8003a0e:	9307      	strlt	r3, [sp, #28]
 8003a10:	bfb8      	it	lt
 8003a12:	9204      	strlt	r2, [sp, #16]
 8003a14:	7823      	ldrb	r3, [r4, #0]
 8003a16:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a18:	d10a      	bne.n	8003a30 <_svfiprintf_r+0x130>
 8003a1a:	7863      	ldrb	r3, [r4, #1]
 8003a1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a1e:	d132      	bne.n	8003a86 <_svfiprintf_r+0x186>
 8003a20:	9b03      	ldr	r3, [sp, #12]
 8003a22:	1d1a      	adds	r2, r3, #4
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	9203      	str	r2, [sp, #12]
 8003a28:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003a2c:	3402      	adds	r4, #2
 8003a2e:	9305      	str	r3, [sp, #20]
 8003a30:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003af4 <_svfiprintf_r+0x1f4>
 8003a34:	7821      	ldrb	r1, [r4, #0]
 8003a36:	2203      	movs	r2, #3
 8003a38:	4650      	mov	r0, sl
 8003a3a:	f7fc fbd9 	bl	80001f0 <memchr>
 8003a3e:	b138      	cbz	r0, 8003a50 <_svfiprintf_r+0x150>
 8003a40:	9b04      	ldr	r3, [sp, #16]
 8003a42:	eba0 000a 	sub.w	r0, r0, sl
 8003a46:	2240      	movs	r2, #64	@ 0x40
 8003a48:	4082      	lsls	r2, r0
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	3401      	adds	r4, #1
 8003a4e:	9304      	str	r3, [sp, #16]
 8003a50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a54:	4824      	ldr	r0, [pc, #144]	@ (8003ae8 <_svfiprintf_r+0x1e8>)
 8003a56:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003a5a:	2206      	movs	r2, #6
 8003a5c:	f7fc fbc8 	bl	80001f0 <memchr>
 8003a60:	2800      	cmp	r0, #0
 8003a62:	d036      	beq.n	8003ad2 <_svfiprintf_r+0x1d2>
 8003a64:	4b21      	ldr	r3, [pc, #132]	@ (8003aec <_svfiprintf_r+0x1ec>)
 8003a66:	bb1b      	cbnz	r3, 8003ab0 <_svfiprintf_r+0x1b0>
 8003a68:	9b03      	ldr	r3, [sp, #12]
 8003a6a:	3307      	adds	r3, #7
 8003a6c:	f023 0307 	bic.w	r3, r3, #7
 8003a70:	3308      	adds	r3, #8
 8003a72:	9303      	str	r3, [sp, #12]
 8003a74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a76:	4433      	add	r3, r6
 8003a78:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a7a:	e76a      	b.n	8003952 <_svfiprintf_r+0x52>
 8003a7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a80:	460c      	mov	r4, r1
 8003a82:	2001      	movs	r0, #1
 8003a84:	e7a8      	b.n	80039d8 <_svfiprintf_r+0xd8>
 8003a86:	2300      	movs	r3, #0
 8003a88:	3401      	adds	r4, #1
 8003a8a:	9305      	str	r3, [sp, #20]
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	f04f 0c0a 	mov.w	ip, #10
 8003a92:	4620      	mov	r0, r4
 8003a94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a98:	3a30      	subs	r2, #48	@ 0x30
 8003a9a:	2a09      	cmp	r2, #9
 8003a9c:	d903      	bls.n	8003aa6 <_svfiprintf_r+0x1a6>
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0c6      	beq.n	8003a30 <_svfiprintf_r+0x130>
 8003aa2:	9105      	str	r1, [sp, #20]
 8003aa4:	e7c4      	b.n	8003a30 <_svfiprintf_r+0x130>
 8003aa6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003aaa:	4604      	mov	r4, r0
 8003aac:	2301      	movs	r3, #1
 8003aae:	e7f0      	b.n	8003a92 <_svfiprintf_r+0x192>
 8003ab0:	ab03      	add	r3, sp, #12
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	462a      	mov	r2, r5
 8003ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8003af0 <_svfiprintf_r+0x1f0>)
 8003ab8:	a904      	add	r1, sp, #16
 8003aba:	4638      	mov	r0, r7
 8003abc:	f3af 8000 	nop.w
 8003ac0:	1c42      	adds	r2, r0, #1
 8003ac2:	4606      	mov	r6, r0
 8003ac4:	d1d6      	bne.n	8003a74 <_svfiprintf_r+0x174>
 8003ac6:	89ab      	ldrh	r3, [r5, #12]
 8003ac8:	065b      	lsls	r3, r3, #25
 8003aca:	f53f af2d 	bmi.w	8003928 <_svfiprintf_r+0x28>
 8003ace:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ad0:	e72c      	b.n	800392c <_svfiprintf_r+0x2c>
 8003ad2:	ab03      	add	r3, sp, #12
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	462a      	mov	r2, r5
 8003ad8:	4b05      	ldr	r3, [pc, #20]	@ (8003af0 <_svfiprintf_r+0x1f0>)
 8003ada:	a904      	add	r1, sp, #16
 8003adc:	4638      	mov	r0, r7
 8003ade:	f000 f879 	bl	8003bd4 <_printf_i>
 8003ae2:	e7ed      	b.n	8003ac0 <_svfiprintf_r+0x1c0>
 8003ae4:	08003f2c 	.word	0x08003f2c
 8003ae8:	08003f36 	.word	0x08003f36
 8003aec:	00000000 	.word	0x00000000
 8003af0:	08003849 	.word	0x08003849
 8003af4:	08003f32 	.word	0x08003f32

08003af8 <_printf_common>:
 8003af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003afc:	4616      	mov	r6, r2
 8003afe:	4698      	mov	r8, r3
 8003b00:	688a      	ldr	r2, [r1, #8]
 8003b02:	690b      	ldr	r3, [r1, #16]
 8003b04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	bfb8      	it	lt
 8003b0c:	4613      	movlt	r3, r2
 8003b0e:	6033      	str	r3, [r6, #0]
 8003b10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b14:	4607      	mov	r7, r0
 8003b16:	460c      	mov	r4, r1
 8003b18:	b10a      	cbz	r2, 8003b1e <_printf_common+0x26>
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	6033      	str	r3, [r6, #0]
 8003b1e:	6823      	ldr	r3, [r4, #0]
 8003b20:	0699      	lsls	r1, r3, #26
 8003b22:	bf42      	ittt	mi
 8003b24:	6833      	ldrmi	r3, [r6, #0]
 8003b26:	3302      	addmi	r3, #2
 8003b28:	6033      	strmi	r3, [r6, #0]
 8003b2a:	6825      	ldr	r5, [r4, #0]
 8003b2c:	f015 0506 	ands.w	r5, r5, #6
 8003b30:	d106      	bne.n	8003b40 <_printf_common+0x48>
 8003b32:	f104 0a19 	add.w	sl, r4, #25
 8003b36:	68e3      	ldr	r3, [r4, #12]
 8003b38:	6832      	ldr	r2, [r6, #0]
 8003b3a:	1a9b      	subs	r3, r3, r2
 8003b3c:	42ab      	cmp	r3, r5
 8003b3e:	dc26      	bgt.n	8003b8e <_printf_common+0x96>
 8003b40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003b44:	6822      	ldr	r2, [r4, #0]
 8003b46:	3b00      	subs	r3, #0
 8003b48:	bf18      	it	ne
 8003b4a:	2301      	movne	r3, #1
 8003b4c:	0692      	lsls	r2, r2, #26
 8003b4e:	d42b      	bmi.n	8003ba8 <_printf_common+0xb0>
 8003b50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003b54:	4641      	mov	r1, r8
 8003b56:	4638      	mov	r0, r7
 8003b58:	47c8      	blx	r9
 8003b5a:	3001      	adds	r0, #1
 8003b5c:	d01e      	beq.n	8003b9c <_printf_common+0xa4>
 8003b5e:	6823      	ldr	r3, [r4, #0]
 8003b60:	6922      	ldr	r2, [r4, #16]
 8003b62:	f003 0306 	and.w	r3, r3, #6
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	bf02      	ittt	eq
 8003b6a:	68e5      	ldreq	r5, [r4, #12]
 8003b6c:	6833      	ldreq	r3, [r6, #0]
 8003b6e:	1aed      	subeq	r5, r5, r3
 8003b70:	68a3      	ldr	r3, [r4, #8]
 8003b72:	bf0c      	ite	eq
 8003b74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b78:	2500      	movne	r5, #0
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	bfc4      	itt	gt
 8003b7e:	1a9b      	subgt	r3, r3, r2
 8003b80:	18ed      	addgt	r5, r5, r3
 8003b82:	2600      	movs	r6, #0
 8003b84:	341a      	adds	r4, #26
 8003b86:	42b5      	cmp	r5, r6
 8003b88:	d11a      	bne.n	8003bc0 <_printf_common+0xc8>
 8003b8a:	2000      	movs	r0, #0
 8003b8c:	e008      	b.n	8003ba0 <_printf_common+0xa8>
 8003b8e:	2301      	movs	r3, #1
 8003b90:	4652      	mov	r2, sl
 8003b92:	4641      	mov	r1, r8
 8003b94:	4638      	mov	r0, r7
 8003b96:	47c8      	blx	r9
 8003b98:	3001      	adds	r0, #1
 8003b9a:	d103      	bne.n	8003ba4 <_printf_common+0xac>
 8003b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ba4:	3501      	adds	r5, #1
 8003ba6:	e7c6      	b.n	8003b36 <_printf_common+0x3e>
 8003ba8:	18e1      	adds	r1, r4, r3
 8003baa:	1c5a      	adds	r2, r3, #1
 8003bac:	2030      	movs	r0, #48	@ 0x30
 8003bae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003bb2:	4422      	add	r2, r4
 8003bb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003bb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003bbc:	3302      	adds	r3, #2
 8003bbe:	e7c7      	b.n	8003b50 <_printf_common+0x58>
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	4622      	mov	r2, r4
 8003bc4:	4641      	mov	r1, r8
 8003bc6:	4638      	mov	r0, r7
 8003bc8:	47c8      	blx	r9
 8003bca:	3001      	adds	r0, #1
 8003bcc:	d0e6      	beq.n	8003b9c <_printf_common+0xa4>
 8003bce:	3601      	adds	r6, #1
 8003bd0:	e7d9      	b.n	8003b86 <_printf_common+0x8e>
	...

08003bd4 <_printf_i>:
 8003bd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bd8:	7e0f      	ldrb	r7, [r1, #24]
 8003bda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003bdc:	2f78      	cmp	r7, #120	@ 0x78
 8003bde:	4691      	mov	r9, r2
 8003be0:	4680      	mov	r8, r0
 8003be2:	460c      	mov	r4, r1
 8003be4:	469a      	mov	sl, r3
 8003be6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003bea:	d807      	bhi.n	8003bfc <_printf_i+0x28>
 8003bec:	2f62      	cmp	r7, #98	@ 0x62
 8003bee:	d80a      	bhi.n	8003c06 <_printf_i+0x32>
 8003bf0:	2f00      	cmp	r7, #0
 8003bf2:	f000 80d2 	beq.w	8003d9a <_printf_i+0x1c6>
 8003bf6:	2f58      	cmp	r7, #88	@ 0x58
 8003bf8:	f000 80b9 	beq.w	8003d6e <_printf_i+0x19a>
 8003bfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003c04:	e03a      	b.n	8003c7c <_printf_i+0xa8>
 8003c06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003c0a:	2b15      	cmp	r3, #21
 8003c0c:	d8f6      	bhi.n	8003bfc <_printf_i+0x28>
 8003c0e:	a101      	add	r1, pc, #4	@ (adr r1, 8003c14 <_printf_i+0x40>)
 8003c10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c14:	08003c6d 	.word	0x08003c6d
 8003c18:	08003c81 	.word	0x08003c81
 8003c1c:	08003bfd 	.word	0x08003bfd
 8003c20:	08003bfd 	.word	0x08003bfd
 8003c24:	08003bfd 	.word	0x08003bfd
 8003c28:	08003bfd 	.word	0x08003bfd
 8003c2c:	08003c81 	.word	0x08003c81
 8003c30:	08003bfd 	.word	0x08003bfd
 8003c34:	08003bfd 	.word	0x08003bfd
 8003c38:	08003bfd 	.word	0x08003bfd
 8003c3c:	08003bfd 	.word	0x08003bfd
 8003c40:	08003d81 	.word	0x08003d81
 8003c44:	08003cab 	.word	0x08003cab
 8003c48:	08003d3b 	.word	0x08003d3b
 8003c4c:	08003bfd 	.word	0x08003bfd
 8003c50:	08003bfd 	.word	0x08003bfd
 8003c54:	08003da3 	.word	0x08003da3
 8003c58:	08003bfd 	.word	0x08003bfd
 8003c5c:	08003cab 	.word	0x08003cab
 8003c60:	08003bfd 	.word	0x08003bfd
 8003c64:	08003bfd 	.word	0x08003bfd
 8003c68:	08003d43 	.word	0x08003d43
 8003c6c:	6833      	ldr	r3, [r6, #0]
 8003c6e:	1d1a      	adds	r2, r3, #4
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6032      	str	r2, [r6, #0]
 8003c74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e09d      	b.n	8003dbc <_printf_i+0x1e8>
 8003c80:	6833      	ldr	r3, [r6, #0]
 8003c82:	6820      	ldr	r0, [r4, #0]
 8003c84:	1d19      	adds	r1, r3, #4
 8003c86:	6031      	str	r1, [r6, #0]
 8003c88:	0606      	lsls	r6, r0, #24
 8003c8a:	d501      	bpl.n	8003c90 <_printf_i+0xbc>
 8003c8c:	681d      	ldr	r5, [r3, #0]
 8003c8e:	e003      	b.n	8003c98 <_printf_i+0xc4>
 8003c90:	0645      	lsls	r5, r0, #25
 8003c92:	d5fb      	bpl.n	8003c8c <_printf_i+0xb8>
 8003c94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003c98:	2d00      	cmp	r5, #0
 8003c9a:	da03      	bge.n	8003ca4 <_printf_i+0xd0>
 8003c9c:	232d      	movs	r3, #45	@ 0x2d
 8003c9e:	426d      	negs	r5, r5
 8003ca0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ca4:	4859      	ldr	r0, [pc, #356]	@ (8003e0c <_printf_i+0x238>)
 8003ca6:	230a      	movs	r3, #10
 8003ca8:	e011      	b.n	8003cce <_printf_i+0xfa>
 8003caa:	6821      	ldr	r1, [r4, #0]
 8003cac:	6833      	ldr	r3, [r6, #0]
 8003cae:	0608      	lsls	r0, r1, #24
 8003cb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8003cb4:	d402      	bmi.n	8003cbc <_printf_i+0xe8>
 8003cb6:	0649      	lsls	r1, r1, #25
 8003cb8:	bf48      	it	mi
 8003cba:	b2ad      	uxthmi	r5, r5
 8003cbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8003cbe:	4853      	ldr	r0, [pc, #332]	@ (8003e0c <_printf_i+0x238>)
 8003cc0:	6033      	str	r3, [r6, #0]
 8003cc2:	bf14      	ite	ne
 8003cc4:	230a      	movne	r3, #10
 8003cc6:	2308      	moveq	r3, #8
 8003cc8:	2100      	movs	r1, #0
 8003cca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003cce:	6866      	ldr	r6, [r4, #4]
 8003cd0:	60a6      	str	r6, [r4, #8]
 8003cd2:	2e00      	cmp	r6, #0
 8003cd4:	bfa2      	ittt	ge
 8003cd6:	6821      	ldrge	r1, [r4, #0]
 8003cd8:	f021 0104 	bicge.w	r1, r1, #4
 8003cdc:	6021      	strge	r1, [r4, #0]
 8003cde:	b90d      	cbnz	r5, 8003ce4 <_printf_i+0x110>
 8003ce0:	2e00      	cmp	r6, #0
 8003ce2:	d04b      	beq.n	8003d7c <_printf_i+0x1a8>
 8003ce4:	4616      	mov	r6, r2
 8003ce6:	fbb5 f1f3 	udiv	r1, r5, r3
 8003cea:	fb03 5711 	mls	r7, r3, r1, r5
 8003cee:	5dc7      	ldrb	r7, [r0, r7]
 8003cf0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003cf4:	462f      	mov	r7, r5
 8003cf6:	42bb      	cmp	r3, r7
 8003cf8:	460d      	mov	r5, r1
 8003cfa:	d9f4      	bls.n	8003ce6 <_printf_i+0x112>
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	d10b      	bne.n	8003d18 <_printf_i+0x144>
 8003d00:	6823      	ldr	r3, [r4, #0]
 8003d02:	07df      	lsls	r7, r3, #31
 8003d04:	d508      	bpl.n	8003d18 <_printf_i+0x144>
 8003d06:	6923      	ldr	r3, [r4, #16]
 8003d08:	6861      	ldr	r1, [r4, #4]
 8003d0a:	4299      	cmp	r1, r3
 8003d0c:	bfde      	ittt	le
 8003d0e:	2330      	movle	r3, #48	@ 0x30
 8003d10:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d14:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d18:	1b92      	subs	r2, r2, r6
 8003d1a:	6122      	str	r2, [r4, #16]
 8003d1c:	f8cd a000 	str.w	sl, [sp]
 8003d20:	464b      	mov	r3, r9
 8003d22:	aa03      	add	r2, sp, #12
 8003d24:	4621      	mov	r1, r4
 8003d26:	4640      	mov	r0, r8
 8003d28:	f7ff fee6 	bl	8003af8 <_printf_common>
 8003d2c:	3001      	adds	r0, #1
 8003d2e:	d14a      	bne.n	8003dc6 <_printf_i+0x1f2>
 8003d30:	f04f 30ff 	mov.w	r0, #4294967295
 8003d34:	b004      	add	sp, #16
 8003d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d3a:	6823      	ldr	r3, [r4, #0]
 8003d3c:	f043 0320 	orr.w	r3, r3, #32
 8003d40:	6023      	str	r3, [r4, #0]
 8003d42:	4833      	ldr	r0, [pc, #204]	@ (8003e10 <_printf_i+0x23c>)
 8003d44:	2778      	movs	r7, #120	@ 0x78
 8003d46:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003d4a:	6823      	ldr	r3, [r4, #0]
 8003d4c:	6831      	ldr	r1, [r6, #0]
 8003d4e:	061f      	lsls	r7, r3, #24
 8003d50:	f851 5b04 	ldr.w	r5, [r1], #4
 8003d54:	d402      	bmi.n	8003d5c <_printf_i+0x188>
 8003d56:	065f      	lsls	r7, r3, #25
 8003d58:	bf48      	it	mi
 8003d5a:	b2ad      	uxthmi	r5, r5
 8003d5c:	6031      	str	r1, [r6, #0]
 8003d5e:	07d9      	lsls	r1, r3, #31
 8003d60:	bf44      	itt	mi
 8003d62:	f043 0320 	orrmi.w	r3, r3, #32
 8003d66:	6023      	strmi	r3, [r4, #0]
 8003d68:	b11d      	cbz	r5, 8003d72 <_printf_i+0x19e>
 8003d6a:	2310      	movs	r3, #16
 8003d6c:	e7ac      	b.n	8003cc8 <_printf_i+0xf4>
 8003d6e:	4827      	ldr	r0, [pc, #156]	@ (8003e0c <_printf_i+0x238>)
 8003d70:	e7e9      	b.n	8003d46 <_printf_i+0x172>
 8003d72:	6823      	ldr	r3, [r4, #0]
 8003d74:	f023 0320 	bic.w	r3, r3, #32
 8003d78:	6023      	str	r3, [r4, #0]
 8003d7a:	e7f6      	b.n	8003d6a <_printf_i+0x196>
 8003d7c:	4616      	mov	r6, r2
 8003d7e:	e7bd      	b.n	8003cfc <_printf_i+0x128>
 8003d80:	6833      	ldr	r3, [r6, #0]
 8003d82:	6825      	ldr	r5, [r4, #0]
 8003d84:	6961      	ldr	r1, [r4, #20]
 8003d86:	1d18      	adds	r0, r3, #4
 8003d88:	6030      	str	r0, [r6, #0]
 8003d8a:	062e      	lsls	r6, r5, #24
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	d501      	bpl.n	8003d94 <_printf_i+0x1c0>
 8003d90:	6019      	str	r1, [r3, #0]
 8003d92:	e002      	b.n	8003d9a <_printf_i+0x1c6>
 8003d94:	0668      	lsls	r0, r5, #25
 8003d96:	d5fb      	bpl.n	8003d90 <_printf_i+0x1bc>
 8003d98:	8019      	strh	r1, [r3, #0]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	6123      	str	r3, [r4, #16]
 8003d9e:	4616      	mov	r6, r2
 8003da0:	e7bc      	b.n	8003d1c <_printf_i+0x148>
 8003da2:	6833      	ldr	r3, [r6, #0]
 8003da4:	1d1a      	adds	r2, r3, #4
 8003da6:	6032      	str	r2, [r6, #0]
 8003da8:	681e      	ldr	r6, [r3, #0]
 8003daa:	6862      	ldr	r2, [r4, #4]
 8003dac:	2100      	movs	r1, #0
 8003dae:	4630      	mov	r0, r6
 8003db0:	f7fc fa1e 	bl	80001f0 <memchr>
 8003db4:	b108      	cbz	r0, 8003dba <_printf_i+0x1e6>
 8003db6:	1b80      	subs	r0, r0, r6
 8003db8:	6060      	str	r0, [r4, #4]
 8003dba:	6863      	ldr	r3, [r4, #4]
 8003dbc:	6123      	str	r3, [r4, #16]
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003dc4:	e7aa      	b.n	8003d1c <_printf_i+0x148>
 8003dc6:	6923      	ldr	r3, [r4, #16]
 8003dc8:	4632      	mov	r2, r6
 8003dca:	4649      	mov	r1, r9
 8003dcc:	4640      	mov	r0, r8
 8003dce:	47d0      	blx	sl
 8003dd0:	3001      	adds	r0, #1
 8003dd2:	d0ad      	beq.n	8003d30 <_printf_i+0x15c>
 8003dd4:	6823      	ldr	r3, [r4, #0]
 8003dd6:	079b      	lsls	r3, r3, #30
 8003dd8:	d413      	bmi.n	8003e02 <_printf_i+0x22e>
 8003dda:	68e0      	ldr	r0, [r4, #12]
 8003ddc:	9b03      	ldr	r3, [sp, #12]
 8003dde:	4298      	cmp	r0, r3
 8003de0:	bfb8      	it	lt
 8003de2:	4618      	movlt	r0, r3
 8003de4:	e7a6      	b.n	8003d34 <_printf_i+0x160>
 8003de6:	2301      	movs	r3, #1
 8003de8:	4632      	mov	r2, r6
 8003dea:	4649      	mov	r1, r9
 8003dec:	4640      	mov	r0, r8
 8003dee:	47d0      	blx	sl
 8003df0:	3001      	adds	r0, #1
 8003df2:	d09d      	beq.n	8003d30 <_printf_i+0x15c>
 8003df4:	3501      	adds	r5, #1
 8003df6:	68e3      	ldr	r3, [r4, #12]
 8003df8:	9903      	ldr	r1, [sp, #12]
 8003dfa:	1a5b      	subs	r3, r3, r1
 8003dfc:	42ab      	cmp	r3, r5
 8003dfe:	dcf2      	bgt.n	8003de6 <_printf_i+0x212>
 8003e00:	e7eb      	b.n	8003dda <_printf_i+0x206>
 8003e02:	2500      	movs	r5, #0
 8003e04:	f104 0619 	add.w	r6, r4, #25
 8003e08:	e7f5      	b.n	8003df6 <_printf_i+0x222>
 8003e0a:	bf00      	nop
 8003e0c:	08003f3d 	.word	0x08003f3d
 8003e10:	08003f4e 	.word	0x08003f4e

08003e14 <memmove>:
 8003e14:	4288      	cmp	r0, r1
 8003e16:	b510      	push	{r4, lr}
 8003e18:	eb01 0402 	add.w	r4, r1, r2
 8003e1c:	d902      	bls.n	8003e24 <memmove+0x10>
 8003e1e:	4284      	cmp	r4, r0
 8003e20:	4623      	mov	r3, r4
 8003e22:	d807      	bhi.n	8003e34 <memmove+0x20>
 8003e24:	1e43      	subs	r3, r0, #1
 8003e26:	42a1      	cmp	r1, r4
 8003e28:	d008      	beq.n	8003e3c <memmove+0x28>
 8003e2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e32:	e7f8      	b.n	8003e26 <memmove+0x12>
 8003e34:	4402      	add	r2, r0
 8003e36:	4601      	mov	r1, r0
 8003e38:	428a      	cmp	r2, r1
 8003e3a:	d100      	bne.n	8003e3e <memmove+0x2a>
 8003e3c:	bd10      	pop	{r4, pc}
 8003e3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e46:	e7f7      	b.n	8003e38 <memmove+0x24>

08003e48 <_sbrk_r>:
 8003e48:	b538      	push	{r3, r4, r5, lr}
 8003e4a:	4d06      	ldr	r5, [pc, #24]	@ (8003e64 <_sbrk_r+0x1c>)
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	4604      	mov	r4, r0
 8003e50:	4608      	mov	r0, r1
 8003e52:	602b      	str	r3, [r5, #0]
 8003e54:	f7fd fac4 	bl	80013e0 <_sbrk>
 8003e58:	1c43      	adds	r3, r0, #1
 8003e5a:	d102      	bne.n	8003e62 <_sbrk_r+0x1a>
 8003e5c:	682b      	ldr	r3, [r5, #0]
 8003e5e:	b103      	cbz	r3, 8003e62 <_sbrk_r+0x1a>
 8003e60:	6023      	str	r3, [r4, #0]
 8003e62:	bd38      	pop	{r3, r4, r5, pc}
 8003e64:	200004d8 	.word	0x200004d8

08003e68 <memcpy>:
 8003e68:	440a      	add	r2, r1
 8003e6a:	4291      	cmp	r1, r2
 8003e6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e70:	d100      	bne.n	8003e74 <memcpy+0xc>
 8003e72:	4770      	bx	lr
 8003e74:	b510      	push	{r4, lr}
 8003e76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e7e:	4291      	cmp	r1, r2
 8003e80:	d1f9      	bne.n	8003e76 <memcpy+0xe>
 8003e82:	bd10      	pop	{r4, pc}

08003e84 <_realloc_r>:
 8003e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e88:	4680      	mov	r8, r0
 8003e8a:	4615      	mov	r5, r2
 8003e8c:	460c      	mov	r4, r1
 8003e8e:	b921      	cbnz	r1, 8003e9a <_realloc_r+0x16>
 8003e90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e94:	4611      	mov	r1, r2
 8003e96:	f7ff bc4b 	b.w	8003730 <_malloc_r>
 8003e9a:	b92a      	cbnz	r2, 8003ea8 <_realloc_r+0x24>
 8003e9c:	f7ff fbdc 	bl	8003658 <_free_r>
 8003ea0:	2400      	movs	r4, #0
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ea8:	f000 f81a 	bl	8003ee0 <_malloc_usable_size_r>
 8003eac:	4285      	cmp	r5, r0
 8003eae:	4606      	mov	r6, r0
 8003eb0:	d802      	bhi.n	8003eb8 <_realloc_r+0x34>
 8003eb2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003eb6:	d8f4      	bhi.n	8003ea2 <_realloc_r+0x1e>
 8003eb8:	4629      	mov	r1, r5
 8003eba:	4640      	mov	r0, r8
 8003ebc:	f7ff fc38 	bl	8003730 <_malloc_r>
 8003ec0:	4607      	mov	r7, r0
 8003ec2:	2800      	cmp	r0, #0
 8003ec4:	d0ec      	beq.n	8003ea0 <_realloc_r+0x1c>
 8003ec6:	42b5      	cmp	r5, r6
 8003ec8:	462a      	mov	r2, r5
 8003eca:	4621      	mov	r1, r4
 8003ecc:	bf28      	it	cs
 8003ece:	4632      	movcs	r2, r6
 8003ed0:	f7ff ffca 	bl	8003e68 <memcpy>
 8003ed4:	4621      	mov	r1, r4
 8003ed6:	4640      	mov	r0, r8
 8003ed8:	f7ff fbbe 	bl	8003658 <_free_r>
 8003edc:	463c      	mov	r4, r7
 8003ede:	e7e0      	b.n	8003ea2 <_realloc_r+0x1e>

08003ee0 <_malloc_usable_size_r>:
 8003ee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ee4:	1f18      	subs	r0, r3, #4
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	bfbc      	itt	lt
 8003eea:	580b      	ldrlt	r3, [r1, r0]
 8003eec:	18c0      	addlt	r0, r0, r3
 8003eee:	4770      	bx	lr

08003ef0 <_init>:
 8003ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef2:	bf00      	nop
 8003ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ef6:	bc08      	pop	{r3}
 8003ef8:	469e      	mov	lr, r3
 8003efa:	4770      	bx	lr

08003efc <_fini>:
 8003efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efe:	bf00      	nop
 8003f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f02:	bc08      	pop	{r3}
 8003f04:	469e      	mov	lr, r3
 8003f06:	4770      	bx	lr
